desc:Rotary (Tukan)


slider1:7.5<0,10>-Master Level
slider2:8<0,8,1>-2 130 DB 1
slider3:6<0,8,1>-3 131 DB 2
slider4:8<0,8,1>-4 132 DB 3
slider5:0<0,8,1>-5 133 DB 4
slider6:0<0,8,1>-6 134 DB 5
slider7:0<0,8,1>-7 135 DB 6
slider8:0<0,8,1>-8 136 DB 7
slider9:0<0,8,1>-9 137 DB 8
slider10:0<0,8,1>-10 138 DB 9
slider11:1<0,1,1{C-Organ, B-Organ}>-Organ Model
slider12:1<1,2,1{3rd,2nd}>-12 140 Percussion
slider13:0<0,1,1{Short,Long}>-13 141 Percussion
slider14:0<0,1,1{Quiet,Loud}>-14 142 Percussion
slider15:0<0,1,1{Paraphon,Polyphon}>-15 143 Percusssion
slider16:0<0,1,1{Off, On}>-16 175 Percussion
slider17:0<0,6,1>-172 Vibrato
slider18:1<0,1,1{Off, On}>-18 176 click
slider19:4<0,10,.1>-19 144 Click Freq
slider20:3<0,10,0.01>-20 145 Click Level
slider21:0<0,10,0.01>-21 155 Drive
slider22:1<0,1,1{Short Spring, Long Spring}>-22 146 Reverb Type
slider23:3<0,10,0.1>-23 147 Reverb
slider24:5<0,10>-24 Small Reverb adj
slider25:5<0,10>-25 Big Reverb adj
slider26:1<0,2,1{OFF, Leslie,Cabinet}>-26 157 Speaker
slider27:2<0,2,1{20,57,SDC,LDC,Rib}>-27 173 Microphone
Slider28:1<0,2,1>-28 148 speed mode
slider29:5<0,10>-29 159 Drum Level
slider30:5<0,10>-30 160 Horn Level
slider31:5.52<0,10,0.01>-31 154 x-over
slider32:0.27<0,1>-32 161 Drum Speed Slow
slider33:2.89<0,5->-33 162 Drum Speed Fast
Slider34:0.5<0,1>-34 163 Horn Speed Slow
slider35:4<0,5>-35 164 Horn Speed Fast
slider36:2<0,3>-36 165 Drum Speed Lowers
slider37:2<0,3>-37 166 Drum Speed Raise
slider38:2<0,3>-38 167 Horn Speed Lowers
slider39:2.5<0,3>-39 168 Horn Speed Raise
slider40:0<0,1,1{Open, Closed}>-40 174 Cabinet
slider41:90<0,180,1>-41 169 Mic Angle
slider42:0.7<0,1,0.01>-42 153 Horn Stereo
slider43:0<0,360,0.01>-43 158 Position Drum
slider44:0<0,360,0.01>-44 158 Position Horn
slider45:1<0,1,1{Drum,Horn}>-45 Turn by Hand
slider46:0<0,1,1{OFF,ON}>-46 Use Low C for Motorstart
slider47:1<0,1,1{OFF,ON}>-47 Use PitchWheel for Speedchange
slider48:0<0,1,1{OFF,ON}>-48 Use Preset Keys
slider49:0<0,1,1{Pre,Post}>-49 Reverb
slider50:0<0,1,1{OFF,ON}>-50 Use ModWheel for Volume
slider51:3<0,10,1>-51 139 Drawbar Leakage
slider52:0<0,9,1>-52 play preset
slider53:midi_channel=1<1,16,1>-Midi Channel
slider54:eco_mode=1<0,2,1{Amp Only, Eco, Tonewheels}>-Plugin Mode

//slider149:0.1<0,1,0.01>-lo width
//slider150:0.2<0,1,0.01>-150 lo throb
//slider151:0.7<0,1,0.01>-hi width
//slider152:0.1<0,1,0.01>-hi depth
//slider156:0.6<0,1,0.01>-speed









slider255:1<1,4,1>-gfx page


import SynthAdd/fft_real_synth.jsfx-inc
import SynthAdd/wavetable.jsfx-inc
import SynthAdd/tk_lib.jsfx-inc
import SynthAdd/svf_filter.jsfx-inc
import SynthAdd/cookdsp.jsfx-inc

filename:0,SynthAdd/F_Mid_20.wav
filename:1,SynthAdd/F20M_dc.wav
filename:2,SynthAdd/F57M_dc.wav
filename:3,SynthAdd/F648M_dc.wav
filename:4,SynthAdd/F87M_dc.wav
filename:5,SynthAdd/FRibM_dc.wav
filename:6,SynthAdd/F20S_dc.wav
filename:7,SynthAdd/F57S_dc.wav
filename:8,SynthAdd/F648S_dc.wav
filename:9,SynthAdd/F87S_dc.wav
filename:10,SynthAdd/FRibS_dc.wav
filename:11,SynthAdd/Drawbar_b.png
filename:12,SynthAdd/Drawbar_w.png
filename:13,SynthAdd/Drawbar_bl.png
filename:14,SynthAdd/organ_switch.png
filename:15,SynthAdd/wood.png
filename:16,SynthAdd/chicken.png
filename:17,SynthAdd/Micbuttons.png
filename:18,SynthAdd/Ampframes.png
filename:19,SynthAdd/Tolex.png
filename:20,SynthAdd/org_button.png
filename:21,SynthAdd/overlay.png
filename:22,SynthAdd/gled.png
filename:23,SynthAdd/organ_switch3.png
filename:24,SynthAdd/S2_logo_dark.png

@init
rotary_version = 0.5;
  //Parameter_config                (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
       drawbar1.parameter_config     (2,       8,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar2.parameter_config     (3,       6,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar3.parameter_config     (4,       8,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar4.parameter_config     (5,       0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar5.parameter_config     (6,       0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar6.parameter_config     (7,       0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar7.parameter_config     (8,       0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar8.parameter_config     (9,       0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       drawbar9.parameter_config     (10,      0,        0,    8,    60,  60,  150,    1,     1,       blueknob);
       
       reverb_level.parameter_config (23,       3,        0,    10,    570, 220, 140,    101,   1,       16);
       scanner.parameter_config      (17,       0,        0,    6,   570, 350,  140,    101,   1,       16);
       drive.parameter_config        (21,       0,        0,    10,   700, 350,  140,    101,   1,       16);
       
       horn_level.parameter_config   (30,       5,      0,    10,   700, 90,  140,    101,   1,       16);
       Drum_level.parameter_config   (29,       5,      0,    10,   700, 220,  140,    101,   1,       16);
       Main_out.parameter_config     (1,         7.5,      0,    10,   570, 90,  140,    101,   1,       16);
       
       drum_slow.parameter_config    (32,       .27,      0,    1,      45, 220,  140,    101,   1,       16);
       horn_slow.parameter_config    (34,       .5,       0,    1,      45,  90,  140,    101,   1,       16);
       drum_fast.parameter_config    (33,       2.89,      0,    5,    175, 220,  140,    101,   1,       16);
       horn_fast.parameter_config    (35,       4,       0,    5,    175,  90,  140,    101,   1,       16);
       
       drum_slower.parameter_config  (36,       2,      0,    3,      315, 220,  140,    101,   1,       16);
       horn_slower.parameter_config  (38,       2,      0,    3,      315,  90,  140,    101,   1,       16);
       drum_faster.parameter_config  (37,       2,      0,    3,      455, 220,  140,    101,   1,       16);
       horn_faster.parameter_config  (39,       2.5,      0,    3,      455,  90,  140,    101,   1,       16);
       
       crossover.parameter_config    (31,       5.52,      0,    10,     570,  155,  140,    101,   1,       16);
       
       
       mic_width.parameter_config    (42,       .7,       0,    1,      710,  350,  140,    101,   1,       16);
       
       drum_position.parameter_config (43,       0,       0,    360,      710,  350,  140,    101,   1,       16);
       horn_position.parameter_config (44,       0,       0,    360,      710,  350,  140,    101,   1,       16);
       
       
       org_type.button_config (11, 80, 130);
       
       perc_on.button_config (16, 80, 130);
       perc_vol.button_config (14, 80, 130);
       perc_decay.button_config (13, 80, 130);
       perc_harm.button_config (12, 80, 130);
       perc_mode.button_config (15, 80, 130);
       org_click.button_config (18, 80, 130);
       rotor.button_config (28, 80, 130);
       revtype.button_config (22, 80, 130);
       Microphone.button_config (27, 80, 130);
       Cab_Open.button_config (40, 80, 130);
       Speaker_Model.button_config (26, 80, 130);
       turn_by_hand.button_config (45, 80, 130);
       reverb_post.button_config (49, 80, 130);
       page.button_config (255, 80, 130);
       use_c.button_config (46, 80, 130);
       use_pitch.button_config (47, 80, 130);
       use_preset.button_config (48, 80, 130);
       use_mod.button_config (50, 80, 130);
       

gfx_ext_retina = 1;

p1.db1 = 0;
p1.db2 = 0;
p1.db3 = 5;
p1.db4 = 3;
p1.db5 = 2;
p1.db6 = 0;
p1.db7 = 0;
p1.db8 = 0;
p1.db9 = 0;

p2.db1 = 0;
p2.db2 = 0;
p2.db3 = 4;
p2.db4 = 4;
p2.db5 = 3;
p2.db6 = 2;
p2.db7 = 0;
p2.db8 = 0;
p2.db9 = 0;

p3.db1 = 0;
p3.db2 = 0;
p3.db3 = 8;
p3.db4 = 7;
p3.db5 = 4;
p3.db6 = 0;
p3.db7 = 0;
p3.db8 = 0;
p3.db9 = 0;

p4.db1 = 0;
p4.db2 = 0;
p4.db3 = 4;
p4.db4 = 5;
p4.db5 = 4;
p4.db6 = 4;
p4.db7 = 2;
p4.db8 = 2;
p4.db9 = 2;

p5.db1 = 0;
p5.db2 = 0;
p5.db3 = 5;
p5.db4 = 4;
p5.db5 = 0;
p5.db6 = 3;
p5.db7 = 0;
p5.db8 = 0;
p5.db9 = 0;

p6.db1 = 0;
p6.db2 = 0;
p6.db3 = 4;
p6.db4 = 6;
p6.db5 = 7;
p6.db6 = 5;
p6.db7 = 3;
p6.db8 = 0;
p6.db9 = 0;

p7.db1 = 0;
p7.db2 = 0;
p7.db3 = 5;
p7.db4 = 6;
p7.db5 = 4;
p7.db6 = 4;
p7.db7 = 3;
p7.db8 = 2;
p7.db9 = 0;

p8.db1 = 0;
p8.db2 = 0;
p8.db3 = 6;
p8.db4 = 8;
p8.db5 = 7;
p8.db6 = 6;
p8.db7 = 5;
p8.db8 = 4;
p8.db9 = 0;

p9.db1 = 3;
p9.db2 = 2;
p9.db3 = 7;
p9.db4 = 6;
p9.db5 = 4;
p9.db6 = 5;
p9.db7 = 2;
p9.db8 = 2;
p9.db9 = 2;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  MAYBE END UP IN A LIBRARY  //////////////////////////////////////////////////////////////////////

     function wgverb_do_amp(signal)
     (
         junc_ = this.total * 0.25;
         this.total = 0.0;
     
         v_ = this.d1.delay_fread2(this.t1 + this.r1.random_do());
         v_ *= this.feed;
         v_ += (this.ys[0] - v_) * this.c2;
         this.total += v_;
         this.d1.delay_write(signal + junc_ - this.ys[0]);
         this.ys[0] = v_;
     
         v1_ = this.d2.delay_fread2(this.t2 + this.r2.random_do());
         v_ *= this.feed;
         v_ += (this.ys[1] - v_) * this.c2;
         this.total += v_;
         this.d2.delay_write(signal + junc_ - this.ys[1]);
         this.ys[1] = v_;
     
         v_ = this.d3.delay_fread2(this.t3 + this.r3.random_do());
         v_ *= this.feed;
         v_ += (this.ys[2] - v_) * this.c2;
         this.total += v_;
         this.d3.delay_write(signal + junc_ - this.ys[2]);
         this.ys[2] = v_;
     
         v_ = this.d4.delay_fread2(this.t4 + this.r4.random_do());
         v_ *= this.feed;
         v_ += (this.ys[3] - v_) * this.c2;
         this.total += v_;
         this.d4.delay_write(signal + junc_ - this.ys[3]);
         this.ys[3] = v_;
     
         v_ = this.d5.delay_fread2(this.t5 + this.r5.random_do());
         v_ *= this.feed;
         v_ += (this.ys[4] - v_) * this.c2;
         this.total += v_;
         this.d5.delay_write(signal + junc_ - this.ys[4]);
         this.ys[4] = v_;
     
         v_ = this.d6.delay_fread2(this.t6 + this.r6.random_do());
         v_ *= this.feed;
         v_ += (this.ys[5] - v_) * this.c2;
         this.total += v_;
         this.d6.delay_write(signal + junc_ - this.ys[5]);
         this.ys[5] = v_;
     
         v_ = this.d7.delay_fread2(this.t7 + this.r7.random_do());
         v_ *= this.feed;
         v_ += (this.ys[6] - v_) * this.c2;
         this.total += v_;
         this.d7.delay_write(signal + junc_ - this.ys[6]);
         this.ys[6] = v_;
     
         v_ = this.d8.delay_fread2(this.t8 + this.r8.random_do());
         v_ *= this.feed;
         v_ += (this.ys[7] - v_) * this.c2;
         this.total += v_;
         this.d8.delay_write(signal + junc_ - this.ys[7]);
         this.ys[7] = v_;
     
         rev_ = this.total * 0.25;
         //signal + (rev_ - signal) * this.bal;
       rev_ * db2ratio(6);
     );
       

function dcBlocker () instance ()
  (
  aab = srate/(srate*1.00008);
  srate < 400000 ? aab = srate/(srate*1.0002);
  srate < 200000 ? aab = srate/(srate*1.0003);
  srate < 100000 ? aab = srate/(srate*1.0007);
  srate < 50000 ? aab = srate/(srate*1.001);
  
  this.otm1=aab*this.otm1 + this - this.itm1; this.itm1=this; this=this.otm1;

  );

  
function sigma (input, sigma_steep) local (tmp_x) (  // turns 0 - 1 into a sigma from 0 - 1
    tmp_x = 1/sigma_steep; // Sigma 1/x -> je größer X, desto weniger linear
    tmp_factor = 0.5 / ((0.5 * (tanh(((0.5))/tmp_x))));
     ((0.5 * (tanh(((input-0.5))/tmp_x)))*tmp_factor + 0.5);
);

function explog (input, factor) (
input^factor; // 1=linear, < 1 = log (schnell rein), > 1 = exp (langsam rein)
);





function band_set_filter(t, f, g, qval, slope)
 instance (enabled, type, frequency, gain, q, filter, color) (
  type = t; frequency = f; gain = g; q = qval;
  type == 0 ? filter.svf_eq(frequency, q, db_to_gain(gain)) :
    type == 1 ? filter.svf_hp(frequency, q, slope) :
      type == 2 ? filter.svf_hpb(frequency, slope) :
        type == 3 ? filter.svf_ls(frequency, q, db_to_gain(gain)) :
          type == 4 ? filter.svf_hs(frequency, q, db_to_gain(gain)) :
            type == 5 ? filter.svf_lp(frequency, q, slope) :
              type == 6 ? filter.svf_lpb(frequency, slope) :
                type == 7 ? filter.svf_bs(frequency, q) :
                  type == 8 ? filter.svf_bp2(frequency, q) :
                    type == 9 ? filter.svf_st(frequency, q, gain) :
                      type == 10 ? filter.svf_pultecls(frequency, q, gain) :
                        type == 11 ? filter.svf_ap(frequency, q) :
                          type == 12 ? filter.svf_analog_lowcut(frequency, q, gain) :
                            type == 13 ? filter.svf_analog_highcut(frequency, q, gain);
);

  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);

  MAX_Q = 4;
  MIN_Q = 0.10;
  Q_LOG_MAX = log(MAX_Q / MIN_Q);
  
/*
 * Convert slider % to frequency
 */
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);

/*
 * Convert frequency to slider %
 */
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);


function per_to_q(x, range) (
  MIN_Q * exp(Q_LOG_MAX * x / range);LFO
);

/*
 * Convert frequency to slider %
 */
function q_to_per(q, range) (
  range * log(q / MIN_Q) / Q_LOG_MAX;
);

function band_init()
  instance (enabled, type, frequency, gain, q, filter, color) ( 
  filter.svf_set_sample_rate(SAMPLE_RATE);
  filter.svf_bypass();
  //color.create_color(0,0,0);

  filter.a1 = filter.t_a1;
  filter.a2 = filter.t_a2;
  filter.a3 = filter.t_a3;

  filter.m0 = filter.t_m0;
  filter.m1 = filter.t_m1;
  filter.m2 = filter.t_m2;
  filter.iter_t = 1.0;
);







function VCF() (

this.VCF_filter_result = min(this..filter_f.running,100) + this.VCF.real_level*this..VCF_ENV;
this.note ? this.filter_note = this.note-19 + this..pitchamount.running * norm_pitchwheel;
this..keyfollow ? (
this..keyfollow == 0.5 ? this.keyfollow_add = 0.5 : this.keyfollow_add = 0;
this.key_offset = freq_to_per(osc_a0^(this.filter_note+this.keyfollow_add),100);
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT + this.key_offset*this..keyfollow;
):(
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT;
);

//this.VCF_FILTER_RESULT2 = min(this.VCF_FILTER_RESULT2, 100);

//this.VCF_trigger || abs(this.VCF_FILTER_RESULT2 - this.VCF_FILTER_RESULT_OLD) > 0.9 || this..filter_type != this.filter_type_old || this..filter_gain.running != this.filter_gain_old || this..filter_q.running != this.filter_q_old || this..filter_slope != this.filter_slope_old ? (
this.VCF_trigger || abs(this.VCF_FILTER_RESULT2 - this.VCF_FILTER_RESULT_OLD) > 0.9 || this..filter_type != this.filter_type_old || this..filter_q.running != this.filter_q_old || this..filter_slope != this.filter_slope_old ? (
this.band_set_filter(this..filter_type, per_to_freq(min(this.VCF_FILTER_RESULT2,100),100), this..filter_gain, this..filter_q.running, this..filter_slope);
this.filter_type_old = this..filter_type;
this.filter_f_old = this..filter_f.running;
this.filter_gain_old = this..filter_gain.running;
this.filter_q_old = this..filter_q.running;
this.filter_slope_old = this..filter_slope;
this.VCF_FILTER_RESULT_old = this.VCF_FILTER_RESULT2;
//this.filter.svf_set_to_target();

//this.outputL = this.filter.svf_svf0(this.outputL + 0.001);
//this.outputR = this.filter.svf_svf1(this.outputR + 0.001);
//this.filter.svf_tick();
);

this.VCF_Trigger ? (
//this.filter.svf_set_to_target();
this.VCF_Trigger = 0;
);
this.filter.svf_tick();



this.outputL = this.filter.svf_svf0(this.outputL + 0.001);
this.outputR = this.filter.svf_svf1(this.outputR + 0.001);

);




function NG_VCF() (

this.ng.VCF_filter_result = min(NG.filter_f.running,100) + this.VCF2.real_level*NG.VCF_ENV;
katze += 1;//this..VCF2.real_level;
this.note ? this.ng.filter_note = this.note-19 + NG.pitchamount.running * norm_pitchwheel;
NG.keyfollow ? (
NG.keyfollow == 0.5 ? this.ng.keyfollow_add = 0.5 : this.ng.keyfollow_add = 0;
this.ng.key_offset = freq_to_per(osc_a0^(this.ng.filter_note+this.ng.keyfollow_add),100);
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT + this.ng.key_offset*NG.keyfollow;
):(
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT;
);

this.ng.VCF_FILTER_RESULT2 = min(this.ng.VCF_FILTER_RESULT2, 100);

this.ng.VCF_trigger || abs(this.ng.VCF_FILTER_RESULT2 - this.ng.VCF_FILTER_RESULT_OLD) > 0.9 || NG.filter_type != this.ng.filter_type_old || NG.filter_gain.running != this.ng.filter_gain_old || NG.filter_q.running != this.ng.filter_q_old || NG.filter_slope != this.ng.filter_slope_old ? (
this.NG.band_set_filter(NG.filter_type, per_to_freq(min(this.ng.VCF_FILTER_RESULT2,100),100), NG.filter_gain, NG.filter_q.running, NG.filter_slope);
this.ng.filter_type_old = NG.filter_type;
this.ng.filter_f_old = NG.filter_f.running;
this.ng.filter_gain_old = NG.filter_gain.running;
this.ng.filter_q_old = NG.filter_q.running;
this.ng.filter_slope_old = NG.filter_slope;
this.ng.VCF_FILTER_RESULT_old = this.ng.VCF_FILTER_RESULT2;
//this.ng.filter.svf_set_to_target();
);

this.ng.VCF_trigger ? this.ng.VCF_trigger = 0;

this.NG.filter.svf_tick();
this.noise = this.ng.filter.svf_svf0(this.noise + 0.001);// / (NG.filter_q*10);
//this.noise = this.ng.filter.svf_svf1(this.noise + 0.00001);

);





function velo_compressor (velo_in) instance (velo_tmp) (

    velo_fixed > 0 ? (velo_fixed) : (
      velo_in <= velo_thresh ? velo_tmp = velo_in :
                                 velo_tmp = velo_thresh + (velo_in-velo_thresh)/velo_ratio;
                                 floor(min(127,max(0,velo_tmp*velo_boost + velo_offset))+0.5);
    );
                                   
);
   

function sub_midi_in () (
         msg3 != 0 ? (
         this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
         this.note = this.note_running = msg2; this.velocity = velo_compressor(msg3))
         : 
         (this.release_trigger = 1; this.start_trigger = 0; //this.on = 0; this.note = 0;
          );
);

function sub_midi_in_mono () (

         this..msg3 != 0 ? (
         
            this..mono_note_1_old == 0 ? (
              this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
              this.note = this.note_running = msg2; this.velocity = velo_compressor(msg3); this..mono_note_1_old = 1;
              this.note_distance = 0; this.note_target = this..msg2;
            ):(
              this.note_distance = this..msg2 - this.note_running;
              this.note_target = this..msg2; msg3 != 0 ? this.velocity = velo_compressor(msg3);
            );
         
         ):( 
          this.release_trigger = 1; this.start_trigger = 0;
          this..mono_note_1_old = 0;
           //this.on = 0; this.note = 0;
          );
);


function midi_in () (

MonoOrPoly ? (

msg3 != 0 ? (
this.mono_note_1 == 0 ? (this.mono_note_1 = msg2; this.last_msg3 = msg3) :
this.mono_note_2 == 0 ? this.mono_note_2 = msg2:
this.mono_note_3 == 0 ? this.mono_note_3 = msg2:
this.mono_note_4 == 0 ? this.mono_note_4 = msg2:
this.mono_note_5 == 0 ? this.mono_note_5 = msg2:
this.mono_note_6 == 0 ? this.mono_note_6 = msg2:
this.mono_note_7 == 0 ? this.mono_note_7 = msg2:
this.mono_note_8 == 0 ? this.mono_note_8 = msg2:
this.mono_note_9 == 0 ? this.mono_note_9 = msg2:
this.mono_note_10 == 0 ? this.mono_note_10 = msg2:
this.mono_note_11 == 0 ? this.mono_note_11 = msg2:
this.mono_note_12 == 0 ? this.mono_note_12 = msg2;

):(
this.note_release = 1;
this.mono_note_1 == msg2 ? (this.mono_note_1 = 0; this.mono_sort = 1):
this.mono_note_2 == msg2 ? (this.mono_note_2 = 0; this.mono_sort = 1):
this.mono_note_3 == msg2 ? (this.mono_note_3 = 0; this.mono_sort = 1):
this.mono_note_4 == msg2 ? (this.mono_note_4 = 0; this.mono_sort = 1):
this.mono_note_5 == msg2 ? (this.mono_note_5 = 0; this.mono_sort = 1):
this.mono_note_6 == msg2 ? (this.mono_note_6 = 0; this.mono_sort = 1):
this.mono_note_7 == msg2 ? (this.mono_note_7 = 0; this.mono_sort = 1):
this.mono_note_8 == msg2 ? (this.mono_note_8 = 0; this.mono_sort = 1):
this.mono_note_9 == msg2 ? (this.mono_note_9 = 0; this.mono_sort = 1):
this.mono_note_10 == msg2 ? (this.mono_note_10 = 0; this.mono_sort = 1):
this.mono_note_11 == msg2 ? (this.mono_note_11 = 0; this.mono_sort = 1):
this.mono_note_12 == msg2 ? (this.mono_note_12 = 0; this.mono_sort = 1);
);


this.mono_sort ? (
this.mono_note_1 == 0 ? (
this.mono_note_1 = this.mono_note_2;
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_2 == 0 ? (
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_3 == 0 ? (
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_4 == 0 ? (
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_5 == 0 ? (
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_6 == 0 ? (
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_7 == 0 ? (
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_8 == 0 ? (

this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_9 == 0 ? (
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_10 == 0 ? (
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_11 == 0 ? (
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
);
this.mono_sort = 0;
);




this.mono_note_12 != 0 ? this.mono_note_last = this.mono_note_12:
this.mono_note_11 != 0 ? this.mono_note_last = this.mono_note_11:
this.mono_note_10 != 0 ? this.mono_note_last = this.mono_note_10:
this.mono_note_9 != 0 ? this.mono_note_last = this.mono_note_9:
this.mono_note_8 != 0 ? this.mono_note_last = this.mono_note_8:
this.mono_note_7 != 0 ? this.mono_note_last = this.mono_note_7:
this.mono_note_6 != 0 ? this.mono_note_last = this.mono_note_6:
this.mono_note_5 != 0 ? this.mono_note_last = this.mono_note_5:
this.mono_note_4 != 0 ? this.mono_note_last = this.mono_note_4:
this.mono_note_3 != 0 ? this.mono_note_last = this.mono_note_3:
this.mono_note_2 != 0 ? this.mono_note_last = this.mono_note_2:
this.mono_note_1 != 0 ? this.mono_note_last = this.mono_note_1:
(this.mono_note_last = 0; this.mono_note_1_old = 0);

this.mono_note_last == 0 ? (this.msg3 = 0) : (
msg3 != 0 ? (this.last_msg3 = msg3; this.msg3 = msg3);
msg3 == 0 ? this.msg3 = this.last_msg3;
//this.msg3 = msg3;
);

//msg2 != this.mono_note_last ? (
this.msg2 = this.mono_note_last;
//!this.note_release ? (this.subosc_1.sub_midi_in()):(this.note_release = 0; this.mono_note_last == 0 ? this.subosc_1.sub_midi_in());
this.mono_note_last_old != this.mono_note_last ? (
this.mono_note_last_old = this.mono_note_last;
this.subosc_1.sub_midi_in_mono();
);

//);


):( // POLY
msg3 == 0 ? (
this.subosc_1.note == msg2 ? this.subosc_1.sub_midi_in():
this.subosc_2.note == msg2 ? this.subosc_2.sub_midi_in():
this.subosc_3.note == msg2 ? this.subosc_3.sub_midi_in():
this.subosc_4.note == msg2 ? this.subosc_4.sub_midi_in():
this.subosc_5.note == msg2 ? this.subosc_5.sub_midi_in():
this.subosc_6.note == msg2 ? this.subosc_6.sub_midi_in():
this.subosc_7.note == msg2 ? this.subosc_7.sub_midi_in():
this.subosc_8.note == msg2 ? this.subosc_8.sub_midi_in():
this.subosc_9.note == msg2 ? this.subosc_9.sub_midi_in():
this.subosc_10.note == msg2 ? this.subosc_10.sub_midi_in():
this.subosc_11.note == msg2 ? this.subosc_11.sub_midi_in():
this.subosc_12.note == msg2 ? this.subosc_12.sub_midi_in();
);


caught = 0;
this.subosc_1.note == msg2 ? (this.subosc_1.sub_midi_in(); caught = 1):
this.subosc_2.note == msg2 ? (this.subosc_2.sub_midi_in(); caught = 1):
this.subosc_3.note == msg2 ? (this.subosc_3.sub_midi_in(); caught = 1):
this.subosc_4.note == msg2 ? (this.subosc_4.sub_midi_in(); caught = 1):
this.subosc_5.note == msg2 ? (this.subosc_5.sub_midi_in(); caught = 1):
this.subosc_6.note == msg2 ? (this.subosc_6.sub_midi_in(); caught = 1):
this.subosc_7.note == msg2 ? (this.subosc_7.sub_midi_in(); caught = 1):
this.subosc_8.note == msg2 ? (this.subosc_8.sub_midi_in(); caught = 1):
this.subosc_9.note == msg2 ? (this.subosc_9.sub_midi_in(); caught = 1):
this.subosc_10.note == msg2 ? (this.subosc_10.sub_midi_in(); caught = 1):
this.subosc_11.note == msg2 ? (this.subosc_11.sub_midi_in(); caught = 1):
this.subosc_12.note == msg2 ? (this.subosc_12.sub_midi_in(); caught = 1);

    //this.subosc_1.note == 0 || this.subosc_1.note == msg2 ?
    caught == 0 ? (
    !this.subosc_1.on ? this.subosc_1.sub_midi_in():
    !this.subosc_2.on ? this.subosc_2.sub_midi_in():
    !this.subosc_3.on ? this.subosc_3.sub_midi_in():
    !this.subosc_4.on ? this.subosc_4.sub_midi_in():
    !this.subosc_5.on ? this.subosc_5.sub_midi_in():
    !this.subosc_6.on ? this.subosc_6.sub_midi_in():
    !this.subosc_7.on ? this.subosc_7.sub_midi_in():
    !this.subosc_8.on ? this.subosc_8.sub_midi_in():
    !this.subosc_9.on ? this.subosc_9.sub_midi_in():
    !this.subosc_10.on ? this.subosc_10.sub_midi_in():
    !this.subosc_11.on ? this.subosc_11.sub_midi_in():
    !this.subosc_12.on ? this.subosc_12.sub_midi_in();
  
  
    );

); // MONOPOLY

);


function fetch_subosc () (
this.subosc_number == 1 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 2 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 3 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 4 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 5 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 6 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_7.note_running;
  this.velocity = Synth.Subosc_7.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_8.note_running;
  this.velocity = Synth.Subosc_8.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_9.note_running;
  this.velocity = Synth.Subosc_9.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_10.note_running;
  this.velocity = Synth.Subosc_10.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_11.note_running;
  this.velocity = Synth.Subosc_11.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_12.note_running;
  this.velocity = Synth.Subosc_12.Velocity;
  this.starttrigger = 1;
);
); //Function

function fetch_unison_subosc () (
this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
);
); //Function


function make_osc () (
memory_point = this.GFXosc.four_init(memory_point, 2048*4);
memory_point = this.subosc_1.four_init(memory_point, 2048*4);
memory_point = this.subosc_2.four_init(memory_point, 2048*4);
memory_point = this.subosc_3.four_init(memory_point, 2048*4);
memory_point = this.subosc_4.four_init(memory_point, 2048*4);
memory_point = this.subosc_5.four_init(memory_point, 2048*4);
memory_point = this.subosc_6.four_init(memory_point, 2048*4);
memory_point = this.subosc_7.four_init(memory_point, 2048*4);
memory_point = this.subosc_8.four_init(memory_point, 2048*4);
memory_point = this.subosc_9.four_init(memory_point, 2048*4);
memory_point = this.subosc_10.four_init(memory_point, 2048*4);
memory_point = this.subosc_11.four_init(memory_point, 2048*4);
memory_point = this.subosc_12.four_init(memory_point, 2048*4);

this.subosc_1.subosc_number = 1;
this.subosc_2.subosc_number = 2;
this.subosc_3.subosc_number = 3;
this.subosc_4.subosc_number = 4;
this.subosc_5.subosc_number = 5;
this.subosc_6.subosc_number = 6;
this.subosc_7.subosc_number = 7;
this.subosc_8.subosc_number = 8;
this.subosc_9.subosc_number = 9;
this.subosc_10.subosc_number = 10;
this.subosc_11.subosc_number = 11;
this.subosc_12.subosc_number = 12;

this.subosc_1 = 1;
this.subosc_2 = 2;
this.subosc_3 = 3;
this.subosc_4 = 4;
this.subosc_5 = 5;
this.subosc_6 = 6;
this.subosc_7 = 7;
this.subosc_8 = 8;
this.subosc_9 = 9;
this.subosc_10 = 10;
this.subosc_11 = 11;
this.subosc_12 = 12;

);


function make_filters () (
this.subosc_1.band_init();
this.subosc_2.band_init();
this.subosc_3.band_init();
this.subosc_4.band_init();
this.subosc_5.band_init();
this.subosc_6.band_init();
this.subosc_7.band_init();
this.subosc_8.band_init();
this.subosc_9.band_init();
this.subosc_10.band_init();
this.subosc_11.band_init();
this.subosc_12.band_init();

this.subosc_1.NG.band_init();
this.subosc_2.NG.band_init();
this.subosc_3.NG.band_init();
this.subosc_4.NG.band_init();
this.subosc_5.NG.band_init();
this.subosc_6.NG.band_init();
this.subosc_7.NG.band_init();
this.subosc_8.NG.band_init();
this.subosc_9.NG.band_init();
this.subosc_10.NG.band_init();
this.subosc_11.NG.band_init();
this.subosc_12.NG.band_init();
);


function mono_glide() (
          note_glide == 0 ? (
            this.note = this.note_running = this.note_target;
          ):(
            abs(this.note_running - this.note_target) < 0.01 ? (this.note_running = this.note_target; this.note_distance = 0):
            this.note_running += (this.note_distance/(srate*0.001*note_glide));
            abs(this.note - this.note_running) > max(0.01,this.note_distance/100) ? (this.note = this.note_running;);
            
            this.note_distance > 0 ? this.note_running > this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
            this.note_distance < 0 ? this.note_running < this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
          );
);




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  DAS  HIER  LANDET  IN  DER LIBRARY  ////////////////////////////////////////////////////////////////////// 




function render_waveform()
  local(x, dx, loopy, count, buf, size, gain)
(


 this.halbton = this.note_running - 39; // 60 ist höchster ton
 this.halbton2 = this.halbton + 19;
 this.halbton3 = this.halbton + 12;
 this.halbton4 = this.halbton + 24;
 this.halbton5 = this.halbton <= 59 ?  6 : 3;
 this.halbton6 = this.halbton <= 54 ? 8: 4;
 this.halbton7 = this.halbton <= 50 ? 10 : 5;
 this.halbton8 = this.halbton <= 47 ? 12 : this.halbton < 60 ? 6 : 3;
 this.halbton9 = this.halbton <= 42 ? 16 : this.halbton < 55 ? 8 : 4;
 this.perc_halbton = perc_harm ? this.halbton4 : this.halbton5;


buf = this.buf; size = this.size;
  
this..osc_number == 1 ? (
organ_type == 1 ? (
  x = 0;
  this..sine_octave = 1;
  loopy = 0; gain = drawbar1/24 + leakage;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] = this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = 3;
  loopy = 0; gain = drawbar2/24 + leakage*0.9;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = 2;
  loopy = 0; gain = drawbar3/24  + leakage*0.93;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = 4;
  loopy = 0; gain = drawbar4/24  + leakage *0.8;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = this.halbton5;
  loopy = 0; gain = drawbar5/24  + leakage *0.85;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = this.halbton6;
  loopy = 0; gain = drawbar6/24  + leakage;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = this.halbton7;
  loopy = 0; gain = drawbar7/24  + leakage *0.77;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = this.halbton8;
  loopy = 0; gain = drawbar8/24  + leakage *0.68;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
  x = 0;
  this..sine_octave = this.halbton9;
  loopy = 0; gain = drawbar9/24  + leakage *0.75;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] += this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
  
):( // Organ Type = 2 ?
this..pwm.running = 0.5;
x = 0;
this..pulse_octave = 1;
  loopy = 0; gain = drawbar1/28;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] = gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
  
x = 0;
this..pulse_octave = 2;
  loopy = 0; gain = drawbar3/28;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );

x = 0;
this..pulse_octave = 4;
  loopy = 0; gain = drawbar4/32;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
  
x = 0;
this..pulse_octave = 6;
  loopy = 0; gain = drawbar5/32;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
  
x = 0;
this..pulse_octave = 8;
  loopy = 0; gain = drawbar6/32;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );

x = 0;
this..pulse_octave = 10;
  loopy = 0; gain = drawbar7/32;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
  
x = 0;
this..pulse_octave = 16;
  loopy = 0; gain = drawbar9/32;; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
  
  
);
  
):( //OSC1 : OSC2
  x = 0;
  this..sine_octave = slider(perc_harm.slider) == 1 ? 4 : this.halbton5;
  loopy = 0; gain = 0.7;//this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] = this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );


);


//):(
//loopy = 0;
//loop(size,
//  buf[loopy] = 0;
//  loopy += 1;
//);
//);

/*
this..triangle_level != 0 ? (
  gain = this..triangle_level / this..triangle_octave;
  x = 0;
  count = 0;
  dx = (4) / (size);
  loopy = 0;
  loop(this..triangle_octave,
    loopy = 0; x = 0;
    loop(size,
      buf[count*size/this..triangle_octave + loopy/this..triangle_octave] += this..triangle_mod == 0 ? gain * x : 
      this..triangle_mod == 1 ? gain * sign(x) * sigma(abs(x), this..triangle_coef) : 
      this..triangle_mod == 2 ? gain * sign(x) * explog(abs(x), this..triangle_coef);
      loopy += 1;
      loopy <= (size)/4 ? x += dx :
      loopy <= (size)*0.75 ? x -= dx :
      x += dx;
    );
    count += 1;
  );
);

this..saw_level != 0 ? (
  gain = this..saw_level; loopy = 0;
  dx = 2 / (size / this..saw_octave);
  loop(this..saw_octave,
    x = 1;
    loop(size / this..saw_octave,
      buf[loopy] += this..saw_mod == 0 ? gain * x : 
      this..saw_mod == 1 ? gain * sigma((x+1)/2, this..saw_coef) - this..saw_level/2 : 
      this..saw_mod == 2 ? gain * (explog((x + 1)/2, this..saw_coef)-0.5);
      loopy += 1;
      x -= dx;
    );
  );
);

this..saw_alt_level != 0 ? (
  gain = this..saw_alt_level; loopy = 0;
  dx = 2 / (size / this..saw_alt_octave);
  counter = 1;
  loop(this..saw_alt_octave,
    x = 1;
    loopy = (counter-1)*size/this..saw_alt_octave;
    loop(0.5*size / this..saw_alt_octave,
      loopy - loopy*(counter-1) <= 0.5*size/this..saw_alt_octave ? buf[loopy] += this..saw_alt_mod == 0 ? gain * x : this..saw_alt_mod == 1 ? gain * sign(x) * sigma(abs(x), this..saw_alt_coef) : this..saw_alt_mod == 2 ? gain * sign(x) * explog(abs(x), this..saw_alt_coef);;  buf[loopy + (0.5*size / this..saw_alt_octave)] -= this..saw_alt_mod == 0 ? gain * x : this..saw_alt_mod == 1 ? gain * sign(x) * sigma(abs(x), this..saw_alt_coef) : this..saw_alt_mod == 2 ? gain * sign(x) * explog(abs(x), this..saw_alt_coef);;
      loopy += 1;
      x -= dx;
    );
  counter += 1;
  );
);

this..pulse_level != 0 ? (
  gain = this..pulse_level; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
);

loopy = 0;
loop(size,
  buf[loopy] = min(1,max(-1,buf[loopy]));
  loopy += 1;
);
*/

this.four_fft();

); // Function





function new_complex_envelope (attack.shape, dec1.shape, dec2.shape, release.shape, attack.coef, dec1.coef, dec2.coef, release.coef) (

this.stage == 1 ? (
  this.attack == 0 ? (this.level = 1; this.follower = 0; this.stage = 2; this.envelope_stop = 0):(
    this.follower*0 >= this.attack || this.level + (1/this.attack) > 1 ? (
        this.follower = 0; this.stage = 2; this.level = 1;
    ):(
        this.level += 1/this.attack; this.follower += 1;
        this.envelope_stop = 0;
    );
  );
);
this.stage == 2 ? (
  this.decay == 0 ? (this.level = this.breakpoint; this.follower = 0; this.stage = 3):(
    this.follower >= this.decay || this.level - (1-this.breakpoint)/this.decay < this.breakpoint ? ( // 
        this.follower = 0;  this.stage = 3; //this.level = this.breakpoint;
    ):(
        this.level -= (1-this.breakpoint)/this.decay; this.follower += 1; 
    );
  );
);
this.stage == 3 ? (
  this.decay2 == 0 ? (this.follower = 0; this.stage = 4):(
    this.breakpoint <= this.sustain ? (
        this.follower >= this.decay2 ? ( //|| this.level - (this.breakpoint - this.sustain)/this.decay2 > this.sustain ? ( // 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    ):(
        this.follower >= this.decay2 ? ( // || this.level - (this.breakpoint - this.sustain)/this.decay2 < this.sustain ? ( 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    );
  );
);

this.stage == 4 ? this.level = this.sustain; //(this.sustain_old != this.sustain ? (this.level = this.sustain; this.sustain_old = this.sustain));

this.stage == 5 ? (
  this.release == 0 ? (this.level = 0; this.follower = 0; this.envelope_stop =1):(
    this.follower == 0 ? this.level = this.release_level = this.real_level;
    this.level -= this.release_level/this.release; //absolute release time
    //this.level -= 1/this.release; //relative Release time
    this.follower += 1;
  );
);

this.stage == 1 ? (
    attack.shape == 0 ? (
        this.real_level = this.level;
    ):attack.shape == 2 ? (
        this.real_level = explog(this.level, attack.coef);
    ):attack.shape == 1 ? (
        this.real_level = sigma(this.level, attack.coef);
    );
):this.stage == 2 ? (
    dec1.shape == 0 ? (
        this.real_level = this.level;
    ):dec1.shape == 2 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*explog((1-(this.follower/this.decay)), dec1.coef);
    ):dec1.shape == 1 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*sigma((1-(this.follower/this.decay)), dec1.coef);
    );
):this.stage == 3 ? (
    dec2.shape == 0 ? (
        this.real_level = this.level;
    ):dec2.shape == 2 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint+ tmp_fac*explog(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*explog((1-(this.follower/this.decay2)), dec2.coef);
        );
    ):dec2.shape == 1 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint + tmp_fac*sigma(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*sigma((1-(this.follower/this.decay2)), dec2.coef);
        );
    );
   this.follower += 1; 
):this.stage == 4 ? (this.real_level = this.level;

):this.stage == 5 ? (
    release.shape == 0 ? (
        this.real_level = this.level;
    ):release.shape == 2 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.level*explog(1-(this.follower/this.release), release.coef);
    ):release.shape == 1 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.release_level*sigma(1-(this.follower/this.release), release.coef);
    );
    this.real_level <= 0.00001 ? (this.level = 0; this.envelope_stop = 1);
);

//this.stage != 1 ? this.real_level = this.level;


); // end function





function sync_osc () (
this..sync_to == 0 ? (syncdummy = 0) :
this..sync_to == 1 ? (
this == 1 ? (osc1.subosc_1.t < osc1.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc1.subosc_2.t < osc1.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc1.subosc_3.t < osc1.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc1.subosc_4.t < osc1.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc1.subosc_5.t < osc1.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc1.subosc_6.t < osc1.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc1.subosc_7.t < osc1.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc1.subosc_8.t < osc1.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc1.subosc_9.t < osc1.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc1.subosc_10.t < osc1.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc1.subosc_11.t < osc1.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc1.subosc_12.t < osc1.subosc_12.t_old ? (this.wave_sync(0)));
):this..sync_to == 2 ? (
this == 1 ? osc2.subosc_1.t < osc2.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc2.subosc_2.t < osc2.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc2.subosc_3.t < osc2.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc2.subosc_4.t < osc2.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc2.subosc_5.t < osc2.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc2.subosc_6.t < osc2.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc2.subosc_7.t < osc2.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc2.subosc_8.t < osc2.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc2.subosc_9.t < osc2.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc2.subosc_10.t < osc2.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc2.subosc_11.t < osc2.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc2.subosc_12.t < osc2.subosc_12.t_old ? (this.wave_sync(0));
):this..sync_to == 3 ? (
this == 1 ? osc3.subosc_1.t < osc3.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc3.subosc_2.t < osc3.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc3.subosc_3.t < osc3.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc3.subosc_4.t < osc3.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc3.subosc_5.t < osc3.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc3.subosc_6.t < osc3.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc3.subosc_7.t < osc3.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc3.subosc_8.t < osc3.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc3.subosc_9.t < osc3.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc3.subosc_10.t < osc3.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc3.subosc_11.t < osc3.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc3.subosc_12.t < osc3.subosc_12.t_old ? (this.wave_sync(0));
):this..sync_to == 4 ? (
this == 1 ? osc4.subosc_1.t < osc4.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc4.subosc_2.t < osc4.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc4.subosc_3.t < osc4.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc4.subosc_4.t < osc4.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc4.subosc_5.t < osc4.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc4.subosc_6.t < osc4.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc4.subosc_7.t < osc4.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc4.subosc_8.t < osc4.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc4.subosc_9.t < osc4.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc4.subosc_10.t < osc4.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc4.subosc_11.t < osc4.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc4.subosc_12.t < osc4.subosc_12.t_old ? (this.wave_sync(0));
);

);




function slew_rate() (

this > this.before_slew_rate + slew_rate ? (this.after_slew_rate = this.before_slew_rate + slew_rate; slew_rate_n = 1):
this < this.before_slew_rate - slew_rate ? (this.after_slew_rate = this.before_slew_rate - slew_rate; slew_rate_n = -1):
(this.after_slew_rate = this; slew_rate_n = 0);

this.before_slew_rate = this.after_slew_rate;
);



function LFO_Generator (CV) (
   this.sync_on == 1 ? ( //TEMP SYNCED
   Takt_in_s = (240 / tempo);
   this.time_sync_2 == 1 ? (this.T_Fac = 1.5):(this.T_Fac=1);
   this.Hertz = Takt_in_s / (this.time_sync*this.T_Fac);
   this.time_sync_2 == 2 ? this.Hertz *= 1.5;
   this.cosphi = this.phase_shift / 360;
   ):(
   this.vslider41 = this.tempo_hz * this.multiplier;
   this.vslider41 != 0 ? this.Hertz = 1/this.vslider41;
   this.cosphi = this.phase_shift / 360;
   );
   
   //block_ ... + (pos_add/srate) 
   this.n_durchgaenge = ((block_play_position + (pos_add/srate) + this.cosphi*this.Hertz) / this.Hertz);
   
   
   this.free_run == 1 ? ( //1 = Time sync, not free run
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   play_state == 1 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   play_state == 5 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   ):(
   this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   ):(
   play_state == 1 ? this.phase_position += (1/this.Hertz) / srate;
   play_state == 5 ? this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   );
   );
   
 
   this.sinus_Position = sin(this.phase_position * 2 * $pi);
   this.flip_position = sign(this.sinus_Position);
   this.ramp_up_position = -1 + 2*this.phase_position;
   this.ramp_down_position = 1 - 2*this.phase_position;
   
   this.phase_position <= 0.25 ? this.triangle_position = this.phase_position * 4:
   this.phase_position <= 0.5 ?  this.triangle_position = 1 - (this.phase_position-0.25) * 4:
   this.phase_position <= 0.75 ? this.triangle_position = (this.phase_position-0.5) * -4:
   this.phase_position > 0.75 ?  this.triangle_position = -1 + (this.phase_position - 0.75) * 4;

   this.form == 0 ? (
   this.CV_Select == 1 ? CV = 1 :
   this.CV_Select == 2 ? CV = modwheel :
   this.CV_Select == 3 ? CV = aftertouch/127 :
   this.CV_Select == 4 ? CV = CV_1 :
   this.CV_Select == 5 ? CV = CV_2 :
   this.CV_Select == 6 ? CV = CV_3 :
   this.CV_Select == 7 ? CV = CV_4 :
   this.CV_Select == 8 ? CV = CV_5 :
   this.CV_Select == 9 ? CV = CV_6 :
   this.CV_Select == 10 ? CV = CV_7 :
   this.CV_Select == 11 ? CV = CV_8 :
   this.CV_Select == 12 ? CV = CV_9 :
   this.CV_Select == 13 ? CV = CV_10 :
   CV = 0;
   this.abs_position = CV;
   );
   this.form == 1 ? this.abs_position = this.sinus_Position;
   this.form == 2 ? this.abs_position = this.flip_Position;
   this.form == 3 ? this.abs_position = this.ramp_up_Position;
   this.form == 4 ? this.abs_position = this.ramp_down_Position;
   this.form == 5 ? this.abs_position = this.triangle_Position;
   this.abs_position.slew_rate();
   this.abs_position = this.abs_position.after_slew_rate;

);




function play_suboscillator () (

this.fetch_subosc();

this.t_old = this.t;

this..sync_to ? this.sync_osc();

//abs(this.pwm_old - this..pwm.running) > 0.005 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this.note_running != this.note_running_old ? (this.want_render_waveform = 1; this.note_running_old = this.note_running);

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0):

 this.want_update || abs(this.note_running + this..transpose.running + (this..finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.01 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this..transpose.running + (this..finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ? this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63)
 );
 ///ROTARY NEW
 this..osc_number == 2 && !perc_poly ? (
  this.output = this.wave_lerp() * envelope_real_level[12];
 ):(
 this.output = this.wave_lerp() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-1];
 );
 

);






function play_unison_suboscillator () (

this.fetch_unison_subosc();

this.t_old = this.t;
this..sync_to ? this.sync_osc();


abs(this.pwm_old - this..pwm.running) > 0.005 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0):

 this.want_update || abs(this.note_running + this..transpose.running - (this..finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.01 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this..transpose.running - (this..finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ? this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63)
 );
 this.output = this.wave_trunc() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-7];
  //aakatze += 1;
);

function play_oscillator() (

this.unison ? (
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;

synth.subosc_1.on ? this.subosc_7.play_unison_suboscillator() : (this.subosc_7.output = 0; this.subosc_7.note = this.subosc_7.note_distance = 0);
synth.subosc_2.on ? this.subosc_8.play_unison_suboscillator() : this.subosc_8.output = 0;
synth.subosc_3.on ? this.subosc_9.play_unison_suboscillator() : this.subosc_9.output = 0;
synth.subosc_4.on ? this.subosc_10.play_unison_suboscillator() : this.subosc_10.output = 0;
synth.subosc_5.on ? this.subosc_11.play_unison_suboscillator() : this.subosc_11.output = 0;
synth.subosc_6.on ? this.subosc_12.play_unison_suboscillator() : this.subosc_12.output = 0;
):(
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;
synth.subosc_7.on ? this.subosc_7.play_suboscillator() : this.subosc_7.output = 0;
synth.subosc_8.on ? this.subosc_8.play_suboscillator() : this.subosc_8.output = 0;
synth.subosc_9.on ? this.subosc_9.play_suboscillator() : this.subosc_9.output = 0;
synth.subosc_10.on ? this.subosc_10.play_suboscillator() : this.subosc_10.output = 0;
synth.subosc_11.on ? this.subosc_11.play_suboscillator() : this.subosc_11.output = 0;
synth.subosc_12.on ? this.subosc_12.play_suboscillator() : this.subosc_12.output = 0;
);
/*
this.output =
this.subosc_1.output +
this.subosc_2.output +
this.subosc_3.output +
this.subosc_4.output +
this.subosc_5.output +
this.subosc_6.output +
this.subosc_7.output +
this.subosc_8.output +
this.subosc_9.output +
this.subosc_10.output +
this.subosc_11.output +
this.subosc_12.output;

this.output *= this.Level;
*/

);









function fill_subosc () (
this.VCA1.attack = env1.attack;
this.VCA1.decay = env1.decay;
this.VCA1.breakpoint = env1.breakpoint;
this.VCA1.decay2 = env1.decay2;
this.VCA1.sustain = env1.sustain;
this.VCA1.release = env1.release;
this.VCA1.at_shape = env1.at_shape;
this.VCA1.dec1_shape = env1.dec1_shape;
this.VCA1.dec2_shape = env1.dec2_shape;
this.VCA1.dec1_coef = env1.dec1_coef;
this.VCA1.dec2_coef = env1.dec2_coef;
this.VCA1.at_coef = env1.at_coef;
this.VCA1.rel_shape = env1.rel_shape;
this.VCA1.rel_coef = env1.rel_coef;

this.VCA2.attack = env2.attack;
this.VCA2.decay = env2.decay;
this.VCA2.breakpoint = env2.breakpoint;
this.VCA2.decay2 = env2.decay2;
this.VCA2.sustain = env2.sustain;
this.VCA2.release = env2.release;
this.VCA2.at_shape = env2.at_shape;
this.VCA2.dec1_shape = env2.dec1_shape;
this.VCA2.dec2_shape = env2.dec2_shape;
this.VCA2.dec1_coef = env2.dec1_coef;
this.VCA2.dec2_coef = env2.dec2_coef;
this.VCA2.at_coef = env2.at_coef;
this.VCA2.rel_shape = env2.rel_shape;
this.VCA2.rel_coef = env2.rel_coef;

this.VCF1.attack = env5.attack;
this.VCF1.decay = env5.decay;
this.VCF1.breakpoint = env5.breakpoint;
this.VCF1.decay2 = env5.decay2;
this.VCF1.sustain = env5.sustain;
this.VCF1.release = env5.release;
this.VCF1.at_shape = env5.at_shape;
this.VCF1.dec1_shape = env5.dec1_shape;
this.VCF1.dec2_shape = env5.dec2_shape;
this.VCF1.dec1_coef = env5.dec1_coef;
this.VCF1.dec2_coef = env5.dec2_coef;
this.VCF1.at_coef = env5.at_coef;
this.VCF1.rel_shape = env5.rel_shape;
this.VCF1.rel_coef = env5.rel_coef;

this.VCA3.attack = env3.attack;
this.VCA3.decay = env3.decay;
this.VCA3.breakpoint = env3.breakpoint;
this.VCA3.decay2 = env3.decay2;
this.VCA3.sustain = env3.sustain;
this.VCA3.release = env3.release;
this.VCA3.at_shape = env3.at_shape;
this.VCA3.dec1_shape = env3.dec1_shape;
this.VCA3.dec2_shape = env3.dec2_shape;
this.VCA3.dec1_coef = env3.dec1_coef;
this.VCA3.dec2_coef = env3.dec2_coef;
this.VCA3.at_coef = env3.at_coef;
this.VCA3.rel_shape = env3.rel_shape;
this.VCA3.rel_coef = env3.rel_coef;

this.VCF2.attack = env6.attack;
this.VCF2.decay = env6.decay;
this.VCF2.breakpoint = env6.breakpoint;
this.VCF2.decay2 = env6.decay2;
this.VCF2.sustain = env6.sustain;
this.VCF2.release = env6.release;
this.VCF2.at_shape = env6.at_shape;
this.VCF2.dec1_shape = env6.dec1_shape;
this.VCF2.dec2_shape = env6.dec2_shape;
this.VCF2.dec1_coef = env6.dec1_coef;
this.VCF2.dec2_coef = env6.dec2_coef;
this.VCF2.at_coef = env6.at_coef;
this.VCF2.rel_shape = env6.rel_shape;
this.VCF2.rel_coef = env6.rel_coef;
);





function modulationsmatrix(LFO, RANGE, MODRANGE) local(_controller _modamount _mode _LFO_Value _wantmod) (

LFO == 1 ? _wantmod = this.LFO_1.wantmod:
LFO == 2 ? _wantmod = this.LFO_2.wantmod:
LFO == 3 ? _wantmod = this.LFO_3.wantmod:
LFO == 4 ? _wantmod = this.LFO_4.wantmod;

_wantmod ? (
    LFO == 1 ? (
    _LFO_Value = LFO_1.abs_position.after_slew_rate;
    _modamount = this.LFO_1.modamount;
    _mode = this.LFO_1.mode;
    this.LFO_1.controller == 1 ? _controller = 1 :
    this.LFO_1.controller == 2 ? _controller = modwheel :
    this.LFO_1.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_1.controller == 4 ? _controller = CV_1 :
    this.LFO_1.controller == 5 ? _controller = CV_2 :
    this.LFO_1.controller == 6 ? _controller = CV_3 :
    this.LFO_1.controller == 7 ? _controller = CV_4 :
    this.LFO_1.controller == 8 ? _controller = CV_5 :
    this.LFO_1.controller == 9 ? _controller = CV_6 :
    this.LFO_1.controller == 10 ? _controller = CV_7 :
    this.LFO_1.controller == 11 ? _controller = CV_8 :
    this.LFO_1.controller == 12 ? _controller = CV_9 :
    this.LFO_1.controller == 13 ? _controller = CV_10;
    ):
    LFO == 2 ? (
    _LFO_Value = LFO_2.abs_position.after_slew_rate;
    _modamount = this.LFO_2.modamount;
    _mode = this.LFO_2.mode;
    this.LFO_2.controller == 1 ? _controller = 1 :
    this.LFO_2.controller == 2 ? _controller = modwheel :
    this.LFO_2.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_2.controller == 4 ? _controller = CV_1 :
    this.LFO_2.controller == 5 ? _controller = CV_2 :
    this.LFO_2.controller == 6 ? _controller = CV_3 :
    this.LFO_2.controller == 7 ? _controller = CV_4 :
    this.LFO_2.controller == 8 ? _controller = CV_5 :
    this.LFO_2.controller == 9 ? _controller = CV_6 :
    this.LFO_2.controller == 10 ? _controller = CV_7 :
    this.LFO_2.controller == 11 ? _controller = CV_8 :
    this.LFO_2.controller == 12 ? _controller = CV_9 :
    this.LFO_2.controller == 13 ? _controller = CV_10;
    ):
    LFO == 3 ? (
    _LFO_Value = LFO_3.abs_position.after_slew_rate;
    _modamount = this.LFO_3.modamount;
    _mode = this.LFO_3.mode;
    this.LFO_3.controller == 1 ? _controller = 1 :
    this.LFO_3.controller == 2 ? _controller = modwheel :
    this.LFO_3.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_3.controller == 4 ? _controller = CV_1 :
    this.LFO_3.controller == 5 ? _controller = CV_2 :
    this.LFO_3.controller == 6 ? _controller = CV_3 :
    this.LFO_3.controller == 7 ? _controller = CV_4 :
    this.LFO_3.controller == 8 ? _controller = CV_5 :
    this.LFO_3.controller == 9 ? _controller = CV_6 :
    this.LFO_3.controller == 10 ? _controller = CV_7 :
    this.LFO_3.controller == 11 ? _controller = CV_8 :
    this.LFO_3.controller == 12 ? _controller = CV_9 :
    this.LFO_3.controller == 13 ? _controller = CV_10;
    ):
    LFO == 4 ? (
    _LFO_Value = LFO_4.abs_position.after_slew_rate;
    _modamount = this.LFO_4.modamount;
    _mode = this.LFO_4.mode;
    this.LFO_4.controller == 1 ? _controller = 1 :
    this.LFO_4.controller == 2 ? _controller = modwheel :
    this.LFO_4.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_4.controller == 4 ? _controller = CV_1 :
    this.LFO_4.controller == 5 ? _controller = CV_2 :
    this.LFO_4.controller == 6 ? _controller = CV_3 :
    this.LFO_4.controller == 7 ? _controller = CV_4 :
    this.LFO_4.controller == 8 ? _controller = CV_5 :
    this.LFO_4.controller == 9 ? _controller = CV_6 :
    this.LFO_4.controller == 10 ? _controller = CV_7 :
    this.LFO_4.controller == 11 ? _controller = CV_8 :
    this.LFO_4.controller == 12 ? _controller = CV_9 :
    this.LFO_4.controller == 13 ? _controller = CV_10;
    );
    
    
    
    
    
    _mode == 0 ? this.modresult += (_modamount/MODRANGE)*_LFO_Value*_controller*RANGE :
    _mode == 1 ? this.modresult += -0.5*range*_modamount/modrange + (0.5*_modamount/MODRANGE)*_LFO_Value*_controller*RANGE;
):(
    this.running = this;
);

);


function modulate_osc () (
  
  this.level.modresult = 0;
  this.pan.modresult = 0;
  this.transpose.modresult = 0;
  this.finetune.modresult = 0;
  this.pwm.modresult = 0;
  

  LFO_1.wantmod ? (
    this.level.modulationsmatrix(1, 2, 10);
    this.pan.modulationsmatrix(1, 2, 200);
    this.transpose.modulationsmatrix(1, 24, 24);
    this.finetune.modulationsmatrix(1, 200, 200);
    this.pwm.modulationsmatrix(1, 2, 4);
  );
  LFO_2.wantmod ? (
    this.level.modulationsmatrix(2, 2, 10);
    this.pan.modulationsmatrix(2, 2, 200);
    this.transpose.modulationsmatrix(2, 24, 24);
    this.finetune.modulationsmatrix(2, 200, 200);
    this.pwm.modulationsmatrix(2, 2, 4);
  );
  LFO_3.wantmod ? (
    this.level.modulationsmatrix(3, 2, 10);
    this.pan.modulationsmatrix(3, 2, 200);
    this.transpose.modulationsmatrix(3, 24, 24);
    this.finetune.modulationsmatrix(3, 200, 200);
    this.pwm.modulationsmatrix(3, 2, 4);
  );
  LFO_4.wantmod ? (
    this.level.modulationsmatrix(4, 2, 10);
    this.pan.modulationsmatrix(4, 2, 200);
    this.transpose.modulationsmatrix(4, 24, 24);
    this.finetune.modulationsmatrix(4, 200, 200);
    this.pwm.modulationsmatrix(4, 2, 4);
  );
 
  this.level.running = this.level + this.level.modresult;
  this.pan.running = this.pan + this.pan.modresult;
  this.transpose.running = this.transpose + this.transpose.modresult;
  this.finetune.running = this.finetune + this.finetune.modresult;
  this.pwm.running = this.pwm + this.pwm.modresult;
  
  
);



function play_synth_subosc () (
this.start_trigger == 1 ? (
this.VCA1.stage = 1; this.VCA1.follower = 0;
perc_poly ? (this.VCA2.stage = 1; this.VCA2.follower = 0);
this.VCA3.stage = 1; this.VCA3.follower = 0;
this.VCF1.stage = 1; this.VCF1.follower = 0; this.VCF1.level = this.VCF1.real_level = 0;
this.VCF2.level = this.VCF2.real_level = 0; this.VCF2.follower = 0; this.VCF2.stage = 1;
 this.halbton = this.note_running - 39; // 60 ist höchster ton
 this.halbton2 = this.halbton + 19;
 this.halbton3 = this.halbton + 12;
 this.halbton4 = this.halbton + 24;
 this.halbton5 = this.halbton <= 59 ? this.halbton + 31 : this.halbton + 19;
 this.halbton6 = this.halbton <= 54 ? this.halbton + 36 : this.halbton + 24;
 this.halbton7 = this.halbton <= 50 ? this.halbton + 40 : this.halbton + 28;
 this.halbton8 = this.halbton <= 47 ? this.halbton + 43 : this.halbton < 60 ? this.halbton + 31 : this.halbton + 19;
 this.halbton9 = this.halbton <= 42 ? this.halbton + 48 : this.halbton < 55 ? this.halbton + 36 : this.halbton + 24;
 this.perc_halbton = perc_harm ? this.halbton4 : this.halbton5;
 tonewheel_on[this.halbton] += 1;
 tonewheel_on[this.halbton2] += 1;
 tonewheel_on[this.halbton3] += 1;
 tonewheel_on[this.halbton4] += 1;
 tonewheel_on[this.halbton5] += 1;
 tonewheel_on[this.halbton6] += 1;
 tonewheel_on[this.halbton7] += 1;
 tonewheel_on[this.halbton8] += 1;
 tonewheel_on[this.halbton9] += 1;
 
this.start_trigger = 0;
);
this.release_trigger == 1 ? (this.VCA1.stage = 5; this.VCA1.follower = 0; this.VCA2.stage = 5; this.VCA2.follower = 0; this.VCA3.stage = 5; this.VCA3.follower = 0; this.VCF1.stage = 5; this.VCF1.follower = 0; this.VCF2.stage = 5; this.VCF2.follower = 0; this.release_trigger = 0);

this.VCA1.new_complex_envelope (this.VCA1.at_shape,this.VCA1.dec1_shape,this.VCA1.dec2_shape,this.VCA1.rel_shape,this.VCA1.at_coef,this.VCA1.dec1_coef,this.VCA1.dec2_coef,this.VCA1.rel_coef);

//perc_poly ? 
this.VCA2.new_complex_envelope (this.VCA2.at_shape,this.VCA2.dec1_shape,this.VCA2.dec2_shape,this.VCA2.rel_shape,this.VCA2.at_coef,this.VCA2.dec1_coef,this.VCA2.dec2_coef,this.VCA2.rel_coef);

this.VCA3.new_complex_envelope (this.VCA3.at_shape,this.VCA3.dec1_shape,this.VCA3.dec2_shape,this.VCA3.rel_shape,this.VCA3.at_coef,this.VCA3.dec1_coef,this.VCA3.dec2_coef,this.VCA3.rel_coef);


//VCF_ON && this..VCF_ENV ? this.VCF1.new_complex_envelope (this.VCF1.at_shape,this.VCF1.dec1_shape,this.VCF1.dec2_shape,this.VCF1.rel_shape,this.VCF1.at_coef,this.VCF1.dec1_coef,this.VCF1.dec2_coef,this.VCF1.rel_coef);
NG.VCF_ON && NG.VCF_ENV ? this.VCF2.new_complex_envelope (ng.at_shape,ng.dec1_shape,ng.dec2_shape,ng.rel_shape,ng.at_coef,ng.dec1_coef,ng.dec2_coef,ng.rel_coef) : (this.VCF2.real_level=1);


envelope_real_level[this.subosc_number-1] = this.VCA1.real_level;
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level;
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level;
//envelope_real_level[3] = this.VCA4.real_level;
envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level;
envelope_real_level[60+this.subosc_number-1] = this.VCF2.real_level;
//envelope_real_level[6] = this.VCF3.real_level;
//envelope_real_level[7] = this.VCF4.real_level;

this.VCA1.envelope_stop ? (
//this.VCA1.envelope_stop = 0;
//this.on = 0; this.note = this.note_running = 0;
envelope_real_level[this.subosc_number-1] = this.VCA1.real_level = this.VCA1.level = 0;this.VCA1follower = 0;
);

this.VCA2.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level = this.VCA2.level = 0;this.VCA2.follower = 0;
);

this.VCA3.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level = this.VCA3.level = 0;this.VCA3.follower = 0;
);

this.VCF1.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
);

this.VCF2.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[60+this.subosc_number-1] = this.VCF2.real_level = this.VCF2.level = 0;this.VCF2.follower = 0;
);

this.VCA1.envelope_stop && this.VCA2.envelope_stop && this.VCA3.envelope_stop? (
this.on = 0; this.note = this.note_running = 0;
this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
this.VCF2.real_level = this.VCF2.level = 0;this.VCF2.follower = 0;
 tonewheel_on[this.halbton] -= 1;
 tonewheel_on[this.halbton2] -= 1;
 tonewheel_on[this.halbton3] -= 1;
 tonewheel_on[this.halbton4] -= 1;
 tonewheel_on[this.halbton5] -= 1;
 tonewheel_on[this.halbton6] -= 1;
 tonewheel_on[this.halbton7] -= 1;
 tonewheel_on[this.halbton8] -= 1;
 tonewheel_on[this.halbton9] -= 1;
);


this.halbton <= 60 ? (

this.subosc_number == 1 ? this.outputL = osc1.subosc_1.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputL = osc1.subosc_2.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL = osc1.subosc_3.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL = osc1.subosc_4.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL = osc1.subosc_5.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL = osc1.subosc_6.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
this.subosc_number == 7 ? this.outputL = osc1.subosc_7.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc7.output * NG.level.running:
this.subosc_number == 8 ? this.outputL = osc1.subosc_8.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc8.output * NG.level.running:
this.subosc_number == 9 ? this.outputL = osc1.subosc_9.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc9.output * NG.level.running:
this.subosc_number == 10 ? this.outputL = osc1.subosc_10.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc10.output * NG.level.running:
this.subosc_number == 11 ? this.outputL = osc1.subosc_11.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc11.output * NG.level.running:
this.subosc_number == 12 ? this.outputL = osc1.subosc_12.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc12.output * NG.level.running;

this.subosc_number == 1 ? this.outputR = osc1.subosc_1.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputR = osc1.subosc_2.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR = osc1.subosc_3.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR = osc1.subosc_4.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR = osc1.subosc_5.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR = osc1.subosc_6.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
this.subosc_number == 7 ? this.outputR = osc1.subosc_7.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc7.output * NG.level.running:
this.subosc_number == 8 ? this.outputR = osc1.subosc_8.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc8.output * NG.level.running:
this.subosc_number == 9 ? this.outputR = osc1.subosc_9.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc9.output * NG.level.running:
this.subosc_number == 10 ? this.outputR = osc1.subosc_10.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc10.output * NG.level.running:
this.subosc_number == 11 ? this.outputR = osc1.subosc_11.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc11.output * NG.level.running:
this.subosc_number == 12 ? this.outputR = osc1.subosc_12.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc12.output * NG.level.running;

osc1.unison ? (
this.subosc_number == 1 ? this.outputR += osc1.subosc_7.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputR += osc1.subosc_8.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR += osc1.subosc_9.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR += osc1.subosc_10.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR += osc1.subosc_11.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR += osc1.subosc_12.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:

this.subosc_number == 1 ? this.outputL += osc1.subosc_7.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputL += osc1.subosc_8.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL += osc1.subosc_9.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL += osc1.subosc_10.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL += osc1.subosc_11.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL += osc1.subosc_12.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
);

osc2.unison ? (
this.subosc_number == 1 ? this.outputR += osc2.subosc_7.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 2 ? this.outputR += osc2.subosc_8.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR += osc2.subosc_9.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR += osc2.subosc_10.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR += osc2.subosc_11.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR += osc2.subosc_12.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:

this.subosc_number == 1 ? this.outputL += osc2.subosc_7.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 2 ? this.outputL += osc2.subosc_8.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL += osc2.subosc_9.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL += osc2.subosc_10.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL += osc2.subosc_11.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL += osc2.subosc_12.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
);




organ_type && eco_mode == 2 ? (
!perc_poly ? (
this.perc = 10*osc2.level * tonewheel_value[this.perc_halbton] * envelope_real_level[12];
):(
this.perc = 10*osc2.level * tonewheel_value[this.perc_halbton] * this.vca2.real_level;
);
this.outputL =
tonewheel_value[this.halbton] * (drawbar1+leakage2) +
tonewheel_value[this.halbton2] * (drawbar2+leakage2) +
tonewheel_value[this.halbton3] * (drawbar3+leakage2) +
tonewheel_value[this.halbton4] * (drawbar4+leakage2) +
tonewheel_value[this.halbton5] * (drawbar5+leakage2) +
tonewheel_value[this.halbton6] * (drawbar6+leakage2) +
tonewheel_value[this.halbton7] * (drawbar7+leakage2) +
tonewheel_value[this.halbton8] * (drawbar8+leakage2) +
tonewheel_value[this.halbton9] * (drawbar9+leakage2) +
this.perc;
this.outputL = this.outputR = this.outputL * 0.05 * this.VCA1.real_level;
);


/*
 this..osc_number == 2 && !perc_poly ? (
  this.output = this.wave_lerp() * envelope_real_level[12];
 ):(
 this.output = this.wave_lerp() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-1];
 );
*/

/*
    this..filter_slope
    this..filter_q.running
this..filter_gain.running
    this..filter_type
this.VCF_trigger
    this..keyfollow //es gibt auch half
    this..filter_f.running
this.VCF.real_level*this..VCF_ENV
    this.note
    this..pitchamount.running
*/
//STEREO FILTER!!!

this..filter_gain.running = 0; // kommt eh nicht vor ;)
this.VCF_trigger = 0; // kommt erst mit VCF_ENV
this.VCF.real_level = this.VCF1.real_level;

//VCF_ON ? this.VCF(); ORGEL REMOVED


  
this.noise = (rand(2)-1) * this.VCA3.real_level;

this.tmp_outL = this.outputL;
this.tmp_outR = this.outputR;
//this.outputL = this.noise;
//this.outputR = this.noise;

//this.VCF.real_level = this.VCF2.real_level;
//NG.filter_f.running = ng.filter_f;
NG.VCF_ON && NG.level ? this.NG_VCF();
//this.noise = this.outputL;

//this.outputL = this.tmp_outL;
//this.outputR = this.tmp_outR;
this.outputL += this.noise* (ng.level.running) * sin((1-(1+ng.pan.running)/2)*$pi/2);
this.outputR += this.noise* (ng.level.running) * sin(((1+ng.pan.running)/2)*$pi/2);


); // this.halbton <= 60 ?


);




function play_synth_generals () (

  NG.level.modresult = 0;
  NG.pan.modresult = 0;
  
  /*
  //LFO_1.wantmod ? (
    NG.level.modulationsmatrix(1, 2, 10);
    NG.pan.modulationsmatrix(1, 2, 200);

  //);
  LFO_2.wantmod ? (
    NG.level.modulationsmatrix(2, 2, 10);
    NG.pan.modulationsmatrix(2, 2, 200);

  );
  LFO_3.wantmod ? (
    NG.level.modulationsmatrix(3, 2, 10);
    NG.pan.modulationsmatrix(3, 2, 200);

  );
  LFO_4.wantmod ? (
    NG.level.modulationsmatrix(4, 2, 10);
    NG.pan.modulationsmatrix(4, 2, 200);

  );
  
  NG.level.running = NG.level + NG.level.modresult;
  NG.pan.running = NG.pan + NG.pan.modresult;
  
  NG.filter_f.modresult = 0;
  NG.filter_f.LFO_1.wantmod ? NG.filter_f.modulationsmatrix(1, 100, 100);
  NG.filter_f.LFO_2.wantmod ? NG.filter_f.modulationsmatrix(2, 100, 100);
  NG.filter_f.LFO_3.wantmod ? NG.filter_f.modulationsmatrix(3, 100, 100);
  NG.filter_f.LFO_4.wantmod ? NG.filter_f.modulationsmatrix(4, 100, 100);
  NG.filter_f.running = NG.filter_f + NG.filter_f.modresult;
 
  
this.filter_f.modresult = 0;
this.filter_f.LFO_1.wantmod ? this.filter_f.modulationsmatrix(1, 100, 100);
this.filter_f.LFO_2.wantmod ? this.filter_f.modulationsmatrix(2, 100, 100);
this.filter_f.LFO_3.wantmod ? this.filter_f.modulationsmatrix(3, 100, 100);
this.filter_f.LFO_4.wantmod ? this.filter_f.modulationsmatrix(4, 100, 100);
this.filter_f.running = this.filter_f + this.filter_f.modresult;
 */
 
this.subosc_1.on ? this.subosc_1.play_synth_subosc();
this.subosc_2.on ? this.subosc_2.play_synth_subosc();
this.subosc_3.on ? this.subosc_3.play_synth_subosc();
this.subosc_4.on ? this.subosc_4.play_synth_subosc();
this.subosc_5.on ? this.subosc_5.play_synth_subosc();
this.subosc_6.on ? this.subosc_6.play_synth_subosc();
this.subosc_7.on ? this.subosc_7.play_synth_subosc();
this.subosc_8.on ? this.subosc_8.play_synth_subosc();
this.subosc_9.on ? this.subosc_9.play_synth_subosc();
this.subosc_10.on ? this.subosc_10.play_synth_subosc();
this.subosc_11.on ? this.subosc_11.play_synth_subosc();
this.subosc_12.on ? this.subosc_12.play_synth_subosc();



this.outputL =
this.subosc_1.outputL +
this.subosc_2.outputL +
this.subosc_3.outputL +
this.subosc_4.outputL +
this.subosc_5.outputL +
this.subosc_6.outputL +
this.subosc_7.outputL +
this.subosc_8.outputL +
this.subosc_9.outputL +
this.subosc_10.outputL +
this.subosc_11.outputL +
this.subosc_12.outputL;

this.outputR =
this.subosc_1.outputR +
this.subosc_2.outputR +
this.subosc_3.outputR +
this.subosc_4.outputR +
this.subosc_5.outputR +
this.subosc_6.outputR +
this.subosc_7.outputR +
this.subosc_8.outputR +
this.subosc_9.outputR +
this.subosc_10.outputR +
this.subosc_11.outputR +
this.subosc_12.outputR;

);






///// inititalIZE
//eco_mode = 0;


synth.make_filters();
SMOOTHING_TIME_MS = 10;

itm1=itm2=otm1=otm2=0;

ext_noinit = 1;
gfx_ext_retina = 1;
osc_a0 = (2)^(1/12);
mouse_sensivity();

   fftsize=-1;
   need_refft=1;
   convsrc=128*1024;
   lslider1=-1;
   impbuf=256*1024;
   
   
   low_oct_start= 36;
   
   
   
memory_point = 1000000;



envelope_real_level = memory_point;
memory_point += 96;
manipulation_buffer = memory_point;
memory_point += 2048;
osc1.make_osc();
osc1.osc_number = 1;
osc1.gfx_seconds = 2;
osc1.at_shape = 0;
osc1.at_coef = 1;
osc1.dec1_shape = 0;
osc1.dec1_coef = 1;
osc1.dec2_shape = 0;
osc1.dec2_coef = 1;
osc1.rel_shape = 0;
osc1.rel_coef = 1;

osc1.unison = 0;
osc2.unison = 0;

osc2.make_osc();
osc2.osc_number = 2;
osc2.gfx_seconds = 2;
osc2.at_shape = 0;
osc2.at_coef = 1;
osc2.dec1_shape = 0;
osc2.dec1_coef = 1;
osc2.dec2_shape = 0;
osc2.dec2_coef = 1;
osc2.rel_shape = 0;
osc2.rel_coef = 1;

synth.subosc_1.subosc_number = 1;
synth.subosc_2.subosc_number = 2;
synth.subosc_3.subosc_number = 3;
synth.subosc_4.subosc_number = 4;
synth.subosc_5.subosc_number = 5;
synth.subosc_6.subosc_number = 6;
synth.subosc_7.subosc_number = 7;
synth.subosc_8.subosc_number = 8;
synth.subosc_9.subosc_number = 9;
synth.subosc_10.subosc_number = 10;
synth.subosc_11.subosc_number = 11;
synth.subosc_12.subosc_number = 12;


gfx_filter.band_init();
synth.filter.gfx_seconds = 2;
synth.filter.at_shape = 0;
synth.filter.at_coef = 1;
synth.filter.dec1_shape = 0;
synth.filter.dec1_coef = 1;
synth.filter.dec2_shape = 0;
synth.filter.dec2_coef = 1;
synth.filter.rel_shape = 0;
synth.filter.rel_coef = 1;

slew_rate = 1 / (1 * srate * 0.001);


NG.gfx_seconds = 1;
NG.at_shape = 0;
NG.at_coef = 1;
NG.dec1_shape = 0;
NG.dec1_coef = 1;
NG.dec2_shape = 0;
NG.dec2_coef = 1;
NG.rel_shape = 0;
NG.rel_coef = 1;

NG.filter.gfx_seconds = 1;
NG.filter.at_shape = 0;
NG.filter.at_coef = 1;
NG.filter.dec1_shape = 0;
NG.filter.dec1_coef = 1;
NG.filter.dec2_shape = 0;
NG.filter.dec2_coef = 1;
NG.filter.rel_shape = 0;
NG.filter.rel_coef = 1;


LFO_1.free_run = 0;
LFO_2.free_run = 0;
LFO_3.free_run = 0;
LFO_4.free_run = 0;

    //SOFTCLIPPER
    clipper_a = 1.017;
    clipper_b = -0.025;
    amp_dB = 8.6562;
    threshold_db = -8;
    
    //disL.disto((slider22-0.5)/5, 20000);
    //disR.disto((slider22-0.5)/5, 20000);
    
    
/*
function memalloc(size)
(
    __memory_index = __memory_next + 8;
    __memory_next = __memory_index + size;
    memset(__memory_index, 0.0, size);
    __memory_index;
);
*/
memory_aa = memory_point;
__memory_next =  memory_point + 10;
myverb_L.wgverb(revfeed, 8500, revbal);
myverb_R.wgverb(revfeed, 8500, revbal);
memory_point = __memory_next;




Leslie_filter_type = 5;
Leslie_Filter_Slope = 3;
Leslie_Filter_Q = 0.707;
Leslie_filter_gain = 0;




hpos = 0;
leslie_size = 256;
hbuf = 256;
//memset(hbuf, 0, leslie_size);

fbuf1 = fbuf2 = 0;
twopi = 6.2831853;

chp = dchp = clp = dclp = shp = dshp = slp = dslp = 0;

lspd = 0;
hspd = 0;
lphi = 0;
hphi = 1.6;

ifs = 1 / srate;

dchp=0;
dclp=0;
dshp=0;

k1 = 32;
k0 = 0.03125; // 1/k1
k = 0;

crossover_low.band_init();
crossover_high.band_init();
L_Horn.band_init();
R_Horn.band_init();
Drum.band_init();


Wall_L_Horn.band_init();
Wall_R_Horn.band_init();


   BSZ = 16*8192*2;//0.2*srate; // ~0.2*srate
   buf1 = BSZ + memory_point;
   buf2 = 2*BSZ + memory_point;
   buf3 = 3*BSZ + memory_point;
   memset(buf1,0,BSZ);
   memset(buf2,0,BSZ);
   memset(buf3,0,BSZ);
   
   _feedbackPhase = 1;
   _sweepSamples = 0; // sweep width in # of samples
   scanner1_fp = _fp = 0; // fill/write pointer
   _sweep = 0; // current value of sweep in steps behind fill pointer
   
   outval1 = outval2 = 0; // most recent output value (for feedback)
   
   memory_point = buf3 + BSZ + 10;

   
   
   
    
   
   flb_MAX_WG_DELAY = 16384;
   flb_i = 0;
   flb_counter = 0;
   flb_buffer0 = memory_point + 2048;
   flb_buffer1 = flb_buffer0 + MAX_WG_DELAY;
   memset(flb_buffer0,0,flb_MAX_WG_DELAY);
   memset(flb_buffer1,0,flb_MAX_WG_DELAY);
   flb_feedback = 0;
   flb_delay = 5 ;
   flb_tdelay0 = flb_delay;
   flb_tdelay1 = flb_delay;
   flb_rate = 0;
   flb_mix = 0;
   
   memory_point += flb_buffer1 + flb_MAX_WG_DELAY + 10;
   
   
   
     katze2 = memory_point;
    memory_point += 100;
   tonewheel_adj = memory_point+10;
   tonewheel_value = memory_point + 210;
   tonewheel_pos = memory_point + 320;
   tonewheel_on = memory_point + 430;
   memory_point += 540;
   tuning = 440;
   
   tw_note = 0;
   Oktave = -4;
   loop(7, //Oktaven
    halbton = 3;
    loop(12, // halbtöne
      halbton == 3 ? cents = -0.58;
      halbton == 4 ? cents = -0.68;
      halbton == 5 ? cents =  0.2;
      halbton == 6 ? cents = -0.09;
      halbton == 7 ? cents = -0.14;
      halbton == 8 ? cents = -0.68;
      halbton == 9 ? cents =  0.03;
      halbton == 10 ? cents =  0.02;
      halbton == 11 ? cents = -0.71;
      halbton == 12 ? cents = 0;
      halbton == 13 ? cents = -0.29;
      halbton == 14 ? cents = -0.59;
      tonewheel_adj[tw_note] = 2.0*$pi*tuning*(2^(oktave+halbton/12+cents/1200))/srate;
      tw_note += 1;
      halbton += 1;
    );
    oktave += 1;
   );
   halbton = 3;
   loop(7, // halbtöne
   halbton == 3 ? cents = 1.27;
   halbton == 4 ? cents = 1.98;
   halbton == 5 ? cents = 1.98;
   halbton == 6 ? cents = 1.25;
   halbton == 7 ? cents = 1.96;
   halbton == 8 ? cents = 1.67;
   halbton == 9 ? cents = 1.36;
     tonewheel_adj[tw_note] = 2.0*$pi*tuning*(2^(oktave+halbton/12+0/1200))/srate;
     tw_note += 1;
     halbton += 1;
   );
   letzte_note = tw_note;
   //this.freq = main_tuning*(osc_a0^(this.note_running
   //osc_a0 = (2)^(1/12);
///////////////




function LFO_sliders () (
   this.form = slider(this.startslider);
   this.syncslider_old != slider(this.startslider+2) ? this.sync_on = 1;
   this.tempo_hz != 0.3+explog(slider(this.startslider+4),3.45)*29.7 ? (this.sync_on = 0; slider(this.startslider+2) = 9; );
   this.syncslider_old = slider(this.startslider+2);
   slider(this.startslider+2) == 0 ? this.time_sync = 0.125;
   slider(this.startslider+2) == 1 ? this.time_sync = 0.25;
   slider(this.startslider+2) == 2 ? this.time_sync = 0.5;
   slider(this.startslider+2) == 3 ? this.time_sync = 1;
   slider(this.startslider+2) == 4 ? this.time_sync = 2;
   slider(this.startslider+2) == 5 ? this.time_sync = 4;
   slider(this.startslider+2) == 6 ? this.time_sync = 8;
   slider(this.startslider+2) == 7 ? this.time_sync = 16;
   slider(this.startslider+2) == 8 ? this.time_sync = 32;
   slider(this.startslider+2) == 9 ? this.sync_on = 0;
   this.time_sync_2 = slider(this.startslider+3);
   this.tempo_hz = 0.3+explog(slider(this.startslider+4),3.45)*29.7;
   slider(this.startslider+5) == 0 ? this.multiplier = 1 : this.multiplier = 10;
   this.phase_shift = slider(this.startslider+1);
   this.sync_on == 0 ? this.time_sync = 0;
);













///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////// LESLIE STUFF //////////////////////////////////////////////////////////////////////////////////

/*
   function init_chorus () (
   BSZ = 16*8192*2;//0.2*srate; // ~0.2*srate
   buf1 = BSZ;
   buf2 = 2*BSZ;
   buf3 = 3*BSZ;
   memset(buf1,0,BSZ);
   memset(buf2,0,BSZ);
   memset(buf3,0,BSZ);
   
   _feedbackPhase = 1;
   _sweepSamples = 0; // sweep width in # of samples
   scanner1_fp = _fp = 0; // fill/write pointer
   _sweep = 0; // current value of sweep in steps behind fill pointer
   
   outval1 = outval2 = 0; // most recent output value (for feedback)
   
   
   i=0;
   while(i<BSZ) (
   i+=1;
   buf1[i]=buf2[i]=buf3[i]=0;
   );
   
   );
   init_chorus();
   
   
   */
   
   function flange_horn () (
   //flb_depth = (flb_delay - 0.1) * ch_depth/40;
   flb_depth = ch_depth/10;
   
      flb_back0 = flb_counter - flb_sdelay0;
      flb_back1 = flb_counter - flb_sdelay1;
      (flb_back0 < 0) ? flb_back0 = flb_MAX_WG_DELAY + flb_back0;
      (flb_back1 < 0) ? flb_back1 = flb_MAX_WG_DELAY + flb_back1;
      flb_index00 = flb_back0 | 0;
      flb_index01 = flb_back1 | 0;
      flb_index_10 = flb_index00 - 1;
      flb_index_11 = flb_index01 - 1;
      flb_index10 = flb_index00 + 1;
      flb_index11 = flb_index01 + 1;
      flb_index20 = flb_index00 + 2;
      flb_index21 = flb_index01 + 2;
      (flb_index_10 < 0) ? flb_index_10 = flb_MAX_WG_DELAY + 1;
      (flb_index_11 < 0) ? flb_index_11 = flb_MAX_WG_DELAY + 1;
      (flb_index10 >= flb_MAX_WG_DELAY) ? flb_index10 = 0;
      (flb_index11 >= flb_MAX_WG_DELAY) ? flb_index11 = 0;
      (flb_index20 >= flb_MAX_WG_DELAY) ? flb_index20 = 0;
      (flb_index21 >= flb_MAX_WG_DELAY) ? flb_index21 = 0;
      flb_y_10 = flb_buffer0[flb_index_10];
      flb_y_11 = flb_buffer1[flb_index_11];
      flb_y00 = flb_buffer0[flb_index00];
      flb_y01 = flb_buffer1[flb_index01];
      flb_y10 = flb_buffer0[flb_index10];
      flb_y11 = flb_buffer1[flb_index11];
      flb_y20 = flb_buffer0[flb_index20];
      flb_y21 = flb_buffer1[flb_index21];
      flb_x0 = flb_back0 - flb_index00;
      flb_x1 = flb_back1 - flb_index01;
      flb_c00 = flb_y00;
      flb_c01 = flb_y01;
      flb_c10 = 0.5 * (flb_y10 - flb_y_10);
      flb_c11 = 0.5 * (flb_y11 - flb_y_11);
      flb_c20 = flb_y_10 - 2.5 * flb_y00 + 2.0 * flb_y10 - 0.5 * flb_y20;
      flb_c21 = flb_y_11 - 2.5 * flb_y01 + 2.0 * flb_y11 - 0.5 * flb_y21;
      flb_c30 = 0.5 * (flb_y20 - flb_y_10) + 1.5 * (flb_y00 - flb_y10);
      flb_c31 = 0.5 * (flb_y21 - flb_y_11) + 1.5 * (flb_y01 - flb_y11);
      flb_output0 = ((flb_c30 * flb_x0 + flb_c20) * flb_x0 + flb_c10) * flb_x0 + flb_c00;
      flb_output1 = ((flb_c31 * flb_x1 + flb_c21) * flb_x1 + flb_c11) * flb_x1 + flb_c01;
      flb_buffer0[flb_counter] = h + flb_output0 * flb_feedback;
      flb_buffer1[flb_counter] = h + flb_output1 * flb_feedback;
      //spl0 = spl0 * (1-flb_mix) + flb_output0 * flb_mix;
      //spl1 = spl1 * (1-flb_mix) + flb_output1 * flb_mix;
      flb_counter += 1;
      (flb_counter >= flb_MAX_WG_DELAY) ? flb_counter = 0;
      
           //flb_rate = hspd*100000;
           //flb_trate = 4 * flb_depth / (srate / (flb_rate));//flb_rate); // flb_rate = speed in hz
           
           /*
           flb_dir0 ? flb_tdelay0 += flb_trate : flb_tdelay0 -= flb_trate;
           flb_dir1 ? flb_tdelay1 += flb_trate : flb_tdelay1 -= flb_trate;
           (flb_tdelay0 >= flb_delay + flb_depth) ? flb_dir0 = 0;
           (flb_tdelay1 >= flb_delay + flb_depth) ? flb_dir1 = 0;
           (flb_tdelay0 <= flb_delay - flb_depth) ? flb_dir0 = 1;
           (flb_tdelay1 <= flb_delay - flb_depth) ? flb_dir1 = 1;
           */
           
           flb_tdelay0 = flb_delay + (flb_delay-0.1) * horn_L_pos_trem*flb_depth; //sin(flb_tpos);
           flb_tdelay1 = flb_delay + (flb_delay-0.1) * horn_R_pos_trem*flb_depth;//sin(flb_tpos+oflb_ffset);
           //flb_tpos += flb_trate;
           //(flb_tpos > twopi) ? flb_tpos = 0;
           
           
           flb_sdelay0 = flb_tdelay0 / 1000 * srate;
           flb_sdelay1 = flb_tdelay1 / 1000 * srate;
           
   );
   
   
   
   
   /////////////////////////////////////////////////////// FUNCTION CHORUS //////////////////////
   function chorus_do() (
   
   ch_depth = 2 + hspd*200000 *0.01*4; // 0.04 war mal der slider ... separat für horn und drum
   ch_depth_drum = 1 + lspd*200000 *0.04*4;
   ch_delay = 20;
   ch_mix = 1;
   
   width = ch_depth * 0.0001;
   
   (width == 0) ? (
   _sweepSamples = 0;
   ):(
   _sweepSamples = width * srate|0;
   );
   _maxSweepSamples = _sweepSamples;
   
   width_drum = ch_depth_drum * 0.0001;
   
   (width_drum == 0) ? (
   _sweepSamples_drum = 0;
   ):(
   _sweepSamples_drum = width_drum * srate|0;
   );
   _maxSweepSamples_drum = _sweepSamples_drum;
   
   
   inval1 = h;
   //inval2 = h;
   //inval3 = l;
   //inmix = inval + tanh(ch_hpf * 0.01 * _feedbackPhase * outval);
   
   inmix1 = inval1;// + tanh(ch_hpf * 0.01 * outval);
   //inmix2 = inval2;// + tanh(ch_hpf * 0.01 * outval2);
   
   //buf[_fp] = inmix;
   //_fp = (_fp + 1) & (BSZ-1);
   buf1[_fp] = inmix1;
   //buf2[_fp] = inmix2;
   
   _fp = (_fp + 1) % (BSZ-1);
   //_fp += 1;
   //_fp >= BSZ ? _fp = 0;
   
   
   
   
   // build the two emptying pointers and do linear interpolation
   //Samples = (ch_delay * srate * 0.0001) + 1;
   //Samples += _sweep;
   
   delaySamples = delaySamples_2 = delaySamples_3 = (ch_delay * srate * 0.0001) + 1;
   //delaySamples_2 = (ch_delay * srate * 0.0001) + 1;
   //delaySamples_3 = (ch_delay * srate * 0.0001) + 1;
   
   delaySamples += _sweepSamples * (horn_L_pos_CH);
   delaySamples_2 += _sweepSamples * (horn_R_pos_ch);
   //delaySamples_3 += _sweepSamples_drum * (drum_pos_ch);

   
   
   ep = _fp - delaySamples;
   (ep < 0) ? (
   ep += BSZ;
   );
   
   ep1 = ep|0;
   w2 = ep-ep1;
   
   ep1 &= (BSZ-1);
   ep2 = ep1 + 1;
   ep2 &= (BSZ-1);
   w1 = 1 - w2;
   outval = buf1[ep1] * w1 + buf1[ep2] * w2;
   
   
   ep_2 = _fp - delaySamples_2;
   (ep_2 < 0) ? (
   ep_2 += BSZ;
   );
   
   ep_2_1 = ep_2|0;
   w2_2 = ep_2-ep_2_1;
   
   ep_2_1 &= (BSZ-1);
   ep_2_2 = ep_2_1 + 1;
   ep_2_2 &= (BSZ-1);
   w1_2 = 1 - w2_2;
   outval2 = buf1[ep_2_1] * w1_2 + buf1[ep_2_2] * w2_2;
 
 

   
   /*
   ep_3 = _fp - delaySamples_3;
   (ep_3 < 0) ? (
   ep_3 += BSZ;
   );
   
   ep_3_1 = ep_3|0;
   w3_2 = ep_3-ep_3_1;
   
   ep_3_1 &= (BSZ-1);
   ep_3_2 = ep_3_1 + 1;
   ep_3_2 &= (BSZ-1);
   w1_3 = 1 - w2_3;
   outval3 = buf2[ep_3_1] * w1_3 + buf2[ep_3_2] * w2_3;
*/


/*
    filter_Amount ? (
      filter_Base = 100 - 30*filter_Amount;
      horn_L_Filter_Result = floor(Filter_Base + 30 * horn_L_pos_trem * Filter_Amount);
      horn_L_Filter_Result != horn_L_Filter_Result_old ? (
        horn_L_Filter_Result_old = horn_L_Filter_Result;
        L_Horn.band_set_filter(Leslie_filter_type, per_to_freq(min(horn_L_Filter_Result,100),100), Leslie_filter_gain, Leslie_filter_Q, Leslie_filter_Slope-2);
      );
      horn_R_Filter_Result = floor(Filter_Base + 30 * horn_R_pos_trem * Filter_Amount);
      horn_R_Filter_Result != horn_R_Filter_Result_old ? (
        horn_R_Filter_Result_old = horn_R_Filter_Result;
        R_Horn.band_set_filter(Leslie_filter_type, per_to_freq(min(horn_R_Filter_Result,100),100), Leslie_filter_gain, Leslie_filter_Q, Leslie_filter_Slope-2);
      );
    );
  */  
    
    
    
    
    
    
    

    
    
    
    
    /*
    Drum_Filter_Result = floor(freq_to_per(X_Over_Freq,100) + 20 * ((cos(lphi)+1)/2) * Filter_Amount);
    //Drum_Filter_Result = floor(20 + 80 * (cos(lphi)+1)/2);
    Drum_Filter_Result != Drum_Filter_Result_old ? (
    Drum_Filter_Result_old = Drum_Filter_Result;
    Drum.band_set_filter(Leslie_filter_type, per_to_freq(min(Drum_Filter_Result,100),100), Leslie_filter_gain, Leslie_filter_Q, Leslie_filter_Slope - 2);
    );
    */
    //L_Horn.filter._tick();
    //R_Horn.filter.svf_tick();
    //Drum.filter.svf_tick();
    
    
    //outval = L_Horn.filter.svf_svf0(Outval);
    //outval2 = R_Horn.filter.svf_svf0(Outval2);
    
    
    // Drum.filter.svf_svf0(outval3);
   
    
    //outval = outval2 = h;
    
   //ep_max = max(ep_max,ep);
   trem_speed_adj = hspd *10000;
   //trem_adj = 1;//-trem_speed_adj;
   //fparam5_ch_dry = 1-fparam5 + fparam5*trem_speed_adj;
   //fparam5_ch_wet = fparam5 - fparam5*trem_speed_adj;
   //spl0 *= abs(horn_L_pos-0.5)*2;
   //spl1 *= abs(horn_R_pos-0.5)*2;
   drum_level = 1-fparam2 + fparam2*(((cos(lphi)+1)/2)^2) + fparam2*(((-cos(lphi)+1)/2.5))^3;//fparam2;
   //drum_level = 1;
   
   //wall_volume ? (
   flange_horn(); //flb_output0 = flb_output0 = h;
   //outval = outval2 = h;
   spl0 = l*drum_level + trem_speed_adj*flb_output0 + (1-fparam5 + fparam5*horn_L_pos_trem^2)*outval;//outval;// + fparam5*1*wall_outval * (wall_volume*1);//(wall_horn_L_pos_trem)); //(cos(hphi + mic_angle_rad/2)+1)/2);
   spl1 = l*drum_level + trem_speed_adj*flb_output1 + (1-fparam5 + fparam5*horn_R_pos_trem^2)*outval2;//outval2;// + fparam5*1*wall_outval2 * (wall_volume*1);//*(wall_horn_R_pos_trem)); //(cos(hphi - mic_angle_rad/2)+1)/2);
   //):(
   //spl0 = l * drum_level + 1*outval * (1-fparam5 + fparam5*horn_L_pos_trem); //(cos(hphi + mic_angle_rad/2)+1)/2);
   //spl1 = l * drum_level  + 1*outval2 * (1-fparam5 + fparam5*horn_R_pos_trem); //(cos(hphi - mic_angle_rad/2)+1)/2);
   //);
   
   
   //spl0 = (1-ch_mix) * spl0 + ch_mix * outval3;
   //spl1 = (1-ch_mix) * spl1 + ch_mix * outval3;
   
   
   );
   /////////////////////////////////////////////////////// ENDE FUNCTION CHORUS //////////////////////
   
   function scanner_do () (
   
   scanner1_ch_delay = 15;
   scanner1_delaySamples = scanner1_ch_delay * srate/1000;
   scanner1_ch_mix = 1;
   
   scanner1_width = scanner1_ch_depth * 0.0001;
   
   (scanner1_width == 0) ? (
   scanner1__sweepSamples = 0;
   ):(
   scanner1__sweepSamples = scanner1_width * srate|0;
   );
   scanner1__maxSweepSamples = scanner1__sweepSamples;
   
   buf3[scanner1_fp] = (spl0 + spl1)/2;
   scanner1_fp += 1;//(scanner1_fp + 1) % (BSZ-1);
   scanner1_fp = floor(scanner1_fp) % BSZ;
   
   
   
   //14  
   scanner_step = (14*$pi) / srate;
   scanner_pos += scanner_step;
   scanner_pos >= twopi ? scanner_pos -= twopi;
   
   
    scanner1_delaySamples += scanner1__sweepSamples * (sin(scanner_pos));
    
   scanner1_ep = scanner1_fp - scanner1_delaySamples;
   (scanner1_ep < 0) ? (
   scanner1_ep += BSZ;
   );
   
   scanner1_ep1 = scanner1_ep|0;
   scanner1_w2 = scanner1_ep-scanner1_ep1;
   
   scanner1_ep1 &= (BSZ-1);
   scanner1_ep2 = scanner1_ep1 + 1;
   scanner1_ep2 &= (BSZ-1);
   scanner1_w1 = 1 -scanner1_w2;
   scanner1_outval = buf3[scanner1_ep1] * scanner1_w1 + buf3[scanner1_ep2] * scanner1_w2;
   
   
   
   /*
   scanner_chorus ? (
   scanner1_delaySamples = scanner1_ch_delay * srate/1000;
    scanner1_delaySamples += scanner1__sweepSamples * (sin(scanner_pos+twopi/3));
    
   scanner1_ep = scanner1_fp - scanner1_delaySamples;
   (scanner1_ep < 0) ? (
   scanner1_ep += BSZ;
   );
   
   scanner1_ep1 = scanner1_ep|0;
   scanner1_w2 = scanner1_ep-scanner1_ep1;
   
   scanner1_ep1 &= (BSZ-1);
   scanner1_ep2 = scanner1_ep1 + 1;
   scanner1_ep2 &= (BSZ-1);
   scanner1_w1 = 1 -scanner1_w2;
   scanner1_outval2 = buf3[scanner1_ep1] * scanner1_w1 + buf3[scanner1_ep2] * scanner1_w2;
   
   
   scanner1_delaySamples = scanner1_ch_delay * srate/1000;
    scanner1_delaySamples += scanner1__sweepSamples * (sin(scanner_pos+2*twopi/3));
    
   scanner1_ep = scanner1_fp - scanner1_delaySamples;
   (scanner1_ep < 0) ? (
   scanner1_ep += BSZ;
   );
   
   scanner1_ep1 = scanner1_ep|0;
   scanner1_w2 = scanner1_ep-scanner1_ep1;
   
   scanner1_ep1 &= (BSZ-1);
   scanner1_ep2 = scanner1_ep1 + 1;
   scanner1_ep2 &= (BSZ-1);
   scanner1_w1 = 1 -scanner1_w2;
   scanner1_outval3 = buf3[scanner1_ep1] * scanner1_w1 + buf3[scanner1_ep2] * scanner1_w2;
   ):(
   scanner1_outva2=scanner1_outval3=0;
   );
   */
   
   scanner_mode ? (
   scanner_chorus == 1 ? (
   spl0 = spl1 = (spl0 + scanner1_outval)/2;
   ):(
   spl0 = spl1 = scanner1_outval;
   );
   );

   
   );
   
   function drive_tanh(x) (
   x = exp(2*x);
   (x - 1) / (x + 1);
   );
   
   function reload_IR() (
   
   need_refft ? (  // prepare convolution source, here...
     useresample && srate > impbuf_srate && impbuf_srate > 1 ? 
     (
       filtersize = ((srate*impbuf_l)/impbuf_srate)|0;
       filtersize > 16384 ? (
         filtersize = 16384;
         impbuf_l = ((filtersize * impbuf_srate) / srate)|0;
       );
       isc=impbuf_srate/srate;
     )
     : 
     (
       impbuf_l > 16384 ? impbuf_l = 16384;
       filtersize=impbuf_l;
       isc=1.0;
     );
   
     fftsize=32;
   
     while(
       filtersize > fftsize*0.5 ? 
       (
         fftsize += fftsize;
       ) : 0;
     );
   
     chunksize=fftsize-filtersize-1; // size of chunk size of audio to use
     chunksize2=chunksize*2;
     bpos=0; 
     curblock=0;
     lastblock=64*1024;
     invfsize=1/fftsize;
     pre_sum = post_sum = i = 0;
     loop(impbuf_l,
       pre_sum += impbuf[i];
       stereo_mode == 0 ? pre_sum += impbuf[i + impbuf_nch - 1];
       i+=impbuf_nch;
     );
     i=0;
     i2=0;
     loop(min(fftsize,filtersize),
        ipos=i|0;
        ipart=(i-ipos);
        convsrc[i2]=impbuf[ipos*impbuf_nch]*(1-ipart) + impbuf[(ipos+1)*impbuf_nch]*ipart;
        convsrc[i2+1]=stereo_mode ? 0.0 : (impbuf[(ipos+1)*impbuf_nch-1]*(1-ipart) +
                                           impbuf[(ipos+2)*impbuf_nch-1]*(ipart));
        post_sum += convsrc[i2] + convsrc[i2+1];
        i += isc;
        i2+=2;
     );
     loop(fftsize-filtersize,
        convsrc[i2]=convsrc[i2+1]=0;
        i2+=2;
     );
     isc != 1 && useresample>=2 && abs(post_sum) > 0.0001*fftsize*(stereo_mode?1:2) &&
         abs(pre_sum) > 0.0001*impbuf_l*(stereo_mode?1:2) ? (
       invfsize *= abs(pre_sum / post_sum);
     );
     fft(convsrc,fftsize);
     i=0;
     loop(fftsize*2, convsrc[i] *= invfsize; i+=1; );
     need_refft=0;
   );
   
   );
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ///////////////////////////////////////////////////////////////// ENDE LESLIE STUFF //////////////////////////////////////////////////////////////////////////////////
   
   
   
   
   
   
function load_preset () (
      drawbar1 = this.db1;
      drawbar2 = this.db2;
      drawbar3 = this.db3;
      drawbar4 = this.db4;
      drawbar5 = this.db5;
      drawbar6 = this.db6;
      drawbar7 = this.db7;
      drawbar8 = this.db8;
      drawbar9 = this.db9;
);
   
   
   
   
function drawbars () (

slider52 == 0 ? (
      drawbar1 = slider2;
      drawbar2 = slider3;
      drawbar3 = slider4;
      drawbar4 = slider5;
      drawbar5 = slider6;
      drawbar6 = slider7;
      drawbar7 = slider8;
      drawbar8 = slider9;
      drawbar9 = slider10;
): slider52 == 1 ? (
      p1.load_preset();
): slider52 == 2 ? (
      p2.load_preset();
): slider52 == 3 ? (
      p3.load_preset();
): slider52 == 4 ? (
      p4.load_preset();
): slider52 == 5 ? (
      p5.load_preset();
): slider52 == 6 ? (
      p6.load_preset();
): slider52 == 7 ? (
      p7.load_preset();
): slider52 == 8 ? (
      p8.load_preset();
): slider52 == 9 ? (
      p9.load_preset();
);

osc1.subosc_1.want_render_waveform = 1;
osc1.subosc_2.want_render_waveform = 1;
osc1.subosc_3.want_render_waveform = 1;
osc1.subosc_4.want_render_waveform = 1;
osc1.subosc_5.want_render_waveform = 1;
osc1.subosc_6.want_render_waveform = 1;
osc1.subosc_7.want_render_waveform = 1;
osc1.subosc_8.want_render_waveform = 1;
osc1.subosc_9.want_render_waveform = 1;
osc1.subosc_10.want_render_waveform = 1;
osc1.subosc_11.want_render_waveform = 1;
osc1.subosc_12.want_render_waveform = 1;

osc2.subosc_1.want_render_waveform = 1;
osc2.subosc_2.want_render_waveform = 1;
osc2.subosc_3.want_render_waveform = 1;
osc2.subosc_4.want_render_waveform = 1;
osc2.subosc_5.want_render_waveform = 1;
osc2.subosc_6.want_render_waveform = 1;
osc2.subosc_7.want_render_waveform = 1;
osc2.subosc_8.want_render_waveform = 1;
osc2.subosc_9.want_render_waveform = 1;
osc2.subosc_10.want_render_waveform = 1;
osc2.subosc_11.want_render_waveform = 1;
osc2.subosc_12.want_render_waveform = 1;

osc2.subosc_1.want_update = 1;
osc2.subosc_2.want_update = 1;
osc2.subosc_3.want_update = 1;
osc2.subosc_4.want_update = 1;
osc2.subosc_5.want_update = 1;
osc2.subosc_6.want_update = 1;
osc2.subosc_7.want_update = 1;
osc2.subosc_8.want_update = 1;
osc2.subosc_9.want_update = 1;
osc2.subosc_10.want_update = 1;
osc2.subosc_11.want_update = 1;
osc2.subosc_12.want_update = 1;

osc1.subosc_1.want_update = 1;
osc1.subosc_2.want_update = 1;
osc1.subosc_3.want_update = 1;
osc1.subosc_4.want_update = 1;
osc1.subosc_5.want_update = 1;
osc1.subosc_6.want_update = 1;
osc1.subosc_7.want_update = 1;
osc1.subosc_8.want_update = 1;
osc1.subosc_9.want_update = 1;
osc1.subosc_10.want_update = 1;
osc1.subosc_11.want_update = 1;
osc1.subosc_12.want_update = 1;
);
   
   
   
   
   
   
   
   
function parameters_update() (

parameters_update_on = 1;



softclip_on = 1;

note_glide = explog(0,4)*5 *1000;;//slider2; //Global glide in ms
main_tuning = 110;//slider1 / 2;
MonoOrPoly = 0; // 1 = Mono, 0 = Poly
monoOrPoly_old != MonoOrPoly ? (
Synth.subosc_1.note_distance = 0;
Synth.subosc_1.note_running = 0;
Synth.subosc_1.note_target = 0;
synth.mono_note_1_old = 0;
synth.mono_note_last = 0;
synth.mono_note_last_old = 0;
synth.mono_note_1 = synth.mono_note_2 = synth.mono_note_3 = synth.mono_note_4 = synth.mono_note_5 = synth.mono_note_6 = 
synth.mono_note_7 = synth.mono_note_8 = synth.mono_note_9 = synth.mono_note_10 = synth.mono_note_11 = synth.mono_note_12 = 0;
synth.subosc_1.note = 0;
synth.subosc_2.note = 0;
synth.subosc_3.note = 0;
synth.subosc_4.note = 0;
synth.subosc_5.note = 0;
synth.subosc_6.note = 0;
synth.subosc_7.note = 0;
synth.subosc_8.note = 0;
synth.subosc_9.note = 0;
synth.subosc_10.note = 0;
synth.subosc_11.note = 0;
synth.subosc_12.note = 0;
synth.subosc_1.note_running = 0;
synth.subosc_2.note_running = 0;
synth.subosc_3.note_running = 0;
synth.subosc_4.note_running = 0;
synth.subosc_5.note_running = 0;
synth.subosc_6.note_running = 0;
synth.subosc_7.note_running = 0;
synth.subosc_8.note_running = 0;
synth.subosc_9.note_running = 0;
synth.subosc_10.note_running = 0;
synth.subosc_11.note_running = 0;
synth.subosc_12.note_running = 0;
synth.subosc_1.on = 0;
synth.subosc_2.on = 0;
synth.subosc_3.on = 0;
synth.subosc_4.on = 0;
synth.subosc_5.on = 0;
synth.subosc_6.on = 0;
synth.subosc_7.on = 0;
synth.subosc_8.on = 0;
synth.subosc_9.on = 0;
synth.subosc_10.on = 0;
synth.subosc_11.on = 0;
synth.subosc_12.on = 0;
osc1.subosc_1.note = 0;
osc1.subosc_2.note = 0;
osc1.subosc_3.note = 0;
osc1.subosc_4.note = 0;
osc1.subosc_5.note = 0;
osc1.subosc_6.note = 0;
osc1.subosc_7.note = 0;
osc1.subosc_8.note = 0;
osc1.subosc_9.note = 0;
osc1.subosc_10.note = 0;
osc1.subosc_11.note = 0;
osc1.subosc_12.note = 0;
osc1.subosc_1.note_running = 0;
osc1.subosc_2.note_running = 0;
osc1.subosc_3.note_running = 0;
osc1.subosc_4.note_running = 0;
osc1.subosc_5.note_running = 0;
osc1.subosc_6.note_running = 0;
osc1.subosc_7.note_running = 0;
osc1.subosc_8.note_running = 0;
osc1.subosc_9.note_running = 0;
osc1.subosc_10.note_running = 0;
osc1.subosc_11.note_running = 0;
osc1.subosc_12.note_running = 0;
osc1.subosc_1.on = 0;
osc1.subosc_2.on = 0;
osc1.subosc_3.on = 0;
osc1.subosc_4.on = 0;
osc1.subosc_5.on = 0;
osc1.subosc_6.on = 0;
osc1.subosc_7.on = 0;
osc1.subosc_8.on = 0;
osc1.subosc_9.on = 0;
osc1.subosc_10.on = 0;
osc1.subosc_11.on = 0;
osc1.subosc_12.on = 0;
osc2.subosc_1.note = 0;
osc2.subosc_2.note = 0;
osc2.subosc_3.note = 0;
osc2.subosc_4.note = 0;
osc2.subosc_5.note = 0;
osc2.subosc_6.note = 0;
osc2.subosc_7.note = 0;
osc2.subosc_8.note = 0;
osc2.subosc_9.note = 0;
osc2.subosc_10.note = 0;
osc2.subosc_11.note = 0;
osc2.subosc_12.note = 0;
osc2.subosc_1.note_running = 0;
osc2.subosc_2.note_running = 0;
osc2.subosc_3.note_running = 0;
osc2.subosc_4.note_running = 0;
osc2.subosc_5.note_running = 0;
osc2.subosc_6.note_running = 0;
osc2.subosc_7.note_running = 0;
osc2.subosc_8.note_running = 0;
osc2.subosc_9.note_running = 0;
osc2.subosc_10.note_running = 0;
osc2.subosc_11.note_running = 0;
osc2.subosc_12.note_running = 0;
osc2.subosc_1.on = 0;
osc2.subosc_2.on = 0;
osc2.subosc_3.on = 0;
osc2.subosc_4.on = 0;
osc2.subosc_5.on = 0;
osc2.subosc_6.on = 0;
osc2.subosc_7.on = 0;
osc2.subosc_8.on = 0;
osc2.subosc_9.on = 0;
osc2.subosc_10.on = 0;
osc2.subosc_11.on = 0;
osc2.subosc_12.on = 0;
monoOrPoly_old = MonoOrPoly;
);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
osc1.startslider = 4;

osc1.level = 1.4;

/*
osc1.sine_level = slider(Osc1.startslider + 1)/10;
osc1.sine_octave = slider(Osc1.startslider + 2);
osc1.sine_mod = slider(Osc1.startslider + 3); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.sine_mod == 1 ? (osc1.sine_coef = slider(osc1.startslider + 4) == 0 ? 0.05 : abs(slider(osc1.startslider + 4))*1.5):(osc1.sine_coef = slider(osc1.startslider + 4) < 0 ? 1/(abs(slider(osc1.startslider + 4)-1)) : slider(osc1.startslider + 4) + 1);

osc1.triangle_level = slider(Osc1.startslider + 5)/10;
osc1.triangle_octave = slider(Osc1.startslider + 6);
osc1.triangle_mod = slider(Osc1.startslider + 7); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.triangle_mod == 1 ? (osc1.triangle_coef = slider(osc1.startslider + 8) == 0 ? 0.05 : abs(slider(osc1.startslider + 8))*1.5):(osc1.triangle_coef = slider(osc1.startslider + 8) < 0 ? 1/(abs(slider(osc1.startslider + 8)-1)) : slider(osc1.startslider + 8) + 1);

osc1.saw_level = slider(Osc1.startslider + 9)/10;
osc1.saw_octave = slider(Osc1.startslider + 10);
osc1.saw_mod = slider(Osc1.startslider + 11); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.saw_mod == 1 ? (osc1.saw_coef = slider(osc1.startslider + 12) == 0 ? 0.05 : abs(slider(osc1.startslider + 12))*1.5):(osc1.saw_coef = slider(osc1.startslider + 12) < 0 ? 1/(abs(slider(osc1.startslider + 12)-1)) : slider(osc1.startslider + 12) + 1);

osc1.saw_alt_level = slider(Osc1.startslider + 13)/10;
osc1.saw_alt_octave = slider(Osc1.startslider + 14);
osc1.saw_alt_mod = slider(Osc1.startslider + 15); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.saw_alt_mod == 1 ? (osc1.saw_alt_coef = slider(osc1.startslider + 16) == 0 ? 0.05 : abs(slider(osc1.startslider + 16))*1.5):(osc1.saw_alt_coef = slider(osc1.startslider + 16) < 0 ? 1/(abs(slider(osc1.startslider + 16)-1)) : slider(osc1.startslider + 16) + 1);

osc1.pulse_level = slider(Osc1.startslider + 17)/10;
osc1.pulse_octave = slider(Osc1.startslider + 18);
osc1.pwm = 2*slider(Osc1.startslider + 19)/10;
*/
osc1.transpose = osc1.transpose_running = -12;
osc1.finetune = osc1.finetune_running = 0;

osc1.pitchamount = 0;

osc1.pan = osc1.pan.running = 0;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
osc2.startslider = 28;


/*
osc2.sine_level = slider(osc2.startslider + 1)/10;
osc2.sine_octave = slider(osc2.startslider + 2);
osc2.sine_mod = slider(osc2.startslider + 3); // 0 Linear, 1 sigma, 2 ExpLog
osc2.sine_mod == 1 ? (osc2.sine_coef = slider(osc2.startslider + 4) == 0 ? 0.05 : abs(slider(osc2.startslider + 4))*1.5):(osc2.sine_coef = slider(osc2.startslider + 4) < 0 ? 1/(abs(slider(osc2.startslider + 4)-1)) : slider(osc2.startslider + 4) + 1);

osc2.triangle_level = slider(osc2.startslider + 5)/10;
osc2.triangle_octave = slider(osc2.startslider + 6);
osc2.triangle_mod = slider(osc2.startslider + 7); // 0 Linear, 1 sigma, 2 ExpLog
osc2.triangle_mod == 1 ? (osc2.triangle_coef = slider(osc2.startslider + 8) == 0 ? 0.05 : abs(slider(osc2.startslider + 8))*1.5):(osc2.triangle_coef = slider(osc2.startslider + 8) < 0 ? 1/(abs(slider(osc2.startslider + 8)-1)) : slider(osc2.startslider + 8) + 1);

osc2.saw_level = slider(osc2.startslider + 9)/10;
osc2.saw_octave = slider(osc2.startslider + 10);
osc2.saw_mod = slider(osc2.startslider + 11); // 0 Linear, 1 sigma, 2 ExpLog
osc2.saw_mod == 1 ? (osc2.saw_coef = slider(osc2.startslider + 12) == 0 ? 0.05 : abs(slider(osc2.startslider + 12))*1.5):(osc2.saw_coef = slider(osc2.startslider + 12) < 0 ? 1/(abs(slider(osc2.startslider + 12)-1)) : slider(osc2.startslider + 12) + 1);

osc2.saw_alt_level = slider(osc2.startslider + 13)/10;
osc2.saw_alt_octave = slider(osc2.startslider + 14);
osc2.saw_alt_mod = slider(osc2.startslider + 15); // 0 Linear, 1 sigma, 2 ExpLog
osc2.saw_alt_mod == 1 ? (osc2.saw_alt_coef = slider(osc2.startslider + 16) == 0 ? 0.05 : abs(slider(osc2.startslider + 16))*1.5):(osc2.saw_alt_coef = slider(osc2.startslider + 16) < 0 ? 1/(abs(slider(osc2.startslider + 16)-1)) : slider(osc2.startslider + 16) + 1);

osc2.pulse_level = slider(osc2.startslider + 17)/10;
osc2.pulse_octave = slider(osc2.startslider + 18);
osc2.pwm = 2*slider(osc2.startslider + 19)/10;
*/

osc2.transpose = osc2.transpose_running = -12;
osc2.finetune = osc2.finetune_running = 0;

osc2.pitchamount = 0;
osc2.sync = 0;
osc2.sync == 2 ? osc2.pitchamount = 0;
osc2.sync == 3 ? osc1.pitchamount = 0;
osc2.sync ? osc2.sync_to = 1 : osc2.sync_to = 0;

osc2.pan = osc2.pan.running = 0;


/*
*/
///////////////////////////////////////////////////////////////////////////////////////////////////////////////



Env1.startslider = 53;
env1.attack = 2 * srate/1000;
env1.decay = 0;
env1.breakpoint = 1;
env1.decay2 = 0;
env1.sustain = 1;
env1.release = 4 *srate/1000;

env1.at_shape = 0;
env1.at_shape == 1 ? (env1.at_coef = osc1.at_coef == 0 ? 0.05 : abs(osc1.at_coef)*1.5):(env1.at_coef = osc1.at_coef < 0 ? 1/(abs(osc1.at_coef-1)) : osc1.at_coef + 1);
env1.dec1_shape = 0;
env1.dec1_shape == 1 ? (env1.dec1_coef = osc1.dec1_coef == 0 ? 0.05 : abs(osc1.dec1_coef)*1.5):(env1.dec1_coef = osc1.dec1_coef < 0 ? 1/(abs(osc1.dec1_coef-1)) : osc1.dec1_coef + 1);
env1.dec2_shape = 0;
env1.dec2_shape == 1 ? (env1.dec2_coef = osc1.dec2_coef == 0 ? 0.05 : abs(osc1.dec2_coef)*1.5):(env1.dec2_coef = osc1.dec2_coef < 0 ? 1/(abs(osc1.dec2_coef-1)) : osc1.dec2_coef + 1);
env1.rel_shape = 0;
env1.rel_shape == 1 ? (env1.rel_coef = osc1.rel_coef == 0 ? 0.05 : abs(osc1.rel_coef)*1.5):(env1.rel_coef = osc1.rel_coef < 0 ? 1/(abs(osc1.rel_coef-1)) : osc1.rel_coef + 1);

Env2.startslider = 59;
Env2.attack = 2 * srate/1000;
Env2.decay = (900*slider13 + 390) * srate/1000;
Env2.breakpoint = 0;
Env2.decay2 = 0;
Env2.sustain = 0;
Env2.release = 14 * srate/1000;

Env2.at_shape = osc2.at_shape;
Env2.at_shape == 1 ? (Env2.at_coef = osc2.at_coef == 0 ? 0.05 : abs(osc2.at_coef)*1.5):(Env2.at_coef = osc2.at_coef < 0 ? 1/(abs(osc2.at_coef-1)) : osc2.at_coef + 1);
Env2.dec1_shape = 2;//osc2.dec1_shape;
osc2.dec1_coef = 2.8;
Env2.dec1_shape == 1 ? (Env2.dec1_coef = osc2.dec1_coef == 0 ? 0.05 : abs(osc2.dec1_coef)*1.5):(Env2.dec1_coef = osc2.dec1_coef < 0 ? 1/(abs(osc2.dec1_coef-1)) : osc2.dec1_coef + 1);
Env2.dec2_shape = osc2.dec2_shape = 0;
Env2.dec2_shape == 1 ? (Env2.dec2_coef = osc2.dec2_coef == 0 ? 0.05 : abs(osc2.dec2_coef)*1.5):(Env2.dec2_coef = osc2.dec2_coef < 0 ? 1/(abs(osc2.dec2_coef-1)) : osc2.dec2_coef + 1);
Env2.rel_shape = osc2.rel_shape = 2;
osc2.rel_coef = 2.8;
Env2.rel_shape == 1 ? (Env2.rel_coef = osc2.rel_coef == 0 ? 0.05 : abs(osc2.rel_coef)*1.5):(Env2.rel_coef = osc2.rel_coef < 0 ? 1/(abs(osc2.rel_coef-1)) : osc2.rel_coef + 1);




synth.filter.startslider = 65;
synth.filter_f = 100;
synth.filter_q = synth.filter_q.running = 0.707;// + explog(slider(synth.filter.startslider+1)/10, 3)*10;
//slider(synth.filter.startslider+2) == 0 ? 
synth.filter_slope = 3;
//slider(synth.filter.startslider+2) == 1 ? synth.filter_slope = 3:
//slider(synth.filter.startslider+2) == 2 ? synth.filter_slope = 6;
//slider(synth.filter.startslider+3) == 0 ? synth.filter_type = 8 : synth.filter_type = 5;
synth.keyfollow = 0;//slider(synth.filter.startslider+4);
synth.pitchamount = synth.pitchamount.running = 0;//osc1.pitchamount;

//gfx_filter.band_set_filter(synth.filter_type, per_to_freq(min(synth.filter_f,100),100), 0, synth.filter_q.running, synth.filter_slope);
//gfx_filter.filter.svf_set_to_target();

synth.VCF_ENV = 0;//slider(synth.filter.startslider+6);
VCF_ON = 1;//slider(synth.filter.startslider+5);

env5.startslider = 72;
env5.attack = 0;//slider(env5.startslider) * srate/1000;
env5.decay = 0;//slider(env5.startslider+1) * srate/1000;
env5.breakpoint = 0;//slider(env5.startslider+2) /10;
env5.decay2 = 0;//slider(env5.startslider+3) * srate/1000;
env5.sustain = 0;//slider(env5.startslider+4) / 10;
env5.release = 0;//slider(env5.startslider+5) * srate/1000;

env5.at_shape = synth.filter.at_shape;
env5.at_shape == 1 ? (env5.at_coef = synth.filter.at_coef == 0 ? 0.05 : abs(synth.filter.at_coef)*1.5):(env5.at_coef = synth.filter.at_coef < 0 ? 1/(abs(synth.filter.at_coef-1)) : synth.filter.at_coef + 1);
env5.dec1_shape = synth.filter.dec1_shape;
env5.dec1_shape == 1 ? (env5.dec1_coef = synth.filter.dec1_coef == 0 ? 0.05 : abs(synth.filter.dec1_coef)*1.5):(env5.dec1_coef = synth.filter.dec1_coef < 0 ? 1/(abs(synth.filter.dec1_coef-1)) : synth.filter.dec1_coef + 1);
env5.dec2_shape = synth.filter.dec2_shape;
env5.dec2_shape == 1 ? (env5.dec2_coef = synth.filter.dec2_coef == 0 ? 0.05 : abs(synth.filter.dec2_coef)*1.5):(env5.dec2_coef = synth.filter.dec2_coef < 0 ? 1/(abs(synth.filter.dec2_coef-1)) : synth.filter.dec2_coef + 1);
env5.rel_shape = synth.filter.rel_shape;
env5.rel_shape == 1 ? (env5.rel_coef = synth.filter.rel_coef == 0 ? 0.05 : abs(synth.filter.rel_coef)*1.5):(env5.rel_coef = synth.filter.rel_coef < 0 ? 1/(abs(synth.filter.rel_coef-1)) : synth.filter.rel_coef + 1);


/*
   LFO_1.startslider = 78;
   LFO_1.LFO_sliders();
   LFO_2.startslider = 84;
   LFO_2.LFO_sliders();
   LFO_3.startslider = 90;
   LFO_3.LFO_sliders();
   LFO_4.startslider = 96;
   LFO_4.LFO_sliders();
   
   LFO_1.delay == -1 ? (LFO_1.delay_sams = (240/tempo) * srate):
   LFO_1.delay == -2 ? (LFO_1.delay_sams = (240/tempo) * srate/2):
   LFO_1.delay == -3 ? (LFO_1.delay_sams = (240/tempo) * srate/4):
   LFO_1.delay == -4 ? (LFO_1.delay_sams = (240/tempo) * srate/8):
   LFO_1.delay == -5 ? (LFO_1.delay_sams = (240/tempo) * srate/16):
   LFO_1.delay_sams = LFO_1.delay * (srate/1000);
    
   LFO_2.delay == -1 ? (LFO_2.delay_sams = (240/tempo) * srate):
   LFO_2.delay == -2 ? (LFO_2.delay_sams = (240/tempo) * srate/2):
   LFO_2.delay == -3 ? (LFO_2.delay_sams = (240/tempo) * srate/4):
   LFO_2.delay == -4 ? (LFO_2.delay_sams = (240/tempo) * srate/8):
   LFO_2.delay == -5 ? (LFO_2.delay_sams = (240/tempo) * srate/16):
   LFO_2.delay_sams = LFO_2.delay * (srate/1000);
   
   LFO_1.attack == -1 ? (LFO_1.attack_sams = (240/tempo) * srate):
   LFO_1.attack == -2 ? (LFO_1.attack_sams = (240/tempo) * srate/2):
   LFO_1.attack == -3 ? (LFO_1.attack_sams = (240/tempo) * srate/4):
   LFO_1.attack == -4 ? (LFO_1.attack_sams = (240/tempo) * srate/8):
   LFO_1.attack == -5 ? (LFO_1.attack_sams = (240/tempo) * srate/16):
   LFO_1.attack_sams = LFO_1.attack * (srate/1000);
    
   LFO_2.attack == -1 ? (LFO_2.attack_sams = (240/tempo) * srate):
   LFO_2.attack == -2 ? (LFO_2.attack_sams = (240/tempo) * srate/2):
   LFO_2.attack == -3 ? (LFO_2.attack_sams = (240/tempo) * srate/4):
   LFO_2.attack == -4 ? (LFO_2.attack_sams = (240/tempo) * srate/8):
   LFO_2.attack == -5 ? (LFO_2.attack_sams = (240/tempo) * srate/16):
   LFO_2.attack_sams = LFO_2.attack * (srate/1000);
   
   LFO_3.delay == -1 ? (LFO_3.delay_sams = (240/tempo) * srate):
   LFO_3.delay == -2 ? (LFO_3.delay_sams = (240/tempo) * srate/2):
   LFO_3.delay == -3 ? (LFO_3.delay_sams = (240/tempo) * srate/4):
   LFO_3.delay == -4 ? (LFO_3.delay_sams = (240/tempo) * srate/8):
   LFO_3.delay == -5 ? (LFO_3.delay_sams = (240/tempo) * srate/16):
   LFO_3.delay_sams = LFO_3.delay * (srate/1000);
    
   LFO_4.delay == -1 ? (LFO_4.delay_sams = (240/tempo) * srate):
   LFO_4.delay == -2 ? (LFO_4.delay_sams = (240/tempo) * srate/2):
   LFO_4.delay == -3 ? (LFO_4.delay_sams = (240/tempo) * srate/4):
   LFO_4.delay == -4 ? (LFO_4.delay_sams = (240/tempo) * srate/8):
   LFO_4.delay == -5 ? (LFO_4.delay_sams = (240/tempo) * srate/16):
   LFO_4.delay_sams = LFO_4.delay * (srate/1000);
   
   LFO_3.attack == -1 ? (LFO_3.attack_sams = (240/tempo) * srate):
   LFO_3.attack == -2 ? (LFO_3.attack_sams = (240/tempo) * srate/2):
   LFO_3.attack == -3 ? (LFO_3.attack_sams = (240/tempo) * srate/4):
   LFO_3.attack == -4 ? (LFO_3.attack_sams = (240/tempo) * srate/8):
   LFO_3.attack == -5 ? (LFO_3.attack_sams = (240/tempo) * srate/16):
   LFO_3.attack_sams = LFO_3.attack * (srate/1000);
    
   LFO_4.attack == -1 ? (LFO_4.attack_sams = (240/tempo) * srate):
   LFO_4.attack == -2 ? (LFO_4.attack_sams = (240/tempo) * srate/2):
   LFO_4.attack == -3 ? (LFO_4.attack_sams = (240/tempo) * srate/4):
   LFO_4.attack == -4 ? (LFO_4.attack_sams = (240/tempo) * srate/8):
   LFO_4.attack == -5 ? (LFO_4.attack_sams = (240/tempo) * srate/16):
   LFO_4.attack_sams = LFO_4.attack * (srate/1000);
   
   
  
   
   
   osc1.level.LFO_1.controller && osc1.level.LFO_1.modamount ? osc1.level.LFO_1.wantmod = 1 : osc1.level.LFO_1.wantmod = 0;
   osc1.pan.LFO_1.controller && osc1.pan.LFO_1.modamount ? osc1.pan.LFO_1.wantmod = 1 : osc1.pan.LFO_1.wantmod = 0;
   osc1.transpose.LFO_1.controller && osc1.transpose.LFO_1.modamount ? osc1.transpose.LFO_1.wantmod = 1 : osc1.transpose.LFO_1.wantmod = 0;
   osc1.finetune.LFO_1.controller && osc1.finetune.LFO_1.modamount ? osc1.finetune.LFO_1.wantmod = 1 : osc1.finetune.LFO_1.wantmod = 0;
   osc1.pwm.LFO_1.controller && osc1.pwm.LFO_1.modamount ? osc1.pwm.LFO_1.wantmod = 1 : osc1.pwm.LFO_1.wantmod = 0;
   osc2.level.LFO_1.controller && osc2.level.LFO_1.modamount ? osc2.level.LFO_1.wantmod = 1 : osc2.level.LFO_1.wantmod = 0;
   osc2.pan.LFO_1.controller && osc2.pan.LFO_1.modamount ? osc2.pan.LFO_1.wantmod = 1 : osc2.pan.LFO_1.wantmod = 0;
   osc2.transpose.LFO_1.controller && osc2.transpose.LFO_1.modamount ? osc2.transpose.LFO_1.wantmod = 1 : osc2.transpose.LFO_1.wantmod = 0;
   osc2.finetune.LFO_1.controller && osc2.finetune.LFO_1.modamount ? osc2.finetune.LFO_1.wantmod = 1 : osc2.finetune.LFO_1.wantmod = 0;
   osc2.pwm.LFO_1.controller && osc2.pwm.LFO_1.modamount ? osc2.pwm.LFO_1.wantmod = 1 : osc2.pwm.LFO_1.wantmod = 0;
   NG.level.LFO_1.controller && NG.level.LFO_1.modamount ? NG.level.LFO_1.wantmod = 1 : NG.level.LFO_1.wantmod = 0;
   NG.pan.LFO_1.controller && NG.pan.LFO_1.modamount ? NG.pan.LFO_1.wantmod = 1 : NG.pan.LFO_1.wantmod = 0;
   NG.filter_f.LFO_1.controller && NG.filter_f.LFO_1.modamount ? NG.filter_f.LFO_1.wantmod = 1 : NG.filter_f.LFO_1.wantmod = 0;
   synth.filter_f.LFO_1.controller && synth.filter_f.LFO_1.modamount ? synth.filter_f.LFO_1.wantmod = 1 : synth.filter_f.LFO_1.wantmod = 0;
   osc1.level.LFO_1.wantmod || osc1.pan.LFO_1.wantmod || osc1.transpose.LFO_1.wantmod || osc1.finetune.LFO_1.wantmod || osc1.pwm.LFO_1.wantmod || osc2.level.LFO_1.wantmod || osc2.pan.LFO_1.wantmod || osc2.transpose.LFO_1.wantmod || osc2.finetune.LFO_1.wantmod || osc2.pwm.LFO_1.wantmod || NG.level.LFO_1.wantmod || NG.pan.LFO_1.wantmod || NG.filter_f.LFO_1.wantmod || synth.filter_f.LFO_1.wantmod ? LFO_1.wantmod = 1 : LFO_1.wantmod = 0;
   
   osc1.level.LFO_2.controller && osc1.level.LFO_2.modamount ? osc1.level.LFO_2.wantmod = 1 : osc1.level.LFO_2.wantmod = 0;
   osc1.pan.LFO_2.controller && osc1.pan.LFO_2.modamount ? osc1.pan.LFO_2.wantmod = 1 : osc1.pan.LFO_2.wantmod = 0;
   osc1.transpose.LFO_2.controller && osc1.transpose.LFO_2.modamount ? osc1.transpose.LFO_2.wantmod = 1 : osc1.transpose.LFO_2.wantmod = 0;
   osc1.finetune.LFO_2.controller && osc1.finetune.LFO_2.modamount ? osc1.finetune.LFO_2.wantmod = 1 : osc1.finetune.LFO_2.wantmod = 0;
   osc1.pwm.LFO_2.controller && osc1.pwm.LFO_2.modamount ? osc1.pwm.LFO_2.wantmod = 1 : osc1.pwm.LFO_2.wantmod = 0;
   osc2.level.LFO_2.controller && osc2.level.LFO_2.modamount ? osc2.level.LFO_2.wantmod = 1 : osc2.level.LFO_2.wantmod = 0;
   osc2.pan.LFO_2.controller && osc2.pan.LFO_2.modamount ? osc2.pan.LFO_2.wantmod = 1 : osc2.pan.LFO_2.wantmod = 0;
   osc2.transpose.LFO_2.controller && osc2.transpose.LFO_2.modamount ? osc2.transpose.LFO_2.wantmod = 1 : osc2.transpose.LFO_2.wantmod = 0;
   osc2.finetune.LFO_2.controller && osc2.finetune.LFO_2.modamount ? osc2.finetune.LFO_2.wantmod = 1 : osc2.finetune.LFO_2.wantmod = 0;
   osc2.pwm.LFO_2.controller && osc2.pwm.LFO_2.modamount ? osc2.pwm.LFO_2.wantmod = 1 : osc2.pwm.LFO_2.wantmod = 0;
   NG.level.LFO_2.controller && NG.level.LFO_2.modamount ? NG.level.LFO_2.wantmod = 1 : NG.level.LFO_2.wantmod = 0;
   NG.pan.LFO_2.controller && NG.pan.LFO_2.modamount ? NG.pan.LFO_2.wantmod = 1 : NG.pan.LFO_2.wantmod = 0;
   NG.filter_f.LFO_2.controller && NG.filter_f.LFO_2.modamount ? NG.filter_f.LFO_2.wantmod = 1 : NG.filter_f.LFO_2.wantmod = 0;
   synth.filter_f.LFO_2.controller && synth.filter_f.LFO_2.modamount ? synth.filter_f.LFO_2.wantmod = 1 : synth.filter_f.LFO_2.wantmod = 0;
   osc1.level.LFO_2.wantmod || osc1.pan.LFO_2.wantmod || osc1.transpose.LFO_2.wantmod || osc1.finetune.LFO_2.wantmod || osc1.pwm.LFO_2.wantmod || osc2.level.LFO_2.wantmod || osc2.pan.LFO_2.wantmod || osc2.transpose.LFO_2.wantmod || osc2.finetune.LFO_2.wantmod || osc2.pwm.LFO_2.wantmod || NG.level.LFO_2.wantmod || NG.pan.LFO_2.wantmod || NG.filter_f.LFO_2.wantmod || synth.filter_f.LFO_2.wantmod ? LFO_2.wantmod = 1 : LFO_2.wantmod = 0;
   
   osc1.level.LFO_3.controller && osc1.level.LFO_3.modamount ? osc1.level.LFO_3.wantmod = 1 : osc1.level.LFO_3.wantmod = 0;
   osc1.pan.LFO_3.controller && osc1.pan.LFO_3.modamount ? osc1.pan.LFO_3.wantmod = 1 : osc1.pan.LFO_3.wantmod = 0;
   osc1.transpose.LFO_3.controller && osc1.transpose.LFO_3.modamount ? osc1.transpose.LFO_3.wantmod = 1 : osc1.transpose.LFO_3.wantmod = 0;
   osc1.finetune.LFO_3.controller && osc1.finetune.LFO_3.modamount ? osc1.finetune.LFO_3.wantmod = 1 : osc1.finetune.LFO_3.wantmod = 0;
   osc1.pwm.LFO_3.controller && osc1.pwm.LFO_3.modamount ? osc1.pwm.LFO_3.wantmod = 1 : osc1.pwm.LFO_3.wantmod = 0;
   osc2.level.LFO_3.controller && osc2.level.LFO_3.modamount ? osc2.level.LFO_3.wantmod = 1 : osc2.level.LFO_3.wantmod = 0;
   osc2.pan.LFO_3.controller && osc2.pan.LFO_3.modamount ? osc2.pan.LFO_3.wantmod = 1 : osc2.pan.LFO_3.wantmod = 0;
   osc2.transpose.LFO_3.controller && osc2.transpose.LFO_3.modamount ? osc2.transpose.LFO_3.wantmod = 1 : osc2.transpose.LFO_3.wantmod = 0;
   osc2.finetune.LFO_3.controller && osc2.finetune.LFO_3.modamount ? osc2.finetune.LFO_3.wantmod = 1 : osc2.finetune.LFO_3.wantmod = 0;
   osc2.pwm.LFO_3.controller && osc2.pwm.LFO_3.modamount ? osc2.pwm.LFO_3.wantmod = 1 : osc2.pwm.LFO_3.wantmod = 0;
   NG.level.LFO_3.controller && NG.level.LFO_3.modamount ? NG.level.LFO_3.wantmod = 1 : NG.level.LFO_3.wantmod = 0;
   NG.pan.LFO_3.controller && NG.pan.LFO_3.modamount ? NG.pan.LFO_3.wantmod = 1 : NG.pan.LFO_3.wantmod = 0;
   NG.filter_f.LFO_3.controller && NG.filter_f.LFO_3.modamount ? NG.filter_f.LFO_3.wantmod = 1 : NG.filter_f.LFO_3.wantmod = 0;
   synth.filter_f.LFO_3.controller && synth.filter_f.LFO_3.modamount ? synth.filter_f.LFO_3.wantmod = 1 : synth.filter_f.LFO_3.wantmod = 0;
   osc1.level.LFO_3.wantmod || osc1.pan.LFO_3.wantmod || osc1.transpose.LFO_3.wantmod || osc1.finetune.LFO_3.wantmod || osc1.pwm.LFO_3.wantmod || osc2.level.LFO_3.wantmod || osc2.pan.LFO_3.wantmod || osc2.transpose.LFO_3.wantmod || osc2.finetune.LFO_3.wantmod || osc2.pwm.LFO_3.wantmod || NG.level.LFO_3.wantmod || NG.pan.LFO_3.wantmod || NG.filter_f.LFO_3.wantmod || synth.filter_f.LFO_3.wantmod ? LFO_3.wantmod = 1 : LFO_3.wantmod = 0;
   
   osc1.level.LFO_4.controller && osc1.level.LFO_4.modamount ? osc1.level.LFO_4.wantmod = 1 : osc1.level.LFO_4.wantmod = 0;
   osc1.pan.LFO_4.controller && osc1.pan.LFO_4.modamount ? osc1.pan.LFO_4.wantmod = 1 : osc1.pan.LFO_4.wantmod = 0;
   osc1.transpose.LFO_4.controller && osc1.transpose.LFO_4.modamount ? osc1.transpose.LFO_4.wantmod = 1 : osc1.transpose.LFO_4.wantmod = 0;
   osc1.finetune.LFO_4.controller && osc1.finetune.LFO_4.modamount ? osc1.finetune.LFO_4.wantmod = 1 : osc1.finetune.LFO_4.wantmod = 0;
   osc1.pwm.LFO_4.controller && osc1.pwm.LFO_4.modamount ? osc1.pwm.LFO_4.wantmod = 1 : osc1.pwm.LFO_4.wantmod = 0;
   osc2.level.LFO_4.controller && osc2.level.LFO_4.modamount ? osc2.level.LFO_4.wantmod = 1 : osc2.level.LFO_4.wantmod = 0;
   osc2.pan.LFO_4.controller && osc2.pan.LFO_4.modamount ? osc2.pan.LFO_4.wantmod = 1 : osc2.pan.LFO_4.wantmod = 0;
   osc2.transpose.LFO_4.controller && osc2.transpose.LFO_4.modamount ? osc2.transpose.LFO_4.wantmod = 1 : osc2.transpose.LFO_4.wantmod = 0;
   osc2.finetune.LFO_4.controller && osc2.finetune.LFO_4.modamount ? osc2.finetune.LFO_4.wantmod = 1 : osc2.finetune.LFO_4.wantmod = 0;
   osc2.pwm.LFO_4.controller && osc2.pwm.LFO_4.modamount ? osc2.pwm.LFO_4.wantmod = 1 : osc2.pwm.LFO_4.wantmod = 0;
   NG.level.LFO_4.controller && NG.level.LFO_4.modamount ? NG.level.LFO_4.wantmod = 1 : NG.level.LFO_4.wantmod = 0;
   NG.pan.LFO_4.controller && NG.pan.LFO_4.modamount ? NG.pan.LFO_4.wantmod = 1 : NG.pan.LFO_4.wantmod = 0;
   NG.filter_f.LFO_4.controller && NG.filter_f.LFO_4.modamount ? NG.filter_f.LFO_4.wantmod = 1 : NG.filter_f.LFO_4.wantmod = 0;
   synth.filter_f.LFO_4.controller && synth.filter_f.LFO_4.modamount ? synth.filter_f.LFO_4.wantmod = 1 : synth.filter_f.LFO_4.wantmod = 0;
   osc1.level.LFO_4.wantmod || osc1.pan.LFO_4.wantmod || osc1.transpose.LFO_4.wantmod || osc1.finetune.LFO_4.wantmod || osc1.pwm.LFO_4.wantmod || osc2.level.LFO_4.wantmod || osc2.pan.LFO_4.wantmod || osc2.transpose.LFO_4.wantmod || osc2.finetune.LFO_4.wantmod || osc2.pwm.LFO_4.wantmod || NG.level.LFO_4.wantmod || NG.pan.LFO_4.wantmod || NG.filter_f.LFO_4.wantmod || synth.filter_f.LFO_4.wantmod ? LFO_4.wantmod = 1 : LFO_4.wantmod = 0;
   
    */
   
   env3.startslider = 102;
   NG.Filter.startslider = 108;
   env6.startslider = 115;
   NG.startslider = 121;
   

   env3.attack = 0;
   env3.decay = 16 * srate/1000;
   env3.breakpoint = 0;
   env3.decay2 = 0;
   env3.sustain = 0;
   env3.release = 16 * srate/1000;
   
   env3.at_shape = 0;
   env3.at_shape == 1 ? (env3.at_coef = NG.at_coef == 0 ? 0.05 : abs(NG.at_coef)*1.5):(env3.at_coef = NG.at_coef < 0 ? 1/(abs(NG.at_coef-1)) : NG.at_coef + 1);
   env3.dec1_shape = 0;
   env3.dec1_shape == 1 ? (env3.dec1_coef = NG.dec1_coef == 0 ? 0.05 : abs(NG.dec1_coef)*1.5):(env3.dec1_coef = NG.dec1_coef < 0 ? 1/(abs(NG.dec1_coef-1)) : NG.dec1_coef + 1);
   env3.dec2_shape = 0;
   env3.dec2_shape == 1 ? (env3.dec2_coef = NG.dec2_coef == 0 ? 0.05 : abs(NG.dec2_coef)*1.5):(env3.dec2_coef = NG.dec2_coef < 0 ? 1/(abs(NG.dec2_coef-1)) : NG.dec2_coef + 1);
   env3.rel_shape = 0;
   env3.rel_shape == 1 ? (env3.rel_coef = NG.rel_coef == 0 ? 0.05 : abs(NG.rel_coef)*1.5):(env3.rel_coef = NG.rel_coef < 0 ? 1/(abs(NG.rel_coef-1)) : NG.rel_coef + 1);

   env6.attack = 0;//slider(env6.startslider) * srate/1000;
   env6.decay = 0;//slider(env6.startslider+1) * srate/1000;
   env6.breakpoint = 0;//slider(env6.startslider+2) /10;
   env6.decay2 = 0;//slider(env6.startslider+3) * srate/1000;
   env6.sustain = 0;//slider(env6.startslider+4) / 10;
   env6.release = 0;//slider(env6.startslider+5) * srate/1000;
   
   env6.at_shape = NG.filter.at_shape;
   env6.at_shape == 1 ? (env6.at_coef = NG.filter.at_coef == 0 ? 0.05 : abs(NG.filter.at_coef)*1.5):(env6.at_coef = NG.filter.at_coef < 0 ? 1/(abs(NG.filter.at_coef-1)) : NG.filter.at_coef + 1);
   env6.dec1_shape = NG.filter.dec1_shape;
   env6.dec1_shape == 1 ? (env6.dec1_coef = NG.filter.dec1_coef == 0 ? 0.05 : abs(NG.filter.dec1_coef)*1.5):(env6.dec1_coef = NG.filter.dec1_coef < 0 ? 1/(abs(NG.filter.dec1_coef-1)) : NG.filter.dec1_coef + 1);
   env6.dec2_shape = NG.filter.dec2_shape;
   env6.dec2_shape == 1 ? (env6.dec2_coef = NG.filter.dec2_coef == 0 ? 0.05 : abs(NG.filter.dec2_coef)*1.5):(env6.dec2_coef = NG.filter.dec2_coef < 0 ? 1/(abs(NG.filter.dec2_coef-1)) : NG.filter.dec2_coef + 1);
   env6.rel_shape = NG.filter.rel_shape;
   env6.rel_shape == 1 ? (env6.rel_coef = NG.filter.rel_coef == 0 ? 0.05 : abs(NG.filter.rel_coef)*1.5):(env6.rel_coef = NG.filter.rel_coef < 0 ? 1/(abs(NG.filter.rel_coef-1)) : NG.filter.rel_coef + 1);
   
   
   !slider50 ? master_volume != slider1 ? master_volume = slider1;
   slider16_old != slider16 ? (osc2.level = slider16 ? osc1.level+0.5 + 0.8*(slider14-1) : 0; slider16_old = slider16);
   
   
   slider19_old != slider19 || slider20_old != slider20 ? (
   
   NG.filter_f = NG.filter_f.running = 64 + slider19*2;
   NG.filter_q = NG.filter_q.running = 1.123;
    NG.filter_slope = 1;
   NG.filter_type = 5;
   NG.keyfollow = 0;
   
   NG.VCF_ENV = 0;
   NG.VCF_ON = 1;
   
   NG.Level = NG.Level.running = slider20/5;
   ng.pan = ng.pan.running = 0;
   
   slider19_old = slider19;
   slider20_old = slider20;
   );
   
   
   
   
   synth.subosc_1.fill_subosc();
   synth.subosc_2.fill_subosc();
   synth.subosc_3.fill_subosc();
   synth.subosc_4.fill_subosc();
   synth.subosc_5.fill_subosc();
   synth.subosc_6.fill_subosc();
   synth.subosc_7.fill_subosc();
   synth.subosc_8.fill_subosc();
   synth.subosc_9.fill_subosc();
   synth.subosc_10.fill_subosc();
   synth.subosc_11.fill_subosc();
   synth.subosc_12.fill_subosc();
   
   
   //Organ_up
   //function dist_update () (
   dist_on = 0;//kann weg? slider21;
   
   dist_scaler = 0;//kann weg? slider22/5;
   dist_output_factor = 1;//db2ratio(slider39);
   //dist_type = slider38;
   //dist_cutoff = per_to_freq(slider37*3.9 + 50.8,100);
   //slider38 == 0 ? (
   //kann weg? disL.disto_set_drive((slider22-0.5)/5);
   //kann weg? disR.disto_set_drive((slider22-0.5)/5);
   //dist_clip = 1;
   //):(
   //disL.disto_set_drive(0);
   //disR.disto_set_drive(0);
   //dist_clip = 1-(slider36-0.3)/10;
   //);
   //disL.disto_set_cutoff(dist_cutoff);
   //disR.disto_set_cutoff(dist_cutoff);
   //);
   
   perc_poly = slider15;
   
   
   
   
   revbal != slider23/20 || slider22_old != slider22 ? (
   revbal = slider23/20;
   //slider146 == 0 ? (revbal *= 2; revfeed = 0.34; #rev_label = "Amb."); //0.1 alt
   //slider146 == 1 ? (revbal *= 2; revfeed = 0.5  ; #rev_label = "Room"); // 0.34 alt
   slider22 == 0 ? (revfeed = 0.82 - 0.03*(10-slider24); revtype = 0);
   slider22 == 1 ? (revfeed = 0.92 - 0.01*(10-slider25); revtype = 1);
   myverb_l.wgverb_set_feed(revfeed);
   myverb_l.wgverb_set_cutoff(11500);
   myverb_l.wgverb_set_bal(1);
   
   myverb_r.wgverb_set_feed(revfeed);
   myverb_r.wgverb_set_cutoff(11500);
   myverb_r.wgverb_set_bal(1);
   slider22_old = slider22;
   );
   
   
   
   
   
   
  
   
   
   fparam0 = slider28; // speed mode: stop,slow,fast
   fparam1 = 0.1;//slider149; // lo width
   fparam2 = 0.5;//slider150; // lo level
   fparam3 = 0.7;//slider151; // hi width
   fparam4 = 0.1;//slider152; // hi depth
   fparam5 = slider42; // hi level
   fparam6 = slider31 * 10; // x-over
   fparam7 = 1; // output
   fparam8 = 0.6;//slider156; // speed
   fparam9 = slider26; // program
   
   lo_level = slider29/10;
   hi_level = slider30/5;
   
   mic_angle = slider41;
   mic_angle_rad = (mic_angle / 180) * $pi;
   
   //lphi =  hphi = twopi * slider158 + twopi/2;
   
   X_Over_Freq = (10*(pow(10,1.179 + fparam6))|0);
   filter_amount = 1; // slider171;
   
   
   spd = twopi * ifs * 2 * fparam8 * 0.1;
   
   filo = 1 - pow(10, fparam6 * (2.27 - 0.54 * fparam6) - 1.92);
   
   (fparam0<=1) ?
   (
   (fparam0<0.1) ? //stop
   (
   lset = 0; hset = 0;
   //lmom = 0.12; hmom = 0.1;
   lmom = 0.02; hmom = 0.01;
   //lmom = slider165/10; hmom = slider167/10;
   )
   : //low speed
   (
   //lset = 1.49; hset = 1.66;
   lset = slider32; hset = slider34;
   //lmom = 0.27; hmom = 0.18;
   
   );
   )
   : //high speed
   (
   //lset = 2.31; hset = 3.4;
   lset = slider33; hset = slider35;
   //lmom = 0.14; hmom = 0.09;
   
   );
   
   fparam0 > fparam0_old ? (
   lmom = 0.3-slider37/10; hmom = 0.3-slider39/10;
   ):(
   lmom = 0.3-slider36/10; hmom = 0.3-slider38/10;
   );
   fparam0_old = fparam0;
   
   
   hmom = pow(10, -ifs / hmom);
   lmom = pow(10, -ifs / lmom); 
   hset *= spd;
   lset *= spd;
   
   gain = 0.4 * pow(10, 2 * fparam7 - 1);
   lwid = fparam1 * fparam1;
   llev = 0;//gain * 0.9 * fparam2 * fparam2;
   hwid = fparam3 * fparam3;
   hdep = fparam4 * fparam4 * srate / 760;
   hlev = 0;//gain * 0.9 * fparam5 * fparam5;
   
   
   scanner_mode = slider17;
      scanner_mode == 2 || scanner_mode == 4 || scanner_mode == 6 ? scanner_chorus = 1 : scanner_chorus = 0;
      scanner1_ch_depth = 2.2;
      scanner_mode >2 ? scanner1_ch_depth = 3.2;
      scanner_mode >4 ? scanner1_ch_depth = 5.2;
      

      wall_volume = 0;//(10-slider170)/10;
      
      organ_type = slider11;
      organ_type_old != organ_type ? (organ_type_old = organ_type; drawbars());
      
      leakage = slider51/3000;
      leakage2 = leakage * 24;
      leakage != leakage_old ? (drawbars(); leakage_old = leakage);
      
      speaker_model = slider26;
      
      speaker_model ? (
      gfx_mic = dings = slider27+1;
      gfx_open = slider40;
      slider40 == 1 ? dings += 5;
      ///////////////////// IR
      tmp=dings|0;
      tmp != lslider1 ?
      (
        lslider1=tmp;
      
        filehandle=file_open(dings);
        impbuf_l=impbuf_nch=impbuf_srate=0;
        filehandle > 0 ? 
        (
        need_refft = 1;
        reload_IR = 1; ir_fade = 0;
          fileha = 100;
          file_riff(filehandle,impbuf_nch,impbuf_srate);
          impbuf_nch ?
          (
            impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
            need_refft=1; 
            file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
          );
          file_close(filehandle);
        ) : lslider1 = -1;
      );
      !stereo_mode != !0 ? ( need_refft=1; stereo_mode=0; );
       
      useresample != 1 ? (useresample=1; need_refft=1; );
      preamp=0.2;
      ////////////////////////////////
      );
      
      
      
      drive_gain = db2ratio(-25 + slider21 * 6);
      drive_gain_comop = db2ratio(10  -slider21*6);
      drive_tube = 1.57;
      
      
      perc_vol != slider14 ?  (perc_vol = slider14;drawbars());
      perc_harm != slider12 ? (perc_harm = slider12;drawbars());
      perc_decay != slider13 ? (perc_decay = slider13;drawbars());
      
      
      org_click = slider18; !org_click ? NG.Level = NG.Level.running = 0;
      
      last_speed == 0 ? last_speed = 1;
      slider28 ? (last_speed = slider28); org_speed = slider28;
      
      
      x_over != fparam6 ? (
      x_over = fparam6;
      crossover_low.band_set_filter(5, per_to_freq(x_over,100), 0, .707, 1); //type, freq, gain, q, slope
      crossover_high.band_set_filter(1, per_to_freq(x_over,100), 0, .707, 2); //type, freq, gain, q, slope
      );
      
      
      
      flb_offset != mic_angle/36 ? (
      flb_offset = mic_angle/36; // (0-5)
      flb_tdelay0 = 4; // delay = slider1 (5-10);
      flb_tdelay1 = (flb_tdelay0 + flb_offset); // Offset 0 - 5
      flb_sdelay0 = tdelay0 / 1000 * srate;
      flb_sdelay1 = tdelay1 / 1000 * srate;
      flb_feedback = 0.0;// slider3;
      //flb_depth = (flb_delay - 0.1) *0.05; // * slider2;
      //flb_mix = 1;//slider5;
      //flb_lfo = 0; // 0 ist triangle (slider8 == triangle ? triangle : sinusoid);
      );
      
      
      turn_by_hand = slider45;
      
      
      
   callER = 0;
   parameters_update_on = 0;
   call += 1;
   
  
);





@slider

slider2 != slider2_old ||
slider3 != slider3_old ||
slider4 != slider4_old ||
slider5 != slider5_old ||
slider6 != slider6_old ||
slider7 != slider7_old ||
slider8 != slider8_old ||
slider9 != slider9_old ||
slider10 != slider10_old ? (
drawbars();
slider2_old = slider2;
slider3_old = slider3;
slider4_old = slider4;
slider5_old = slider5;
slider6_old = slider6;
slider7_old = slider7;
slider8_old = slider8;
slider9_old = slider9;
slider10_old = slider10;
caller = 1;
):(
caller = 1;
);


@serialize
file_var(0, last_speed);

file_var(0, rotary_version);

file_var(0, p1.db1);
file_var(0, p1.db2);
file_var(0, p1.db3);
file_var(0, p1.db4);
file_var(0, p1.db5);
file_var(0, p1.db6);
file_var(0, p1.db7);
file_var(0, p1.db8);
file_var(0, p1.db9);

file_var(0, p2.db1);
file_var(0, p2.db2);
file_var(0, p2.db3);
file_var(0, p2.db4);
file_var(0, p2.db5);
file_var(0, p2.db6);
file_var(0, p2.db7);
file_var(0, p2.db8);
file_var(0, p2.db9);

file_var(0, p3.db1);
file_var(0, p3.db2);
file_var(0, p3.db3);
file_var(0, p3.db4);
file_var(0, p3.db5);
file_var(0, p3.db6);
file_var(0, p3.db7);
file_var(0, p3.db8);
file_var(0, p3.db9);

file_var(0, p4.db1);
file_var(0, p4.db2);
file_var(0, p4.db3);
file_var(0, p4.db4);
file_var(0, p4.db5);
file_var(0, p4.db6);
file_var(0, p4.db7);
file_var(0, p4.db8);
file_var(0, p4.db9);

file_var(0, p5.db1);
file_var(0, p5.db2);
file_var(0, p5.db3);
file_var(0, p5.db4);
file_var(0, p5.db5);
file_var(0, p5.db6);
file_var(0, p5.db7);
file_var(0, p5.db8);
file_var(0, p5.db9);

file_var(0, p6.db1);
file_var(0, p6.db2);
file_var(0, p6.db3);
file_var(0, p6.db4);
file_var(0, p6.db5);
file_var(0, p6.db6);
file_var(0, p6.db7);
file_var(0, p6.db8);
file_var(0, p6.db9);

file_var(0, p7.db1);
file_var(0, p7.db2);
file_var(0, p7.db3);
file_var(0, p7.db4);
file_var(0, p7.db5);
file_var(0, p7.db6);
file_var(0, p7.db7);
file_var(0, p7.db8);
file_var(0, p7.db9);

file_var(0, p8.db1);
file_var(0, p8.db2);
file_var(0, p8.db3);
file_var(0, p8.db4);
file_var(0, p8.db5);
file_var(0, p8.db6);
file_var(0, p8.db7);
file_var(0, p8.db8);
file_var(0, p8.db9);

file_var(0, p9.db1);
file_var(0, p9.db2);
file_var(0, p9.db3);
file_var(0, p9.db4);
file_var(0, p9.db5);
file_var(0, p9.db6);
file_var(0, p9.db7);
file_var(0, p9.db8);
file_var(0, p9.db9);


file_var(0, low_oct_start);


@block

/*
   LFO_1.delay == -1 ? (LFO_1.delay_sams = (240/tempo) * srate):
   LFO_1.delay == -2 ? (LFO_1.delay_sams = (240/tempo) * srate/2):
   LFO_1.delay == -3 ? (LFO_1.delay_sams = (240/tempo) * srate/4):
   LFO_1.delay == -4 ? (LFO_1.delay_sams = (240/tempo) * srate/8):
   LFO_1.delay == -5 ? (LFO_1.delay_sams = (240/tempo) * srate/16);
 
   LFO_2.delay == -1 ? (LFO_2.delay_sams = (240/tempo) * srate):
   LFO_2.delay == -2 ? (LFO_2.delay_sams = (240/tempo) * srate/2):
   LFO_2.delay == -3 ? (LFO_2.delay_sams = (240/tempo) * srate/4):
   LFO_2.delay == -4 ? (LFO_2.delay_sams = (240/tempo) * srate/8):
   LFO_2.delay == -5 ? (LFO_2.delay_sams = (240/tempo) * srate/16);
   
    LFO_1.attack == -1 ? (LFO_1.attack_sams = (240/tempo) * srate):
    LFO_1.attack == -2 ? (LFO_1.attack_sams = (240/tempo) * srate/2):
    LFO_1.attack == -3 ? (LFO_1.attack_sams = (240/tempo) * srate/4):
    LFO_1.attack == -4 ? (LFO_1.attack_sams = (240/tempo) * srate/8):
    LFO_1.attack == -5 ? (LFO_1.attack_sams = (240/tempo) * srate/16);
     
    LFO_2.attack == -1 ? (LFO_2.attack_sams = (240/tempo) * srate):
    LFO_2.attack == -2 ? (LFO_2.attack_sams = (240/tempo) * srate/2):
    LFO_2.attack == -3 ? (LFO_2.attack_sams = (240/tempo) * srate/4):
    LFO_2.attack == -4 ? (LFO_2.attack_sams = (240/tempo) * srate/8):
    LFO_2.attack == -5 ? (LFO_2.attack_sams = (240/tempo) * srate/16); 
   
   LFO_3.delay == -1 ? (LFO_3.delay_sams = (240/tempo) * srate):
   LFO_3.delay == -2 ? (LFO_3.delay_sams = (240/tempo) * srate/2):
   LFO_3.delay == -3 ? (LFO_3.delay_sams = (240/tempo) * srate/4):
   LFO_3.delay == -4 ? (LFO_3.delay_sams = (240/tempo) * srate/8):
   LFO_3.delay == -5 ? (LFO_3.delay_sams = (240/tempo) * srate/16);
   
   LFO_4.delay == -1 ? (LFO_4.delay_sams = (240/tempo) * srate):
   LFO_4.delay == -2 ? (LFO_4.delay_sams = (240/tempo) * srate/2):
   LFO_4.delay == -3 ? (LFO_4.delay_sams = (240/tempo) * srate/4):
   LFO_4.delay == -4 ? (LFO_4.delay_sams = (240/tempo) * srate/8):
   LFO_4.delay == -5 ? (LFO_4.delay_sams = (240/tempo) * srate/16);
   
    LFO_3.attack == -1 ? (LFO_3.attack_sams = (240/tempo) * srate):
    LFO_3.attack == -2 ? (LFO_3.attack_sams = (240/tempo) * srate/2):
    LFO_3.attack == -3 ? (LFO_3.attack_sams = (240/tempo) * srate/4):
    LFO_3.attack == -4 ? (LFO_3.attack_sams = (240/tempo) * srate/8):
    LFO_3.attack == -5 ? (LFO_3.attack_sams = (240/tempo) * srate/16);
     
    LFO_4.attack == -1 ? (LFO_4.attack_sams = (240/tempo) * srate):
    LFO_4.attack == -2 ? (LFO_4.attack_sams = (240/tempo) * srate/2):
    LFO_4.attack == -3 ? (LFO_4.attack_sams = (240/tempo) * srate/4):
    LFO_4.attack == -4 ? (LFO_4.attack_sams = (240/tempo) * srate/8):
    LFO_4.attack == -5 ? (LFO_4.attack_sams = (240/tempo) * srate/16); 
   
   
   block_play_position = play_position; // LFO to Project
   pos_add = 0;                         // LFO to Project
   
   
   */
   
   
   
   
@sample

caller == 1 ? (
    parameters_update_on == 0 ? (
        parameters_update();  
    katze=0;
    );
);
    
    
eco_mode ? (

/*
   tonwheel_sdj = memory_point+10;
   tonewheel_value = memory_point + 210;
   tonewheel_pos = memory_point + 320;
   memory_point += 330;
   tuning = 440;
   
   tw_note = 0;
   Oktave = -4;
   loop(4, //Oktaven
    halbton = 3;
    loop(12, // halbtöne
      tonewheel_adj[tw_note] = 2.0*$pi*tuning*(2^(oktave+halbton/12+0/1200))/srate;
      tw_note += 1;
      halbton += 1;
    );
    oktave += 1;
   );
*/

//&& noteon_cnt
organ_type && eco_mode == 2 ? (

/*
   tw_note = 0;
   Oktave = -4;
   loop(7, //Oktaven
    halbton = 3;
    loop(12, // halbtöne
      tonewheel_on[tw_note] > 0 ? (
        tonewheel_pos[tw_note] += tonewheel_adj[tw_note];// = 2.0*$pi*tuning*(2^(oktave+halbton/12+0/1200))/srate;
        tonewheel_pos[tw_note] >= twopi ? tonewheel_pos[tw_note] -= twopi;
        tonewheel_value[tw_note] = cos(tonewheel_pos[tw_note]);
      );
      tw_note += 1;
      halbton += 1;
    );
    oktave += 1;
   );
    halbton = 3;
    loop(7, // halbtöne
      tonewheel_on[tw_note] > 0 ? (
          tonewheel_pos[tw_note] += tonewheel_adj[tw_note];// = 2.0*$pi*tuning*(2^(oktave+halbton/12+0/1200))/srate;
          tonewheel_pos[tw_note] >= twopi ? tonewheel_pos[tw_note] -= twopi;
          tonewheel_value[tw_note] = cos(tonewheel_pos[tw_note]);
      );
      tw_note += 1;
      halbton += 1;
    );
*/  
tw_note = 0;
loop(91,
      tonewheel_on[tw_note] > 0 ? (
        tonewheel_pos[tw_note] += tonewheel_adj[tw_note];// = 2.0*$pi*tuning*(2^(oktave+halbton/12+0/1200))/srate;
        tonewheel_pos[tw_note] > twopi ? tonewheel_pos[tw_note] -= twopi;
        tonewheel_value[tw_note] = cos(tonewheel_pos[tw_note]);
      );
      tw_note = tw_note + 1;
);
play_mode = 2;
);
















  pos_add += 1; // LFO to Project
  
    pitchwheel_old = pitchwheel;
    while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax while()
       msg_1raw = msg1;
       
       //msg1==$x80 ? (msg1=$x90; msg3 = 0); // Noteoff to NoteOn Value 0
       
       midi_channel_input = 1+ msg1 & $x0F;
       midi_status = msg_1raw;
       midi_noteoff = msg1 & $xF0;
       midi_noteoff == 128 ? (midi_status += 16; msg3 = 0);
       //msg1==$x90 ? ( //&& msg3!=0 ? (
        midi_channel_input == midi_channel ? (
        select_low_oct ? (
          select_low_oct = 0; low_oct_start = msg2;
        ):( //select low oct
          midi_status == 143 + midi_channel ? (
                 slider46 && msg2 == low_oct_start ? (
                    msg3 != 0 ? Motor_switch = 1; msg1=0;msg2=0;msg3=0
                 
                 ):slider48 && msg2 <= 47 ? (
                    msg2 == low_oct_start+1 ? (slider52=1; drawbars());
                    msg2 == low_oct_start+2 ? (slider52=2; drawbars());
                    msg2 == low_oct_start+3 ? (slider52=3; drawbars());
                    msg2 == low_oct_start+4 ? (slider52=4; drawbars());
                    msg2 == low_oct_start+5 ? (slider52=5; drawbars());
                    msg2 == low_oct_start+6 ? (slider52=6; drawbars());
                    msg2 == low_oct_start+7 ? (slider52=7; drawbars());
                    msg2 == low_oct_start+8 ? (slider52=8; drawbars());
                    msg2 == low_oct_start+9 ? (slider52=9; drawbars());
                    msg2 == low_oct_start+10 ? (slider52=0; drawbars());
                    msg3 != 0 ? msg2 == low_oct_start+11 ? (slider(perc_on.slider) == 1 ? slider(perc_on.slider) = 0 : slider(perc_on.slider) = 1; caller = 1);
                 
                 ):(
                   msg3 == 0 ? noteon_cnt-=1 : noteon_cnt+=1; // count note-ons
                   noteon_cnt = max(0,noteon_cnt);
                   msg2 += 3;
                   msg2-3 >= low_oct_start ? Synth.midi_in();
                 );
       ): Midi_status == 208 ?( //) : msg1==$xD0 ? (
       aftertouch = msg2;
       ): Midi_status == 223 + midi_channel ? (//) : msg1==$xE0 ? (
       Pitchwheel = msg3-64 + msg2 / 127;
       norm_pitchwheel = 0;//pitchwheel > 0 ? pitchwheel / 63 : pitchwheel < 0 ? pitchwheel / 64 : 0;
       ): midi_status == 175 + midi_channel && msg2 == 1 ? ( //) : msg1==$xB0 && msg2 == 1 ? (
       modwheel = msg3 / 127;
       ):(
        katze=0;// midisend(offset,msg1,msg2,msg3); // passthrough other events
       );
       ); //select low oct
       ); // channel
       midisend(offset,msg1,msg2,msg3);
    );
    
    
    
    
    
    
    //Global Start- stop- and Retriggers
    noteon_cnt_old == 0 && noteon_cnt ? starttrigger = 1 : starttrigger = 0;
    noteon_cnt_old && noteon_cnt == 0 ? (
    //synth.subosc_1.on || synth.subosc_2.on || synth.subosc_3.on || synth.subosc_4.on || synth.subosc_5.on || synth.subosc_6.on || synth.subosc_7.on || synth.subosc_8.on || synth.subosc_9.on || synth.subosc_10.on || synth.subosc_11.on || synth.subosc_12.on ? (
    //stoptrigger = 0;
    //):(
    stoptrigger = 1;
    //);
    ):(
    stoptrigger = 0;
    );
    noteon_cnt_old < noteon_cnt ? retrigger = 1 : retrigger = 0;
    
    !perc_poly ? (
    starttrigger ? (
    synth.subosc_1.VCA2.stage = 1; synth.subosc_1.VCA2.follower = 0;
    start_cnt += 1;
    );
    stoptrigger ? (
    synth.subosc_1.VCA2.stage = 5; synth.subosc_1.VCA2.follower = 0;
    );
    synth.subosc_1.VCA2.envelope_stop ? (
    osc2.subosc_1.on = osc2.subosc_1.note = osc2.subosc_1.note_running =
    osc2.subosc_2.on = osc2.subosc_2.note = osc2.subosc_2.note_running =
    osc2.subosc_3.on = osc2.subosc_3.note = osc2.subosc_3.note_running =
    osc2.subosc_4.on = osc2.subosc_4.note = osc2.subosc_4.note_running =
    osc2.subosc_5.on = osc2.subosc_5.note = osc2.subosc_5.note_running =
    osc2.subosc_6.on = osc2.subosc_6.note = osc2.subosc_6.note_running =
    osc2.subosc_7.on = osc2.subosc_7.note = osc2.subosc_7.note_running =
    osc2.subosc_8.on = osc2.subosc_8.note = osc2.subosc_8.note_running =
    osc2.subosc_9.on = osc2.subosc_9.note = osc2.subosc_9.note_running =
    osc2.subosc_10.on = osc2.subosc_10.note = osc2.subosc_10.note_running =
    osc2.subosc_11.on = osc2.subosc_11.note = osc2.subosc_11.note_running =
    osc2.subosc_12.on = osc2.subosc_12.note = osc2.subosc_12.note_running = 0;
    );
    );
    
    
    //!perc_poly ? (
    //synth.subosc_1.VCA2.new_complex_envelope (this.VCA2.at_shape,this.VCA2.dec1_shape,this.VCA2.dec2_shape,this.VCA2.rel_shape,this.VCA2.at_coef,this.VCA2.dec1_coef,this.VCA2.dec2_coef,this.VCA2.rel_coef);;
    //);
   
    
    noteon_cnt_old = noteon_cnt;
    starttrigger ? gen_follower = 0;
    gen_follower += 1;
    stoptrigger ? gen_follower = 0;
    /////////////////////////////////////
 
    
    synth.play_synth_generals();
    
    //MonoOrPoly ? Synth.Subosc_1.Mono_glide();
    
    
/*
    
    //LFO_1.free_run = 1; 
    LFO_1.run_on_stop = 1;
    LFO_1.LFO_Generator(CV);
    gen_follower < LFO_1.delay_sams ? LFO_1.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_1.delay_sams && gen_follower < LFO_1.delay_sams + LFO_1.attack_sams ? LFO_1.abs_position.after_slew_rate *= (gen_follower-LFO_1.delay_sams)/LFO_1.attack_sams;
    //osc1.finetune_running = osc1.finetune + osc1.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    //osc2.finetune_running = osc2.finetune + osc2.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    
    //LFO_2.free_run = 1; 
    LFO_2.run_on_stop = 1;
    LFO_2.LFO_Generator(CV);
    gen_follower < LFO_2.delay_sams ? LFO_2.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_2.delay_sams && gen_follower < LFO_2.delay_sams + LFO_2.attack_sams ? LFO_2.abs_position.after_slew_rate *= (gen_follower-LFO_2.delay_sams)/LFO_2.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_2.modamount * LFO_2.abs_position.after_slew_rate;
    
    //LFO_3.free_run = 1; 
    LFO_3.run_on_stop = 1;
    LFO_3.LFO_Generator(CV);
    gen_follower < LFO_3.delay_sams ? LFO_3.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_3.delay_sams && gen_follower < LFO_3.delay_sams + LFO_3.attack_sams ? LFO_3.abs_position.after_slew_rate *= (gen_follower-LFO_3.delay_sams)/LFO_3.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_3.modamount * LFO_3.abs_position.after_slew_rate;
    
    //LFO_4.free_run = 1; 
    LFO_4.run_on_stop = 1;
    LFO_4.LFO_Generator(CV);
    gen_follower < LFO_4.delay_sams ? LFO_4.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_4.delay_sams && gen_follower < LFO_4.delay_sams + LFO_4.attack_sams ? LFO_4.abs_position.after_slew_rate *= (gen_follower-LFO_4.delay_sams)/LFO_4.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_4.modamount * LFO_4.abs_position.after_slew_rate;
    
    */
    
    (!organ_type && eco_mode > 0) || eco_mode == 1 ? (
    osc1.modulate_osc();
    osc1.play_oscillator();
    osc2.modulate_osc();
    osc2.play_oscillator();
    play_mode = 1;
    );
    
    
    
    audio_in_L = spl0 * db2ratio(12);
    audio_in_R = spl1 * db2ratio(12);
    
    
    spl0 = synth.outputL * 0.1;// + osc2.output * 0.1;
    spl1 = synth.outputR * 0.1;
    slider(scanner.slider) ? scanner_do();
    spl0.dcblocker();
    spl1.dcblocker();
    spl0 *= master_volume;
    spl1 *= master_volume;
    
    spl0 += audio_in_L;
    spl1 += audio_in_R;
    
    ); // eco_mode > 0
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    drive_gain ? (
    wet0 = tanh(spl0*drive_gain);
    wet1 = tanh(spl1*drive_gain);
    spl0 = drive_gain_comop*(((exp(wet0*drive_tube) - exp(wet0*drive_tube * -1.2)) / (exp(wet0*drive_tube) + exp(wet0*tube * -1.0))) / drive_tube);
    spl1 = drive_gain_comop*(((exp(wet1*drive_tube) - exp(wet1*drive_tube * -1.2)) / (exp(wet1*drive_tube) + exp(wet1*tube * -1.0))) / drive_tube);
    );
    
    
    
    
    
    !slider(reverb_post.slider) && revbal ? (
    spl0 = spl0 + myverb_L.wgverb_do_amp(spl0) * revbal;
    spl1 = spl1 + myverb_R.wgverb_do_amp(spl1) * revbal;
    );
    
    
    
    
    
    
    
    
    
    
    speaker_model ? (
    //!reload_IR ? (
    reload_IR == 1 ? (
      ir_fade_dur = 50;
      IR_fade += 1;
      ir_fade >= srate / ir_fade_dur ? (reload_ir = 2;IR_fade = 0;);
      spl0 *= 1- (ir_fade/(srate/ir_fade_dur));
      spl1 *= 1- (ir_fade/(srate/ir_fade_dur));
    );
    reload_ir == 2 ? (
      ir_fade >= srate / ir_fade_dur ? reload_ir(); 
      IR_fade += 1;
      ir_fade >= 2 * srate / ir_fade_dur ? (reload_ir = 3;IR_fade = 0;);
      spl0 = spl1 = 0;
      )
    ;
    reload_IR == 3 ? (
      IR_fade += 1;
      ir_fade >= srate / ir_fade_dur ? reload_ir = -1;
      spl0 *= (ir_fade/(srate/ir_fade_dur));
      spl1 *= (ir_fade/(srate/ir_fade_dur));
    );
    
    
    filtersize > 0 ?
    (
    
    bpos >= chunksize ? 
    (
      t=lastblock;
      lastblock=curblock;
      curblock=t;
    
      memset(curblock+chunksize*2,0,(fftsize-chunksize)*2);
    
      fft(curblock,fftsize);
      convolve_c(curblock,convsrc,fftsize);
    
      ifft(curblock,fftsize);
    
      bpos=0;
    );
    
    // save sample
    bp2=bpos*2;
    lastblock[bp2]=spl0*preamp;
    lastblock[bp2+1]=stereo_mode ? (spl1*preamp) : 0;
    
    spl0=curblock[bp2];
    spl1=curblock[bp2+1];
    
    bpos < fftsize-chunksize ? 
    (
      spl0+=lastblock[chunksize2+bp2];
      spl1+=lastblock[chunksize2+bp2+1];
    );
    
    
    bpos += 1;
    
    );
    );
    //):( // Reload IR
   
    
    
    
    
    speaker_model == 1 ? (
    
    hl=hlev;
    hm=hmom;
    hw=hwid;
    hd=hdep;
    ll=llev;
    lm=lmom;
    lw=lwid;
    
    ht=hset*(1-hm);
    lt=lset*(1-lm);
    
    chp = cos(hphi); chp *= chp * chp;
    clp = cos(lphi);
    shp = sin(hphi);
    slp = sin(lphi);
    
    a = (spl0+spl1)*0.5; //*0.5 ???
    
    (k>0) ? (
    k-=1;
    ):(
    lspd = (lm * lspd) + lt; // tend to required speed
    hspd = (hm * hspd) + ht;
    lphi += k1 * lspd;
    hphi += k1 * hspd;
    
    dchp = cos(hphi + k1*hspd);
    dchp = k0 * (dchp * dchp * dchp - chp); // sin^3 level mod
    dclp = k0 * (cos(lphi + k1*lspd) - clp);
    dshp = k0 * (sin(hphi + k1*hspd) - shp);
    dslp = k0 * (sin(lphi + k1*lspd) - slp);
    
    k=k1;
    );
    
    org_speed == 0 ? (
      lspd < 0.0000001 && lspd > 0 ? (
         lphi2 = lphi >= $pi ? 360-((cos(lphi-$pi)+1)/1)*90 : ((cos(lphi-$pi)+1)/1)*90;
         slider43 = lphi2;
         lspd = 0;
      );
      lspd === 0 ? (
          slider43 <= 180 ? lphi = acos(((slider43/180)*2)-1)-$pi;
          slider43 > 180 ? lphi = acos((((slider43-180)/180)*2)-1)-0*$pi;
          lphi *= -1;
      );
      hspd < 0.0000001 && hspd > 0 ? (
         hphi2 = hphi >= $pi ? 360-((cos(hphi-$pi)+1)/1)*90 : ((cos(hphi-$pi)+1)/1)*90;
         slider44 = hphi2;
         hspd = 0;
      );
      hspd === 0 ? (
          slider44 <= 180 ? hphi = acos(((slider44/180)*2)-1)-$pi;
          slider44 > 180 ?  hphi = acos((((slider44-180)/180)*2)-1)-0*$pi;
          hphi *= -1;
      );
      lspd === 0 && hspd === 0 ? motor_stop = 1 : motor_stop = 0;
    ):(motor_stop = 0);
    
    
    horn_L_pos = (hphi + mic_angle_rad/2)/twopi;
    horn_L_pos < 0 ? horn_L_pos += 1 :
    horn_L_pos > 1 ? horn_L_pos -= 1;
    horn_L_pos_ch = (cos(hphi + mic_angle_rad/2 + $pi/2)+1)/2;
    horn_L_pos_trem = (cos(hphi + mic_angle_rad/2)+1)/2;
    //wall_horn_L_pos_trem = (cos(hphi + $pi + mic_angle_rad/2)+1)/2;
    
    horn_R_pos = (hphi - mic_angle_rad/2)/twopi;
    horn_R_pos < 0 ? horn_R_pos += 1 :
    horn_R_pos > 1 ? horn_R_pos -= 1;
    horn_R_pos_ch = (cos(hphi - mic_angle_rad/2 + $pi/2)+1)/2;
    horn_R_pos_trem = (cos(hphi - mic_angle_rad/2)+1)/2;
    //wall_horn_R_pos_trem = (cos(hphi - $pi - mic_angle_rad/2)+1)/2;
    
    drum_pos = lphi/twopi;
    drum_pos_ch = (cos(lphi + $pi/2)+1)/2;
    
    
    fbuf1 = filo * (fbuf1 - a) + a; // crossover
    fbuf2 = filo * (fbuf2 - fbuf1) + fbuf1;
    
    
    a = (spl0+spl1)*0.5; //*0.5 ???
    crossover_low.filter.svf_tick();
    crossover_high.filter.svf_tick();
    h = crossover_high.filter.svf_svf0(a) * hi_level;
    l = crossover_low.filter.svf_svf0(a) * lo_level;
    //h = (gain - hl * chp) * (a - fbuf2) * hi_level; // volume
    //l = (gain - ll * clp) * fbuf2 * lo_level;
    chp += dchp;
    clp += dclp;
    shp += dshp;
    slp += dslp;
    
    lphi = ((lphi+(k1-k)*lspd)); lphi>=twopi ? lphi-=twopi;
    hphi = ((hphi+(k1-k)*hspd)); hphi>=twopi ? hphi-=twopi;
    );
    
    
    
    
    
    
    
    
    
    
    
    speaker_model == 0 ? (spl0 *= db2ratio(3); spl1*=db2ratio(3)): //Off
    speaker_model == 1 ? (chorus_do();spl0 *= db2ratio(10); spl1*=db2ratio(10)): // LESLIE
    speaker_model == 2 ? (spl0 *= db2ratio(8); spl1*=db2ratio(8)); // Cabinet
    
    slider(reverb_post.slider) && revbal ? (
    spl0 = spl0 + myverb_L.wgverb_do_amp(spl0) * revbal;
    spl1 = spl1 + myverb_R.wgverb_do_amp(spl1) * revbal;
    );
    
    
    

    Motor_switch == 1 ? (
    slider(rotor.slider) == 0 ? (slider(rotor.slider) = last_speed; caller = 1) : (slider(rotor.slider) = 0; caller = 1);
    Motor_switch = 0;
    );
    slider47 ? pitchwheel > 10 ? (slider(rotor.slider) == 0 ? last_speed = 2 : slider(rotor.slider) != 2 ? (slider(rotor.slider) = 2; caller = 1));
    slider47 ? pitchwheel < -10 ? (slider(rotor.slider) == 0 ? last_speed = 1 : slider(rotor.slider) != 1 ? (slider(rotor.slider) = 1; caller = 1));
    
    
    
    slider50 ? (
      slider1 = modwheel * 10;
      master_volume = slider1;
    );
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    



























































@gfx 891 450



s2_zoom_X = gfx_w / 891;
s2_zoom_y = gfx_h / 450;
zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
zoom_off == 1 ? gfx_ext_retina;

 mouseHold = mouse_cap & 1;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 lastCap = mouseHold;



      function hand_potDrag()
            local      (val nachkomma)
              instance   (valOld minVal maxVal yOld step slider xIn yIn)
                       (
                        mstep = (this.maxval - this.minval)/(S2_Mouse_Sensivity*gfx_ext_retina);
                        Shift ? mstep = (this.maxval - this.minval)/(S2_Mouse_Sensivity*S2_Mouse_Finetune*gfx_ext_retina);
      Shift_superkey ? mstep = (this.maxval - this.minval)/(2000*gfx_ext_retina);
      val = valOld + (yOld - mouse_y) * mstep;
                        val > maxval ? (val = val-maxval;valold = valold-maxval):// min(max(val, minVal), maxVal);
                        val < minval ? (val = val+maxval;valold = valold+maxval):// min(max(val, minVal), maxVal);
                        val = val;
                        slider(slider) = val;
                        slider_automate(slider(slider));
                        gmem[16*64 + 1] = slider;
      gmem[16*64 + 2] = (yOld - mouse_y) * mstep;
                       );
                       
                       
 function v_potDrag_rotary(pixels)
       local      (val nachkomma)
         instance   (valOld minVal maxVal yOld step slider xIn yIn)
                  (
                    mstep = (this.maxval - this.minval)/(pixels);
                    //Shift ? mstep = (this.maxval - this.minval)/(S2_Mouse_Finetune*pixels);
                    Shift_superkey ? mstep = (this.maxval - this.minval)/(10*pixels);
                   val = valOld - (yOld - mouse_y) * mstep;
                   val = min(max(val, minVal), maxVal);
                   shift ? drawbars_lock = 0;
                   drawbars_lock == 1 ? abs(slider(slider) - val) >= 0.5 ? (val = floor(val+0.5); valid = 1):(valid=0);
                   drawbars_lock == 1 ? (valid ? slider(slider) = val):(slider(slider) = val);
                   slider_automate(slider(slider));
 gmem[16*64 + 1] = slider;
 gmem[16*64 + 2] = (yOld - mouse_y) * mstep;
                  );
 
 
 
 function v_DummyDrag_rotary(pixels)
       local      (val nachkomma)
         instance   (minVal maxVal step slider xIn yIn)
                  (
                    valold == -1 ? valold = this;
                    this.minval = 0; this.maxval = 8;
                    mstep = (this.maxval - this.minval)/(pixels);
                    //Shift ? mstep = (this.maxval - this.minval)/(S2_Mouse_Finetune*pixels);
                    Shift_superkey ? mstep = (this.maxval - this.minval)/(10*pixels);
                   val = valOld - (yOld - mouse_y) * mstep;
                   val = min(max(val, minVal), maxVal);
                   shift ? drawbars_lock = 0;
                   drawbars_lock == 1 ? abs(this - val) >= 0.5 ? (val = floor(val+0.5); valid = 1):(valid=0);
                   drawbars_lock == 1 ? (valid ? this = val):(this = val);
                  );
                  
                  
                  
                  
  function org_label (S2_Labelpos) local (s2label_w, s2label_h) (
              gfx_measurestr(#label, s2label_w, s2label_h);
              S2_xpos = this.xIn*zoom + (this.size*zoom/4) - (this.size*zoom/3.5)*(cos(-$pi*-((S2_labelpos-1)*0.7775 -1.1)/4));
              s2_ypos = this.yIn*zoom + (this.size*zoom/4) - (this.size*zoom/3.5)*(sin(-$pi*-((S2_labelpos-1)*0.7775 -1.1)/4));
              gfx_measurestr(" ", S2add_x, s2add_y);
              S2_labelpos < 5 ? (gfx_x = s2_xpos - S2label_w - S2add_x; gfx_y = s2_ypos - s2label_h/2);
              S2_labelpos == 5 ? (gfx_x = s2_xpos - S2label_w/1.5; gfx_y = s2_ypos - s2label_h -= 2*zoom);
             S2_labelpos > 5 ? (gfx_x = s2_xpos + 1*S2add_x; gfx_y = s2_ypos - s2label_h/2);
             gfx_drawstr(#label);
        //gfx_x = s2_xpos; gfx_y = s2_ypos;
  );
       
       
       
       
       
  function draw_preset(pgfx_x, pgfx_y, pgfx_w, pgfx_h, preset_number) (
      //pgfx_x = 600*zoom; pgfx_y = 100*zoom; pgfx_w = 120*zoom; pgfx_h = 90*zoom;
      //preset_number = 1;
      black(); gfx_a = 1; gfx_rect(pgfx_x,pgfx_y,pgfx_w,pgfx_h);
  
      rgb(179,124,0);
      thisdb = this.db1;
      gfx_rect(pgfx_x + pgfx_w / 40, pgfx_y + (pgfx_h/12)*thisdb, pgfx_w / 15, pgfx_h /10);
      gfx_x = pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
 
      organ_type == 1 ? (
      rgb(179,124,0);
      thisdb = this.db2;
      gfx_x = pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_rect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      );
      
      thisdb = this.db3;
      gfx_x = 2*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_rect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      thisdb = this.db4;
      gfx_x = 3*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_rect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      thisdb = this.db5;
      gfx_x = 4*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_roundrect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10,0);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      thisdb = this.db6;
      gfx_x = 5*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_rect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      thisdb = this.db7;
      gfx_x = 6*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_roundrect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10,0);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      organ_type == 1 ? (
      thisdb = this.db8;
      gfx_x = 7*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_roundrect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10,0);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      );
      
      thisdb = this.db9;
      gfx_x = 8*pgfx_w / 10 + pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + (pgfx_h/12)*thisdb;
      gfx_rect(gfx_x, gfx_y, pgfx_w / 15, pgfx_h /10);
      lightgrey();
      gfx_line(gfx_x,gfx_y,gfx_x, pgfx_y+1);
      gfx_line(gfx_x + pgfx_w / 15 -1*zoom, gfx_y,     gfx_x + pgfx_w / 15 -1*zoom, pgfx_y +  1);
      
      ledon = slider52==preset_number; gfx_x = pgfx_x + pgfx_w*0.75; gfx_y = pgfx_y + pgfx_h*0.75;
      gfx_blit(22,pgfx_w/500, 0, 0, 128*ledon, 128,128);
      
       gfx_setfont(1,"Arial",pgfx_h/7,'b');
       gfx_x = pgfx_x + pgfx_w / 40; gfx_y = pgfx_y + pgfx_h * 0.85;
       gfx_drawstr("Preset "); gfx_drawnumber(preset_number,0);
       
       preset_number == 1 ? gfx_drawstr("  (C#)");
       preset_number == 2 ? gfx_drawstr("  (D)");
       preset_number == 3 ? gfx_drawstr("  (D#)");
       preset_number == 4 ? gfx_drawstr("  (E)");
       preset_number == 5 ? gfx_drawstr("  (F)");
       preset_number == 6 ? gfx_drawstr("  (F#)");
       preset_number == 7 ? gfx_drawstr("  (G)");
       preset_number == 8 ? gfx_drawstr("  (G#)");
       preset_number == 9 ? gfx_drawstr("  (A)");

  );
       
       
       
 
 gfx_page = slider255;
 
lightgrey();
gfx_rect(0,0,gfx_w,gfx_h);

gfx_x=gfx_y=0;
organ_type == 1 ? gfx_blit(15,0.5*zoom,0) : gfx_blit(19,1.5*zoom,twopi);

gfx_x = 793*zoom;
gfx_y = 335*zoom;
gfx_blit(24,0.75*zoom,0);




 gfx_setfont(1,"Arial",12*zoom,'b');
 black();

gfx_x = 820*zoom;
gfx_y = 80*zoom;
gfx_page == 1 ? pressed = 1 : pressed = 0;
gfx_blit(20,0.5*zoom,0, 0,3 + pressed * 100,100,100);
gfx_y += 18*zoom + pressed*2*zoom;
gfx_drawstr("ORG",  0x05, gfx_x + 50*zoom, gfx_y + gfx_texth);

gfx_x = 820*zoom;
gfx_y = 130*zoom;
gfx_page == 2 ? pressed = 1 : pressed = 0;
gfx_blit(20,0.5*zoom,0, 0,3 + pressed * 100,100,100);
gfx_y += 18*zoom + pressed*2*zoom;
gfx_drawstr("AMP",  0x05, gfx_x + 50*zoom, gfx_y + gfx_texth);

gfx_x = 820*zoom;
gfx_y = 180*zoom;
gfx_page == 3 ? pressed = 1 : pressed = 0;
gfx_blit(20,0.5*zoom,0, 0,3 + pressed * 100,100,100);
gfx_y += 18*zoom + pressed*2*zoom;
gfx_drawstr("SET",  0x05, gfx_x + 50*zoom, gfx_y + gfx_texth);

gfx_x = 820*zoom;
gfx_y = 230*zoom;
gfx_page == 4 ? pressed = 1 : pressed = 0;
gfx_blit(20,0.5*zoom,0, 0,3 + pressed * 100,100,100);
gfx_y += 18*zoom + pressed*2*zoom;
gfx_drawstr("PRST",  0x05, gfx_x + 50*zoom, gfx_y + gfx_texth);

              
              
              
gfx_page == 1 ? (


      gfx_drawbar1 = slider2;
      gfx_drawbar2 = slider3;
      gfx_drawbar3 = slider4;
      gfx_drawbar4 = slider5;
      gfx_drawbar5 = slider6;
      gfx_drawbar6 = slider7;
      gfx_drawbar7 = slider8;
      gfx_drawbar8 = slider9;
      gfx_drawbar9 = slider10;
      
gfx_y = drawbars_y = 60*zoom;
gfx_a = 1;

gfx_x = drawbars_x = 90 * zoom;
drout = 345 - gfx_drawbar1 * 43.1;
gfx_blit(11,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 40 * zoom;
drout = 345 - gfx_drawbar2 * 43.1;
organ_type == 1 ? gfx_blit(11,zoom*0.5,0,0,15+drout,80,500);
  
gfx_x = drawbars_x + 80 * zoom;
drout = 345 - gfx_drawbar3 * 43.1;
gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 120 * zoom;
drout = 345 - gfx_drawbar4 * 43.1;
gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 160 * zoom;
drout = 345 - gfx_drawbar5 * 43.1;
gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 200 * zoom;
drout = 345 - gfx_drawbar6 * 43.1;
gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 240 * zoom;
drout = 345 - gfx_drawbar7 * 43.1;
gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 280 * zoom;
drout = 345 - gfx_drawbar8 * 43.1;
organ_type == 1 ? gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);

gfx_x = drawbars_x + 320 * zoom;
drout = 345 - gfx_drawbar9 * 43.1;
gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);
 
 
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 rgb(255,215,0);
 //gfx_a = 0.6;
 //gfx_x = 814*zoom; gfx_y = 45*zoom;
 //gfx_roundrect(gfx_x, gfx_y,60*zoom,240*zoom,2*zoom);
 gfx_y = 6*zoom; gfx_x = 6*zoom; gfx_a =0.8;
 gfx_drawstr("TUKAN STUDIOS  -  ROTARY SPEAKER  &  ELECTRIC ORGAN");//,  0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
 
 
 
 
 
 //gfx_setfont(1,"Arial",12*zoom,'b');
 gfx_setfont(1,"Arial",10*zoom);
 black();
 
 gfx_x = oswitchx = drawbars_x - 65*zoom; 
 gfx_y = oswitchy = 70*zoom;
 oswitch = organ_type;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("C",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("B",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_org_type_x = oswitchx + 3*zoom; gfx_org_type_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("TYP",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 
 
 gfx_x = oswitchx = drawbars_x + 75*zoom; 
 gfx_y = oswitchy = 330*zoom;
 osc2.level ? oswitch = 0 : oswitch = 1;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_perc_on_x = oswitchx + 3*zoom; gfx_perc_on_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("PERC",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_x = oswitchx = drawbars_x + 135*zoom;
 gfx_y = oswitchy = 330*zoom;
 perc_vol ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("SOFT",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("NORM",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_perc_vol_x = oswitchx + 3*zoom; gfx_perc_vol_y = oswitchy + 3*zoom;
 gfx_y -= 36*zoom; gfx_x = oswitchx;
 gfx_drawstr("PERC",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 11*zoom; gfx_x = oswitchx;
 gfx_drawstr("VOL",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_x = oswitchx = drawbars_x + 195*zoom; 
 gfx_y = oswitchy = 330*zoom;
 perc_decay ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("FAST",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("SLOW",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_perc_decay_x = oswitchx + 3*zoom; gfx_perc_decay_y = oswitchy + 3*zoom;
 gfx_y -= 36*zoom; gfx_x = oswitchx;
 gfx_drawstr("PERC",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 11*zoom; gfx_x = oswitchx;
 gfx_drawstr("DECAY",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 
 gfx_x = oswitchx = drawbars_x + 255*zoom; 
 gfx_y = oswitchy = 330*zoom;
 perc_harm ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("3rd",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("2nd",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_perc_harm_x = oswitchx + 3*zoom; gfx_perc_harm_y = oswitchy + 3*zoom;
 gfx_y -= 36*zoom; gfx_x = oswitchx;
 gfx_drawstr("PERC",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 11*zoom; gfx_x = oswitchx;
 gfx_drawstr("HARM",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_x = oswitchx = drawbars_x + 315*zoom; 
 gfx_y = oswitchy = 330*zoom;
 perc_poly ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("SINGLE",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("MULTI",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_perc_mode_x = oswitchx + 3*zoom; gfx_perc_mode_y = oswitchy + 3*zoom;
 gfx_y -= 36*zoom; gfx_x = oswitchx;
 gfx_drawstr("PERC",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 11*zoom; gfx_x = oswitchx;
 gfx_drawstr("MODE",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 
 
 gfx_x = oswitchx = drawbars_x + 395*zoom; 
 gfx_y = oswitchy = 330*zoom;
 !org_click ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("Off",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_click_x = oswitchx + 3*zoom; gfx_click_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("CLICK",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 
 
 speaker_model == 1 ? (
 gfx_x = oswitchx = drawbars_x - 65*zoom; 
 gfx_y = oswitchy = 330*zoom;
 !org_speed ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("Off",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_rotor_x = oswitchx + 3*zoom; gfx_rotor_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("ROTOR",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_x = oswitchx = drawbars_x - 5*zoom; 
 gfx_y = oswitchy = 330*zoom;
 last_speed == 1 ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("HIGH",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("LOW",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_speed_x = oswitchx + 3*zoom; gfx_speed_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("SPEED",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 );
 
 gfx_x = oswitchx = drawbars_x + 395*zoom; 
 gfx_y = oswitchy = 200*zoom;
 !revtype ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("BIG",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("SMALL",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_rev_x = oswitchx + 3*zoom; gfx_rev_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("REV",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 reverb_level.knob();
 #label = "OFF";
 reverb_level.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 reverb_level.org_label(5);
 #label = "10";
 reverb_level.org_label(9);
 #label = "Reverb"; gfx_measurestr(#label, klw, klh);reverb_level.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 scanner.knob();
 #label = "OFF";
 scanner.org_label(0.7);
 #label = "V1";
 scanner.org_label(2.2);
 #label = "C1";
 scanner.org_label(3.8);
 #label = "V2";
 scanner.org_label(5);
 #label = "C2";
 scanner.org_label(6.2);
 #label = "V3";
 scanner.org_label(7.8);
 #label = "C3";
 scanner.org_label(9.3);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "Vibrato"; gfx_measurestr(#label, klw, klh);scanner.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 drive.knob();
 #label = "OFF";
 drive.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 drive.org_label(5);
 #label = "10";
 drive.org_label(9);
 #label = "Drive"; gfx_measurestr(#label, klw, klh);drive.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 speaker_model == 1 ? (
 gfx_setfont(1,"Arial",10*zoom,'b');
 horn_level.knob();
 #label = "OFF";
 horn_level.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 horn_level.org_label(5);
 #label = "10";
 horn_level.org_label(9);
 #label = "Horn"; gfx_measurestr(#label, klw, klh);horn_level.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 drum_level.knob();
 #label = "OFF";
 drum_level.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 drum_level.org_label(5);
 #label = "10";
 drum_level.org_label(9);
 #label = "Drum"; gfx_measurestr(#label, klw, klh);drum_level.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 );
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 Main_out.knob();
 #label = "OFF";
 Main_out.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 Main_out.org_label(5);
 #label = "10";
 Main_out.org_label(9);
 #label = "Output"; gfx_measurestr(#label, klw, klh);Main_out.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 250*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; gfx_drawstr("DB");
 gfx_x = 250*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("DB");
 ledon = slider52==0; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 300*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; gfx_drawstr("P 1");
 gfx_x = 300*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 1");
 ledon = slider52==1; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 350*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 2");
 gfx_x = 350*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 2");
 ledon = slider52==2; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 400*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 3");
 gfx_x = 400*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 3");
 ledon = slider52==3; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 450*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 4");
 gfx_x = 450*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 4");
 ledon = slider52==4; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 500*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 5");
 gfx_x = 500*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 5");
 ledon = slider52==5; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 550*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 6");
 gfx_x = 550*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 6");
 ledon = slider52==6; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 600*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 7");
 gfx_x = 600*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 7");
 ledon = slider52==7; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 650*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 8");
 gfx_x = 650*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 8");
 ledon = slider52==8; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 700*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 9");
 gfx_x = 700*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 9");
 ledon = slider52==9; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 750*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,113*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("Midi Channel "); gfx_drawnumber(midi_channel,0);
 gfx_x = 750*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("Midi Channel "); gfx_drawnumber(midi_channel,0);
 //ledon = slider52==9; gfx_y -= 6*zoom;
 //gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 7*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,70*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("FX only");
 gfx_x = 7*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("FX only");
 ledon = !eco_mode; gfx_x = 7*zoom + 44*zoom; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 81*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,70*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=13*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("ECO");
 gfx_x = 81*zoom + 12*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("ECO");
 ledon = eco_mode == 1 || !organ_type; gfx_x = 81*zoom + 44*zoom; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 155*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,70*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=13*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("HQ");
 gfx_x = 155*zoom + 12*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("HQ");
 ledon = eco_mode == 2 || !organ_type; gfx_x = 155*zoom + 44*zoom; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 
 
 
 
 // OVERLAY
 gfx_x = 8*zoom;
 gfx_y = drawbars_y; 
 rgb(255,215,0); gfx_a = 0.6;
 gfx_roundrect(gfx_x-3*zoom,gfx_y-3*zoom,880*zoom,2000*zoom,2*zoom);
 gfx_roundrect(gfx_x-6*zoom,gfx_y-6*zoom,886*zoom,2000*zoom,2*zoom);
 gfx_a = 0.5;
 gfx_blit(21,0.5*zoom,0,0,0,1750, 900);
 //gfx_y = drawbars_y+250*zoom;
 //gfx_blit(21,0.5*zoom,0,0,0,900, 500);
 

 g_collision(300*zoom, 33*zoom, 43*zoom, 17*zoom) ? p1.draw_preset(300*zoom, 50*zoom, 100*zoom, 80*zoom, 1);
 g_collision(350*zoom, 33*zoom, 43*zoom, 17*zoom) ? p2.draw_preset(350*zoom, 50*zoom, 100*zoom, 80*zoom, 2);
 g_collision(400*zoom, 33*zoom, 43*zoom, 17*zoom) ? p3.draw_preset(400*zoom, 50*zoom, 100*zoom, 80*zoom, 3);
 g_collision(450*zoom, 33*zoom, 43*zoom, 17*zoom) ? p4.draw_preset(450*zoom, 50*zoom, 100*zoom, 80*zoom, 4);
 g_collision(500*zoom, 33*zoom, 43*zoom, 17*zoom) ? p5.draw_preset(500*zoom, 50*zoom, 100*zoom, 80*zoom, 5);
 g_collision(550*zoom, 33*zoom, 43*zoom, 17*zoom) ? p6.draw_preset(550*zoom, 50*zoom, 100*zoom, 80*zoom, 6);
 g_collision(600*zoom, 33*zoom, 43*zoom, 17*zoom) ? p7.draw_preset(600*zoom, 50*zoom, 100*zoom, 80*zoom, 7);
 g_collision(650*zoom, 33*zoom, 43*zoom, 17*zoom) ? p8.draw_preset(650*zoom, 50*zoom, 100*zoom, 80*zoom, 8);
 g_collision(700*zoom, 33*zoom, 43*zoom, 17*zoom) ? p9.draw_preset(700*zoom, 50*zoom, 100*zoom, 80*zoom, 9);
 
 
 
 ); ////////////////// GFX PAGE 1
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
   gfx_page == 2 ? (
   
   
   gfx_y = drawbars_y = 60*zoom;
   gfx_a = 1;
   
   gfx_x = drawbars_x = 90 * zoom;
   
   
   mic_angle.parameter_config    (41,       90,      0,    180,     570,  350,  140,    101,   1,       16);
   
 
  gfx_x = mic_select_x = 210*zoom; gfx_y = mic_select_y = 350*zoom;
  
  
  speaker_model ? (
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 150);
  gfx_blit(17, 0.8*zoom/2, 0, 0, 1650, 150, 150);
  gfx_mic == 2 ? greenframe = 1 : greenframe = 0;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
  gfx_x += 70*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 150);
  gfx_y += 9*zoom; gfx_x += 4*zoom;gfx_blit(17, 0.7*zoom/2, 0, 0, 2100, 150, 150);gfx_y -= 9*zoom; gfx_x -= 4*zoom;
  gfx_mic == 1 ? greenframe = 1 : greenframe = 0;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
  gfx_x += 70*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 150);
  gfx_blit(17, 0.8*zoom/2, 0, 0, 2250, 150, 150);
  gfx_mic == 5 ? greenframe = 1 : greenframe = 0;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
  gfx_x += 70*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 150);
  gfx_blit(17, 0.8*zoom/2, 0, 0, 2400, 150, 150);
  gfx_mic == 4 ? greenframe = 1 : greenframe = 0;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
  gfx_x += 70*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 150);
  gfx_blit(17, 0.8*zoom/2, 0, 0, 2550, 150, 150);
  gfx_mic == 3 ? greenframe = 1 : greenframe = 0;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
  ); 
 
 /*  
   gfx_x = 80*zoom; gfx_y = 7*zoom;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 110, 150, 42);
   gfx_x += 55*zoom; gfx_y -= 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 0, 150, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 110, 150, 42);
 */
 
 speaker_model == 1 ? greenframe = 1 : greenframe = 0;
 gfx_x = 80*zoom; gfx_y = 7*zoom;
 gfx_x += 5*zoom; gfx_blit(23,0.5*zoom,0,9,50*greenframe,198,50);
 /*
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 139, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe)+ 110, 140, 41);
   gfx_x += 55*zoom; gfx_y -= 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe), 140, 42);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe)+110, 140, 41);
 */
 gfx_x = 80*zoom; gfx_y = 7*zoom + 7*zoom +greenframe*zoom;
 speaker_model == 1 ? black() : rgb(50,50,50);
   gfx_drawstr("Rotor Amp",  0x05, gfx_x + 112*zoom, gfx_y + gfx_texth);
 
 /*
  gfx_x = 210*zoom; gfx_y = 7*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 45);
  gfx_y += 10;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 110, 150, 42);
  gfx_x += 55*zoom; gfx_y -= 10;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 0, 150, 45);
  gfx_y += 10;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 110, 150, 42);
 */
 speaker_model == 2 ? greenframe = 1 : greenframe = 0;
 gfx_x = 210*zoom; gfx_y = 7*zoom;
  gfx_x += 5*zoom; gfx_blit(23,0.5*zoom,0,9,50*greenframe,198,50);
   /*
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 139, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe)+ 110, 140, 41);
   gfx_x += 55*zoom; gfx_y -= 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe), 140, 42);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe)+110, 140, 41);
 */
 gfx_x = 210*zoom; gfx_y = 7*zoom + 7*zoom+greenframe*zoom;;
 speaker_model == 2 ? black() : rgb(50,50,50);
   gfx_drawstr("Combo Amp",  0x05, gfx_x + 112*zoom, gfx_y + gfx_texth);
   
   /*
  gfx_x = 340*zoom; gfx_y = 7*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 45);
  gfx_y += 10;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 110, 150, 42);
  gfx_x += 55*zoom; gfx_y -= 10;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 0, 150, 45);
  gfx_y += 10;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 110, 150, 42);
 */
 speaker_model == 0 ? greenframe = 1 : greenframe = 0;
 gfx_x = 340*zoom; gfx_y = 7*zoom;
   gfx_x += 5*zoom; gfx_blit(23,0.5*zoom,0,9,50*greenframe,198,50);
 /*
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 139, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe)+ 110, 140, 41);
   gfx_x += 55*zoom; gfx_y -= 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe), 140, 42);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe)+110, 140, 41);
 */
 gfx_x = 340*zoom; gfx_y =7*zoom + 7*zoom+greenframe*zoom;;
 speaker_model == 0 ? black() : rgb(50,50,50);
   gfx_drawstr("Direct Out",  0x05, gfx_x + 112*zoom, gfx_y + gfx_texth);
   
   
   
 speaker_model == 1 ? (
 
 /*
  gfx_x = 350*zoom; gfx_y = 417*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 45);
  gfx_y += 6*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 0, 110, 150, 41);
  gfx_x += 55*zoom; gfx_y -= 6*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 0, 150, 45);
  gfx_y += 6*zoom;
  gfx_blit(17, 0.8*zoom/2, 0, 10, 110, 150, 41);
 gfx_open == 1 ? greenframe = 1 : greenframe = 0;
 gfx_x = 350*zoom; gfx_y = 417*zoom;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 139, 45);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe)+ 110, 140, 41);
   gfx_x += 55*zoom; gfx_y -= 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe), 140, 42);
   gfx_y += 10;
   gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe)+110, 140, 41);
 gfx_x = 373*zoom; gfx_y = 424*zoom;
 gfx_open == 1 ? black() : rgb(50,50,50);
   gfx_drawstr("Cab Closed");//,  0x05, gfx_x + 112*zoom, gfx_y + 15*zoom);
   
   
    //gfx_setfont(1,"Arial",14*zoom,'b');
    gfx_x = 220*zoom; gfx_y = 417*zoom;
    gfx_blit(17, 0.8*zoom/2, 0, 0, 0, 150, 45);
    gfx_y += 10;
    gfx_blit(17, 0.8*zoom/2, 0, 0, 110, 150, 42);
    gfx_x += 55*zoom; gfx_y -= 10;
    gfx_blit(17, 0.8*zoom/2, 0, 10, 0, 150, 45);
    gfx_y += 10;
    gfx_blit(17, 0.8*zoom/2, 0, 10, 110, 150, 42);
   gfx_open == 0 ? greenframe = 1 : greenframe = 0;
   gfx_x = 220*zoom; gfx_y = 417*zoom;
     gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 139, 45);
     gfx_y += 10;
     gfx_blit(17, 0.8*zoom/2, 0, 0, 150*(1 + greenframe)+ 110, 140, 41);
     gfx_x += 55*zoom; gfx_y -= 10;
     gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe), 140, 42);
     gfx_y += 10;
     gfx_blit(17, 0.8*zoom/2, 0, 10, 150*(1 + greenframe)+110, 140, 41);
   gfx_x = 245*zoom; gfx_y = 424*zoom;
   gfx_open == 0 ? black() : rgb(50,50,50);
     gfx_drawstr("Cab Open");//,  0x05, gfx_x + 112*zoom, gfx_y + 15*zoom);
  */   
     black();
       gfx_setfont(1,"Arial",10*zoom);
 
 gfx_x = oswitchx = drawbars_x + 55*zoom; 
 gfx_y = oswitchy = 330*zoom;
 gfx_open ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("OPEN",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("CLOSED",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_open_x = oswitchx + 3*zoom; gfx_open_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("CAB",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
   
 gfx_x = oswitchx = drawbars_x - 65*zoom; 
 gfx_y = oswitchy = 330*zoom;
 !org_speed ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_rotor_x = oswitchx + 3*zoom; gfx_rotor_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("ROTOR",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_x = oswitchx = drawbars_x - 5*zoom; 
 gfx_y = oswitchy = 330*zoom;
 last_speed == 1 ? oswitch = 1 : oswitch = 0;
 gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
 gfx_y += 13*zoom + oswitch*zoom*3;
 gfx_drawstr("HIGH",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_y += 63*zoom; gfx_x = oswitchx;
 gfx_drawstr("LOW",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 gfx_speed_x = oswitchx + 3*zoom; gfx_speed_y = oswitchy + 3*zoom;
 gfx_y -= 33*zoom; gfx_x = oswitchx;
 gfx_drawstr("SPEED",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 drum_slow.knob();
 #label = "0";
 drum_slow.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "0.5";
 drum_slow.org_label(5);
 #label = "1";
 drum_slow.org_label(9);
 #label = "Drum Slow"; gfx_measurestr(#label, klw, klh);drum_slow.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 horn_slow.knob();
 #label = "0";
 horn_slow.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "0.5";
 horn_slow.org_label(5);
 #label = "1";
 horn_slow.org_label(9);
 #label = "Horn Slow"; gfx_measurestr(#label, klw, klh);horn_slow.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 drum_fast.knob();
 #label = "0";
 drum_fast.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "2.5";
 drum_fast.org_label(5);
 #label = "5";
 drum_fast.org_label(9);
 #label = "Drum Fast"; gfx_measurestr(#label, klw, klh);drum_fast.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 horn_fast.knob();
 #label = "0";
 horn_fast.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "2.5";
 horn_fast.org_label(5);
 #label = "5";
 horn_fast.org_label(9);
 #label = "Horn Fast"; gfx_measurestr(#label, klw, klh);horn_fast.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 drum_slower.knob();
 #label = "0";
 drum_slower.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "1.5";
 drum_slower.org_label(5);
 #label = "3";
 drum_slower.org_label(9);
 #label = "Drum Slow Down"; gfx_measurestr(#label, klw, klh);drum_slower.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 horn_slower.knob();
 #label = "0";
 horn_slower.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "1.5";
 horn_slower.org_label(5);
 #label = "3";
 horn_slower.org_label(9);
 #label = "Horn Slow Down"; gfx_measurestr(#label, klw, klh);horn_slower.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 drum_faster.knob();
 #label = "0";
 drum_faster.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "1.5";
 drum_faster.org_label(5);
 #label = "3";
 drum_faster.org_label(9);
 #label = "Drum Speed Up"; gfx_measurestr(#label, klw, klh);drum_faster.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 horn_faster.knob();
 #label = "0";
 horn_faster.org_label(1);
 //gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "1.5";
 horn_faster.org_label(5);
 #label = "3";
 horn_faster.org_label(9);
 #label = "Horn Speed Up"; gfx_measurestr(#label, klw, klh);horn_faster.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 crossover.knob();
 #label = "OFF";
 crossover.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 crossover.org_label(5);
 #label = "10";
 crossover.org_label(9);
 #label = "Crossover"; gfx_measurestr(#label, klw, klh);crossover.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 #label = sprintf(#,"%i", per_to_freq(x_over,100)); #label += " Hz";
 gfx_y += 11*zoom; gfx_x = crossover.xIn*zoom;
 gfx_drawstr(#label,  0x05, gfx_x + crossover.size*zoom*0.5, gfx_y + gfx_texth);
  
  
 gfx_setfont(1,"Arial",10*zoom,'b');
 horn_level.knob();
 #label = "OFF";
 horn_level.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 horn_level.org_label(5);
 #label = "10";
 horn_level.org_label(9);
 #label = "Horn"; gfx_measurestr(#label, klw, klh);horn_level.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 gfx_setfont(1,"Arial",10*zoom,'b');
 drum_level.knob();
 #label = "OFF";
 drum_level.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "5";
 drum_level.org_label(5);
 #label = "10";
 drum_level.org_label(9);
 #label = "Drum"; gfx_measurestr(#label, klw, klh);drum_level.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);






 gfx_setfont(1,"Arial",10*zoom,'b');
 mic_angle.knob();
 #label = "0°";
 mic_angle.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "90°";
 mic_angle.org_label(5);
 #label = "180°";
 mic_angle.org_label(9);
 #label = "Horn Mic Angle"; gfx_measurestr(#label, klw, klh);mic_angle.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);

 gfx_setfont(1,"Arial",10*zoom,'b');
 mic_width.knob();
 #label = "0";
 mic_width.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "0.5";
 mic_width.org_label(5);
 #label = "1";
 mic_width.org_label(9);
 #label = "Horn Mic Stereo"; gfx_measurestr(#label, klw, klh);mic_width.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
 
 ); // speaker Model = rotor amp
 
 
 speaker_model == 2 ? (
 cabinet_x = 193; cabinet_y = 90;

 gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
 gfx_blit(18, zoom/2, 0, 0, 468 * 4, 740, 468);

 gfx_blit(18, zoom/2, 0, 0, 0, 740, 468);
 );
 
 
 speaker_model == 0 ? (
 cabinet_x = 155; cabinet_y = 90;

 gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
 gfx_blit(18, zoom/2, 0, 0, 468 * 1, 740, 468);

 );
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 rgb(255,215,0);
 gfx_a = 0.6;
 gfx_x = 814*zoom; gfx_y = 45*zoom;
 gfx_roundrect(gfx_x, gfx_y,60*zoom,240*zoom,2*zoom);
 gfx_y += 10*zoom; gfx_a =0.8;
 gfx_drawstr("PAGE",  0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
 
 

 speaker_model == 1 ? (
 gfx_a = 0.6;
 gfx_x = 25*zoom; gfx_y = 65*zoom;
 gfx_roundrect(gfx_x, gfx_y,515*zoom,250*zoom,2*zoom);
 gfx_y -= 14*zoom; 
 gfx_a =0.8;
 gfx_drawstr("MOTOR SETTINGS",  0x05, gfx_x + 515*zoom, gfx_y + gfx_texth);
 
 gfx_a = 0.6;
 gfx_x = 545*zoom; gfx_y = 65*zoom;
 gfx_roundrect(gfx_x, gfx_y,248*zoom,250*zoom,2*zoom);
 gfx_y -= 14*zoom; 
 gfx_a =0.8;
 gfx_drawstr("SPEAKER SETTINGS",  0x05, gfx_x + 248*zoom, gfx_y + gfx_texth);
 
 gfx_a = 0.6;
 gfx_x = 139*zoom; gfx_y = 323*zoom;
 gfx_roundrect(gfx_x, gfx_y,655*zoom,115*zoom,2*zoom);
 gfx_y += 100*zoom; 
 gfx_a =0.6;
 gfx_drawstr("MICROPHONE SETTINGS",  0x05, gfx_x + 478*zoom, gfx_y + gfx_texth);
 );
 
 speaker_model == 2 ? (
 gfx_a = 0.6;
 gfx_x = 199*zoom; gfx_y = 338*zoom;
 gfx_roundrect(gfx_x, gfx_y,360*zoom,100*zoom,2*zoom);
 gfx_y += 83*zoom; 
 gfx_a =0.6;
 gfx_drawstr("MICROPHONE SETTINGS",  0x05, gfx_x + 360*zoom, gfx_y + gfx_texth);
 );
 
 // OVERLAY
 gfx_x = 8*zoom;
 gfx_y = 40*zoom; 
 rgb(255,215,0); gfx_a = 0.6;
 gfx_roundrect(gfx_x-3*zoom,gfx_y-3*zoom,880*zoom,2000*zoom,2*zoom);
 gfx_roundrect(gfx_x-6*zoom,gfx_y-6*zoom,886*zoom,2000*zoom,2*zoom);
 gfx_a = .5;
 gfx_blit(21,0.5*zoom,0,0,0,1750, 900);
 
 
 ); ////////////////// GFX PAGE 2
 

 
 
 
 
 gfx_page == 3 ? (
 gfx_hphi = hphi - $pi/2;
 gfx_lphi = lphi;
 black();
 sgfx_X = 40*zoom; sgfx_y = 50*zoom; sgfx_w = 200*zoom; sgfx_h = 150*zoom; s_radius = 40*zoom;
 gfx_rect(sgfx_x,sgfx_y,sgfx_w,sgfx_h);
 
 motor_stop && turn_by_hand == 0 ? (rgb(200,0,200);gfx_a = 1): (lightgrey();gfx_a = 0.65);
 //gfx_a = 0.65;
 gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius);
 gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius-2*zoom);
 gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius-4*zoom);


black();gfx_a = 1;
gfx_arc(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius, gfx_lphi-0.25, gfx_lphi+0.25);
gfx_arc(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius-2*zoom, gfx_lphi-0.25, gfx_lphi+0.25);
gfx_arc(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2, s_radius-4*zoom, gfx_lphi-0.25, gfx_lphi+0.25);
 
motor_stop && turn_by_hand == 1 ? (rgb(200,0,200);gfx_a = 1): (lightgrey(); gfx_a = 1);
 gfx_triangle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2,  
              sgfx_x+sgfx_w/2+ cos(gfx_hphi-0.2)*s_radius, sgfx_y+sgfx_h/2+ sin(gfx_hphi-0.2)*s_radius,
              sgfx_x+sgfx_w/2+ cos(gfx_hphi+0.2)*s_radius, sgfx_y+sgfx_h/2+ sin(gfx_hphi+0.2)*s_radius);
              gfx_a = 0.6;
 gfx_triangle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/2,  
              sgfx_x+sgfx_w/2- cos(gfx_hphi-0.2)*s_radius, sgfx_y+sgfx_h/2- sin(gfx_hphi-0.2)*s_radius,
              sgfx_x+sgfx_w/2- cos(gfx_hphi+0.2)*s_radius, sgfx_y+sgfx_h/2- sin(gfx_hphi+0.2)*s_radius);
              gfx_a = 1;
              
              lakeblue();
              gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/8, 3*zoom);
              gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/8, 2*zoom);
              gfx_circle(sgfx_x+sgfx_w/2,sgfx_y+sgfx_h/8, 1*zoom);
              
              green();
              xsin = mic_angle/2;
              xsinoff = cos((twopi*xsin/360)-$pi/2) * 58*zoom;
              ysinoff = sin((twopi*xsin/360)-$pi/2) * (58*zoom);
              gfx_circle(sgfx_x+sgfx_w/2 + xsinoff,sgfx_y+sgfx_h/2+ysinoff, 4*zoom);
              gfx_circle(sgfx_x+sgfx_w/2 - xsinoff,sgfx_y+sgfx_h/2+ysinoff, 4*zoom);
              
              black();
              gfx_setfont(1,"Arial",10*zoom,'b');
              gfx_x = oswitchx = 260*zoom; 
              gfx_y = oswitchy = 75*zoom;
              !turn_by_hand ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("HORN",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("DRUM",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_tbh_x = oswitchx + 3*zoom; gfx_tbh_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("TOUCH",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              
              gfx_x = oswitchx = 740*zoom; 
              gfx_y = oswitchy = 75*zoom;
              !slider(reverb_post.slider) ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("POST",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("PRE",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_rev_post_x = oswitchx + 3*zoom; gfx_rev_post_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("REV",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              
              
              gfx_x = oswitchx = 740*zoom; 
              gfx_y = oswitchy = 275*zoom;
              !org_click ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("Off",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_click_x = oswitchx + 3*zoom; gfx_click_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("CLICK",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              
 mic_angle.parameter_config    (41,       90,      0,    180,     350,  95,  140,    101,   1,       16);
 black();
 gfx_setfont(1,"Arial",10*zoom,'b');
 mic_angle.knob();
 #label = "0°";
 mic_angle.org_label(1);
 gfx_setfont(1,"Arial",12*zoom,'b');
 #label = "90°";
 mic_angle.org_label(5);
 #label = "180°";
 mic_angle.org_label(9);
 #label = "Horn Mic Angle"; gfx_measurestr(#label, klw, klh);mic_angle.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              
              small_rev.parameter_config    (24,       5,       0,    10,      500,  95,  140,    101,   1,       16);
              big_rev.parameter_config      (25,       5,       0,    10,      630,  95,  140,    101,   1,       16);
              click_Freq.parameter_config   (19,       4,       0,    10,      500,  290,  140,    101,   1,       16);
              Click_Volume.parameter_config (20,       3,       0,    10,      630,  290,  140,    101,   1,       16);
              leakage.parameter_config      (51,       3,       0,    10,      375,  290,  140,    101,   1,       16);
              leakage.knob();
              #label = "0";
              leakage.org_label(1);
              gfx_setfont(1,"Arial",12*zoom,'b');
              #label = "5";
              leakage.org_label(5);
              #label = "10";
              leakage.org_label(9);
              #label = "Drawbar Leakage"; gfx_measurestr(#label, klw, klh);leakage.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              small_rev.knob();
              #label = "0";
              small_rev.org_label(1);
              gfx_setfont(1,"Arial",12*zoom,'b');
              #label = "5";
              small_rev.org_label(5);
              #label = "10";
              small_rev.org_label(9);
              #label = "Small Reverb"; gfx_measurestr(#label, klw, klh);small_rev.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              big_rev.knob();
              #label = "0";
              big_rev.org_label(1);
              gfx_setfont(1,"Arial",12*zoom,'b');
              #label = "5";
              big_rev.org_label(5);
              #label = "10";
              big_rev.org_label(9);
              #label = "Big Reverb"; gfx_measurestr(#label, klw, klh);big_rev.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              click_freq.knob();
              #label = "0";
              click_freq.org_label(1);
              gfx_setfont(1,"Arial",12*zoom,'b');
              #label = "5";
              click_freq.org_label(5);
              #label = "10";
              click_freq.org_label(9);
              #label = "Tone"; gfx_measurestr(#label, klw, klh);click_freq.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              click_volume.knob();
              #label = "0°";
              click_volume.org_label(1);
              gfx_setfont(1,"Arial",12*zoom,'b');
              #label = "5";
              click_volume.org_label(5);
              #label = "10";
              click_volume.org_label(9);
              #label = "Volume"; gfx_measurestr(#label, klw, klh);click_volume.knoblabelposition(klw); gfx_y -= 5*zoom; gfx_drawstr(#label);
              
              
              
              
              
              black();
              gfx_setfont(1,"Arial",10*zoom,'b');
              gfx_x = oswitchx = 40*zoom; 
              gfx_y = oswitchy = 255*zoom;
              !slider(use_c.slider) ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              gfx_use_c_x = oswitchx + 3*zoom; gfx_use_c_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("C-KEY",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              rgb(255,215,0); gfx_a = 0.7;
              gfx_x = oswitchx-25*zoom; gfx_y = oswitchy + 110*zoom;
              gfx_drawstr("Use Preset",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("C-Key for",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("Rotor-Start",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              
              
              black(); gfx_a = 1;
              gfx_setfont(1,"Arial",10*zoom,'b');
              gfx_x = oswitchx = 120*zoom; 
              gfx_y = oswitchy = 255*zoom;
              !slider(use_pitch.slider) ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              gfx_use_pitch_x = oswitchx + 3*zoom; gfx_use_pitch_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("P-W",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              rgb(255,215,0); gfx_a = 0.7;
              gfx_x = oswitchx-25*zoom; gfx_y = oswitchy + 110*zoom;
              gfx_drawstr("Use Pitch",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("Wheel for",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("Rotor-Speed",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              
              
              black(); gfx_a = 1;
              gfx_setfont(1,"Arial",10*zoom,'b');
              gfx_x = oswitchx = 200*zoom; 
              gfx_y = oswitchy = 255*zoom;
              !slider(use_mod.slider) ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              gfx_use_mod_x = oswitchx + 3*zoom; gfx_use_mod_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("M-W",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              rgb(255,215,0); gfx_a = 0.7;
              gfx_x = oswitchx-25*zoom; gfx_y = oswitchy + 110*zoom;
              gfx_drawstr("Use Mod",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("Wheel for",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("Volume control",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              
              
              
              black(); gfx_a = 1;
              gfx_setfont(1,"Arial",10*zoom,'b');
              gfx_x = oswitchx = 280*zoom; 
              gfx_y = oswitchy = 255*zoom;
              !slider(use_preset.slider) ? oswitch = 1 : oswitch = 0;
              gfx_blit(14,0.5*zoom,0,0,10+oswitch* 215,100,210);
              gfx_y += 13*zoom + oswitch*zoom*3;
              gfx_drawstr("ON",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              gfx_y += 63*zoom; gfx_x = oswitchx;
              gfx_drawstr("OFF",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              
              gfx_use_preset_x = oswitchx + 3*zoom; gfx_use_preset_y = oswitchy + 3*zoom;
              gfx_y -= 33*zoom; gfx_x = oswitchx;
              gfx_drawstr("PRST",  0x05, oswitchx + 51*zoom, gfx_y + gfx_texth);
              rgb(255,215,0); gfx_a = 0.7;
              gfx_x = oswitchx-25*zoom; gfx_y = oswitchy + 110*zoom;
              gfx_drawstr("Use low",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("octave for",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              gfx_x = oswitchx-25*zoom; gfx_y += 13*zoom;
              gfx_drawstr("preset control",  0x05, gfx_x + 101*zoom, gfx_y + gfx_texth);
              
              
              
              gfx_setfont(1,"Arial",13*zoom,'b');
              rgb(255,215,0); 
              
              gfx_a = 0.6;
              gfx_x = 35*zoom; gfx_y = 45*zoom;
              gfx_roundrect(gfx_x, gfx_y,410*zoom,175*zoom,2*zoom);
              gfx_y += 160*zoom; gfx_a =0.8;
              gfx_drawstr("TOUCH ROTARY SPEAKER",  0x05, gfx_x + 410*zoom, gfx_y + gfx_texth);
              
              gfx_a = 0.6;
              gfx_x = 450*zoom; gfx_y = 45*zoom;
              gfx_roundrect(gfx_x, gfx_y,350*zoom,175*zoom,2*zoom);
              gfx_y += 160*zoom; gfx_a =0.8;
              gfx_drawstr("REVERB SETTINGS",  0x05, gfx_x + 350*zoom, gfx_y + gfx_texth);
              
              gfx_a = 0.6;
              gfx_x = 35*zoom; gfx_y = 232*zoom;
              gfx_roundrect(gfx_x, gfx_y,305*zoom,180*zoom,2*zoom);
              gfx_y += 5*zoom; gfx_a =0.8;
              gfx_drawstr("PERFORMANCE CONTROLS",  0x05, gfx_x + 305*zoom, gfx_y + gfx_texth);
              
              gfx_a = 0.6;
              gfx_x = 350*zoom; gfx_y = 232*zoom;
              gfx_roundrect(gfx_x, gfx_y,450*zoom,180*zoom,2*zoom);
              gfx_y += 5*zoom; gfx_a =0.8;
              gfx_drawstr("INSTRUMENT CONDITION",  0x05, gfx_x + 450*zoom, gfx_y + gfx_texth);
              
              gfx_setfont(1,"Arial",13*zoom,'b');
              rgb(255,215,0);
              gfx_a = 0.6;
              gfx_x = 814*zoom; gfx_y = 45*zoom;
              gfx_roundrect(gfx_x, gfx_y,60*zoom,240*zoom,2*zoom);
              gfx_y += 10*zoom; gfx_a =0.8;
              gfx_drawstr("PAGE",  0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
              
              
              
              gfx_a = 1;
              greenframe = 0;
              gfx_x = 130*zoom; gfx_y = 420*zoom;
              gfx_x += 5*zoom; gfx_blit(23,0.5*zoom,0,9,50*greenframe,198,50);
              gfx_x = 130*zoom; gfx_y = 420*zoom + 7*zoom +greenframe*zoom;
              black();
              gfx_drawstr("Select Oct",  0x05, gfx_x + 112*zoom, gfx_y + gfx_texth);
              
              select_low_oct ? (
              black();
              gfx_rect(150*zoom, 100*zoom, 400*zoom, 300*zoom);
              
              gfx_x = 290*zoom; gfx_y = 360*zoom;
              gfx_x += 5*zoom; gfx_blit(23,0.5*zoom,0,9,50*greenframe,198,50);
              gfx_x = 290*zoom; gfx_y = 360*zoom + 7*zoom +greenframe*zoom;
              black();
              gfx_drawstr("Cancel",  0x05, gfx_x + 112*zoom, gfx_y + gfx_texth);
              
              rgb(255,215,0); gfx_a = 0.9;
              gfx_x = 150*zoom; gfx_y = 110*zoom;
              gfx_drawstr("SELECT LOW OCTAVE FOR PERFORMANCE CONTROLS",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 26*zoom;
              gfx_drawstr("!! Press the lowest key of the desired octave !!",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 14*zoom;
              gfx_drawstr("(Usually a C-key)",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 26*zoom;
              gfx_drawstr("The performance control key octave:",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 26*zoom;
              gfx_drawstr("C: Rotor motor Start/Stop",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 14*zoom;
              gfx_drawstr("C# - A: Call drawbar presets 1 - 9",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 14*zoom;
              gfx_drawstr("Bb: Play actual organ drawbar setting",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 14*zoom;
              gfx_drawstr("B: Percussion on/off",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 26*zoom;
              gfx_drawstr("If you choose other than a 'c' for the lowest octave",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              gfx_x = 150*zoom; gfx_y += 14*zoom;
              gfx_drawstr("the performance control keys shift acordingly.",  0x05, gfx_x + 400*zoom, gfx_y + gfx_texth);
              );
                
                
  // OVERLAY
  gfx_x = 8*zoom;
  gfx_y = 30*zoom; 
  rgb(255,215,0); gfx_a = 0.6;
  gfx_roundrect(gfx_x-3*zoom,gfx_y-3*zoom,880*zoom,2000*zoom,2*zoom);
  gfx_roundrect(gfx_x-6*zoom,gfx_y-6*zoom,886*zoom,2000*zoom,2*zoom);
  gfx_a = .5;
  gfx_blit(21,0.5*zoom,0,0,0,1750, 900);
  
  
 ); /// Page 3
 
 
 
 
 
 
 gfx_page == 4 ? (
 
 
 
 
 gfx_y = drawbars_y = 60*zoom;
 gfx_a = 1;
 
 gfx_x = drawbars_x = 90 * zoom;
 drout = 345 - drawbar1 * 43.1;
 gfx_blit(11,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 40 * zoom;
 drout = 345 - drawbar2 * 43.1;
 organ_type == 1 ? gfx_blit(11,zoom*0.5,0,0,15+drout,80,500);
   
 gfx_x = drawbars_x + 80 * zoom;
 drout = 345 - drawbar3 * 43.1;
 gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 120 * zoom;
 drout = 345 - drawbar4 * 43.1;
 gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 160 * zoom;
 drout = 345 - drawbar5 * 43.1;
 gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 200 * zoom;
 drout = 345 - drawbar6 * 43.1;
 gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 240 * zoom;
 drout = 345 - drawbar7 * 43.1;
 gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 280 * zoom;
 drout = 345 - drawbar8 * 43.1;
 organ_type == 1 ? gfx_blit(13,zoom*0.5,0,0,15+drout,80,500);
 
 gfx_x = drawbars_x + 320 * zoom;
 drout = 345 - drawbar9 * 43.1;
 gfx_blit(12,zoom*0.5,0,0,15+drout,80,500);
 
 
 
 p1.draw_preset(480*zoom, 80*zoom, 100*zoom, 80*zoom, 1);
 p2.draw_preset(590*zoom, 80*zoom, 100*zoom, 80*zoom, 2);
 p3.draw_preset(700*zoom, 80*zoom, 100*zoom, 80*zoom, 3);
 p4.draw_preset(480*zoom, 170*zoom, 100*zoom, 80*zoom, 4);
 p5.draw_preset(590*zoom, 170*zoom, 100*zoom, 80*zoom, 5);
 p6.draw_preset(700*zoom, 170*zoom, 100*zoom, 80*zoom, 6);
 p7.draw_preset(480*zoom, 260*zoom, 100*zoom, 80*zoom, 7);
 p8.draw_preset(590*zoom, 260*zoom, 100*zoom, 80*zoom, 8);
 p9.draw_preset(700*zoom, 260*zoom, 100*zoom, 80*zoom, 9);
 
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 250*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; gfx_drawstr("DB");
 gfx_x = 250*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("DB");
 ledon = slider52==0; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 300*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; gfx_drawstr("P 1");
 gfx_x = 300*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 1");
 ledon = slider52==1; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 350*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 2");
 gfx_x = 350*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 2");
 ledon = slider52==2; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 400*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 3");
 gfx_x = 400*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 3");
 ledon = slider52==3; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 450*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 4");
 gfx_x = 450*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 4");
 ledon = slider52==4; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 500*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 5");
 gfx_x = 500*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 5");
 ledon = slider52==5; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 550*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 6");
 gfx_x = 550*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 6");
 ledon = slider52==6; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 600*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 7");
 gfx_x = 600*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 7");
 ledon = slider52==7; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 650*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 8");
 gfx_x = 650*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 8");
 ledon = slider52==8; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 gfx_setfont(1,"Arial",13*zoom,'b');
 gfx_x = 700*zoom; gfx_y = 33*zoom; black(); gfx_a=1;
 gfx_roundrect(gfx_x-4*zoom,gfx_y-2*zoom,46*zoom, 19*zoom,3*zoom);
 rgb(255,215,0); gfx_a = 0.6; gfx_x+=1*zoom; gfx_y += 1*zoom; 
 gfx_drawstr("P 9");
 gfx_x = 700*zoom; gfx_y = 33*zoom;  black(); gfx_a=1;
 gfx_drawstr("P 9");
 ledon = slider52==9; gfx_y -= 6*zoom;
 gfx_blit(22,0.2*zoom, 0, 0, 128*ledon, 128,128);
 
 
 // OVERLAY
 gfx_x = 8*zoom;
 gfx_y = drawbars_y; 
 rgb(255,215,0); gfx_a = 0.6;
 gfx_roundrect(gfx_x-3*zoom,gfx_y-3*zoom,880*zoom,2000*zoom,2*zoom);
 gfx_roundrect(gfx_x-6*zoom,gfx_y-6*zoom,886*zoom,2000*zoom,2*zoom);
 gfx_a = 0.5;
 gfx_blit(21,0.5*zoom,0,0,0,1750, 900);
 
 
 ); // PAGE 4
 
 
 
 
 
 
 drawbars_lock = 1;
 
       
       /*
     red();
     gfx_roundrect(220*zoom, 417*zoom, 109*zoom, 25*zoom, 5*zoom); //Open
     gfx_roundrect(350*zoom, 417*zoom, 109*zoom, 25*zoom, 5*zoom); //Closed
     gfx_roundrect(80*zoom, 35*zoom, 109*zoom, 25*zoom, 5*zoom); //Rotor
     gfx_roundrect(210*zoom, 35*zoom, 109*zoom, 25*zoom, 5*zoom); //Combo
     gfx_roundrect(340*zoom, 35*zoom, 109*zoom, 25*zoom, 5*zoom); //DI
     gfx_roundrect(mic_select_x, mic_select_y, 60*zoom, 60*zoom, 5*zoom); //57
     gfx_roundrect(mic_select_x+70*zoom, mic_select_y, 60*zoom, 60*zoom, 5*zoom); //57
     gfx_roundrect(mic_select_x+140*zoom, mic_select_y, 60*zoom, 60*zoom, 5*zoom); //57
     gfx_roundrect(mic_select_x+210*zoom, mic_select_y, 60*zoom, 60*zoom, 5*zoom); //57
     gfx_roundrect(mic_select_x+280*zoom, mic_select_y, 60*zoom, 60*zoom, 5*zoom); //57  
       */
       
       g_collision(7*zoom,   33*zoom, 70*zoom, 17*zoom) ? (
       gfx_a = 1; black();
       gfx_x = 10*zoom; gfx_y = 52*zoom;
       gfx_rect(gfx_x, gfx_y, 250*zoom, 90*zoom);
       rgb(255,215,0); gfx_a = 0.9;
       gfx_x = 10*zoom; gfx_y = 62*zoom;
       gfx_drawstr("Select this mode if you just want to use",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       gfx_x = 10*zoom; gfx_y += 26*zoom;
       gfx_drawstr("the plugin as an audio effect and",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       gfx_x = 10*zoom; gfx_y += 26*zoom;
       gfx_drawstr("not as a virtual instrument.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       );
       
       g_collision(81*zoom,  33*zoom, 70*zoom, 17*zoom) ? (
       gfx_a = 1; black();
       gfx_x = 85*zoom; gfx_y = 52*zoom;
       gfx_rect(gfx_x, gfx_y, 250*zoom, 90*zoom);
       rgb(255,215,0); gfx_a = 0.9;
        organ_type == 1 ? (
         gfx_x = 85*zoom; gfx_y = 62*zoom;
         gfx_drawstr("Select this mode for slightly lower CPU use",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
         gfx_x = 85*zoom; gfx_y += 26*zoom;
         gfx_drawstr("The code calculates each note separately,",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
         gfx_x = 85*zoom; gfx_y += 26*zoom;
         gfx_drawstr("and details in the sound can be missing.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
        ):(
         gfx_x = 85*zoom; gfx_y = 62*zoom;
         gfx_drawstr("Organ Typ C always runs in ECO mode.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
         gfx_x = 85*zoom; gfx_y += 26*zoom;
         gfx_drawstr("This Organ Typ C has best results in",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
         gfx_x = 85*zoom; gfx_y += 26*zoom;
         gfx_drawstr("ECO mode anyway. :)",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
        );
       );
       
       g_collision(155*zoom, 33*zoom, 70*zoom, 17*zoom) ? (
       gfx_a = 1; black();
       gfx_x = 85*zoom; gfx_y = 52*zoom;
       gfx_rect(gfx_x, gfx_y, 250*zoom, 90*zoom);
       rgb(255,215,0); gfx_a = 0.9;
       organ_type == 1 ? (
       gfx_x = 85*zoom; gfx_y = 62*zoom;
       gfx_drawstr("Select this mode for best results.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       gfx_x = 85*zoom; gfx_y += 14*zoom;
       gfx_drawstr("The code emulates 91 Tonewheels incl",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       gfx_x = 85*zoom; gfx_y += 14*zoom;
       gfx_drawstr("tonewheel detuning and exact positions.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       gfx_x = 85*zoom; gfx_y += 26*zoom;
       gfx_drawstr("(This may need stronger CPUs)",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       ):(
        gfx_x = 85*zoom; gfx_y = 62*zoom;
        gfx_drawstr("Organ Typ C always runs in ECO mode.",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
        gfx_x = 85*zoom; gfx_y += 26*zoom;
        gfx_drawstr("This Organ Typ C has best results in",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
        gfx_x = 85*zoom; gfx_y += 26*zoom;
        gfx_drawstr("ECO mode anyway. :)",  0x05, gfx_x + 250*zoom, gfx_y + gfx_texth);
       );
       );
       
    !Number_input ? (
    
 
    mouseClick == 1 ? (
       
       
       !select_low_oct ? (
       g_collision(820*zoom, 80*zoom, 50*zoom, 50*zoom) ? (slider(page.slider)=1;caller = 1);
       g_collision(820*zoom, 130*zoom, 50*zoom, 50*zoom) ? (slider(page.slider)=2;caller = 1);
       g_collision(820*zoom, 180*zoom, 50*zoom, 50*zoom) ? (slider(page.slider)=3;caller = 1);
       g_collision(820*zoom, 230*zoom, 50*zoom, 50*zoom) ? (slider(page.slider)=4;caller = 1);
       );
       
        
        
        gfx_page == 1 ? (
        
        g_collision(7*zoom,   33*zoom, 70*zoom, 17*zoom) ? eco_mode = 0;
        g_collision(81*zoom,  33*zoom, 70*zoom, 17*zoom) ? eco_mode = 1;
        g_collision(155*zoom, 33*zoom, 70*zoom, 17*zoom) ? eco_mode = 2;
        
        g_collision(250*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 0; drawbars()); 
        g_collision(300*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 1; drawbars()); 
        g_collision(350*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 2; drawbars());
        g_collision(400*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 3; drawbars());
        g_collision(450*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 4; drawbars());
        g_collision(500*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 5; drawbars());
        g_collision(550*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 6; drawbars());
        g_collision(600*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 7; drawbars());
        g_collision(650*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 8; drawbars());
        g_collision(700*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 9; drawbars());
        
        g_collision(drawbars_x, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar1 * 43.1)*0.5*zoom) ? drawbar1.v_dragstart();
        organ_type == 1 ? g_collision(drawbars_x+40*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar2 * 43.1)*0.5*zoom) ? drawbar2.v_dragstart();
        g_collision(drawbars_x+80*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar3 * 43.1)*0.5*zoom) ? drawbar3.v_dragstart();
        g_collision(drawbars_x+120*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar4 * 43.1)*0.5*zoom) ? drawbar4.v_dragstart();
        g_collision(drawbars_x+160*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar5 * 43.1)*0.5*zoom) ? drawbar5.v_dragstart();
        g_collision(drawbars_x+200*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar6 * 43.1)*0.5*zoom) ? drawbar6.v_dragstart();
        g_collision(drawbars_x+240*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar7 * 43.1)*0.5*zoom) ? drawbar7.v_dragstart();
        organ_type == 1 ? g_collision(drawbars_x+280*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar8 * 43.1)*0.5*zoom) ? drawbar8.v_dragstart();
        g_collision(drawbars_x+320*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar9 * 43.1)*0.5*zoom) ? drawbar9.v_dragstart();
        g_collision(gfx_org_type_x, gfx_org_type_y, 43*zoom, 49*zoom) ? (slider(org_type.slider) = 0; caller = 1);
        g_collision(gfx_org_type_x, gfx_org_type_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(org_type.slider) = 1; caller = 1);
        g_collision(gfx_perc_on_x, gfx_perc_on_y,           43*zoom, 49*zoom) ? (slider(perc_on.slider) = 1; caller = 1);
        g_collision(gfx_perc_on_x, gfx_perc_on_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(perc_on.slider) = 0; caller = 1);
        g_collision(gfx_perc_vol_x, gfx_perc_vol_y,           43*zoom, 49*zoom) ? (slider(perc_vol.slider) = 0; caller = 1);
        g_collision(gfx_perc_vol_x, gfx_perc_vol_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(perc_vol.slider) = 1; caller = 1);
        g_collision(gfx_perc_decay_x, gfx_perc_decay_y,           43*zoom, 49*zoom) ? (slider(perc_decay.slider) = 0; caller = 1);
        g_collision(gfx_perc_decay_x, gfx_perc_decay_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(perc_decay.slider) = 1; caller = 1);
        g_collision(gfx_perc_harm_x, gfx_perc_harm_y,           43*zoom, 49*zoom) ? (slider(perc_harm.slider) = 0; caller = 1);
        g_collision(gfx_perc_harm_x, gfx_perc_harm_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(perc_harm.slider) = 1; caller = 1);
        g_collision(gfx_perc_mode_x, gfx_perc_mode_y,           43*zoom, 49*zoom) ? (slider(perc_mode.slider) = 0; caller = 1);
        g_collision(gfx_perc_mode_x, gfx_perc_mode_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(perc_mode.slider) = 1; caller = 1);
        g_collision(gfx_click_x, gfx_click_y,           43*zoom, 49*zoom) ? (slider(org_click.slider) = 1; caller = 1);
        g_collision(gfx_click_x, gfx_click_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(org_click.slider) = 0; caller = 1);
        g_collision(gfx_rev_x, gfx_rev_y,           43*zoom, 49*zoom) ? (slider(revtype.slider) = 1; caller = 1);
        g_collision(gfx_rev_x, gfx_rev_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(revtype.slider) = 0; caller = 1);
        scanner.k_collision() ? scanner.dragstart();
        reverb_level.k_collision() ? reverb_level.dragstart();
        drive.k_collision() ? drive.dragstart();
        main_out.k_collision() ? main_out.dragstart();
        
        speaker_model == 1 ? (
        g_collision(gfx_rotor_x, gfx_rotor_y,           43*zoom, 49*zoom) ? (slider(rotor.slider) = last_speed; caller = 1);
        g_collision(gfx_rotor_x, gfx_rotor_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(rotor.slider) = 0; caller = 1);
        g_collision(gfx_speed_x, gfx_speed_y,           43*zoom, 49*zoom) ? (slider(rotor.slider) == 0 ? last_speed = 2 : slider(rotor.slider) = 2; caller = 1);
        g_collision(gfx_speed_x, gfx_speed_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(rotor.slider) == 0 ? last_speed = 1 : slider(rotor.slider) = 1; caller = 1);
        horn_level.k_collision() ? horn_level.dragstart();
        drum_level.k_collision() ? drum_level.dragstart();
        );
        
        
        g_collision(746*zoom, 33*zoom, 113*zoom, 19*zoom) ? (
        #allitems = "Midi Channel 01|Midi Channel 02|Midi Channel 03|Midi Channel 04|Midi Channel 05|Midi Channel 06|Midi Channel 07|Midi Channel 08|Midi Channel 09|Midi Channel 10|Midi Channel 11|Midi Channel 12|Midi Channel 13|Midi Channel 14|Midi Channel 15|Midi Channel 16|";
        gfx_x = 746*zoom; gfx_y = 53*zoom;
        last_clicked_item = -1;
        last_clicked_item = gfx_showmenu(#allitems);
        last_clicked_item > 0 ? midi_channel = last_clicked_item;
        );
        
        );
        
        
        
        gfx_page == 2 ? (
          speaker_model == 1 ? (
             Drum_slow.k_collision() ? Drum_slow.dragstart();
             Drum_fast.k_collision() ? Drum_fast.dragstart();
             Drum_slower.k_collision() ? Drum_slower.dragstart();
             Drum_faster.k_collision() ? Drum_faster.dragstart();
             crossover.k_collision() ? crossover.dragstart();
             mic_angle.k_collision() ? mic_angle.dragstart();
             horn_slow.k_collision() ? horn_slow.dragstart();
             horn_fast.k_collision() ? horn_fast.dragstart();
             horn_slower.k_collision() ? horn_slower.dragstart();
             horn_faster.k_collision() ? horn_faster.dragstart();
             mic_width.k_collision() ? mic_width.dragstart();
          );
          speaker_model ? (
          g_collision(mic_select_x, mic_select_y, 60*zoom, 60*zoom) ? (slider(microphone.slider) = 1;caller = 1);
          g_collision(mic_select_x+70*zoom, mic_select_y, 60*zoom, 60*zoom) ? (slider(microphone.slider) = 0;caller = 1);
          g_collision(mic_select_x+140*zoom, mic_select_y, 60*zoom, 60*zoom) ? (slider(microphone.slider) = 4;caller = 1);
          g_collision(mic_select_x+210*zoom, mic_select_y, 60*zoom, 60*zoom) ? (slider(microphone.slider) = 3;caller = 1);
          g_collision(mic_select_x+280*zoom, mic_select_y, 60*zoom, 60*zoom) ? (slider(microphone.slider) = 2;caller = 1);
          );
          speaker_model == 1 ? (
          g_collision(gfx_open_x, gfx_open_y +49*zoom,  43*zoom, 49*zoom) ? (slider(cab_open.slider) = 1;caller = 1);
          g_collision(gfx_open_x, gfx_open_y,           43*zoom, 49*zoom) ? (slider(cab_open.slider) = 0;caller = 1);
          g_collision(gfx_rotor_x, gfx_rotor_y,           43*zoom, 49*zoom) ? (slider(rotor.slider) = last_speed; caller = 1);
          g_collision(gfx_rotor_x, gfx_rotor_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(rotor.slider) = 0; caller = 1);
          g_collision(gfx_speed_x, gfx_speed_y,           43*zoom, 49*zoom) ? (slider(rotor.slider) == 0 ? last_speed = 2 : slider(rotor.slider) = 2; caller = 1);
          g_collision(gfx_speed_x, gfx_speed_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(rotor.slider) == 0 ? last_speed = 1 : slider(rotor.slider) = 1; caller = 1);
          horn_level.k_collision() ? horn_level.dragstart();
          drum_level.k_collision() ? drum_level.dragstart();
          );
          g_collision(80*zoom, 7*zoom, 109*zoom, 25*zoom) ? (slider(speaker_model.slider) = 1;caller = 1);
          g_collision(210*zoom, 7*zoom, 109*zoom, 25*zoom) ? (slider(speaker_model.slider) = 2;caller = 1);
          g_collision(340*zoom, 7*zoom, 109*zoom, 25*zoom) ? (slider(speaker_model.slider) = 0;caller = 1);
          
        );
        
        
        gfx_page == 3 ? (
        
        !select_low_oct ? (
          g_collision(sgfx_x,sgfx_y,sgfx_w,sgfx_h) && motor_stop ? (
            turn_by_hand ? (
              horn_position.dragstart();
            ):(
              drum_position.dragstart();
            );
          );
          
          g_collision(gfx_tbh_x, gfx_tbh_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(turn_by_hand.slider) = 0; caller = 1);
          g_collision(gfx_tbh_x, gfx_tbh_y, 43*zoom, 49*zoom) ? (slider(turn_by_hand.slider) = 1; caller = 1);
          mic_angle.k_collision() ? mic_angle.dragstart();
          
          small_rev.k_collision() ? small_rev.dragstart();
          big_rev.k_collision() ? big_rev.dragstart();
          leakage.k_collision() ? leakage.dragstart();

          g_collision(gfx_rev_post_x, gfx_rev_post_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(reverb_post.slider) = 0; caller = 1);
          g_collision(gfx_rev_post_x, gfx_rev_post_y, 43*zoom, 49*zoom) ? (slider(reverb_post.slider) = 1; caller = 1);
          
          g_collision(gfx_click_x, gfx_click_y,           43*zoom, 49*zoom) ? (slider(org_click.slider) = 1; caller = 1);
          g_collision(gfx_click_x, gfx_click_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(org_click.slider) = 0; caller = 1);
          
          click_freq.k_collision() ? click_freq.dragstart();
          click_volume.k_collision() ? click_volume.dragstart();
          
          g_collision(gfx_use_c_x, gfx_use_c_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(use_c.slider) = 0; caller = 1);
          g_collision(gfx_use_c_x, gfx_use_c_y, 43*zoom, 49*zoom) ? (slider(use_c.slider) = 1; caller = 1);
          
          g_collision(gfx_use_pitch_x, gfx_use_pitch_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(use_pitch.slider) = 0; caller = 1);
          g_collision(gfx_use_pitch_x, gfx_use_pitch_y, 43*zoom, 49*zoom) ? (slider(use_pitch.slider) = 1; caller = 1);
          
          g_collision(gfx_use_mod_x, gfx_use_mod_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(use_mod.slider) = 0; caller = 1);
          g_collision(gfx_use_mod_x, gfx_use_mod_y, 43*zoom, 49*zoom) ? (slider(use_mod.slider) = 1; caller = 1);
          
          g_collision(gfx_use_preset_x, gfx_use_preset_y + 49*zoom, 43*zoom, 49*zoom) ? (slider(use_preset.slider) = 0; caller = 1);
          g_collision(gfx_use_preset_x, gfx_use_preset_y, 43*zoom, 49*zoom) ? (slider(use_preset.slider) = 1; caller = 1);
          );
          
          g_collision(130*zoom, 420*zoom, 109*zoom, 25*zoom) ? select_low_oct = 1;
          g_collision(290*zoom, 360*zoom, 109*zoom, 25*zoom) ? select_low_oct = 0;
        );
        
        
        
        
        gfx_page == 4 ? (
        yOld = mouse_y;
        g_collision(drawbars_x, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar1 * 43.1)*0.5*zoom) ? drawbar1.v_dragstart();
        organ_type == 1 ? g_collision(drawbars_x+40*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar2 * 43.1)*0.5*zoom) ? drawbar2.v_dragstart();
        g_collision(drawbars_x+80*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar3 * 43.1)*0.5*zoom) ? drawbar3.v_dragstart();
        g_collision(drawbars_x+120*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar4 * 43.1)*0.5*zoom) ? drawbar4.v_dragstart();
        g_collision(drawbars_x+160*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar5 * 43.1)*0.5*zoom) ? drawbar5.v_dragstart();
        g_collision(drawbars_x+200*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar6 * 43.1)*0.5*zoom) ? drawbar6.v_dragstart();
        g_collision(drawbars_x+240*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar7 * 43.1)*0.5*zoom) ? drawbar7.v_dragstart();
        organ_type == 1 ? g_collision(drawbars_x+280*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar8 * 43.1)*0.5*zoom) ? drawbar8.v_dragstart();
        g_collision(drawbars_x+320*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar9 * 43.1)*0.5*zoom) ? drawbar9.v_dragstart();
        
        g_collision(250*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 0; drawbars());
        g_collision(300*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 1; drawbars());
        g_collision(350*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 2; drawbars());
        g_collision(400*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 3; drawbars());
        g_collision(450*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 4; drawbars());
        g_collision(500*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 5; drawbars());
        g_collision(550*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 6; drawbars());
        g_collision(600*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 7; drawbars());
        g_collision(650*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 8; drawbars());
        g_collision(700*zoom, 33*zoom, 43*zoom, 17*zoom) ? (slider52 = 9; drawbars());
        
        
        g_collision(480*zoom, 80*zoom, 100*zoom, 80*zoom) ? (slider52 = 1; drawbars());
        g_collision(590*zoom, 80*zoom, 100*zoom, 80*zoom) ? (slider52 = 2; drawbars());
        g_collision(700*zoom, 80*zoom, 100*zoom, 80*zoom) ? (slider52 = 3; drawbars());
        g_collision(480*zoom, 170*zoom, 100*zoom, 80*zoom) ? (slider52 = 4; drawbars());
        g_collision(590*zoom, 170*zoom, 100*zoom, 80*zoom) ? (slider52 = 5; drawbars());
        g_collision(700*zoom, 170*zoom, 100*zoom, 80*zoom) ? (slider52 = 6; drawbars());
        g_collision(480*zoom, 260*zoom, 100*zoom, 80*zoom) ? (slider52 = 7; drawbars());
        g_collision(590*zoom, 260*zoom, 100*zoom, 80*zoom) ? (slider52 = 8; drawbars());
        g_collision(700*zoom, 260*zoom, 100*zoom, 80*zoom) ? (slider52 = 9; drawbars());
        
        
        
        );
        
        ); // click
   
   mouseclick == -1 ? (

   drawbar1.dragstop();
   drawbar2.dragstop();
   drawbar3.dragstop();
   drawbar4.dragstop();
   drawbar5.dragstop();
   drawbar6.dragstop();
   drawbar7.dragstop();
   drawbar8.dragstop();
   drawbar9.dragstop();

   scanner.dragstop();
   reverb_level.dragstop();
   drive.dragstop();
   
   horn_level.dragstop();
   drum_level.dragstop();
   main_out.dragstop();
   
   Drum_slow.dragstop();
   Drum_fast.dragstop();
   Drum_slower.dragstop();
   crossover.dragstop();
   mic_angle.dragstop();
   Drum_faster.dragstop();
   horn_slow.dragstop();
   horn_fast.dragstop();
   horn_slower.dragstop();
   mic_width.dragstop();
   horn_faster.dragstop();
   
   horn_position.dragstop();
   drum_position.dragstop();
   
   small_rev.dragstop();
   big_rev.dragstop();
   
   click_freq.dragstop();
   click_volume.dragstop();
   leakage.dragstop();
   
   valold = -1;
   );
   
   mouse_wheel ? 
       (
       
       horn_level.k_collision() ? (horn_level.potwheel(); caller = 1);
       drum_level.k_collision() ? (drum_level.potwheel(); caller = 1);
       
           gfx_page == 1 ? (
           /*
           g_collision(drawbars_x, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar1 * 43.1)*0.5) ? (drawbar1.potwheel(); caller = 1);
           g_collision(drawbars_x+40*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar2 * 43.1)*0.5) ? (drawbar2.potwheel(); caller = 1);
           g_collision(drawbars_x+80*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar3 * 43.1)*0.5) ? (drawbar3.potwheel(); caller = 1);
           g_collision(drawbars_x+120*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar4 * 43.1)*0.5) ? (drawbar4.potwheel(); caller = 1);
           g_collision(drawbars_x+160*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar5 * 43.1)*0.5) ? (drawbar5.potwheel(); caller = 1);
           g_collision(drawbars_x+200*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar6 * 43.1)*0.5) ? (drawbar6.potwheel(); caller = 1);
           g_collision(drawbars_x+240*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar7 * 43.1)*0.5) ? (drawbar7.potwheel(); caller = 1);
           g_collision(drawbars_x+280*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar8 * 43.1)*0.5) ? (drawbar8.potwheel(); caller = 1);
           g_collision(drawbars_x+320*zoom, drawbars_y, 35*zoom, zoom*240 - (345 - drawbar9 * 43.1)*0.5) ? (drawbar9.potwheel(); caller = 1);
          */
          
           scanner.k_collision() ? (slider(scanner.slider) += 1*sign(mouse_wheel);slider(scanner.slider) = min(max(slider(scanner.slider), 0), 6); caller = 1);
           reverb_level.k_collision() ? (reverb_level.potwheel(); caller = 1);
           drive.k_collision() ? (drive.potwheel(); caller = 1);
           main_out.k_collision() ? (main_out.potwheel(); caller = 1);
           );
           
           
           gfx_page == 2 ? (
           speaker_model == 1 ? (
           Drum_slow.k_collision() ? Drum_slow.potwheel();
           Drum_fast.k_collision() ? Drum_fast.potwheel();
           Drum_slower.k_collision() ? Drum_slower.potwheel();
           Drum_faster.k_collision() ? Drum_faster.potwheel();
           crossover.k_collision() ? crossover.potwheel();
           mic_angle.k_collision() ? mic_angle.potwheel();
           horn_slow.k_collision() ? horn_slow.potwheel();
           horn_fast.k_collision() ? horn_fast.potwheel();
           horn_slower.k_collision() ? horn_slower.potwheel();
           horn_faster.k_collision() ? horn_faster.potwheel();
           mic_width.k_collision() ? mic_width.potwheel();
           caller = 1;
           );
           );
           
           gfx_page == 3 ? (
           mic_angle.k_collision() ? mic_angle.potwheel();
           small_rev.k_collision() ? small_rev.potwheel();
           big_rev.k_collision() ? big_rev.potwheel();
           click_freq.k_collision() ? click_freq.potwheel();
           click_volume.k_collision() ? click_volume.potwheel();
           leakage.k_collision() ? leakage.potwheel();
           caller = 1;
           );
           
           
           mouse_wheel=0;
       );
       
   
   preset_drag = slider52;
   preset_drag == 0 || gfx_page == 1 ? (
   drawbar1.v_dragging ? (drawbar1.v_potdrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (drawbar2.v_potdrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (drawbar3.v_potdrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (drawbar4.v_potdrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (drawbar5.v_potdrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (drawbar6.v_potdrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (drawbar7.v_potdrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (drawbar8.v_potdrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (drawbar9.v_potdrag_rotary(173*zoom); drawbars());
   );

   preset_drag == 1 ? (
   drawbar1.v_dragging ? (p1.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p1.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p1.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p1.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p1.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p1.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p1.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p1.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p1.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 2 ? (
   drawbar1.v_dragging ? (p2.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p2.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p2.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p2.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p2.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p2.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p2.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p2.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p2.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 3 ? (
   drawbar1.v_dragging ? (p3.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p3.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p3.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p3.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p3.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p3.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p3.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p3.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p3.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 4 ? (
   drawbar1.v_dragging ? (p4.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p4.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p4.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p4.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p4.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p4.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p4.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p4.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p4.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 5 ? (
   drawbar1.v_dragging ? (p5.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p5.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p5.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p5.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p5.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p5.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p5.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p5.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p5.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 6 ? (
   drawbar1.v_dragging ? (p6.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p6.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p6.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p6.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p6.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p6.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p6.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p6.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p6.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 7 ? (
   drawbar1.v_dragging ? (p7.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p7.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p7.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p7.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p7.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p7.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p7.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p7.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p7.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 8 ? (
   drawbar1.v_dragging ? (p8.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p8.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p8.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p8.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p8.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p8.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p8.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p8.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p8.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   preset_drag == 9 ? (
   drawbar1.v_dragging ? (p9.db1.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar2.v_dragging ? (p9.db2.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar3.v_dragging ? (p9.db3.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar4.v_dragging ? (p9.db4.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar5.v_dragging ? (p9.db5.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar6.v_dragging ? (p9.db6.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar7.v_dragging ? (p9.db7.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar8.v_dragging ? (p9.db8.v_DummyDrag_rotary(173*zoom); drawbars());
   drawbar9.v_dragging ? (p9.db9.v_DummyDrag_rotary(173*zoom); drawbars());
   );
   



   scanner.dragging ? (scanner.potdrag_integer(); caller = 1);
   reverb_level.dragging ? (reverb_level.potdrag(); caller = 1);
   horn_level.dragging ? (horn_level.potdrag(); caller = 1);
   drum_level.dragging ? (drum_level.potdrag(); caller = 1);
   main_out.dragging ? (main_out.potdrag(); caller = 1);
   drive.dragging ? (drive.potdrag(); caller = 1);
   
 Drum_slow.dragging ? (Drum_slow.potdrag(); caller = 1);
 Drum_fast.dragging ? (Drum_fast.potdrag(); caller = 1);
 crossover.dragging ? (crossover.potdrag(); caller = 1);
 mic_angle.dragging ? (mic_angle.potdrag(); caller = 1);
 Drum_faster.dragging ? (Drum_faster.potdrag(); caller = 1);
 Drum_slower.dragging ? (Drum_slower.potdrag(); caller = 1);
 horn_slow.dragging ? (horn_slow.potdrag(); caller = 1);
 horn_fast.dragging ? (horn_fast.potdrag(); caller = 1);
 mic_width.dragging ? (mic_width.potdrag(); caller = 1);
 horn_faster.dragging ? (horn_faster.potdrag(); caller = 1);
 horn_slower.dragging ? (horn_slower.potdrag(); caller = 1);
 small_rev.dragging ? (small_rev.potdrag(); caller = 1);
 big_rev.dragging ? (big_rev.potdrag(); caller = 1);
 click_freq.dragging ? (click_freq.potdrag(); caller = 1);
 click_volume.dragging ? (click_volume.potdrag(); caller = 1);
 leakage.dragging ? (leakage.potdrag(); caller = 1);
  horn_position.dragging && motor_stop? horn_position.hand_potDrag();
  drum_position.dragging && motor_stop? drum_position.hand_potDrag();
  
   );//number input
  
  
  
/*
