desc:December Synth (Tukan)


slider1:1<0,2,0.01>-Master Level
slider2:0<0,1,1{Poly, Mono}>-Mono Mode
slider3:0<0,1,0.01>-Glide

slider4:7<0,10,0.01>                  -OSC 1 Level
slider5:0<-10,10,0.01>                -OSC 1 Sine Level
slider6:1<1,8,1>                      -OSC 1 Sine Octave
slider7:0<0,2,1{OFF, SIGMA, EXPLOG}>  -OSC 1 Sine Shape
slider8:0<-10,10,0.1>                 -OSC 1 Sine Shape Factor
slider9:0<-10,10,0.01>                -OSC 1 Triangle Level
slider10:1<1,8,1>                     -OSC 1 Triangle Octave
slider11:0<0,2,1{OFF, SIGMA, EXPLOG}> -OSC 1 Triangle Shape
slider12:0<-10,10,0.1>                -OSC 1 Triangle Shape Factor
slider13:7<-10,10,0.01>               -OSC 1 SAW Level
slider14:1<1,8,1>                     -OSC 1 SAW Octave
slider15:0<0,2,1{OFF, SIGMA, EXPLOG}> -OSC 1 SAW Shape
slider16:0<-10,10,0.1>                -OSC 1 SAW Shape Factor
slider17:0<-10,10,0.01>               -OSC 1 SAW ALT Level
slider18:1<1,8,1>                     -OSC 1 SAW ALT Octave
slider19:0<0,2,1{OFF, SIGMA, EXPLOG}> -OSC 1 SAW ALT Shape
slider20:0<-10,10,0.1>                -OSC 1 SAW ALT Shape Factor
slider21:0<-10,10,0.01>               -OSC 1 Square Level
slider22:1<1,8,1>                     -OSC 1 Square Octave
slider23:5<0,10,.1>                   -OSC 1 Square Width
slider24:0<-36,36,1>                  -OSC 1 Transpose
slider25:0<-100,100,1>                -OSC 1 Finetune
slider26:12<-36,36,1>                  -OSC 1 Pitchamount
slider27:0<-100,100,0.1>              -OSC 1 PAN
//Transpose //Fine //Pan //Pitchamount

slider28:7<0,10,0.01>                  -OSC 2 Level
slider29:0<-10,10,0.01>                -OSC 2 Sine Level
slider30:1<1,8,1>                      -OSC 2 Sine Octave
slider31:0<0,2,1{OFF, SIGMA, EXPLOG}>  -OSC 2 Sine Shape
slider32:0<-10,10,0.1>                 -OSC 2 Sine Shape Factor
slider33:0<-10,10,0.01>                -OSC 2 Triangle Level
slider34:1<1,8,1>                      -OSC 2 Triangle Octave
slider35:0<0,2,1{OFF, SIGMA, EXPLOG}>  -OSC 2 Triangle Shape
slider36:0<-10,10,0.1>                 -OSC 2 Triangle Shape Factor
slider37:7<-10,10,0.01>                -OSC 2 SAW Level
slider38:1<1,8,1>                      -OSC 2 SAW Octave
slider39:0<0,2,1{OFF, SIGMA, EXPLOG}>  -OSC 2 SAW Shape
slider40:0<-10,10,0.1>                 -OSC 2 SAW Shape Factor
slider41:0<-10,10,0.01>                -OSC 2 SAW ALT Level
slider42:1<1,8,1>                      -OSC 2 SAW ALT Octave
slider43:0<0,2,1{OFF, SIGMA, EXPLOG}>  -OSC 2 SAW ALT Shape
slider44:0<-10,10,0.1>                 -OSC 2 SAW ALT Shape Factor
slider45:0<-10,10,0.01>                -OSC 2 Square Level
slider46:1<1,8,1>                      -OSC 2 Square Octave
slider47:5<0,10,.1>                    -OSC 2 Square Width
slider48:0<-36,36,1>                   -OSC 2 Transpose
slider49:0<-100,100,1>                 -OSC 2 Finetune
slider51:0<-100,100,0.1>               -OSC 2 PAN

slider52:0<0,3,1{OFF, SYNC PITCH BOTH, SYNC PITCH OSC 1, SYNC PITCH OSC 2}>           -OSC 2 SYNC

slider53:150<0,1000,1>                -ENV 1 Attack
slider54:200<0,2000,1>                -ENV 1 Decay
slider55:4<0,10,.01>                  -ENV 1 Breakpoint
slider56:300<0,2000,1>                -ENV 1 Slope
slider57:8<0,10,.01>                  -ENV 1 Sustain
slider58:150<0,4000,1>                -ENV 1 Release

slider59:150<0,1000,1>                -ENV 2 Attack
slider60:200<0,2000,1>                -ENV 2 Decay
slider61:4<0,10,.01>                  -ENV 2 Breakpoint
slider62:300<0,2000,1>                -ENV 2 Slope
slider63:8<0,10,.01>                  -ENV 2 Sustain
slider64:150<0,4000,1>                -ENV 2 Release

//SLOPE Q Freq Type Keyfollow 
slider65:100<0,100,.1>-65 Filter Freq
slider66:0<0,10,0.01>-Filter Q
slider67:1<0,2,1{12,24,48}>-Filter Slope
slider68:1<0,1,1{BP,LPF}>-Filter Type
slider69:1<0,1,0.5>-Key Follow
slider70:1<0,1,1{OFF,ON}>-Filter On
slider71:0<-100,100,1>-VCF ENV

slider72:150<0,1000,1>                -FILTER Attack
slider73:200<0,2000,1>                -FILTER Decay
slider74:4<0,10,.01>                  -FILTER Breakpoint
slider75:300<0,2000,1>                -FILTER Slope
slider76:8<0,10,.01>                  -FILTER Sustain
slider77:150<0,4000,1>                -FILTER Release

slider78:5<1,5,1{External, Sinus, Square, RampUp, RampDown, Triangle}>-78 O FORM
slider79:0<0,360,1>-Phase Shift
slider80:3<0,9,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial}>-Time Sync
slider81:0<0,2,1{Off, Triplet, Dotted}>-Triole Dotted
slider82:0.5<0,1,0.001>-LFO Rate
slider83:0<0,1,1{Off, x10}>-Rate Multiplikator

slider84:5<1,5,1{External, Sinus, Square, RampUp, RampDown, Triangle}>-78 O FORM
slider85:0<0,360,1>-Phase Shift
slider86:3<0,9,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial}>-Time Sync
slider87:0<0,2,1{Off, Triplet, Dotted}>-Triole Dotted
slider88:0.5<0,1,0.001>-LFO Rate
slider89:0<0,1,1{Off, x10}>-Rate Multiplikator

slider90:5<1,5,1{External, Sinus, Square, RampUp, RampDown, Triangle}>-78 O FORM
slider91:0<0,360,1>-Phase Shift
slider92:3<0,9,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial}>-Time Sync
slider93:0<0,2,1{Off, Triplet, Dotted}>-Triole Dotted
slider94:0.5<0,1,0.001>-LFO Rate
slider95:0<0,1,1{Off, x10}>-Rate Multiplikator

slider96:5<1,5,1{External, Sinus, Square, RampUp, RampDown, Triangle}>-78 O FORM
slider97:0<0,360,1>-Phase Shift
slider98:3<0,9,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial}>-Time Sync
slider99:0<0,2,1{Off, Triplet, Dotted}>-Triole Dotted
slider100:0.5<0,1,0.001>-LFO Rate
slider101:0<0,1,1{Off, x10}>-Rate Multiplikator


slider102:150<0,1000,1>                -ENV 3 Attack
slider103:200<0,2000,1>                -ENV 3 Decay
slider104:4<0,10,.01>                  -ENV 3 Breakpoint
slider105:300<0,2000,1>                -ENV 3 Slope
slider106:8<0,10,.01>                  -ENV 3 Sustain
slider107:150<0,4000,1>                -ENV 3 Release

slider108:100<0,100,.1>-65 Filter Freq
slider109:0<0,10,0.01>-Filter Q
slider110:1<0,2,1{12,24,48}>-Filter Slope
slider111:1<0,1,1{BP,LPF}>-Filter Type
slider112:1<0,1,0.5>-Key Follow
slider113:1<0,1,1{OFF,ON}>-Filter On
slider114:0<-100,100,1>-VCF ENV

slider115:150<0,1000,1>                -FILTER Attack
slider116:200<0,2000,1>                -FILTER Decay
slider117:4<0,10,.01>                  -FILTER Breakpoint
slider118:300<0,2000,1>                -FILTER Slope
slider119:8<0,10,.01>                  -FILTER Sustain
slider120:150<0,4000,1>                -FILTER Release

slider121:0<0,10,0.01>-Noise Level
slider122:0<-100,100,.1>-Noise PAN


slider246:0<-1000000,1000000,0.001>-Dummy for Variables

slider247:0<0,1,0.01>-CV 1
slider248:0<0,1,0.01>-CV 2
slider249:0<0,1,0.01>-CV 3
slider250:0<0,1,0.01>-CV 4
slider251:0<0,1,0.01>-CV 5
slider252:0<0,1,0.01>-CV 6
slider253:0<0,1,0.01>-CV 7
slider254:0<0,1,0.01>-CV 8
slider255:0<0,1,0.01>-CV 9
slider256:0<0,1,0.01>-CV 10

import DecemberSynthAdd/fft_real_synth.jsfx-inc
import DecemberSynthAdd/wavetable.jsfx-inc
import DecemberSynthAdd/tk_lib.jsfx-inc
import DecemberSynthAdd/svf_filter.jsfx-inc
import DecemberSynthAdd/cookdsp.jsfx-inc

filename:0,DecemberSynthAdd/480knob.png
filename:1,DecemberSynthAdd/MySynthKnob3.png
filename:2,DecemberSynthAdd/MySynthKnob4.png
filename:3,DecemberSynthAdd/Synthkey.png
filename:4,DecemberSynthAdd/MySynthKnob_bdir.png


@init





///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  MAYBE END UP IN A LIBRARY  //////////////////////////////////////////////////////////////////////


function dcBlocker () instance ()
  (
  aab = srate/(srate*1.00008);
  srate < 400000 ? aab = srate/(srate*1.0002);
  srate < 200000 ? aab = srate/(srate*1.0003);
  srate < 100000 ? aab = srate/(srate*1.0007);
  srate < 50000 ? aab = srate/(srate*1.001);
  
  this.otm1=aab*this.otm1 + this - this.itm1; this.itm1=this; this=this.otm1;

  );
  
  
function sigma (input, sigma_steep) local (tmp_x) (  // turns 0 - 1 into a sigma from 0 - 1
    tmp_x = 1/sigma_steep; // Sigma 1/x -> je größer X, desto weniger linear
    tmp_factor = 0.5 / ((0.5 * (tanh(((0.5))/tmp_x))));
     ((0.5 * (tanh(((input-0.5))/tmp_x)))*tmp_factor + 0.5);
);

function explog (input, factor) (
input^factor; // 1=linear, < 1 = log (schnell rein), > 1 = exp (langsam rein)
);





function band_set_filter(t, f, g, qval, slope)
 instance (enabled, type, frequency, gain, q, filter, color) (
  type = t; frequency = f; gain = g; q = qval;
  type == 0 ? filter.svf_eq(frequency, q, db_to_gain(gain)) :
    type == 1 ? filter.svf_hp(frequency, q, slope) :
      type == 2 ? filter.svf_hpb(frequency, slope) :
        type == 3 ? filter.svf_ls(frequency, q, db_to_gain(gain)) :
          type == 4 ? filter.svf_hs(frequency, q, db_to_gain(gain)) :
            type == 5 ? filter.svf_lp(frequency, q, slope) :
              type == 6 ? filter.svf_lpb(frequency, slope) :
                type == 7 ? filter.svf_bs(frequency, q) :
                  type == 8 ? filter.svf_bp2(frequency, q) :
                    type == 9 ? filter.svf_st(frequency, q, gain) :
                      type == 10 ? filter.svf_pultecls(frequency, q, gain) :
                        type == 11 ? filter.svf_ap(frequency, q) :
                          type == 12 ? filter.svf_analog_lowcut(frequency, q, gain) :
                            type == 13 ? filter.svf_analog_highcut(frequency, q, gain);
);

  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);

  MAX_Q = 4;
  MIN_Q = 0.10;
  Q_LOG_MAX = log(MAX_Q / MIN_Q);
  
/*
 * Convert slider % to frequency
 */
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);

/*
 * Convert frequency to slider %
 */
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);


function per_to_q(x, range) (
  MIN_Q * exp(Q_LOG_MAX * x / range);LFO
);

/*
 * Convert frequency to slider %
 */
function q_to_per(q, range) (
  range * log(q / MIN_Q) / Q_LOG_MAX;
);

function band_init()
  instance (enabled, type, frequency, gain, q, filter, color) ( 
  filter.svf_set_sample_rate(SAMPLE_RATE);
  filter.svf_bypass();
  //color.create_color(0,0,0);

  filter.a1 = filter.t_a1;
  filter.a2 = filter.t_a2;
  filter.a3 = filter.t_a3;

  filter.m0 = filter.t_m0;
  filter.m1 = filter.t_m1;
  filter.m2 = filter.t_m2;
  filter.iter_t = 1.0;
);







function VCF() (

this.VCF_filter_result = min(this..filter_f.running,100) + this.VCF.real_level*this..VCF_ENV;
this.note ? this.filter_note = this.note-19 + this..pitchamount.running * norm_pitchwheel;
this..keyfollow ? (
this..keyfollow == 0.5 ? this.keyfollow_add = 0.5 : this.keyfollow_add = 0;
this.key_offset = freq_to_per(osc_a0^(this.filter_note+this.keyfollow_add),100);
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT + this.key_offset*this..keyfollow;
):(
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT;
);

this.VCF_FILTER_RESULT2 = min(this.VCF_FILTER_RESULT2, 100);

this.VCF_trigger || abs(this.VCF_FILTER_RESULT2 - this.VCF_FILTER_RESULT_OLD) > 0.2 || this..filter_type != this.filter_type_old || this..filter_gain.running != this.filter_gain_old || this..filter_q.running != this.filter_q_old || this..filter_slope != this.filter_slope_old ? (
this.band_set_filter(this..filter_type, per_to_freq(min(this.VCF_FILTER_RESULT2,100),100), this..filter_gain, this..filter_q.running, this..filter_slope);
this.filter_type_old = this..filter_type;
this.filter_f_old = this..filter_f.running;
this.filter_gain_old = this..filter_gain.running;
this.filter_q_old = this..filter_q.running;
this.filter_slope_old = this..filter_slope;
this.VCF_FILTER_RESULT_old = this.VCF_FILTER_RESULT2;
//this.filter.svf_set_to_target();
);

this.VCF_Trigger ? (
//this.filter.svf_set_to_target();
this.VCF_Trigger = 0;
);
this.filter.svf_tick();



this.outputL = this.filter.svf_svf0(this.outputL + 0.00001);
this.outputR = this.filter.svf_svf1(this.outputR + 0.00001);

);


function NG_VCF() (

this.ng.VCF_filter_result = min(NG.filter_f.running,100) + this.VCF2.real_level*NG.VCF_ENV;
katze = this..VCF2.real_level;
this.note ? this.ng.filter_note = this.note-19 + NG.pitchamount.running * norm_pitchwheel;
NG.keyfollow ? (
NG.keyfollow == 0.5 ? this.ng.keyfollow_add = 0.5 : this.ng.keyfollow_add = 0;
this.ng.key_offset = freq_to_per(osc_a0^(this.ng.filter_note+this.ng.keyfollow_add),100);
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT + this.ng.key_offset*NG.keyfollow;
):(
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT;
);

this.ng.VCF_FILTER_RESULT2 = min(this.ng.VCF_FILTER_RESULT2, 100);

this.ng.VCF_trigger || abs(this.ng.VCF_FILTER_RESULT2 - this.ng.VCF_FILTER_RESULT_OLD) > 0.9 || NG.filter_type != this.ng.filter_type_old || NG.filter_gain.running != this.ng.filter_gain_old || NG.filter_q.running != this.ng.filter_q_old || NG.filter_slope != this.ng.filter_slope_old ? (
this.NG.band_set_filter(NG.filter_type, per_to_freq(min(this.ng.VCF_FILTER_RESULT2,100),100), NG.filter_gain, NG.filter_q.running, NG.filter_slope);
this.ng.filter_type_old = NG.filter_type;
this.ng.filter_f_old = NG.filter_f.running;
this.ng.filter_gain_old = NG.filter_gain.running;
this.ng.filter_q_old = NG.filter_q.running;
this.ng.filter_slope_old = NG.filter_slope;
this.ng.VCF_FILTER_RESULT_old = this.ng.VCF_FILTER_RESULT2;
//this.ng.filter.svf_set_to_target();
);

this.ng.VCF_trigger ? this.ng.VCF_trigger = 0;

this.NG.filter.svf_tick();
this.noise = this.ng.filter.svf_svf0(this.noise + 0.001);// / (NG.filter_q*10);
//this.noise = this.ng.filter.svf_svf1(this.noise + 0.00001);

);






function sub_midi_in () (
         msg3 != 0 ? (
         this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
         this.note = this.note_running = msg2; this.velocity = msg3)
         : 
         (this.release_trigger = 1; this.start_trigger = 0; //this.on = 0; this.note = 0;
          );
);

function sub_midi_in_mono () (

         this..msg3 != 0 ? (
         
            this..mono_note_1_old == 0 ? (
              this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
              this.note = this.note_running = msg2; this.velocity = msg3; this..mono_note_1_old = 1;
              this.note_distance = 0; this.note_target = this..msg2;
            ):(
              this.note_distance = this..msg2 - this.note_running;
              this.note_target = this..msg2;
            );
         
         ):( 
          this.release_trigger = 1; this.start_trigger = 0;
          this..mono_note_1_old = 0;
           //this.on = 0; this.note = 0;
          );
          
);


function midi_in () (

MonoOrPoly ? (

msg3 != 0 ? (
this.mono_note_1 == 0 ? (this.mono_note_1 = msg2; this.last_msg3 = msg3) :
this.mono_note_2 == 0 ? this.mono_note_2 = msg2:
this.mono_note_3 == 0 ? this.mono_note_3 = msg2:
this.mono_note_4 == 0 ? this.mono_note_4 = msg2:
this.mono_note_5 == 0 ? this.mono_note_5 = msg2:
this.mono_note_6 == 0 ? this.mono_note_6 = msg2:
this.mono_note_7 == 0 ? this.mono_note_7 = msg2:
this.mono_note_8 == 0 ? this.mono_note_8 = msg2:
this.mono_note_9 == 0 ? this.mono_note_9 = msg2:
this.mono_note_10 == 0 ? this.mono_note_10 = msg2:
this.mono_note_11 == 0 ? this.mono_note_11 = msg2:
this.mono_note_12 == 0 ? this.mono_note_12 = msg2;

):(
this.note_release = 1;
this.mono_note_1 == msg2 ? (this.mono_note_1 = 0; this.mono_sort = 1):
this.mono_note_2 == msg2 ? (this.mono_note_2 = 0; this.mono_sort = 1):
this.mono_note_3 == msg2 ? (this.mono_note_3 = 0; this.mono_sort = 1):
this.mono_note_4 == msg2 ? (this.mono_note_4 = 0; this.mono_sort = 1):
this.mono_note_5 == msg2 ? (this.mono_note_5 = 0; this.mono_sort = 1):
this.mono_note_6 == msg2 ? (this.mono_note_6 = 0; this.mono_sort = 1):
this.mono_note_7 == msg2 ? (this.mono_note_7 = 0; this.mono_sort = 1):
this.mono_note_8 == msg2 ? (this.mono_note_8 = 0; this.mono_sort = 1):
this.mono_note_9 == msg2 ? (this.mono_note_9 = 0; this.mono_sort = 1):
this.mono_note_10 == msg2 ? (this.mono_note_10 = 0; this.mono_sort = 1):
this.mono_note_11 == msg2 ? (this.mono_note_11 = 0; this.mono_sort = 1):
this.mono_note_12 == msg2 ? (this.mono_note_12 = 0; this.mono_sort = 1);
);


this.mono_sort ? (
this.mono_note_1 == 0 ? (
this.mono_note_1 = this.mono_note_2;
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_2 == 0 ? (
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_3 == 0 ? (
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_4 == 0 ? (
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_5 == 0 ? (
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_6 == 0 ? (
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_7 == 0 ? (
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_8 == 0 ? (

this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_9 == 0 ? (
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_10 == 0 ? (
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_11 == 0 ? (
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
);
this.mono_sort = 0;
);




this.mono_note_12 != 0 ? this.mono_note_last = this.mono_note_12:
this.mono_note_11 != 0 ? this.mono_note_last = this.mono_note_11:
this.mono_note_10 != 0 ? this.mono_note_last = this.mono_note_10:
this.mono_note_9 != 0 ? this.mono_note_last = this.mono_note_9:
this.mono_note_8 != 0 ? this.mono_note_last = this.mono_note_8:
this.mono_note_7 != 0 ? this.mono_note_last = this.mono_note_7:
this.mono_note_6 != 0 ? this.mono_note_last = this.mono_note_6:
this.mono_note_5 != 0 ? this.mono_note_last = this.mono_note_5:
this.mono_note_4 != 0 ? this.mono_note_last = this.mono_note_4:
this.mono_note_3 != 0 ? this.mono_note_last = this.mono_note_3:
this.mono_note_2 != 0 ? this.mono_note_last = this.mono_note_2:
this.mono_note_1 != 0 ? this.mono_note_last = this.mono_note_1:
(this.mono_note_last = 0; this.mono_note_1_old = 0);

this.mono_note_last == 0 ? (this.msg3 = 0) : (
msg3 != 0 ? (this.last_msg3 = msg3; this.msg3 = msg3);
msg3 == 0 ? this.msg3 = this.last_msg3;
//this.msg3 = msg3;
);

//msg2 != this.mono_note_last ? (
this.msg2 = this.mono_note_last;
//!this.note_release ? (this.subosc_1.sub_midi_in()):(this.note_release = 0; this.mono_note_last == 0 ? this.subosc_1.sub_midi_in());
this.mono_note_last_old != this.mono_note_last ? (
this.mono_note_last_old = this.mono_note_last;
this.subosc_1.sub_midi_in_mono();
);

//);


):( // POLY
msg3 == 0 ? (
this.subosc_1.note == msg2 ? this.subosc_1.sub_midi_in():
this.subosc_2.note == msg2 ? this.subosc_2.sub_midi_in():
this.subosc_3.note == msg2 ? this.subosc_3.sub_midi_in():
this.subosc_4.note == msg2 ? this.subosc_4.sub_midi_in():
this.subosc_5.note == msg2 ? this.subosc_5.sub_midi_in():
this.subosc_6.note == msg2 ? this.subosc_6.sub_midi_in():
this.subosc_7.note == msg2 ? this.subosc_7.sub_midi_in():
this.subosc_8.note == msg2 ? this.subosc_8.sub_midi_in():
this.subosc_9.note == msg2 ? this.subosc_9.sub_midi_in():
this.subosc_10.note == msg2 ? this.subosc_10.sub_midi_in():
this.subosc_11.note == msg2 ? this.subosc_11.sub_midi_in():
this.subosc_12.note == msg2 ? this.subosc_12.sub_midi_in();
);


caught = 0;
this.subosc_1.note == msg2 ? (this.subosc_1.sub_midi_in(); caught = 1):
this.subosc_2.note == msg2 ? (this.subosc_2.sub_midi_in(); caught = 1):
this.subosc_3.note == msg2 ? (this.subosc_3.sub_midi_in(); caught = 1):
this.subosc_4.note == msg2 ? (this.subosc_4.sub_midi_in(); caught = 1):
this.subosc_5.note == msg2 ? (this.subosc_5.sub_midi_in(); caught = 1):
this.subosc_6.note == msg2 ? (this.subosc_6.sub_midi_in(); caught = 1):
this.subosc_7.note == msg2 ? (this.subosc_7.sub_midi_in(); caught = 1):
this.subosc_8.note == msg2 ? (this.subosc_8.sub_midi_in(); caught = 1):
this.subosc_9.note == msg2 ? (this.subosc_9.sub_midi_in(); caught = 1):
this.subosc_10.note == msg2 ? (this.subosc_10.sub_midi_in(); caught = 1):
this.subosc_11.note == msg2 ? (this.subosc_11.sub_midi_in(); caught = 1):
this.subosc_12.note == msg2 ? (this.subosc_12.sub_midi_in(); caught = 1);

    //this.subosc_1.note == 0 || this.subosc_1.note == msg2 ?
    caught == 0 ? (
    !this.subosc_1.on ? this.subosc_1.sub_midi_in():
    !this.subosc_2.on ? this.subosc_2.sub_midi_in():
    !this.subosc_3.on ? this.subosc_3.sub_midi_in():
    !this.subosc_4.on ? this.subosc_4.sub_midi_in():
    !this.subosc_5.on ? this.subosc_5.sub_midi_in():
    !this.subosc_6.on ? this.subosc_6.sub_midi_in():
    !this.subosc_7.on ? this.subosc_7.sub_midi_in():
    !this.subosc_8.on ? this.subosc_8.sub_midi_in():
    !this.subosc_9.on ? this.subosc_9.sub_midi_in():
    !this.subosc_10.on ? this.subosc_10.sub_midi_in():
    !this.subosc_11.on ? this.subosc_11.sub_midi_in():
    !this.subosc_12.on ? this.subosc_12.sub_midi_in();
  
  
    );

); // MONOPOLY

);


function fetch_subosc () (
this.subosc_number == 1 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 2 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 3 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 4 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 5 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 6 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_7.note_running;
  this.velocity = Synth.Subosc_7.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_8.note_running;
  this.velocity = Synth.Subosc_8.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_9.note_running;
  this.velocity = Synth.Subosc_9.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_10.note_running;
  this.velocity = Synth.Subosc_10.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_11.note_running;
  this.velocity = Synth.Subosc_11.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_12.note_running;
  this.velocity = Synth.Subosc_12.Velocity;
  this.starttrigger = 1;
);
); //Function

function fetch_unison_subosc () (
this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
);
); //Function


function make_osc () (
memory_point = this.GFXosc.four_init(memory_point, 2048);
memory_point = this.subosc_1.four_init(memory_point, 2048);
memory_point = this.subosc_2.four_init(memory_point, 2048);
memory_point = this.subosc_3.four_init(memory_point, 2048);
memory_point = this.subosc_4.four_init(memory_point, 2048);
memory_point = this.subosc_5.four_init(memory_point, 2048);
memory_point = this.subosc_6.four_init(memory_point, 2048);
memory_point = this.subosc_7.four_init(memory_point, 2048);
memory_point = this.subosc_8.four_init(memory_point, 2048);
memory_point = this.subosc_9.four_init(memory_point, 2048);
memory_point = this.subosc_10.four_init(memory_point, 2048);
memory_point = this.subosc_11.four_init(memory_point, 2048);
memory_point = this.subosc_12.four_init(memory_point, 2048);

this.subosc_1.subosc_number = 1;
this.subosc_2.subosc_number = 2;
this.subosc_3.subosc_number = 3;
this.subosc_4.subosc_number = 4;
this.subosc_5.subosc_number = 5;
this.subosc_6.subosc_number = 6;
this.subosc_7.subosc_number = 7;
this.subosc_8.subosc_number = 8;
this.subosc_9.subosc_number = 9;
this.subosc_10.subosc_number = 10;
this.subosc_11.subosc_number = 11;
this.subosc_12.subosc_number = 12;

this.subosc_1 = 1;
this.subosc_2 = 2;
this.subosc_3 = 3;
this.subosc_4 = 4;
this.subosc_5 = 5;
this.subosc_6 = 6;
this.subosc_7 = 7;
this.subosc_8 = 8;
this.subosc_9 = 9;
this.subosc_10 = 10;
this.subosc_11 = 11;
this.subosc_12 = 12;

);


function make_filters () (
this.subosc_1.band_init();
this.subosc_2.band_init();
this.subosc_3.band_init();
this.subosc_4.band_init();
this.subosc_5.band_init();
this.subosc_6.band_init();
this.subosc_7.band_init();
this.subosc_8.band_init();
this.subosc_9.band_init();
this.subosc_10.band_init();
this.subosc_11.band_init();
this.subosc_12.band_init();

this.subosc_1.NG.band_init();
this.subosc_2.NG.band_init();
this.subosc_3.NG.band_init();
this.subosc_4.NG.band_init();
this.subosc_5.NG.band_init();
this.subosc_6.NG.band_init();
this.subosc_7.NG.band_init();
this.subosc_8.NG.band_init();
this.subosc_9.NG.band_init();
this.subosc_10.NG.band_init();
this.subosc_11.NG.band_init();
this.subosc_12.NG.band_init();
);






function mono_glide() (
          note_glide == 0 ? (
            this.note = this.note_running = this.note_target;
          ):(
            abs(this.note_running - this.note_target) < 0.01 ? (this.note_running = this.note_target; this.note_distance = 0):
            this.note_running += (this.note_distance/(srate*0.001*note_glide));
            abs(this.note - this.note_running) > max(0.01,this.note_distance/100) ? (this.note = this.note_running;);
            
            this.note_distance > 0 ? this.note_running > this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
            this.note_distance < 0 ? this.note_running < this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
          );
);



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  DAS  HIER  LANDET  IN  DER LIBRARY  ////////////////////////////////////////////////////////////////////// 




function render_waveform()
  local(x, dx, loopy, count, buf, size, gain)
(

buf = this.buf; size = this.size;
  
this..sine_level != 0 ? (
  x = 0;
  loopy = 0; gain = this..sine_level;
  dx = 2*$pi / (size/this..sine_octave);
  loop(this..sine_octave,
    loop(size / this..sine_octave,
      buf[loopy] = this..sine_mod == 0 ? gain * sin(x) : this..sine_mod == 1 ? gain * sign(sin(x)) * sigma(abs(sin(x)), this..sine_coef) : this..sine_mod == 2 ? gain * sign(sin(x)) * explog(abs(sin(x)), this..sine_coef);
      loopy += 1;
      x += dx;
    );
  );
):(
loopy = 0;
loop(size,
  buf[loopy] = 0;
  loopy += 1;
);
);


this..triangle_level != 0 ? (
  gain = this..triangle_level / this..triangle_octave;
  x = 0;
  count = 0;
  dx = (4) / (size);
  loopy = 0;
  loop(this..triangle_octave,
    loopy = 0; x = 0;
    loop(size,
      buf[count*size/this..triangle_octave + loopy/this..triangle_octave] += this..triangle_mod == 0 ? gain * x : 
      this..triangle_mod == 1 ? gain * sign(x) * sigma(abs(x), this..triangle_coef) : 
      this..triangle_mod == 2 ? gain * sign(x) * explog(abs(x), this..triangle_coef);
      loopy += 1;
      loopy <= (size)/4 ? x += dx :
      loopy <= (size)*0.75 ? x -= dx :
      x += dx;
    );
    count += 1;
  );
);

this..saw_level != 0 ? (
  gain = this..saw_level; loopy = 0;
  dx = 2 / (size / this..saw_octave);
  loop(this..saw_octave,
    x = 1;
    loop(size / this..saw_octave,
      buf[loopy] += this..saw_mod == 0 ? gain * x : 
      this..saw_mod == 1 ? gain * sigma((x+1)/2, this..saw_coef) - this..saw_level/2 : 
      this..saw_mod == 2 ? gain * (explog((x + 1)/2, this..saw_coef)-0.5);
      loopy += 1;
      x -= dx;
    );
  );
);

this..saw_alt_level != 0 ? (
  gain = this..saw_alt_level; loopy = 0;
  dx = 2 / (size / this..saw_alt_octave);
  counter = 1;
  loop(this..saw_alt_octave,
    x = 1;
    loopy = (counter-1)*size/this..saw_alt_octave;
    loop(0.5*size / this..saw_alt_octave,
      loopy - loopy*(counter-1) <= 0.5*size/this..saw_alt_octave ? buf[loopy] += this..saw_alt_mod == 0 ? gain * x : this..saw_alt_mod == 1 ? gain * sign(x) * sigma(abs(x), this..saw_alt_coef) : this..saw_alt_mod == 2 ? gain * sign(x) * explog(abs(x), this..saw_alt_coef);;  buf[loopy + (0.5*size / this..saw_alt_octave)] -= this..saw_alt_mod == 0 ? gain * x : this..saw_alt_mod == 1 ? gain * sign(x) * sigma(abs(x), this..saw_alt_coef) : this..saw_alt_mod == 2 ? gain * sign(x) * explog(abs(x), this..saw_alt_coef);;
      loopy += 1;
      x -= dx;
    );
  counter += 1;
  );
);

this..pulse_level != 0 ? (
  gain = this..pulse_level; counter = 0;
  loop(this..pulse_octave,
    loopy = 0; x = 1;
    loop(size/this..pulse_octave,
      buf[loopy + counter*size/this..pulse_octave] += gain * x;
      loopy < 0.5*this..pwm.running*(size/this..pulse_octave) ? x = 1 : x = -1;
      loopy += 1;
    );
    counter += 1;
  );
);

loopy = 0;
loop(size,
  buf[loopy] = min(1,max(-1,buf[loopy]));
  loopy += 1;
);

this.four_fft();

); // Function





function new_complex_envelope (attack.shape, dec1.shape, dec2.shape, release.shape, attack.coef, dec1.coef, dec2.coef, release.coef) (

this.stage == 1 ? (
  this.attack == 0 ? (this.level = 1; this.follower = 0; this.stage = 2; this.envelope_stop = 0):(
    this.follower*0 >= this.attack || this.level + (1/this.attack) > 1 ? (
        this.follower = 0; this.stage = 2; this.level = 1;
    ):(
        this.level += 1/this.attack; this.follower += 1;
        this.envelope_stop = 0;
    );
  );
);
this.stage == 2 ? (
  this.decay == 0 ? (this.level = this.breakpoint; this.follower = 0; this.stage = 3):(
    this.follower >= this.decay || this.level - (1-this.breakpoint)/this.decay < this.breakpoint ? ( // 
        this.follower = 0;  this.stage = 3; //this.level = this.breakpoint;
    ):(
        this.level -= (1-this.breakpoint)/this.decay; this.follower += 1; 
    );
  );
);
this.stage == 3 ? (
  this.decay2 == 0 ? (this.follower = 0; this.stage = 4):(
    this.breakpoint <= this.sustain ? (
        this.follower >= this.decay2 ? ( //|| this.level - (this.breakpoint - this.sustain)/this.decay2 > this.sustain ? ( // 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    ):(
        this.follower >= this.decay2 ? ( // || this.level - (this.breakpoint - this.sustain)/this.decay2 < this.sustain ? ( 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    );
  );
);

this.stage == 4 ? this.level = this.sustain; //(this.sustain_old != this.sustain ? (this.level = this.sustain; this.sustain_old = this.sustain));

this.stage == 5 ? (
  this.release == 0 ? (this.level = 0; this.follower = 0; this.envelope_stop =1):(
    this.follower == 0 ? this.level = this.release_level = this.real_level;
    this.level -= this.release_level/this.release; //absolute release time
    //this.level -= 1/this.release; //relative Release time
    this.follower += 1;
  );
);

this.stage == 1 ? (
    attack.shape == 0 ? (
        this.real_level = this.level;
    ):attack.shape == 2 ? (
        this.real_level = explog(this.level, attack.coef);
    ):attack.shape == 1 ? (
        this.real_level = sigma(this.level, attack.coef);
    );
):this.stage == 2 ? (
    dec1.shape == 0 ? (
        this.real_level = this.level;
    ):dec1.shape == 2 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*explog((1-(this.follower/this.decay)), dec1.coef);
    ):dec1.shape == 1 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*sigma((1-(this.follower/this.decay)), dec1.coef);
    );
):this.stage == 3 ? (
    dec2.shape == 0 ? (
        this.real_level = this.level;
    ):dec2.shape == 2 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint+ tmp_fac*explog(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*explog((1-(this.follower/this.decay2)), dec2.coef);
        );
    ):dec2.shape == 1 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint + tmp_fac*sigma(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*sigma((1-(this.follower/this.decay2)), dec2.coef);
        );
    );
   this.follower += 1; 
):this.stage == 4 ? (this.real_level = this.level;

):this.stage == 5 ? (
    release.shape == 0 ? (
        this.real_level = this.level;
    ):release.shape == 2 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.level*explog(1-(this.follower/this.release), release.coef);
    ):release.shape == 1 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.release_level*sigma(1-(this.follower/this.release), release.coef);
    );
    this.real_level <= 0.00001 ? (this.level = 0; this.envelope_stop = 1);
);

//this.stage != 1 ? this.real_level = this.level;


); // end function




function sync_osc () (
this..sync_to == 0 ? (syncdummy = 0) :
this..sync_to == 1 ? (
this == 1 ? (osc1.subosc_1.t < osc1.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc1.subosc_2.t < osc1.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc1.subosc_3.t < osc1.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc1.subosc_4.t < osc1.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc1.subosc_5.t < osc1.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc1.subosc_6.t < osc1.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc1.subosc_7.t < osc1.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc1.subosc_8.t < osc1.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc1.subosc_9.t < osc1.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc1.subosc_10.t < osc1.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc1.subosc_11.t < osc1.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc1.subosc_12.t < osc1.subosc_12.t_old ? (this.wave_sync(0)));
):this..sync_to == 2 ? (
this == 1 ? osc2.subosc_1.t < osc2.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc2.subosc_2.t < osc2.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc2.subosc_3.t < osc2.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc2.subosc_4.t < osc2.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc2.subosc_5.t < osc2.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc2.subosc_6.t < osc2.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc2.subosc_7.t < osc2.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc2.subosc_8.t < osc2.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc2.subosc_9.t < osc2.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc2.subosc_10.t < osc2.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc2.subosc_11.t < osc2.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc2.subosc_12.t < osc2.subosc_12.t_old ? (this.wave_sync(0));
):this..sync_to == 3 ? (
this == 1 ? osc3.subosc_1.t < osc3.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc3.subosc_2.t < osc3.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc3.subosc_3.t < osc3.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc3.subosc_4.t < osc3.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc3.subosc_5.t < osc3.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc3.subosc_6.t < osc3.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc3.subosc_7.t < osc3.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc3.subosc_8.t < osc3.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc3.subosc_9.t < osc3.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc3.subosc_10.t < osc3.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc3.subosc_11.t < osc3.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc3.subosc_12.t < osc3.subosc_12.t_old ? (this.wave_sync(0));
):this..sync_to == 4 ? (
this == 1 ? osc4.subosc_1.t < osc4.subosc_1.t_old ? (this.wave_sync(0)):
this == 2 ? osc4.subosc_2.t < osc4.subosc_2.t_old ? (this.wave_sync(0)):
this == 3 ? osc4.subosc_3.t < osc4.subosc_3.t_old ? (this.wave_sync(0)):
this == 4 ? osc4.subosc_4.t < osc4.subosc_4.t_old ? (this.wave_sync(0)):
this == 5 ? osc4.subosc_5.t < osc4.subosc_5.t_old ? (this.wave_sync(0)):
this == 6 ? osc4.subosc_6.t < osc4.subosc_6.t_old ? (this.wave_sync(0)):
this == 7 ? osc4.subosc_7.t < osc4.subosc_7.t_old ? (this.wave_sync(0)):
this == 8 ? osc4.subosc_8.t < osc4.subosc_8.t_old ? (this.wave_sync(0)):
this == 9 ? osc4.subosc_9.t < osc4.subosc_9.t_old ? (this.wave_sync(0)):
this == 10 ? osc4.subosc_10.t < osc4.subosc_10.t_old ? (this.wave_sync(0)):
this == 11 ? osc4.subosc_11.t < osc4.subosc_11.t_old ? (this.wave_sync(0)):
this == 12 ? osc4.subosc_12.t < osc4.subosc_12.t_old ? (this.wave_sync(0));
);

);




function slew_rate() (

this > this.before_slew_rate + slew_rate ? (this.after_slew_rate = this.before_slew_rate + slew_rate; slew_rate_n = 1):
this < this.before_slew_rate - slew_rate ? (this.after_slew_rate = this.before_slew_rate - slew_rate; slew_rate_n = -1):
(this.after_slew_rate = this; slew_rate_n = 0);

this.before_slew_rate = this.after_slew_rate;
);



function LFO_Generator (CV) (
   this.sync_on == 1 ? ( //TEMP SYNCED
   Takt_in_s = (240 / tempo);
   this.time_sync_2 == 1 ? (this.T_Fac = 1.5):(this.T_Fac=1);
   this.Hertz = Takt_in_s / (this.time_sync*this.T_Fac);
   this.time_sync_2 == 2 ? this.Hertz *= 1.5;
   this.cosphi = this.phase_shift / 360;
   ):(
   this.vslider41 = this.tempo_hz * this.multiplier;
   this.vslider41 != 0 ? this.Hertz = 1/this.vslider41;
   this.cosphi = this.phase_shift / 360;
   );
   
   //block_ ... + (pos_add/srate) 
   this.n_durchgaenge = ((block_play_position + (pos_add/srate) + this.cosphi*this.Hertz) / this.Hertz);
   
   
   this.free_run == 1 ? ( //1 = Time sync, not free run
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   play_state == 1 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   play_state == 5 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   ):(
   this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   ):(
   play_state == 1 ? this.phase_position += (1/this.Hertz) / srate;
   play_state == 5 ? this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   );
   );
   
 
   this.sinus_Position = sin(this.phase_position * 2 * $pi);
   this.flip_position = sign(this.sinus_Position);
   this.ramp_up_position = -1 + 2*this.phase_position;
   this.ramp_down_position = 1 - 2*this.phase_position;
   
   this.phase_position <= 0.25 ? this.triangle_position = this.phase_position * 4:
   this.phase_position <= 0.5 ?  this.triangle_position = 1 - (this.phase_position-0.25) * 4:
   this.phase_position <= 0.75 ? this.triangle_position = (this.phase_position-0.5) * -4:
   this.phase_position > 0.75 ?  this.triangle_position = -1 + (this.phase_position - 0.75) * 4;

   this.form == 0 ? (
   this.CV_Select == 1 ? CV = 1 :
   this.CV_Select == 2 ? CV = modwheel :
   this.CV_Select == 3 ? CV = aftertouch/127 :
   this.CV_Select == 4 ? CV = CV_1 :
   this.CV_Select == 5 ? CV = CV_2 :
   this.CV_Select == 6 ? CV = CV_3 :
   this.CV_Select == 7 ? CV = CV_4 :
   this.CV_Select == 8 ? CV = CV_5 :
   this.CV_Select == 9 ? CV = CV_6 :
   this.CV_Select == 10 ? CV = CV_7 :
   this.CV_Select == 11 ? CV = CV_8 :
   this.CV_Select == 12 ? CV = CV_9 :
   this.CV_Select == 13 ? CV = CV_10 :
   CV = 0;
   this.abs_position = CV;
   );
   this.form == 1 ? this.abs_position = this.sinus_Position;
   this.form == 2 ? this.abs_position = this.flip_Position;
   this.form == 3 ? this.abs_position = this.ramp_up_Position;
   this.form == 4 ? this.abs_position = this.ramp_down_Position;
   this.form == 5 ? this.abs_position = this.triangle_Position;
   this.abs_position.slew_rate();
   this.abs_position = this.abs_position.after_slew_rate;

);




function play_suboscillator () (

this.fetch_subosc();

this.t_old = this.t;
this..sync_to ? this.sync_osc();

abs(this.pwm_old - this..pwm.running) > 0.005 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0):

 this.want_update || abs(this.note_running + this..transpose.running + (this..finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.01 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this..transpose.running + (this..finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ? this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63)
 );
 this.output = this.wave_trunc() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-1];
);



function play_unison_suboscillator () (

this.fetch_unison_subosc();

this.t_old = this.t;
this..sync_to ? this.sync_osc();


abs(this.pwm_old - this..pwm.running) > 0.005 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0):

 this.want_update || abs(this.note_running + this..transpose.running - (this..finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.01 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this..transpose.running - (this..finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ? this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63)
 );
 this.output = this.wave_trunc() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-7];
  //aakatze += 1;
);

function play_oscillator() (

this.unison ? (
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;

synth.subosc_1.on ? this.subosc_7.play_unison_suboscillator() : (this.subosc_7.output = 0; this.subosc_7.note = this.subosc_7.note_distance = 0);
synth.subosc_2.on ? this.subosc_8.play_unison_suboscillator() : this.subosc_8.output = 0;
synth.subosc_3.on ? this.subosc_9.play_unison_suboscillator() : this.subosc_9.output = 0;
synth.subosc_4.on ? this.subosc_10.play_unison_suboscillator() : this.subosc_10.output = 0;
synth.subosc_5.on ? this.subosc_11.play_unison_suboscillator() : this.subosc_11.output = 0;
synth.subosc_6.on ? this.subosc_12.play_unison_suboscillator() : this.subosc_12.output = 0;
):(
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;
synth.subosc_7.on ? this.subosc_7.play_suboscillator() : this.subosc_7.output = 0;
synth.subosc_8.on ? this.subosc_8.play_suboscillator() : this.subosc_8.output = 0;
synth.subosc_9.on ? this.subosc_9.play_suboscillator() : this.subosc_9.output = 0;
synth.subosc_10.on ? this.subosc_10.play_suboscillator() : this.subosc_10.output = 0;
synth.subosc_11.on ? this.subosc_11.play_suboscillator() : this.subosc_11.output = 0;
synth.subosc_12.on ? this.subosc_12.play_suboscillator() : this.subosc_12.output = 0;
);
/*
this.output =
this.subosc_1.output +
this.subosc_2.output +
this.subosc_3.output +
this.subosc_4.output +
this.subosc_5.output +
this.subosc_6.output +
this.subosc_7.output +
this.subosc_8.output +
this.subosc_9.output +
this.subosc_10.output +
this.subosc_11.output +
this.subosc_12.output;

this.output *= this.Level;
*/

);









function fill_subosc () (
this.VCA1.attack = env1.attack;
this.VCA1.decay = env1.decay;
this.VCA1.breakpoint = env1.breakpoint;
this.VCA1.decay2 = env1.decay2;
this.VCA1.sustain = env1.sustain;
this.VCA1.release = env1.release;
this.VCA1.at_shape = env1.at_shape;
this.VCA1.dec1_shape = env1.dec1_shape;
this.VCA1.dec2_shape = env1.dec2_shape;
this.VCA1.dec1_coef = env1.dec1_coef;
this.VCA1.dec2_coef = env1.dec2_coef;
this.VCA1.at_coef = env1.at_coef;
this.VCA1.rel_shape = env1.rel_shape;
this.VCA1.rel_coef = env1.rel_coef;

this.VCA2.attack = env2.attack;
this.VCA2.decay = env2.decay;
this.VCA2.breakpoint = env2.breakpoint;
this.VCA2.decay2 = env2.decay2;
this.VCA2.sustain = env2.sustain;
this.VCA2.release = env2.release;
this.VCA2.at_shape = env2.at_shape;
this.VCA2.dec1_shape = env2.dec1_shape;
this.VCA2.dec2_shape = env2.dec2_shape;
this.VCA2.dec1_coef = env2.dec1_coef;
this.VCA2.dec2_coef = env2.dec2_coef;
this.VCA2.at_coef = env2.at_coef;
this.VCA2.rel_shape = env2.rel_shape;
this.VCA2.rel_coef = env2.rel_coef;

this.VCF1.attack = env5.attack;
this.VCF1.decay = env5.decay;
this.VCF1.breakpoint = env5.breakpoint;
this.VCF1.decay2 = env5.decay2;
this.VCF1.sustain = env5.sustain;
this.VCF1.release = env5.release;
this.VCF1.at_shape = env5.at_shape;
this.VCF1.dec1_shape = env5.dec1_shape;
this.VCF1.dec2_shape = env5.dec2_shape;
this.VCF1.dec1_coef = env5.dec1_coef;
this.VCF1.dec2_coef = env5.dec2_coef;
this.VCF1.at_coef = env5.at_coef;
this.VCF1.rel_shape = env5.rel_shape;
this.VCF1.rel_coef = env5.rel_coef;

this.VCA3.attack = env3.attack;
this.VCA3.decay = env3.decay;
this.VCA3.breakpoint = env3.breakpoint;
this.VCA3.decay2 = env3.decay2;
this.VCA3.sustain = env3.sustain;
this.VCA3.release = env3.release;
this.VCA3.at_shape = env3.at_shape;
this.VCA3.dec1_shape = env3.dec1_shape;
this.VCA3.dec2_shape = env3.dec2_shape;
this.VCA3.dec1_coef = env3.dec1_coef;
this.VCA3.dec2_coef = env3.dec2_coef;
this.VCA3.at_coef = env3.at_coef;
this.VCA3.rel_shape = env3.rel_shape;
this.VCA3.rel_coef = env3.rel_coef;

this.VCF2.attack = env6.attack;
this.VCF2.decay = env6.decay;
this.VCF2.breakpoint = env6.breakpoint;
this.VCF2.decay2 = env6.decay2;
this.VCF2.sustain = env6.sustain;
this.VCF2.release = env6.release;
this.VCF2.at_shape = env6.at_shape;
this.VCF2.dec1_shape = env6.dec1_shape;
this.VCF2.dec2_shape = env6.dec2_shape;
this.VCF2.dec1_coef = env6.dec1_coef;
this.VCF2.dec2_coef = env6.dec2_coef;
this.VCF2.at_coef = env6.at_coef;
this.VCF2.rel_shape = env6.rel_shape;
this.VCF2.rel_coef = env6.rel_coef;
);





function modulationsmatrix(LFO, RANGE, MODRANGE) local(_controller _modamount _mode _LFO_Value _wantmod) (

LFO == 1 ? _wantmod = this.LFO_1.wantmod:
LFO == 2 ? _wantmod = this.LFO_2.wantmod:
LFO == 3 ? _wantmod = this.LFO_3.wantmod:
LFO == 4 ? _wantmod = this.LFO_4.wantmod;

_wantmod ? (
    LFO == 1 ? (
    _LFO_Value = LFO_1.abs_position.after_slew_rate;
    _modamount = this.LFO_1.modamount;
    _mode = this.LFO_1.mode;
    this.LFO_1.controller == 1 ? _controller = 1 :
    this.LFO_1.controller == 2 ? _controller = modwheel :
    this.LFO_1.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_1.controller == 4 ? _controller = CV_1 :
    this.LFO_1.controller == 5 ? _controller = CV_2 :
    this.LFO_1.controller == 6 ? _controller = CV_3 :
    this.LFO_1.controller == 7 ? _controller = CV_4 :
    this.LFO_1.controller == 8 ? _controller = CV_5 :
    this.LFO_1.controller == 9 ? _controller = CV_6 :
    this.LFO_1.controller == 10 ? _controller = CV_7 :
    this.LFO_1.controller == 11 ? _controller = CV_8 :
    this.LFO_1.controller == 12 ? _controller = CV_9 :
    this.LFO_1.controller == 13 ? _controller = CV_10;
    ):
    LFO == 2 ? (
    _LFO_Value = LFO_2.abs_position.after_slew_rate;
    _modamount = this.LFO_2.modamount;
    _mode = this.LFO_2.mode;
    this.LFO_2.controller == 1 ? _controller = 1 :
    this.LFO_2.controller == 2 ? _controller = modwheel :
    this.LFO_2.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_2.controller == 4 ? _controller = CV_1 :
    this.LFO_2.controller == 5 ? _controller = CV_2 :
    this.LFO_2.controller == 6 ? _controller = CV_3 :
    this.LFO_2.controller == 7 ? _controller = CV_4 :
    this.LFO_2.controller == 8 ? _controller = CV_5 :
    this.LFO_2.controller == 9 ? _controller = CV_6 :
    this.LFO_2.controller == 10 ? _controller = CV_7 :
    this.LFO_2.controller == 11 ? _controller = CV_8 :
    this.LFO_2.controller == 12 ? _controller = CV_9 :
    this.LFO_2.controller == 13 ? _controller = CV_10;
    ):
    LFO == 3 ? (
    _LFO_Value = LFO_3.abs_position.after_slew_rate;
    _modamount = this.LFO_3.modamount;
    _mode = this.LFO_3.mode;
    this.LFO_3.controller == 1 ? _controller = 1 :
    this.LFO_3.controller == 2 ? _controller = modwheel :
    this.LFO_3.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_3.controller == 4 ? _controller = CV_1 :
    this.LFO_3.controller == 5 ? _controller = CV_2 :
    this.LFO_3.controller == 6 ? _controller = CV_3 :
    this.LFO_3.controller == 7 ? _controller = CV_4 :
    this.LFO_3.controller == 8 ? _controller = CV_5 :
    this.LFO_3.controller == 9 ? _controller = CV_6 :
    this.LFO_3.controller == 10 ? _controller = CV_7 :
    this.LFO_3.controller == 11 ? _controller = CV_8 :
    this.LFO_3.controller == 12 ? _controller = CV_9 :
    this.LFO_3.controller == 13 ? _controller = CV_10;
    ):
    LFO == 4 ? (
    _LFO_Value = LFO_4.abs_position.after_slew_rate;
    _modamount = this.LFO_4.modamount;
    _mode = this.LFO_4.mode;
    this.LFO_4.controller == 1 ? _controller = 1 :
    this.LFO_4.controller == 2 ? _controller = modwheel :
    this.LFO_4.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_4.controller == 4 ? _controller = CV_1 :
    this.LFO_4.controller == 5 ? _controller = CV_2 :
    this.LFO_4.controller == 6 ? _controller = CV_3 :
    this.LFO_4.controller == 7 ? _controller = CV_4 :
    this.LFO_4.controller == 8 ? _controller = CV_5 :
    this.LFO_4.controller == 9 ? _controller = CV_6 :
    this.LFO_4.controller == 10 ? _controller = CV_7 :
    this.LFO_4.controller == 11 ? _controller = CV_8 :
    this.LFO_4.controller == 12 ? _controller = CV_9 :
    this.LFO_4.controller == 13 ? _controller = CV_10;
    );
    
    
    
    
    
    _mode == 0 ? this.modresult += (_modamount/MODRANGE)*_LFO_Value*_controller*RANGE :
    _mode == 1 ? this.modresult += -0.5*range*_modamount/modrange + (0.5*_modamount/MODRANGE)*_LFO_Value*_controller*RANGE;
):(
    this.running = this;
);

);


function modulate_osc () (
  
  this.level.modresult = 0;
  this.pan.modresult = 0;
  this.transpose.modresult = 0;
  this.finetune.modresult = 0;
  this.pwm.modresult = 0;
  
  LFO_1.wantmod ? (
    this.level.modulationsmatrix(1, 2, 10);
    this.pan.modulationsmatrix(1, 2, 200);
    this.transpose.modulationsmatrix(1, 24, 24);
    this.finetune.modulationsmatrix(1, 200, 200);
    this.pwm.modulationsmatrix(1, 2, 4);
  );
  LFO_2.wantmod ? (
    this.level.modulationsmatrix(2, 2, 10);
    this.pan.modulationsmatrix(2, 2, 200);
    this.transpose.modulationsmatrix(2, 24, 24);
    this.finetune.modulationsmatrix(2, 200, 200);
    this.pwm.modulationsmatrix(2, 2, 4);
  );
  LFO_3.wantmod ? (
    this.level.modulationsmatrix(3, 2, 10);
    this.pan.modulationsmatrix(3, 2, 200);
    this.transpose.modulationsmatrix(3, 24, 24);
    this.finetune.modulationsmatrix(3, 200, 200);
    this.pwm.modulationsmatrix(3, 2, 4);
  );
  LFO_4.wantmod ? (
    this.level.modulationsmatrix(4, 2, 10);
    this.pan.modulationsmatrix(4, 2, 200);
    this.transpose.modulationsmatrix(4, 24, 24);
    this.finetune.modulationsmatrix(4, 200, 200);
    this.pwm.modulationsmatrix(4, 2, 4);
  );
  
  this.level.running = this.level + this.level.modresult;
  this.pan.running = this.pan + this.pan.modresult;
  this.transpose.running = this.transpose + this.transpose.modresult;
  this.finetune.running = this.finetune + this.finetune.modresult;
  this.pwm.running = this.pwm + this.pwm.modresult;
  
);





function play_synth_subosc () (
this.start_trigger == 1 ? (
this.VCA1.stage = 1; this.VCA1.follower = 0;
this.VCA2.stage = 1; this.VCA2.follower = 0;
this.VCA3.stage = 1; this.VCA3.follower = 0;
this.VCF1.stage = 1; this.VCF1.follower = 0; this.VCF1.level = this.VCF1.real_level = 0;
this.VCF2.level = this.VCF2.real_level = 0; this.VCF2.follower = 0; this.VCF2.stage = 1; 
this.start_trigger = 0;
);
this.release_trigger == 1 ? (this.VCA1.stage = 5; this.VCA1.follower = 0; this.VCA2.stage = 5; this.VCA2.follower = 0; this.VCA3.stage = 5; this.VCA3.follower = 0; this.VCF1.stage = 5; this.VCF1.follower = 0; this.VCF2.stage = 5; this.VCF2.follower = 0; this.release_trigger = 0);


this.VCA1.new_complex_envelope (this.VCA1.at_shape,this.VCA1.dec1_shape,this.VCA1.dec2_shape,this.VCA1.rel_shape,this.VCA1.at_coef,this.VCA1.dec1_coef,this.VCA1.dec2_coef,this.VCA1.rel_coef);
this.VCA2.new_complex_envelope (this.VCA2.at_shape,this.VCA2.dec1_shape,this.VCA2.dec2_shape,this.VCA2.rel_shape,this.VCA2.at_coef,this.VCA2.dec1_coef,this.VCA2.dec2_coef,this.VCA2.rel_coef);
this.VCA3.new_complex_envelope (this.VCA3.at_shape,this.VCA3.dec1_shape,this.VCA3.dec2_shape,this.VCA3.rel_shape,this.VCA3.at_coef,this.VCA3.dec1_coef,this.VCA3.dec2_coef,this.VCA3.rel_coef);


VCF_ON && this..VCF_ENV ? this.VCF1.new_complex_envelope (this.VCF1.at_shape,this.VCF1.dec1_shape,this.VCF1.dec2_shape,this.VCF1.rel_shape,this.VCF1.at_coef,this.VCF1.dec1_coef,this.VCF1.dec2_coef,this.VCF1.rel_coef);
NG.VCF_ON && NG.VCF_ENV ? this.VCF2.new_complex_envelope (ng.at_shape,ng.dec1_shape,ng.dec2_shape,ng.rel_shape,ng.at_coef,ng.dec1_coef,ng.dec2_coef,ng.rel_coef) : (this.VCF2.real_level=1);


envelope_real_level[this.subosc_number-1] = this.VCA1.real_level;
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level;
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level;
//envelope_real_level[3] = this.VCA4.real_level;
envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level;
envelope_real_level[60+this.subosc_number-1] = this.VCF2.real_level;
//envelope_real_level[6] = this.VCF3.real_level;
//envelope_real_level[7] = this.VCF4.real_level;

this.VCA1.envelope_stop ? (
//this.VCA1.envelope_stop = 0;
//this.on = 0; this.note = this.note_running = 0;
envelope_real_level[this.subosc_number-1] = this.VCA1.real_level = this.VCA1.level = 0;this.VCA1follower = 0;
);

this.VCA2.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level = this.VCA2.level = 0;this.VCA2.follower = 0;
);

this.VCA3.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level = this.VCA3.level = 0;this.VCA3.follower = 0;
);

this.VCF1.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
);

this.VCF2.envelope_stop ? (
//this.VCA2.envelope_stop = 0; 
envelope_real_level[60+this.subosc_number-1] = this.VCF2.real_level = this.VCF2.level = 0;this.VCF2.follower = 0;
);

this.VCA1.envelope_stop && this.VCA2.envelope_stop && this.VCA3.envelope_stop? (
this.on = 0; this.note = this.note_running = 0;
this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
this.VCF2.real_level = this.VCF2.level = 0;this.VCF2.follower = 0;
);

this.subosc_number == 1 ? this.outputL = osc1.subosc_1.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputL = osc1.subosc_2.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL = osc1.subosc_3.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL = osc1.subosc_4.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL = osc1.subosc_5.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL = osc1.subosc_6.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
this.subosc_number == 7 ? this.outputL = osc1.subosc_7.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc7.output * NG.level.running:
this.subosc_number == 8 ? this.outputL = osc1.subosc_8.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc8.output * NG.level.running:
this.subosc_number == 9 ? this.outputL = osc1.subosc_9.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc9.output * NG.level.running:
this.subosc_number == 10 ? this.outputL = osc1.subosc_10.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc10.output * NG.level.running:
this.subosc_number == 11 ? this.outputL = osc1.subosc_11.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc11.output * NG.level.running:
this.subosc_number == 12 ? this.outputL = osc1.subosc_12.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc12.output * NG.level.running;

this.subosc_number == 1 ? this.outputR = osc1.subosc_1.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputR = osc1.subosc_2.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR = osc1.subosc_3.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR = osc1.subosc_4.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR = osc1.subosc_5.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR = osc1.subosc_6.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
this.subosc_number == 7 ? this.outputR = osc1.subosc_7.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc7.output * NG.level.running:
this.subosc_number == 8 ? this.outputR = osc1.subosc_8.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc8.output * NG.level.running:
this.subosc_number == 9 ? this.outputR = osc1.subosc_9.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc9.output * NG.level.running:
this.subosc_number == 10 ? this.outputR = osc1.subosc_10.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc10.output * NG.level.running:
this.subosc_number == 11 ? this.outputR = osc1.subosc_11.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc11.output * NG.level.running:
this.subosc_number == 12 ? this.outputR = osc1.subosc_12.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc12.output * NG.level.running;

osc1.unison ? (
this.subosc_number == 1 ? this.outputR += osc1.subosc_7.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputR += osc1.subosc_8.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR += osc1.subosc_9.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR += osc1.subosc_10.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR += osc1.subosc_11.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR += osc1.subosc_12.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:

this.subosc_number == 1 ? this.outputL += osc1.subosc_7.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc1.output * NG.level.running:
this.subosc_number == 2 ? this.outputL += osc1.subosc_8.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL += osc1.subosc_9.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL += osc1.subosc_10.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL += osc1.subosc_11.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL += osc1.subosc_12.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
);

osc2.unison ? (
this.subosc_number == 1 ? this.outputR += osc2.subosc_7.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 2 ? this.outputR += osc2.subosc_8.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputR += osc2.subosc_9.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputR += osc2.subosc_10.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputR += osc2.subosc_11.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputR += osc2.subosc_12.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:

this.subosc_number == 1 ? this.outputL += osc2.subosc_7.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 2 ? this.outputL += osc2.subosc_8.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc2.output * NG.level.running:
this.subosc_number == 3 ? this.outputL += osc2.subosc_9.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc3.output * NG.level.running:
this.subosc_number == 4 ? this.outputL += osc2.subosc_10.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc4.output * NG.level.running:
this.subosc_number == 5 ? this.outputL += osc2.subosc_11.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc5.output * NG.level.running:
this.subosc_number == 6 ? this.outputL += osc2.subosc_12.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);// + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2) + NG.Subosc6.output * NG.level.running:
);
/*
    this..filter_slope
    this..filter_q.running
this..filter_gain.running
    this..filter_type
this.VCF_trigger
    this..keyfollow //es gibt auch half
    this..filter_f.running
this.VCF.real_level*this..VCF_ENV
    this.note
    this..pitchamount.running
*/
//STEREO FILTER!!!

this..filter_gain.running = 0; // kommt eh nicht vor ;)
this.VCF_trigger = 0; // kommt erst mit VCF_ENV
this.VCF.real_level = this.VCF1.real_level;

VCF_ON ? this.VCF();


  
this.noise = (rand(2)-1) * this.VCA3.real_level;

this.tmp_outL = this.outputL;
this.tmp_outR = this.outputR;
//this.outputL = this.noise;
//this.outputR = this.noise;

//this.VCF.real_level = this.VCF2.real_level;
//NG.filter_f.running = ng.filter_f;
NG.VCF_ON ? this.NG_VCF();
//this.noise = this.outputL;

//this.outputL = this.tmp_outL;
//this.outputR = this.tmp_outR;
this.outputL += this.noise* (ng.level.running) * sin((1-(1+ng.pan.running)/2)*$pi/2);
this.outputR += this.noise* (ng.level.running) * sin(((1+ng.pan.running)/2)*$pi/2);

);




function play_synth_generals () (

  NG.level.modresult = 0;
  NG.pan.modresult = 0;
  
  //LFO_1.wantmod ? (
    NG.level.modulationsmatrix(1, 2, 10);
    NG.pan.modulationsmatrix(1, 2, 200);

  //);
  LFO_2.wantmod ? (
    NG.level.modulationsmatrix(2, 2, 10);
    NG.pan.modulationsmatrix(2, 2, 200);

  );
  LFO_3.wantmod ? (
    NG.level.modulationsmatrix(3, 2, 10);
    NG.pan.modulationsmatrix(3, 2, 200);

  );
  LFO_4.wantmod ? (
    NG.level.modulationsmatrix(4, 2, 10);
    NG.pan.modulationsmatrix(4, 2, 200);

  );
  
  NG.level.running = NG.level + NG.level.modresult;
  NG.pan.running = NG.pan + NG.pan.modresult;
  
  NG.filter_f.modresult = 0;
  NG.filter_f.LFO_1.wantmod ? NG.filter_f.modulationsmatrix(1, 100, 100);
  NG.filter_f.LFO_2.wantmod ? NG.filter_f.modulationsmatrix(2, 100, 100);
  NG.filter_f.LFO_3.wantmod ? NG.filter_f.modulationsmatrix(3, 100, 100);
  NG.filter_f.LFO_4.wantmod ? NG.filter_f.modulationsmatrix(4, 100, 100);
  NG.filter_f.running = NG.filter_f + NG.filter_f.modresult;
  
this.filter_f.modresult = 0;
this.filter_f.LFO_1.wantmod ? this.filter_f.modulationsmatrix(1, 100, 100);
this.filter_f.LFO_2.wantmod ? this.filter_f.modulationsmatrix(2, 100, 100);
this.filter_f.LFO_3.wantmod ? this.filter_f.modulationsmatrix(3, 100, 100);
this.filter_f.LFO_4.wantmod ? this.filter_f.modulationsmatrix(4, 100, 100);
this.filter_f.running = this.filter_f + this.filter_f.modresult;

this.subosc_1.on ? this.subosc_1.play_synth_subosc();
this.subosc_2.on ? this.subosc_2.play_synth_subosc();
this.subosc_3.on ? this.subosc_3.play_synth_subosc();
this.subosc_4.on ? this.subosc_4.play_synth_subosc();
this.subosc_5.on ? this.subosc_5.play_synth_subosc();
this.subosc_6.on ? this.subosc_6.play_synth_subosc();
this.subosc_7.on ? this.subosc_7.play_synth_subosc();
this.subosc_8.on ? this.subosc_8.play_synth_subosc();
this.subosc_9.on ? this.subosc_9.play_synth_subosc();
this.subosc_10.on ? this.subosc_10.play_synth_subosc();
this.subosc_11.on ? this.subosc_11.play_synth_subosc();
this.subosc_12.on ? this.subosc_12.play_synth_subosc();



this.outputL =
this.subosc_1.outputL +
this.subosc_2.outputL +
this.subosc_3.outputL +
this.subosc_4.outputL +
this.subosc_5.outputL +
this.subosc_6.outputL +
this.subosc_7.outputL +
this.subosc_8.outputL +
this.subosc_9.outputL +
this.subosc_10.outputL +
this.subosc_11.outputL +
this.subosc_12.outputL;

this.outputR =
this.subosc_1.outputR +
this.subosc_2.outputR +
this.subosc_3.outputR +
this.subosc_4.outputR +
this.subosc_5.outputR +
this.subosc_6.outputR +
this.subosc_7.outputR +
this.subosc_8.outputR +
this.subosc_9.outputR +
this.subosc_10.outputR +
this.subosc_11.outputR +
this.subosc_12.outputR;

);






///// inititalIZE
synth.make_filters();
SMOOTHING_TIME_MS = 1;
itm1=itm2=otm1=otm2=0;

ext_noinit = 1;
gfx_ext_retina = 1;
osc_a0 = (2)^(1/12);
mouse_sensivity();

memory_point = 0;
envelope_real_level = memory_point;
memory_point += 96;
manipulation_buffer = memory_point;
memory_point += 2048;
osc1.make_osc();
osc1.osc_number = 1;
osc1.gfx_seconds = 2;
osc1.at_shape = 0;
osc1.at_coef = 1;
osc1.dec1_shape = 0;
osc1.dec1_coef = 1;
osc1.dec2_shape = 0;
osc1.dec2_coef = 1;
osc1.rel_shape = 0;
osc1.rel_coef = 1;

osc1.unison = 0;
osc2.unison = 0;

osc2.make_osc();
osc2.osc_number = 2;
osc2.gfx_seconds = 2;
osc2.at_shape = 0;
osc2.at_coef = 1;
osc2.dec1_shape = 0;
osc2.dec1_coef = 1;
osc2.dec2_shape = 0;
osc2.dec2_coef = 1;
osc2.rel_shape = 0;
osc2.rel_coef = 1;

synth.subosc_1.subosc_number = 1;
synth.subosc_2.subosc_number = 2;
synth.subosc_3.subosc_number = 3;
synth.subosc_4.subosc_number = 4;
synth.subosc_5.subosc_number = 5;
synth.subosc_6.subosc_number = 6;
synth.subosc_7.subosc_number = 7;
synth.subosc_8.subosc_number = 8;
synth.subosc_9.subosc_number = 9;
synth.subosc_10.subosc_number = 10;
synth.subosc_11.subosc_number = 11;
synth.subosc_12.subosc_number = 12;

gfx_filter.band_init();
synth.filter.gfx_seconds = 2;
synth.filter.at_shape = 0;
synth.filter.at_coef = 1;
synth.filter.dec1_shape = 0;
synth.filter.dec1_coef = 1;
synth.filter.dec2_shape = 0;
synth.filter.dec2_coef = 1;
synth.filter.rel_shape = 0;
synth.filter.rel_coef = 1;

slew_rate = 1 / (1 * srate * 0.001);


NG.gfx_seconds = 1;
NG.at_shape = 0;
NG.at_coef = 1;
NG.dec1_shape = 0;
NG.dec1_coef = 1;
NG.dec2_shape = 0;
NG.dec2_coef = 1;
NG.rel_shape = 0;
NG.rel_coef = 1;

NG.filter.gfx_seconds = 1;
NG.filter.at_shape = 0;
NG.filter.at_coef = 1;
NG.filter.dec1_shape = 0;
NG.filter.dec1_coef = 1;
NG.filter.dec2_shape = 0;
NG.filter.dec2_coef = 1;
NG.filter.rel_shape = 0;
NG.filter.rel_coef = 1;


LFO_1.free_run = 0;
LFO_2.free_run = 0;
LFO_3.free_run = 0;
LFO_4.free_run = 0;
///////////////




function LFO_sliders () (
   this.form = slider(this.startslider);
   this.syncslider_old != slider(this.startslider+2) ? this.sync_on = 1;
   this.tempo_hz != 0.3+explog(slider(this.startslider+4),3.45)*29.7 ? (this.sync_on = 0; slider(this.startslider+2) = 9; );
   this.syncslider_old = slider(this.startslider+2);
   slider(this.startslider+2) == 0 ? this.time_sync = 0.125;
   slider(this.startslider+2) == 1 ? this.time_sync = 0.25;
   slider(this.startslider+2) == 2 ? this.time_sync = 0.5;
   slider(this.startslider+2) == 3 ? this.time_sync = 1;
   slider(this.startslider+2) == 4 ? this.time_sync = 2;
   slider(this.startslider+2) == 5 ? this.time_sync = 4;
   slider(this.startslider+2) == 6 ? this.time_sync = 8;
   slider(this.startslider+2) == 7 ? this.time_sync = 16;
   slider(this.startslider+2) == 8 ? this.time_sync = 32;
   slider(this.startslider+2) == 9 ? this.sync_on = 0;
   this.time_sync_2 = slider(this.startslider+3);
   this.tempo_hz = 0.3+explog(slider(this.startslider+4),3.45)*29.7;
   slider(this.startslider+5) == 0 ? this.multiplier = 1 : this.multiplier = 10;
   this.phase_shift = slider(this.startslider+1);
   this.sync_on == 0 ? this.time_sync = 0;
);



function parameters_update() (

parameters_update_on = 1;

master_volume = slider1;

note_glide = explog(slider3,4)*5 *1000;;//slider2; //Global glide in ms
main_tuning = 110;//slider1 / 2;
MonoOrPoly = slider2; // 1 = Mono, 0 = Poly
monoOrPoly_old != MonoOrPoly ? (
Synth.subosc_1.note_distance = 0;
Synth.subosc_1.note_running = 0;
Synth.subosc_1.note_target = 0;
synth.mono_note_1_old = 0;
synth.mono_note_last = 0;
synth.mono_note_last_old = 0;
synth.mono_note_1 = synth.mono_note_2 = synth.mono_note_3 = synth.mono_note_4 = synth.mono_note_5 = synth.mono_note_6 = 
synth.mono_note_7 = synth.mono_note_8 = synth.mono_note_9 = synth.mono_note_10 = synth.mono_note_11 = synth.mono_note_12 = 0;
synth.subosc_1.note = 0;
synth.subosc_2.note = 0;
synth.subosc_3.note = 0;
synth.subosc_4.note = 0;
synth.subosc_5.note = 0;
synth.subosc_6.note = 0;
synth.subosc_7.note = 0;
synth.subosc_8.note = 0;
synth.subosc_9.note = 0;
synth.subosc_10.note = 0;
synth.subosc_11.note = 0;
synth.subosc_12.note = 0;
synth.subosc_1.on = 0;
synth.subosc_2.on = 0;
synth.subosc_3.on = 0;
synth.subosc_4.on = 0;
synth.subosc_5.on = 0;
synth.subosc_6.on = 0;
synth.subosc_7.on = 0;
synth.subosc_8.on = 0;
synth.subosc_9.on = 0;
synth.subosc_10.on = 0;
synth.subosc_11.on = 0;
synth.subosc_12.on = 0;
monoOrPoly_old = MonoOrPoly;
);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
osc1.startslider = 4;

osc1.level = slider(osc1.startslider)/5;

osc1.sine_level = slider(Osc1.startslider + 1)/10;
osc1.sine_octave = slider(Osc1.startslider + 2);
osc1.sine_mod = slider(Osc1.startslider + 3); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.sine_mod == 1 ? (osc1.sine_coef = slider(osc1.startslider + 4) == 0 ? 0.05 : abs(slider(osc1.startslider + 4))*1.5):(osc1.sine_coef = slider(osc1.startslider + 4) < 0 ? 1/(abs(slider(osc1.startslider + 4)-1)) : slider(osc1.startslider + 4) + 1);

osc1.triangle_level = slider(Osc1.startslider + 5)/10;
osc1.triangle_octave = slider(Osc1.startslider + 6);
osc1.triangle_mod = slider(Osc1.startslider + 7); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.triangle_mod == 1 ? (osc1.triangle_coef = slider(osc1.startslider + 8) == 0 ? 0.05 : abs(slider(osc1.startslider + 8))*1.5):(osc1.triangle_coef = slider(osc1.startslider + 8) < 0 ? 1/(abs(slider(osc1.startslider + 8)-1)) : slider(osc1.startslider + 8) + 1);

osc1.saw_level = slider(Osc1.startslider + 9)/10;
osc1.saw_octave = slider(Osc1.startslider + 10);
osc1.saw_mod = slider(Osc1.startslider + 11); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.saw_mod == 1 ? (osc1.saw_coef = slider(osc1.startslider + 12) == 0 ? 0.05 : abs(slider(osc1.startslider + 12))*1.5):(osc1.saw_coef = slider(osc1.startslider + 12) < 0 ? 1/(abs(slider(osc1.startslider + 12)-1)) : slider(osc1.startslider + 12) + 1);

osc1.saw_alt_level = slider(Osc1.startslider + 13)/10;
osc1.saw_alt_octave = slider(Osc1.startslider + 14);
osc1.saw_alt_mod = slider(Osc1.startslider + 15); // 0 Linear, 1 sigma, 2 ExpLog
Osc1.saw_alt_mod == 1 ? (osc1.saw_alt_coef = slider(osc1.startslider + 16) == 0 ? 0.05 : abs(slider(osc1.startslider + 16))*1.5):(osc1.saw_alt_coef = slider(osc1.startslider + 16) < 0 ? 1/(abs(slider(osc1.startslider + 16)-1)) : slider(osc1.startslider + 16) + 1);

osc1.pulse_level = slider(Osc1.startslider + 17)/10;
osc1.pulse_octave = slider(Osc1.startslider + 18);
osc1.pwm = 2*slider(Osc1.startslider + 19)/10;

osc1.transpose = osc1.transpose_running = slider(osc1.startslider + 20);
osc1.finetune = osc1.finetune_running = slider(osc1.startslider + 21);

osc1.pitchamount = slider(osc1.startslider + 22);

osc1.pan = osc1.pan.running = slider(osc1.startslider + 23)/100;


osc1.subosc_1.want_render_waveform = 1;
osc1.subosc_2.want_render_waveform = 1;
osc1.subosc_3.want_render_waveform = 1;
osc1.subosc_4.want_render_waveform = 1;
osc1.subosc_5.want_render_waveform = 1;
osc1.subosc_6.want_render_waveform = 1;
osc1.subosc_7.want_render_waveform = 1;
osc1.subosc_8.want_render_waveform = 1;
osc1.subosc_9.want_render_waveform = 1;
osc1.subosc_10.want_render_waveform = 1;
osc1.subosc_11.want_render_waveform = 1;
osc1.subosc_12.want_render_waveform = 1;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////
osc2.startslider = 28;

osc2.level = slider(osc2.startslider)/5;

osc2.sine_level = slider(osc2.startslider + 1)/10;
osc2.sine_octave = slider(osc2.startslider + 2);
osc2.sine_mod = slider(osc2.startslider + 3); // 0 Linear, 1 sigma, 2 ExpLog
osc2.sine_mod == 1 ? (osc2.sine_coef = slider(osc2.startslider + 4) == 0 ? 0.05 : abs(slider(osc2.startslider + 4))*1.5):(osc2.sine_coef = slider(osc2.startslider + 4) < 0 ? 1/(abs(slider(osc2.startslider + 4)-1)) : slider(osc2.startslider + 4) + 1);

osc2.triangle_level = slider(osc2.startslider + 5)/10;
osc2.triangle_octave = slider(osc2.startslider + 6);
osc2.triangle_mod = slider(osc2.startslider + 7); // 0 Linear, 1 sigma, 2 ExpLog
osc2.triangle_mod == 1 ? (osc2.triangle_coef = slider(osc2.startslider + 8) == 0 ? 0.05 : abs(slider(osc2.startslider + 8))*1.5):(osc2.triangle_coef = slider(osc2.startslider + 8) < 0 ? 1/(abs(slider(osc2.startslider + 8)-1)) : slider(osc2.startslider + 8) + 1);

osc2.saw_level = slider(osc2.startslider + 9)/10;
osc2.saw_octave = slider(osc2.startslider + 10);
osc2.saw_mod = slider(osc2.startslider + 11); // 0 Linear, 1 sigma, 2 ExpLog
osc2.saw_mod == 1 ? (osc2.saw_coef = slider(osc2.startslider + 12) == 0 ? 0.05 : abs(slider(osc2.startslider + 12))*1.5):(osc2.saw_coef = slider(osc2.startslider + 12) < 0 ? 1/(abs(slider(osc2.startslider + 12)-1)) : slider(osc2.startslider + 12) + 1);

osc2.saw_alt_level = slider(osc2.startslider + 13)/10;
osc2.saw_alt_octave = slider(osc2.startslider + 14);
osc2.saw_alt_mod = slider(osc2.startslider + 15); // 0 Linear, 1 sigma, 2 ExpLog
osc2.saw_alt_mod == 1 ? (osc2.saw_alt_coef = slider(osc2.startslider + 16) == 0 ? 0.05 : abs(slider(osc2.startslider + 16))*1.5):(osc2.saw_alt_coef = slider(osc2.startslider + 16) < 0 ? 1/(abs(slider(osc2.startslider + 16)-1)) : slider(osc2.startslider + 16) + 1);

osc2.pulse_level = slider(osc2.startslider + 17)/10;
osc2.pulse_octave = slider(osc2.startslider + 18);
osc2.pwm = 2*slider(osc2.startslider + 19)/10;

osc2.transpose = osc2.transpose_running = slider(osc2.startslider + 20);
osc2.finetune = osc2.finetune_running = slider(osc2.startslider + 21);

osc2.pitchamount = slider(osc1.startslider + 22);
osc2.sync = slider(osc2.startslider + 24);
osc2.sync == 2 ? osc2.pitchamount = 0;
osc2.sync == 3 ? osc1.pitchamount = 0;
osc2.sync ? osc2.sync_to = 1 : osc2.sync_to = 0;

osc2.pan = osc2.pan.running = slider(osc2.startslider + 23)/100;


osc2.subosc_1.want_render_waveform = 1;
osc2.subosc_2.want_render_waveform = 1;
osc2.subosc_3.want_render_waveform = 1;
osc2.subosc_4.want_render_waveform = 1;
osc2.subosc_5.want_render_waveform = 1;
osc2.subosc_6.want_render_waveform = 1;
osc2.subosc_7.want_render_waveform = 1;
osc2.subosc_8.want_render_waveform = 1;
osc2.subosc_9.want_render_waveform = 1;
osc2.subosc_10.want_render_waveform = 1;
osc2.subosc_11.want_render_waveform = 1;
osc2.subosc_12.want_render_waveform = 1;

osc2.subosc_1.want_update = 1;
osc2.subosc_2.want_update = 1;
osc2.subosc_3.want_update = 1;
osc2.subosc_4.want_update = 1;
osc2.subosc_5.want_update = 1;
osc2.subosc_6.want_update = 1;
osc2.subosc_7.want_update = 1;
osc2.subosc_8.want_update = 1;
osc2.subosc_9.want_update = 1;
osc2.subosc_10.want_update = 1;
osc2.subosc_11.want_update = 1;
osc2.subosc_12.want_update = 1;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////



Env1.startslider = 53;
env1.attack = slider(Env1.startslider) * srate/1000;
env1.decay = slider(Env1.startslider+1) * srate/1000;
env1.breakpoint = slider(Env1.startslider+2) /10;
env1.decay2 = slider(Env1.startslider+3) * srate/1000;
env1.sustain = slider(Env1.startslider+4) / 10;
env1.release = slider(Env1.startslider+5) * srate/1000;

env1.at_shape = osc1.at_shape;
env1.at_shape == 1 ? (env1.at_coef = osc1.at_coef == 0 ? 0.05 : abs(osc1.at_coef)*1.5):(env1.at_coef = osc1.at_coef < 0 ? 1/(abs(osc1.at_coef-1)) : osc1.at_coef + 1);
env1.dec1_shape = osc1.dec1_shape;
env1.dec1_shape == 1 ? (env1.dec1_coef = osc1.dec1_coef == 0 ? 0.05 : abs(osc1.dec1_coef)*1.5):(env1.dec1_coef = osc1.dec1_coef < 0 ? 1/(abs(osc1.dec1_coef-1)) : osc1.dec1_coef + 1);
env1.dec2_shape = osc1.dec2_shape;
env1.dec2_shape == 1 ? (env1.dec2_coef = osc1.dec2_coef == 0 ? 0.05 : abs(osc1.dec2_coef)*1.5):(env1.dec2_coef = osc1.dec2_coef < 0 ? 1/(abs(osc1.dec2_coef-1)) : osc1.dec2_coef + 1);
env1.rel_shape = osc1.rel_shape;
env1.rel_shape == 1 ? (env1.rel_coef = osc1.rel_coef == 0 ? 0.05 : abs(osc1.rel_coef)*1.5):(env1.rel_coef = osc1.rel_coef < 0 ? 1/(abs(osc1.rel_coef-1)) : osc1.rel_coef + 1);

Env2.startslider = 59;
Env2.attack = slider(Env2.startslider) * srate/1000;
Env2.decay = slider(Env2.startslider+1) * srate/1000;
Env2.breakpoint = slider(Env2.startslider+2) /10;
Env2.decay2 = slider(Env2.startslider+3) * srate/1000;
Env2.sustain = slider(Env2.startslider+4) / 10;
Env2.release = slider(Env2.startslider+5) * srate/1000;

Env2.at_shape = osc2.at_shape;
Env2.at_shape == 1 ? (Env2.at_coef = osc2.at_coef == 0 ? 0.05 : abs(osc2.at_coef)*1.5):(Env2.at_coef = osc2.at_coef < 0 ? 1/(abs(osc2.at_coef-1)) : osc2.at_coef + 1);
Env2.dec1_shape = osc2.dec1_shape;
Env2.dec1_shape == 1 ? (Env2.dec1_coef = osc2.dec1_coef == 0 ? 0.05 : abs(osc2.dec1_coef)*1.5):(Env2.dec1_coef = osc2.dec1_coef < 0 ? 1/(abs(osc2.dec1_coef-1)) : osc2.dec1_coef + 1);
Env2.dec2_shape = osc2.dec2_shape;
Env2.dec2_shape == 1 ? (Env2.dec2_coef = osc2.dec2_coef == 0 ? 0.05 : abs(osc2.dec2_coef)*1.5):(Env2.dec2_coef = osc2.dec2_coef < 0 ? 1/(abs(osc2.dec2_coef-1)) : osc2.dec2_coef + 1);
Env2.rel_shape = osc2.rel_shape;
Env2.rel_shape == 1 ? (Env2.rel_coef = osc2.rel_coef == 0 ? 0.05 : abs(osc2.rel_coef)*1.5):(Env2.rel_coef = osc2.rel_coef < 0 ? 1/(abs(osc2.rel_coef-1)) : osc2.rel_coef + 1);




synth.filter.startslider = 65;
synth.filter_f = slider(synth.filter.startslider);
synth.filter_q = synth.filter_q.running = 0.707 + explog(slider(synth.filter.startslider+1)/10, 3)*10;
slider(synth.filter.startslider+2) == 0 ? synth.filter_slope = 1:
slider(synth.filter.startslider+2) == 1 ? synth.filter_slope = 3:
slider(synth.filter.startslider+2) == 2 ? synth.filter_slope = 6;
slider(synth.filter.startslider+3) == 0 ? synth.filter_type = 8 : synth.filter_type = 5;
synth.keyfollow = slider(synth.filter.startslider+4);
synth.pitchamount = synth.pitchamount.running = osc1.pitchamount;

gfx_filter.band_set_filter(synth.filter_type, per_to_freq(min(synth.filter_f,100),100), 0, synth.filter_q.running, synth.filter_slope);
gfx_filter.filter.svf_set_to_target();

synth.VCF_ENV = slider(synth.filter.startslider+6);
VCF_ON = slider(synth.filter.startslider+5);

env5.startslider = 72;
env5.attack = slider(env5.startslider) * srate/1000;
env5.decay = slider(env5.startslider+1) * srate/1000;
env5.breakpoint = slider(env5.startslider+2) /10;
env5.decay2 = slider(env5.startslider+3) * srate/1000;
env5.sustain = slider(env5.startslider+4) / 10;
env5.release = slider(env5.startslider+5) * srate/1000;

env5.at_shape = synth.filter.at_shape;
env5.at_shape == 1 ? (env5.at_coef = synth.filter.at_coef == 0 ? 0.05 : abs(synth.filter.at_coef)*1.5):(env5.at_coef = synth.filter.at_coef < 0 ? 1/(abs(synth.filter.at_coef-1)) : synth.filter.at_coef + 1);
env5.dec1_shape = synth.filter.dec1_shape;
env5.dec1_shape == 1 ? (env5.dec1_coef = synth.filter.dec1_coef == 0 ? 0.05 : abs(synth.filter.dec1_coef)*1.5):(env5.dec1_coef = synth.filter.dec1_coef < 0 ? 1/(abs(synth.filter.dec1_coef-1)) : synth.filter.dec1_coef + 1);
env5.dec2_shape = synth.filter.dec2_shape;
env5.dec2_shape == 1 ? (env5.dec2_coef = synth.filter.dec2_coef == 0 ? 0.05 : abs(synth.filter.dec2_coef)*1.5):(env5.dec2_coef = synth.filter.dec2_coef < 0 ? 1/(abs(synth.filter.dec2_coef-1)) : synth.filter.dec2_coef + 1);
env5.rel_shape = synth.filter.rel_shape;
env5.rel_shape == 1 ? (env5.rel_coef = synth.filter.rel_coef == 0 ? 0.05 : abs(synth.filter.rel_coef)*1.5):(env5.rel_coef = synth.filter.rel_coef < 0 ? 1/(abs(synth.filter.rel_coef-1)) : synth.filter.rel_coef + 1);



   LFO_1.startslider = 78;
   LFO_1.LFO_sliders();
   LFO_2.startslider = 84;
   LFO_2.LFO_sliders();
   LFO_3.startslider = 90;
   LFO_3.LFO_sliders();
   LFO_4.startslider = 96;
   LFO_4.LFO_sliders();
   
   LFO_1.delay == -1 ? (LFO_1.delay_sams = (240/tempo) * srate):
   LFO_1.delay == -2 ? (LFO_1.delay_sams = (240/tempo) * srate/2):
   LFO_1.delay == -3 ? (LFO_1.delay_sams = (240/tempo) * srate/4):
   LFO_1.delay == -4 ? (LFO_1.delay_sams = (240/tempo) * srate/8):
   LFO_1.delay == -5 ? (LFO_1.delay_sams = (240/tempo) * srate/16):
   LFO_1.delay_sams = LFO_1.delay * (srate/1000);
    
   LFO_2.delay == -1 ? (LFO_2.delay_sams = (240/tempo) * srate):
   LFO_2.delay == -2 ? (LFO_2.delay_sams = (240/tempo) * srate/2):
   LFO_2.delay == -3 ? (LFO_2.delay_sams = (240/tempo) * srate/4):
   LFO_2.delay == -4 ? (LFO_2.delay_sams = (240/tempo) * srate/8):
   LFO_2.delay == -5 ? (LFO_2.delay_sams = (240/tempo) * srate/16):
   LFO_2.delay_sams = LFO_2.delay * (srate/1000);
   
   LFO_1.attack == -1 ? (LFO_1.attack_sams = (240/tempo) * srate):
   LFO_1.attack == -2 ? (LFO_1.attack_sams = (240/tempo) * srate/2):
   LFO_1.attack == -3 ? (LFO_1.attack_sams = (240/tempo) * srate/4):
   LFO_1.attack == -4 ? (LFO_1.attack_sams = (240/tempo) * srate/8):
   LFO_1.attack == -5 ? (LFO_1.attack_sams = (240/tempo) * srate/16):
   LFO_1.attack_sams = LFO_1.attack * (srate/1000);
    
   LFO_2.attack == -1 ? (LFO_2.attack_sams = (240/tempo) * srate):
   LFO_2.attack == -2 ? (LFO_2.attack_sams = (240/tempo) * srate/2):
   LFO_2.attack == -3 ? (LFO_2.attack_sams = (240/tempo) * srate/4):
   LFO_2.attack == -4 ? (LFO_2.attack_sams = (240/tempo) * srate/8):
   LFO_2.attack == -5 ? (LFO_2.attack_sams = (240/tempo) * srate/16):
   LFO_2.attack_sams = LFO_2.attack * (srate/1000);
   
   LFO_3.delay == -1 ? (LFO_3.delay_sams = (240/tempo) * srate):
   LFO_3.delay == -2 ? (LFO_3.delay_sams = (240/tempo) * srate/2):
   LFO_3.delay == -3 ? (LFO_3.delay_sams = (240/tempo) * srate/4):
   LFO_3.delay == -4 ? (LFO_3.delay_sams = (240/tempo) * srate/8):
   LFO_3.delay == -5 ? (LFO_3.delay_sams = (240/tempo) * srate/16):
   LFO_3.delay_sams = LFO_3.delay * (srate/1000);
    
   LFO_4.delay == -1 ? (LFO_4.delay_sams = (240/tempo) * srate):
   LFO_4.delay == -2 ? (LFO_4.delay_sams = (240/tempo) * srate/2):
   LFO_4.delay == -3 ? (LFO_4.delay_sams = (240/tempo) * srate/4):
   LFO_4.delay == -4 ? (LFO_4.delay_sams = (240/tempo) * srate/8):
   LFO_4.delay == -5 ? (LFO_4.delay_sams = (240/tempo) * srate/16):
   LFO_4.delay_sams = LFO_4.delay * (srate/1000);
   
   LFO_3.attack == -1 ? (LFO_3.attack_sams = (240/tempo) * srate):
   LFO_3.attack == -2 ? (LFO_3.attack_sams = (240/tempo) * srate/2):
   LFO_3.attack == -3 ? (LFO_3.attack_sams = (240/tempo) * srate/4):
   LFO_3.attack == -4 ? (LFO_3.attack_sams = (240/tempo) * srate/8):
   LFO_3.attack == -5 ? (LFO_3.attack_sams = (240/tempo) * srate/16):
   LFO_3.attack_sams = LFO_3.attack * (srate/1000);
    
   LFO_4.attack == -1 ? (LFO_4.attack_sams = (240/tempo) * srate):
   LFO_4.attack == -2 ? (LFO_4.attack_sams = (240/tempo) * srate/2):
   LFO_4.attack == -3 ? (LFO_4.attack_sams = (240/tempo) * srate/4):
   LFO_4.attack == -4 ? (LFO_4.attack_sams = (240/tempo) * srate/8):
   LFO_4.attack == -5 ? (LFO_4.attack_sams = (240/tempo) * srate/16):
   LFO_4.attack_sams = LFO_4.attack * (srate/1000);
   
   
   
   
   
   osc1.level.LFO_1.controller && osc1.level.LFO_1.modamount ? osc1.level.LFO_1.wantmod = 1 : osc1.level.LFO_1.wantmod = 0;
   osc1.pan.LFO_1.controller && osc1.pan.LFO_1.modamount ? osc1.pan.LFO_1.wantmod = 1 : osc1.pan.LFO_1.wantmod = 0;
   osc1.transpose.LFO_1.controller && osc1.transpose.LFO_1.modamount ? osc1.transpose.LFO_1.wantmod = 1 : osc1.transpose.LFO_1.wantmod = 0;
   osc1.finetune.LFO_1.controller && osc1.finetune.LFO_1.modamount ? osc1.finetune.LFO_1.wantmod = 1 : osc1.finetune.LFO_1.wantmod = 0;
   osc1.pwm.LFO_1.controller && osc1.pwm.LFO_1.modamount ? osc1.pwm.LFO_1.wantmod = 1 : osc1.pwm.LFO_1.wantmod = 0;
   osc2.level.LFO_1.controller && osc2.level.LFO_1.modamount ? osc2.level.LFO_1.wantmod = 1 : osc2.level.LFO_1.wantmod = 0;
   osc2.pan.LFO_1.controller && osc2.pan.LFO_1.modamount ? osc2.pan.LFO_1.wantmod = 1 : osc2.pan.LFO_1.wantmod = 0;
   osc2.transpose.LFO_1.controller && osc2.transpose.LFO_1.modamount ? osc2.transpose.LFO_1.wantmod = 1 : osc2.transpose.LFO_1.wantmod = 0;
   osc2.finetune.LFO_1.controller && osc2.finetune.LFO_1.modamount ? osc2.finetune.LFO_1.wantmod = 1 : osc2.finetune.LFO_1.wantmod = 0;
   osc2.pwm.LFO_1.controller && osc2.pwm.LFO_1.modamount ? osc2.pwm.LFO_1.wantmod = 1 : osc2.pwm.LFO_1.wantmod = 0;
   NG.level.LFO_1.controller && NG.level.LFO_1.modamount ? NG.level.LFO_1.wantmod = 1 : NG.level.LFO_1.wantmod = 0;
   NG.pan.LFO_1.controller && NG.pan.LFO_1.modamount ? NG.pan.LFO_1.wantmod = 1 : NG.pan.LFO_1.wantmod = 0;
   NG.filter_f.LFO_1.controller && NG.filter_f.LFO_1.modamount ? NG.filter_f.LFO_1.wantmod = 1 : NG.filter_f.LFO_1.wantmod = 0;
   synth.filter_f.LFO_1.controller && synth.filter_f.LFO_1.modamount ? synth.filter_f.LFO_1.wantmod = 1 : synth.filter_f.LFO_1.wantmod = 0;
   osc1.level.LFO_1.wantmod || osc1.pan.LFO_1.wantmod || osc1.transpose.LFO_1.wantmod || osc1.finetune.LFO_1.wantmod || osc1.pwm.LFO_1.wantmod || osc2.level.LFO_1.wantmod || osc2.pan.LFO_1.wantmod || osc2.transpose.LFO_1.wantmod || osc2.finetune.LFO_1.wantmod || osc2.pwm.LFO_1.wantmod || NG.level.LFO_1.wantmod || NG.pan.LFO_1.wantmod || NG.filter_f.LFO_1.wantmod || synth.filter_f.LFO_1.wantmod ? LFO_1.wantmod = 1 : LFO_1.wantmod = 0;
   
   osc1.level.LFO_2.controller && osc1.level.LFO_2.modamount ? osc1.level.LFO_2.wantmod = 1 : osc1.level.LFO_2.wantmod = 0;
   osc1.pan.LFO_2.controller && osc1.pan.LFO_2.modamount ? osc1.pan.LFO_2.wantmod = 1 : osc1.pan.LFO_2.wantmod = 0;
   osc1.transpose.LFO_2.controller && osc1.transpose.LFO_2.modamount ? osc1.transpose.LFO_2.wantmod = 1 : osc1.transpose.LFO_2.wantmod = 0;
   osc1.finetune.LFO_2.controller && osc1.finetune.LFO_2.modamount ? osc1.finetune.LFO_2.wantmod = 1 : osc1.finetune.LFO_2.wantmod = 0;
   osc1.pwm.LFO_2.controller && osc1.pwm.LFO_2.modamount ? osc1.pwm.LFO_2.wantmod = 1 : osc1.pwm.LFO_2.wantmod = 0;
   osc2.level.LFO_2.controller && osc2.level.LFO_2.modamount ? osc2.level.LFO_2.wantmod = 1 : osc2.level.LFO_2.wantmod = 0;
   osc2.pan.LFO_2.controller && osc2.pan.LFO_2.modamount ? osc2.pan.LFO_2.wantmod = 1 : osc2.pan.LFO_2.wantmod = 0;
   osc2.transpose.LFO_2.controller && osc2.transpose.LFO_2.modamount ? osc2.transpose.LFO_2.wantmod = 1 : osc2.transpose.LFO_2.wantmod = 0;
   osc2.finetune.LFO_2.controller && osc2.finetune.LFO_2.modamount ? osc2.finetune.LFO_2.wantmod = 1 : osc2.finetune.LFO_2.wantmod = 0;
   osc2.pwm.LFO_2.controller && osc2.pwm.LFO_2.modamount ? osc2.pwm.LFO_2.wantmod = 1 : osc2.pwm.LFO_2.wantmod = 0;
   NG.level.LFO_2.controller && NG.level.LFO_2.modamount ? NG.level.LFO_2.wantmod = 1 : NG.level.LFO_2.wantmod = 0;
   NG.pan.LFO_2.controller && NG.pan.LFO_2.modamount ? NG.pan.LFO_2.wantmod = 1 : NG.pan.LFO_2.wantmod = 0;
   NG.filter_f.LFO_2.controller && NG.filter_f.LFO_2.modamount ? NG.filter_f.LFO_2.wantmod = 1 : NG.filter_f.LFO_2.wantmod = 0;
   synth.filter_f.LFO_2.controller && synth.filter_f.LFO_2.modamount ? synth.filter_f.LFO_2.wantmod = 1 : synth.filter_f.LFO_2.wantmod = 0;
   osc1.level.LFO_2.wantmod || osc1.pan.LFO_2.wantmod || osc1.transpose.LFO_2.wantmod || osc1.finetune.LFO_2.wantmod || osc1.pwm.LFO_2.wantmod || osc2.level.LFO_2.wantmod || osc2.pan.LFO_2.wantmod || osc2.transpose.LFO_2.wantmod || osc2.finetune.LFO_2.wantmod || osc2.pwm.LFO_2.wantmod || NG.level.LFO_2.wantmod || NG.pan.LFO_2.wantmod || NG.filter_f.LFO_2.wantmod || synth.filter_f.LFO_2.wantmod ? LFO_2.wantmod = 1 : LFO_2.wantmod = 0;
   
   osc1.level.LFO_3.controller && osc1.level.LFO_3.modamount ? osc1.level.LFO_3.wantmod = 1 : osc1.level.LFO_3.wantmod = 0;
   osc1.pan.LFO_3.controller && osc1.pan.LFO_3.modamount ? osc1.pan.LFO_3.wantmod = 1 : osc1.pan.LFO_3.wantmod = 0;
   osc1.transpose.LFO_3.controller && osc1.transpose.LFO_3.modamount ? osc1.transpose.LFO_3.wantmod = 1 : osc1.transpose.LFO_3.wantmod = 0;
   osc1.finetune.LFO_3.controller && osc1.finetune.LFO_3.modamount ? osc1.finetune.LFO_3.wantmod = 1 : osc1.finetune.LFO_3.wantmod = 0;
   osc1.pwm.LFO_3.controller && osc1.pwm.LFO_3.modamount ? osc1.pwm.LFO_3.wantmod = 1 : osc1.pwm.LFO_3.wantmod = 0;
   osc2.level.LFO_3.controller && osc2.level.LFO_3.modamount ? osc2.level.LFO_3.wantmod = 1 : osc2.level.LFO_3.wantmod = 0;
   osc2.pan.LFO_3.controller && osc2.pan.LFO_3.modamount ? osc2.pan.LFO_3.wantmod = 1 : osc2.pan.LFO_3.wantmod = 0;
   osc2.transpose.LFO_3.controller && osc2.transpose.LFO_3.modamount ? osc2.transpose.LFO_3.wantmod = 1 : osc2.transpose.LFO_3.wantmod = 0;
   osc2.finetune.LFO_3.controller && osc2.finetune.LFO_3.modamount ? osc2.finetune.LFO_3.wantmod = 1 : osc2.finetune.LFO_3.wantmod = 0;
   osc2.pwm.LFO_3.controller && osc2.pwm.LFO_3.modamount ? osc2.pwm.LFO_3.wantmod = 1 : osc2.pwm.LFO_3.wantmod = 0;
   NG.level.LFO_3.controller && NG.level.LFO_3.modamount ? NG.level.LFO_3.wantmod = 1 : NG.level.LFO_3.wantmod = 0;
   NG.pan.LFO_3.controller && NG.pan.LFO_3.modamount ? NG.pan.LFO_3.wantmod = 1 : NG.pan.LFO_3.wantmod = 0;
   NG.filter_f.LFO_3.controller && NG.filter_f.LFO_3.modamount ? NG.filter_f.LFO_3.wantmod = 1 : NG.filter_f.LFO_3.wantmod = 0;
   synth.filter_f.LFO_3.controller && synth.filter_f.LFO_3.modamount ? synth.filter_f.LFO_3.wantmod = 1 : synth.filter_f.LFO_3.wantmod = 0;
   osc1.level.LFO_3.wantmod || osc1.pan.LFO_3.wantmod || osc1.transpose.LFO_3.wantmod || osc1.finetune.LFO_3.wantmod || osc1.pwm.LFO_3.wantmod || osc2.level.LFO_3.wantmod || osc2.pan.LFO_3.wantmod || osc2.transpose.LFO_3.wantmod || osc2.finetune.LFO_3.wantmod || osc2.pwm.LFO_3.wantmod || NG.level.LFO_3.wantmod || NG.pan.LFO_3.wantmod || NG.filter_f.LFO_3.wantmod || synth.filter_f.LFO_3.wantmod ? LFO_3.wantmod = 1 : LFO_3.wantmod = 0;
   
   osc1.level.LFO_4.controller && osc1.level.LFO_4.modamount ? osc1.level.LFO_4.wantmod = 1 : osc1.level.LFO_4.wantmod = 0;
   osc1.pan.LFO_4.controller && osc1.pan.LFO_4.modamount ? osc1.pan.LFO_4.wantmod = 1 : osc1.pan.LFO_4.wantmod = 0;
   osc1.transpose.LFO_4.controller && osc1.transpose.LFO_4.modamount ? osc1.transpose.LFO_4.wantmod = 1 : osc1.transpose.LFO_4.wantmod = 0;
   osc1.finetune.LFO_4.controller && osc1.finetune.LFO_4.modamount ? osc1.finetune.LFO_4.wantmod = 1 : osc1.finetune.LFO_4.wantmod = 0;
   osc1.pwm.LFO_4.controller && osc1.pwm.LFO_4.modamount ? osc1.pwm.LFO_4.wantmod = 1 : osc1.pwm.LFO_4.wantmod = 0;
   osc2.level.LFO_4.controller && osc2.level.LFO_4.modamount ? osc2.level.LFO_4.wantmod = 1 : osc2.level.LFO_4.wantmod = 0;
   osc2.pan.LFO_4.controller && osc2.pan.LFO_4.modamount ? osc2.pan.LFO_4.wantmod = 1 : osc2.pan.LFO_4.wantmod = 0;
   osc2.transpose.LFO_4.controller && osc2.transpose.LFO_4.modamount ? osc2.transpose.LFO_4.wantmod = 1 : osc2.transpose.LFO_4.wantmod = 0;
   osc2.finetune.LFO_4.controller && osc2.finetune.LFO_4.modamount ? osc2.finetune.LFO_4.wantmod = 1 : osc2.finetune.LFO_4.wantmod = 0;
   osc2.pwm.LFO_4.controller && osc2.pwm.LFO_4.modamount ? osc2.pwm.LFO_4.wantmod = 1 : osc2.pwm.LFO_4.wantmod = 0;
   NG.level.LFO_4.controller && NG.level.LFO_4.modamount ? NG.level.LFO_4.wantmod = 1 : NG.level.LFO_4.wantmod = 0;
   NG.pan.LFO_4.controller && NG.pan.LFO_4.modamount ? NG.pan.LFO_4.wantmod = 1 : NG.pan.LFO_4.wantmod = 0;
   NG.filter_f.LFO_4.controller && NG.filter_f.LFO_4.modamount ? NG.filter_f.LFO_4.wantmod = 1 : NG.filter_f.LFO_4.wantmod = 0;
   synth.filter_f.LFO_4.controller && synth.filter_f.LFO_4.modamount ? synth.filter_f.LFO_4.wantmod = 1 : synth.filter_f.LFO_4.wantmod = 0;
   osc1.level.LFO_4.wantmod || osc1.pan.LFO_4.wantmod || osc1.transpose.LFO_4.wantmod || osc1.finetune.LFO_4.wantmod || osc1.pwm.LFO_4.wantmod || osc2.level.LFO_4.wantmod || osc2.pan.LFO_4.wantmod || osc2.transpose.LFO_4.wantmod || osc2.finetune.LFO_4.wantmod || osc2.pwm.LFO_4.wantmod || NG.level.LFO_4.wantmod || NG.pan.LFO_4.wantmod || NG.filter_f.LFO_4.wantmod || synth.filter_f.LFO_4.wantmod ? LFO_4.wantmod = 1 : LFO_4.wantmod = 0;
   
   
   
   env3.startslider = 102;
   NG.Filter.startslider = 108;
   env6.startslider = 115;
   NG.startslider = 121;
   

   env3.attack = slider(env3.startslider) * srate/1000;
   env3.decay = slider(env3.startslider+1) * srate/1000;
   env3.breakpoint = slider(env3.startslider+2) /10;
   env3.decay2 = slider(env3.startslider+3) * srate/1000;
   env3.sustain = slider(env3.startslider+4) / 10;
   env3.release = slider(env3.startslider+5) * srate/1000;
   
   env3.at_shape = NG.at_shape;
   env3.at_shape == 1 ? (env3.at_coef = NG.at_coef == 0 ? 0.05 : abs(NG.at_coef)*1.5):(env3.at_coef = NG.at_coef < 0 ? 1/(abs(NG.at_coef-1)) : NG.at_coef + 1);
   env3.dec1_shape = NG.dec1_shape;
   env3.dec1_shape == 1 ? (env3.dec1_coef = NG.dec1_coef == 0 ? 0.05 : abs(NG.dec1_coef)*1.5):(env3.dec1_coef = NG.dec1_coef < 0 ? 1/(abs(NG.dec1_coef-1)) : NG.dec1_coef + 1);
   env3.dec2_shape = NG.dec2_shape;
   env3.dec2_shape == 1 ? (env3.dec2_coef = NG.dec2_coef == 0 ? 0.05 : abs(NG.dec2_coef)*1.5):(env3.dec2_coef = NG.dec2_coef < 0 ? 1/(abs(NG.dec2_coef-1)) : NG.dec2_coef + 1);
   env3.rel_shape = NG.rel_shape;
   env3.rel_shape == 1 ? (env3.rel_coef = NG.rel_coef == 0 ? 0.05 : abs(NG.rel_coef)*1.5):(env3.rel_coef = NG.rel_coef < 0 ? 1/(abs(NG.rel_coef-1)) : NG.rel_coef + 1);

   env6.attack = slider(env6.startslider) * srate/1000;
   env6.decay = slider(env6.startslider+1) * srate/1000;
   env6.breakpoint = slider(env6.startslider+2) /10;
   env6.decay2 = slider(env6.startslider+3) * srate/1000;
   env6.sustain = slider(env6.startslider+4) / 10;
   env6.release = slider(env6.startslider+5) * srate/1000;
   
   env6.at_shape = NG.filter.at_shape;
   env6.at_shape == 1 ? (env6.at_coef = NG.filter.at_coef == 0 ? 0.05 : abs(NG.filter.at_coef)*1.5):(env6.at_coef = NG.filter.at_coef < 0 ? 1/(abs(NG.filter.at_coef-1)) : NG.filter.at_coef + 1);
   env6.dec1_shape = NG.filter.dec1_shape;
   env6.dec1_shape == 1 ? (env6.dec1_coef = NG.filter.dec1_coef == 0 ? 0.05 : abs(NG.filter.dec1_coef)*1.5):(env6.dec1_coef = NG.filter.dec1_coef < 0 ? 1/(abs(NG.filter.dec1_coef-1)) : NG.filter.dec1_coef + 1);
   env6.dec2_shape = NG.filter.dec2_shape;
   env6.dec2_shape == 1 ? (env6.dec2_coef = NG.filter.dec2_coef == 0 ? 0.05 : abs(NG.filter.dec2_coef)*1.5):(env6.dec2_coef = NG.filter.dec2_coef < 0 ? 1/(abs(NG.filter.dec2_coef-1)) : NG.filter.dec2_coef + 1);
   env6.rel_shape = NG.filter.rel_shape;
   env6.rel_shape == 1 ? (env6.rel_coef = NG.filter.rel_coef == 0 ? 0.05 : abs(NG.filter.rel_coef)*1.5):(env6.rel_coef = NG.filter.rel_coef < 0 ? 1/(abs(NG.filter.rel_coef-1)) : NG.filter.rel_coef + 1);
   
   NG.filter_f = slider(NG.filter.startslider);
   NG.filter_q = NG.filter_q.running = 0.707 + explog(slider(NG.filter.startslider+1)/10, 3)*10;
   slider(NG.filter.startslider+2) == 0 ? NG.filter_slope = 1:
   slider(NG.filter.startslider+2) == 1 ? NG.filter_slope = 3:
   slider(NG.filter.startslider+2) == 2 ? NG.filter_slope = 6;
   slider(NG.filter.startslider+3) == 0 ? NG.filter_type = 8 : NG.filter_type = 5;
   NG.keyfollow = slider(NG.filter.startslider+4);
   
   NG.VCF_ENV = slider(NG.filter.startslider+6);
   NG.VCF_ON = slider(NG.filter.startslider+5);
   
   NG.Level = slider(NG.startslider)/5;
   ng.pan = ng.pan.running = slider(ng.startslider + 1)/100;
   
   
   
   
   
   synth.subosc_1.fill_subosc();
   synth.subosc_2.fill_subosc();
   synth.subosc_3.fill_subosc();
   synth.subosc_4.fill_subosc();
   synth.subosc_5.fill_subosc();
   synth.subosc_6.fill_subosc();
   synth.subosc_7.fill_subosc();
   synth.subosc_8.fill_subosc();
   synth.subosc_9.fill_subosc();
   synth.subosc_10.fill_subosc();
   synth.subosc_11.fill_subosc();
   synth.subosc_12.fill_subosc();
   
   
   callER = 0;
   parameters_update_on = 0;
   
   
  
);





@slider

caller = 1;

@serialize

file_var(0, osc1.gfx_seconds);
file_var(0, osc1.scroll);
file_var(0, osc1.at_shape);
file_var(0, osc1.at_coef);
file_var(0, osc1.dec1_shape);
file_var(0, osc1.dec1_coef);
file_var(0, osc1.dec2_shape);
file_var(0, osc1.dec2_coef);
file_var(0, osc1.rel_shape);
file_var(0, osc1.rel_coef);

file_var(0, osc2.gfx_seconds);
file_var(0, osc2.scroll);
file_var(0, osc2.at_shape);
file_var(0, osc2.at_coef);
file_var(0, osc2.dec1_shape);
file_var(0, osc2.dec1_coef);
file_var(0, osc2.dec2_shape);
file_var(0, osc2.dec2_coef);
file_var(0, osc2.rel_shape);
file_var(0, osc2.rel_coef);

file_var(0, osc1.unison);
file_var(0, osc2.unison);



file_var(0, LFO_1.delay);
file_var(0, LFO_1.attack);

file_var(0, LFO_2.delay);
file_var(0, LFO_2.attack);

file_var(0, LFO_3.delay);
file_var(0, LFO_3.attack);

file_var(0, LFO_4.delay);
file_var(0, LFO_4.attack);


file_var(0, synth.filter.gfx_seconds);
file_var(0, synth.filter.scroll);
file_var(0, synth.filter.at_shape);
file_var(0, synth.filter.at_coef);
file_var(0, synth.filter.dec1_shape);
file_var(0, synth.filter.dec1_coef);
file_var(0, synth.filter.dec2_shape);
file_var(0, synth.filter.dec2_coef);
file_var(0, synth.filter.rel_shape);
file_var(0, synth.filter.rel_coef);

file_var(0, osc1.level.LFO_1.mode);
file_var(0, osc1.pan.LFO_1.mode);
file_var(0, osc1.transpose.LFO_1.mode);
file_var(0, osc1.finetune.LFO_1.mode);
file_var(0, osc1.PWM.LFO_1.mode);
file_var(0, osc1.level.LFO_1.modamount);
file_var(0, osc1.pan.LFO_1.modamount);
file_var(0, osc1.transpose.LFO_1.modamount);
file_var(0, osc1.finetune.LFO_1.modamount);
file_var(0, osc1.PWM.LFO_1.modamount);
file_var(0, osc1.level.LFO_1.controller);
file_var(0, osc1.pan.LFO_1.controller);
file_var(0, osc1.transpose.LFO_1.controller);
file_var(0, osc1.finetune.LFO_1.controller);
file_var(0, osc1.PWM.LFO_1.controller);

file_var(0, osc2.level.LFO_1.mode);
file_var(0, osc2.pan.LFO_1.mode);
file_var(0, osc2.transpose.LFO_1.mode);
file_var(0, osc2.finetune.LFO_1.mode);
file_var(0, osc2.PWM.LFO_1.mode);
file_var(0, osc2.level.LFO_1.modamount);
file_var(0, osc2.pan.LFO_1.modamount);
file_var(0, osc2.transpose.LFO_1.modamount);
file_var(0, osc2.finetune.LFO_1.modamount);
file_var(0, osc2.PWM.LFO_1.modamount);
file_var(0, osc2.level.LFO_1.controller);
file_var(0, osc2.pan.LFO_1.controller);
file_var(0, osc2.transpose.LFO_1.controller);
file_var(0, osc2.finetune.LFO_1.controller);
file_var(0, osc2.PWM.LFO_1.controller);

file_var(0, NG.level.LFO_1.mode);
file_var(0, NG.pan.LFO_1.mode);
file_var(0, NG.filter_f.LFO_1.mode);
file_var(0, synth.filter_f.LFO_1.mode);
file_var(0, NG.level.LFO_1.modamount);
file_var(0, NG.pan.LFO_1.modamount);
file_var(0, NG.filter_f.LFO_1.modamount);
file_var(0, synth.filter_f.LFO_1.modamount);
file_var(0, NG.level.LFO_1.controller);
file_var(0, NG.pan.LFO_1.controller);
file_var(0, NG.filter_f.LFO_1.controller);
file_var(0, synth.filter_f.LFO_1.controller);


file_var(0, osc1.level.LFO_2.mode);
file_var(0, osc1.pan.LFO_2.mode);
file_var(0, osc1.transpose.LFO_2.mode);
file_var(0, osc1.finetune.LFO_2.mode);
file_var(0, osc1.PWM.LFO_2.mode);
file_var(0, osc1.level.LFO_2.modamount);
file_var(0, osc1.pan.LFO_2.modamount);
file_var(0, osc1.transpose.LFO_2.modamount);
file_var(0, osc1.finetune.LFO_2.modamount);
file_var(0, osc1.PWM.LFO_2.modamount);
file_var(0, osc1.level.LFO_2.controller);
file_var(0, osc1.pan.LFO_2.controller);
file_var(0, osc1.transpose.LFO_2.controller);
file_var(0, osc1.finetune.LFO_2.controller);
file_var(0, osc1.PWM.LFO_2.controller);

file_var(0, osc2.level.LFO_2.mode);
file_var(0, osc2.pan.LFO_2.mode);
file_var(0, osc2.transpose.LFO_2.mode);
file_var(0, osc2.finetune.LFO_2.mode);
file_var(0, osc2.PWM.LFO_2.mode);
file_var(0, osc2.level.LFO_2.modamount);
file_var(0, osc2.pan.LFO_2.modamount);
file_var(0, osc2.transpose.LFO_2.modamount);
file_var(0, osc2.finetune.LFO_2.modamount);
file_var(0, osc2.PWM.LFO_2.modamount);
file_var(0, osc2.level.LFO_2.controller);
file_var(0, osc2.pan.LFO_2.controller);
file_var(0, osc2.transpose.LFO_2.controller);
file_var(0, osc2.finetune.LFO_2.controller);
file_var(0, osc2.PWM.LFO_2.controller);

file_var(0, NG.level.LFO_2.mode);
file_var(0, NG.pan.LFO_2.mode);
file_var(0, NG.filter_f.LFO_2.mode);
file_var(0, synth.filter_f.LFO_2.mode);
file_var(0, NG.level.LFO_2.modamount);
file_var(0, NG.pan.LFO_2.modamount);
file_var(0, NG.filter_f.LFO_2.modamount);
file_var(0, synth.filter_f.LFO_2.modamount);
file_var(0, NG.level.LFO_2.controller);
file_var(0, NG.pan.LFO_2.controller);
file_var(0, NG.filter_f.LFO_2.controller);
file_var(0, synth.filter_f.LFO_2.controller);

file_var(0, osc1.level.LFO_3.mode);
file_var(0, osc1.pan.LFO_3.mode);
file_var(0, osc1.transpose.LFO_3.mode);
file_var(0, osc1.finetune.LFO_3.mode);
file_var(0, osc1.PWM.LFO_3.mode);
file_var(0, osc1.level.LFO_3.modamount);
file_var(0, osc1.pan.LFO_3.modamount);
file_var(0, osc1.transpose.LFO_3.modamount);
file_var(0, osc1.finetune.LFO_3.modamount);
file_var(0, osc1.PWM.LFO_3.modamount);
file_var(0, osc1.level.LFO_3.controller);
file_var(0, osc1.pan.LFO_3.controller);
file_var(0, osc1.transpose.LFO_3.controller);
file_var(0, osc1.finetune.LFO_3.controller);
file_var(0, osc1.PWM.LFO_3.controller);

file_var(0, osc2.level.LFO_3.mode);
file_var(0, osc2.pan.LFO_3.mode);
file_var(0, osc2.transpose.LFO_3.mode);
file_var(0, osc2.finetune.LFO_3.mode);
file_var(0, osc2.PWM.LFO_3.mode);
file_var(0, osc2.level.LFO_3.modamount);
file_var(0, osc2.pan.LFO_3.modamount);
file_var(0, osc2.transpose.LFO_3.modamount);
file_var(0, osc2.finetune.LFO_3.modamount);
file_var(0, osc2.PWM.LFO_3.modamount);
file_var(0, osc2.level.LFO_3.controller);
file_var(0, osc2.pan.LFO_3.controller);
file_var(0, osc2.transpose.LFO_3.controller);
file_var(0, osc2.finetune.LFO_3.controller);
file_var(0, osc2.PWM.LFO_3.controller);

file_var(0, NG.level.LFO_3.mode);
file_var(0, NG.pan.LFO_3.mode);
file_var(0, NG.filter_f.LFO_3.mode);
file_var(0, synth.filter_f.LFO_3.mode);
file_var(0, NG.level.LFO_3.modamount);
file_var(0, NG.pan.LFO_3.modamount);
file_var(0, NG.filter_f.LFO_3.modamount);
file_var(0, synth.filter_f.LFO_3.modamount);
file_var(0, NG.level.LFO_3.controller);
file_var(0, NG.pan.LFO_3.controller);
file_var(0, NG.filter_f.LFO_3.controller);
file_var(0, synth.filter_f.LFO_3.controller);

file_var(0, osc1.level.LFO_4.mode);
file_var(0, osc1.pan.LFO_4.mode);
file_var(0, osc1.transpose.LFO_4.mode);
file_var(0, osc1.finetune.LFO_4.mode);
file_var(0, osc1.PWM.LFO_4.mode);
file_var(0, osc1.level.LFO_4.modamount);
file_var(0, osc1.pan.LFO_4.modamount);
file_var(0, osc1.transpose.LFO_4.modamount);
file_var(0, osc1.finetune.LFO_4.modamount);
file_var(0, osc1.PWM.LFO_4.modamount);
file_var(0, osc1.level.LFO_4.controller);
file_var(0, osc1.pan.LFO_4.controller);
file_var(0, osc1.transpose.LFO_4.controller);
file_var(0, osc1.finetune.LFO_4.controller);
file_var(0, osc1.PWM.LFO_4.controller);

file_var(0, osc2.level.LFO_4.mode);
file_var(0, osc2.pan.LFO_4.mode);
file_var(0, osc2.transpose.LFO_4.mode);
file_var(0, osc2.finetune.LFO_4.mode);
file_var(0, osc2.PWM.LFO_4.mode);
file_var(0, osc2.level.LFO_4.modamount);
file_var(0, osc2.pan.LFO_4.modamount);
file_var(0, osc2.transpose.LFO_4.modamount);
file_var(0, osc2.finetune.LFO_4.modamount);
file_var(0, osc2.PWM.LFO_4.modamount);
file_var(0, osc2.level.LFO_4.controller);
file_var(0, osc2.pan.LFO_4.controller);
file_var(0, osc2.transpose.LFO_4.controller);
file_var(0, osc2.finetune.LFO_4.controller);
file_var(0, osc2.PWM.LFO_4.controller);

file_var(0, NG.level.LFO_4.mode);
file_var(0, NG.pan.LFO_4.mode);
file_var(0, NG.filter_f.LFO_4.mode);
file_var(0, synth.filter_f.LFO_4.mode);
file_var(0, NG.level.LFO_4.modamount);
file_var(0, NG.pan.LFO_4.modamount);
file_var(0, NG.filter_f.LFO_4.modamount);
file_var(0, synth.filter_f.LFO_4.modamount);
file_var(0, NG.level.LFO_4.controller);
file_var(0, NG.pan.LFO_4.controller);
file_var(0, NG.filter_f.LFO_4.controller);
file_var(0, synth.filter_f.LFO_4.controller);

file_var(0, NG.gfx_seconds);
file_var(0, NG.scroll);
file_var(0, NG.at_shape);
file_var(0, NG.at_coef);
file_var(0, NG.dec1_shape);
file_var(0, NG.dec1_coef);
file_var(0, NG.dec2_shape);
file_var(0, NG.dec2_coef);
file_var(0, NG.rel_shape);
file_var(0, NG.rel_coef);


file_var(0, NG.filter.gfx_seconds);
file_var(0, NG.filter.scroll);
file_var(0, NG.filter.at_shape);
file_var(0, NG.filter.at_coef);
file_var(0, NG.filter.dec1_shape);
file_var(0, NG.filter.dec1_coef);
file_var(0, NG.filter.dec2_shape);
file_var(0, NG.filter.dec2_coef);
file_var(0, NG.filter.rel_shape);
file_var(0, NG.filter.rel_coef);



file_var(0, LFO_1.CV_Select);
file_var(0, LFO_2.CV_Select);
file_var(0, LFO_3.CV_Select);
file_var(0, LFO_4.CV_Select);

file_var(0, LFO_1.free_run); 
file_var(0, LFO_2.free_run); 
file_var(0, LFO_3.free_run); 
file_var(0, LFO_4.free_run); 

@block

   LFO_1.delay == -1 ? (LFO_1.delay_sams = (240/tempo) * srate):
   LFO_1.delay == -2 ? (LFO_1.delay_sams = (240/tempo) * srate/2):
   LFO_1.delay == -3 ? (LFO_1.delay_sams = (240/tempo) * srate/4):
   LFO_1.delay == -4 ? (LFO_1.delay_sams = (240/tempo) * srate/8):
   LFO_1.delay == -5 ? (LFO_1.delay_sams = (240/tempo) * srate/16);
 
   LFO_2.delay == -1 ? (LFO_2.delay_sams = (240/tempo) * srate):
   LFO_2.delay == -2 ? (LFO_2.delay_sams = (240/tempo) * srate/2):
   LFO_2.delay == -3 ? (LFO_2.delay_sams = (240/tempo) * srate/4):
   LFO_2.delay == -4 ? (LFO_2.delay_sams = (240/tempo) * srate/8):
   LFO_2.delay == -5 ? (LFO_2.delay_sams = (240/tempo) * srate/16);
   
    LFO_1.attack == -1 ? (LFO_1.attack_sams = (240/tempo) * srate):
    LFO_1.attack == -2 ? (LFO_1.attack_sams = (240/tempo) * srate/2):
    LFO_1.attack == -3 ? (LFO_1.attack_sams = (240/tempo) * srate/4):
    LFO_1.attack == -4 ? (LFO_1.attack_sams = (240/tempo) * srate/8):
    LFO_1.attack == -5 ? (LFO_1.attack_sams = (240/tempo) * srate/16);
     
    LFO_2.attack == -1 ? (LFO_2.attack_sams = (240/tempo) * srate):
    LFO_2.attack == -2 ? (LFO_2.attack_sams = (240/tempo) * srate/2):
    LFO_2.attack == -3 ? (LFO_2.attack_sams = (240/tempo) * srate/4):
    LFO_2.attack == -4 ? (LFO_2.attack_sams = (240/tempo) * srate/8):
    LFO_2.attack == -5 ? (LFO_2.attack_sams = (240/tempo) * srate/16); 
   
   LFO_3.delay == -1 ? (LFO_3.delay_sams = (240/tempo) * srate):
   LFO_3.delay == -2 ? (LFO_3.delay_sams = (240/tempo) * srate/2):
   LFO_3.delay == -3 ? (LFO_3.delay_sams = (240/tempo) * srate/4):
   LFO_3.delay == -4 ? (LFO_3.delay_sams = (240/tempo) * srate/8):
   LFO_3.delay == -5 ? (LFO_3.delay_sams = (240/tempo) * srate/16);
   
   LFO_4.delay == -1 ? (LFO_4.delay_sams = (240/tempo) * srate):
   LFO_4.delay == -2 ? (LFO_4.delay_sams = (240/tempo) * srate/2):
   LFO_4.delay == -3 ? (LFO_4.delay_sams = (240/tempo) * srate/4):
   LFO_4.delay == -4 ? (LFO_4.delay_sams = (240/tempo) * srate/8):
   LFO_4.delay == -5 ? (LFO_4.delay_sams = (240/tempo) * srate/16);
   
    LFO_3.attack == -1 ? (LFO_3.attack_sams = (240/tempo) * srate):
    LFO_3.attack == -2 ? (LFO_3.attack_sams = (240/tempo) * srate/2):
    LFO_3.attack == -3 ? (LFO_3.attack_sams = (240/tempo) * srate/4):
    LFO_3.attack == -4 ? (LFO_3.attack_sams = (240/tempo) * srate/8):
    LFO_3.attack == -5 ? (LFO_3.attack_sams = (240/tempo) * srate/16);
     
    LFO_4.attack == -1 ? (LFO_4.attack_sams = (240/tempo) * srate):
    LFO_4.attack == -2 ? (LFO_4.attack_sams = (240/tempo) * srate/2):
    LFO_4.attack == -3 ? (LFO_4.attack_sams = (240/tempo) * srate/4):
    LFO_4.attack == -4 ? (LFO_4.attack_sams = (240/tempo) * srate/8):
    LFO_4.attack == -5 ? (LFO_4.attack_sams = (240/tempo) * srate/16); 
   
   
   block_play_position = play_position; // LFO to Project
   pos_add = 0;                         // LFO to Project
   
@sample

caller == 1 ? (
    parameters_update_on == 0 ? (
        parameters_update();  
    );
);

  pos_add += 1; // LFO to Project
  
    pitchwheel_old = pitchwheel;
    while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax while()
       msg1==$x80 ? (msg1=$x90; msg3 = 0); // Noteoff to NoteOn Value 0
       
       msg1==$x90 ? ( //&& msg3!=0 ? (
         msg3 == 0 ? noteon_cnt-=1 : noteon_cnt+=1; // count note-ons
         noteon_cnt = max(0,noteon_cnt);
         msg2 += 3;
         Synth.midi_in();
         
       ) : msg1==$xD0 ? (
       aftertouch = msg2;
       ) : msg1==$xE0 ? (
       Pitchwheel = msg3-64 + msg2 / 127;
       norm_pitchwheel = pitchwheel > 0 ? pitchwheel / 63 : pitchwheel < 0 ? pitchwheel / 64 : 0;
       ) : msg1==$xB0 && msg2 == 1 ? (
       modwheel = msg3 / 127;
       ):(
         midisend(offset,msg1,msg2,msg3); // passthrough other events
       );
       //midisend(offset,msg1,msg2,msg3);
    );
    
    
    //Global Start- stop- and Retriggers
    noteon_cnt_old == 0 && noteon_cnt ? starttrigger = 1 : starttrigger = 0;
        noteon_cnt_old && noteon_cnt == 0 ? (
    synth.subosc_1.on || synth.subosc_2.on || synth.subosc_3.on || synth.subosc_4.on || synth.subosc_5.on || synth.subosc_6.on || synth.subosc_7.on || synth.subosc_8.on || synth.subosc_9.on || synth.subosc_10.on || synth.subosc_11.on || synth.subosc_12.on ? (
    stoptrigger = 0;
    ):(
    stoptrigger = 1;
    );
    ):(
    stoptrigger = 0;
    );
    noteon_cnt_old < noteon_cnt ? retrigger = 1 : retrigger = 0;
    noteon_cnt_old = noteon_cnt;
    starttrigger ? gen_follower = 0;
    gen_follower += 1;
    stoptrigger ? gen_follower = 0;
    /////////////////////////////////////
 
    
    synth.play_synth_generals();
    
    MonoOrPoly ? Synth.Subosc_1.Mono_glide();
    
    
    CV_1 = slider247;
    CV_2 = slider248;
    CV_3 = slider249;
    CV_4 = slider250;
    CV_5 = slider251;
    CV_6 = slider252;
    CV_7 = slider253;
    CV_8 = slider254;
    CV_9 = slider255;
    CV_10 = slider256;
    
    //LFO_1.free_run = 1; 
    LFO_1.run_on_stop = 1;
    LFO_1.LFO_Generator(CV);
    gen_follower < LFO_1.delay_sams ? LFO_1.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_1.delay_sams && gen_follower < LFO_1.delay_sams + LFO_1.attack_sams ? LFO_1.abs_position.after_slew_rate *= (gen_follower-LFO_1.delay_sams)/LFO_1.attack_sams;
    //osc1.finetune_running = osc1.finetune + osc1.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    //osc2.finetune_running = osc2.finetune + osc2.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    
    //LFO_2.free_run = 1; 
    LFO_2.run_on_stop = 1;
    LFO_2.LFO_Generator(CV);
    gen_follower < LFO_2.delay_sams ? LFO_2.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_2.delay_sams && gen_follower < LFO_2.delay_sams + LFO_2.attack_sams ? LFO_2.abs_position.after_slew_rate *= (gen_follower-LFO_2.delay_sams)/LFO_2.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_2.modamount * LFO_2.abs_position.after_slew_rate;
    
    //LFO_3.free_run = 1; 
    LFO_3.run_on_stop = 1;
    LFO_3.LFO_Generator(CV);
    gen_follower < LFO_3.delay_sams ? LFO_3.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_3.delay_sams && gen_follower < LFO_3.delay_sams + LFO_3.attack_sams ? LFO_3.abs_position.after_slew_rate *= (gen_follower-LFO_3.delay_sams)/LFO_3.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_3.modamount * LFO_3.abs_position.after_slew_rate;
    
    //LFO_4.free_run = 1; 
    LFO_4.run_on_stop = 1;
    LFO_4.LFO_Generator(CV);
    gen_follower < LFO_4.delay_sams ? LFO_4.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_4.delay_sams && gen_follower < LFO_4.delay_sams + LFO_4.attack_sams ? LFO_4.abs_position.after_slew_rate *= (gen_follower-LFO_4.delay_sams)/LFO_4.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_4.modamount * LFO_4.abs_position.after_slew_rate;
    
    
    osc1.modulate_osc();
    osc1.play_oscillator();
    osc2.modulate_osc();
    osc2.play_oscillator();
    
    spl0 = synth.outputL * 0.1 * master_volume;// + osc2.output * 0.1;
    spl1 = synth.outputR * 0.1 * master_volume;
    spl0.dcblocker();
    spl1.dcblocker();
    




@gfx 1330 770

size = zoom*0.95;
function anykey (anyx, anyy, anyon, anylabel) (
gfx_x = anyx;
gfx_y = anyy;
gfx_blit(3, zoom/2, 0, 0, anyon * 80, 80, 80);
gfx_y += 43*zoom;
gfx_setfont(1,"Arial",11*zoom,'b');
gfx_drawstr(anylabel, 0x05, gfx_x+40*zoom, gfx_y + gfx_texth);
);

function dummy_dragstart(default, minval, maxval) (
slider246 = this;
this.dragging == 0 ? (
this.dragging = 1;
Dummy.parameter_config      (246,       default,      minval,    maxval,  0, 0, 0,  0,  0,  0);
Dummy.dragstart();
);
);

function dummy_h_dragstart(default, minval, maxval) (
slider246 = this;
this.h_dragging == 0 ? (
this.h_dragging = 1;
Dummy.parameter_config      (246,       default,      minval,    maxval,  0, 0, 0,  0,  0,  0);
Dummy.h_dragstart();
);
);

function dummy_potdrag ()(
dummy.potdrag();
this = slider246;
);

function dummy_h_potdrag (wide) (
dummy.h_potdrag(wide);
this = slider246;
);

function dummy_dragstop () (
dummy.dragstop();
this.dragging = this.h_dragging = 0;
);

/*
 gfx_x = x + 5*(w/6); gfx_y = (h/2)+y+2*zoom;
 gfx_drawstr(sprintf(#, "%i", slider(this.startslider + 24)), 0x05, gfx_x+w/6, gfx_y + gfx_texth);
 
*/
 mouseHold = mouse_cap & 1;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 lastCap = mouseHold;

 
 
 
lightgrey();
gfx_rect(0,0,gfx_w,gfx_h);
zoom = 1;

size = zoom*0.95;














sgfx_x = 10*zoom; sgfx_y = 20*zoom; sgfx_w = 200*zoom; sgfx_h = 100*zoom;
osc1.GFXosc.render_waveform();

black();
gfx_rect(sgfx_x, sgfx_y, sgfx_w, sgfx_h);
white();
gfx_a = 0.6; gfx_line(sgfx_x, sgfx_y + sgfx_h / 2, sgfx_x + sgfx_w, sgfx_y + sgfx_h / 2); gfx_a = 1;

gfx_x = sgfx_x; gfx_y = sgfx_y + sgfx_h/2;

rgb(0,255,255);
tmp_loop = 0;
loop(sgfx_w,
gfx_lineto(sgfx_x + tmp_loop, sgfx_y + sgfx_h/2 - (sgfx_h/2)*osc1.GFXosc.buf[tmp_loop * osc1.GFXosc.size / sgfx_w]);
tmp_loop += 1;
);
white(); gfx_roundrect(sgfx_x, sgfx_y, sgfx_w, sgfx_h, 0);

gfx_setfont(1,"Arial",11*size,'b');
black();
gfx_rect(sgfx_x + 21*sgfx_w / 20, sgfx_y, sgfx_w, sgfx_h);
white();
gfx_roundrect(sgfx_x + 21*sgfx_w / 20, sgfx_y, sgfx_w, sgfx_h,0);

lightgrey();
gfx_a = 0.6;
gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + sgfx_h / 5);
gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 2*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 2*sgfx_h / 5);
gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 3*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 3*sgfx_h / 5);
gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 4*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 4*sgfx_h / 5);
gfx_line(sgfx_x + 21*sgfx_w / 20 + sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + sgfx_w / 6, sgfx_y + sgfx_h);
gfx_line(sgfx_x + 21*sgfx_w / 20 + 2*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 2*sgfx_w / 6, sgfx_y + sgfx_h);
gfx_line(sgfx_x + 21*sgfx_w / 20 + 3*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 3*sgfx_w / 6, sgfx_y + sgfx_h);
gfx_line(sgfx_x + 21*sgfx_w / 20 + 4*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 4*sgfx_w / 6, sgfx_y + sgfx_h);
gfx_line(sgfx_x + 21*sgfx_w / 20 + 5*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 5*sgfx_w / 6, sgfx_y + sgfx_h);
gfx_a = 1;
rgb(0,255,255);
nsgfx_x = sgfx_x + 21*sgfx_w/20; sgfx_d = sgfx_w/6; sgfx_dy = sgfx_h/5;
gfx_x = nsgfx_x; gfx_y = sgfx_y + sgfx_dy;
gfx_drawstr("LVL", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x; gfx_y = sgfx_y + 2*sgfx_dy;
gfx_drawstr("No", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x; gfx_y = sgfx_y + 3*sgfx_dy;
gfx_drawstr("DEF", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x; gfx_y = sgfx_y + 4*sgfx_dy;
gfx_drawstr("DEF#", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);

gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y;
gfx_drawstr("SINE", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_g = abs(slider(osc1.startslider + 1)) / 40 + 0.75; gfx_r = abs(slider(osc1.startslider + 1)) / 20;
gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", slider(osc1.startslider + 1)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider + 2)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr(slider(osc1.startslider + 3) == 0 ? "LIN" : slider(osc1.startslider + 3) == 1 ? "S" : slider(osc1.startslider + 3) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", osc1.sine_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
gfx_a = 1;
gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
gfx_drawstr("TRI", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_g = abs(slider(osc1.startslider + 5)) / 40 + 0.75; gfx_r = abs(slider(osc1.startslider + 5)) / 20;
gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", slider(osc1.startslider + 5)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider + 6)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr(slider(osc1.startslider + 7) == 0 ? "LIN" : slider(osc1.startslider + 7) == 1 ? "S" : slider(osc1.startslider + 7) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", osc1.triangle_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
gfx_drawstr("SAW", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_g = abs(slider(osc1.startslider + 9)) / 40 + 0.75; gfx_r = abs(slider(osc1.startslider + 9)) / 20;
gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", slider(osc1.startslider + 9)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider + 10)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr(slider(osc1.startslider + 11) == 0 ? "LIN" : slider(osc1.startslider + 11) == 1 ? "S" : slider(osc1.startslider + 11) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", osc1.saw_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
gfx_drawstr("ALT", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_g = abs(slider(osc1.startslider + 13)) / 40 + 0.75; gfx_r = abs(slider(osc1.startslider + 13)) / 20;
gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", slider(osc1.startslider + 13)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider + 14)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr(slider(osc1.startslider + 15) == 0 ? "LIN" : slider(osc1.startslider + 15) == 1 ? "S" : slider(osc1.startslider + 15) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", osc1.saw_alt_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
gfx_drawstr("SQR", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_g = abs(slider(osc1.startslider + 17)) / 40 + 0.75; gfx_r = abs(slider(osc1.startslider + 17)) / 20;
gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", slider(osc1.startslider + 17)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider + 18)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr(slider(osc1.startslider + 19) == 5 ? "OFF" : "PWM", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr(sprintf(#, "%.2f", osc1.pwm*2), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);







env_sgfx_y = sgfx_y + 2* sgfx_h + 3*sgfx_w/20;
env_sgfx_w = 41*sgfx_w/20;
black();
gfx_rect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h);


env_seconds = env_sgfx_w / osc1.gfx_seconds; //letzte Zahl sind Sekunden
gfx_env.attack = env_seconds* synth.subosc_1.VCA1.attack / srate;
gfx_env.decay = env_seconds* synth.subosc_1.VCA1.decay / srate;
gfx_env.breakpoint = synth.subosc_1.VCA1.breakpoint;
gfx_env.decay2 = env_seconds* synth.subosc_1.VCA1.decay2 / srate;
gfx_env.sustain = synth.subosc_1.VCA1.sustain;
gfx_env.release = env_seconds* synth.subosc_1.VCA1.release / srate;

gfx_rect(sgfx_x + 15*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
gfx_rect(sgfx_x + 50*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
gfx_rect(sgfx_x + 85*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
gfx_rect(sgfx_x + 120*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
gfx_rect(sgfx_x + 155*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
gfx_rect(sgfx_x + 190*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);

gfx_rect(sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom);
env_sgfx_d = 210*zoom/6; 

!g_collision (sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom) && !osc1.at_coef.dragging && !osc1.dec1_coef.dragging && !osc1.dec2_coef.dragging && !osc1.rel_coef.dragging ? (
 gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
 gfx_drawstr("ATK", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.attack/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
 gfx_drawstr("DEC", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
 gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
 gfx_drawstr("SLP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay2/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
 gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
 gfx_drawstr("REL", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.release/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
):(
 gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
 gfx_drawstr(osc1.at_shape == 0 ? "LIN" : osc1.at_shape == 1 ? "S" : osc1.at_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.2f", env1.at_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
 gfx_drawstr(osc1.dec1_shape == 0 ? "LIN" : osc1.dec1_shape == 1 ? "S" : osc1.dec1_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.2f", env1.dec1_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
 //gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
 gfx_drawstr(osc1.dec2_shape == 0 ? "LIN" : osc1.dec2_shape == 1 ? "S" : osc1.dec2_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.2f", env1.dec2_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
 //gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
 gfx_drawstr(osc1.rel_shape == 0 ? "LIN" : osc1.rel_shape == 1 ? "S" : osc1.rel_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
 gfx_drawstr(sprintf(#, "%.2f", env1.rel_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
);

gfx_x = gfx_osc1_attack_x = sgfx_x; gfx_y = gfx_osc1_attack_y = env_sgfx_y - 45*zoom - (gfx_env.attack / env_seconds) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);
gfx_x = gfx_osc1_decay_x = sgfx_x + 35*zoom; gfx_y = gfx_osc1_decay_y = env_sgfx_y - 45*zoom - (gfx_env.decay*0.5 / env_seconds) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);
gfx_x = gfx_osc1_breakpoint_x = sgfx_x + 70*zoom; gfx_y = gfx_osc1_breakpoint_y = env_sgfx_y - 45*zoom - (gfx_env.breakpoint) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);
gfx_x = gfx_osc1_decay2_x = sgfx_x + 105*zoom; gfx_y = gfx_osc1_decay2_y = env_sgfx_y - 45*zoom - (gfx_env.decay2*0.5 / env_seconds) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);
gfx_x = gfx_osc1_sustain_x = sgfx_x+ 140*zoom; gfx_y = gfx_osc1_sustain_y = env_sgfx_y - 45*zoom - (gfx_env.sustain) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);
gfx_x = gfx_osc1_release_x = sgfx_x+ 175*zoom; gfx_y = gfx_osc1_release_y = env_sgfx_y - 45*zoom - (gfx_env.release*0.25 / env_seconds) * sgfx_h*0.75;
gfx_blit(0,zoom*0.13,0);


gfx_setimgdim(127,10000,10000);
gfx_dest = 127;
black(); gfx_rect(0,0,10000,10000);

rgb(0,255,255);
gfx_x = sgfx_x+1; gfx_y = env_sgfx_y + sgfx_h-1;
tmp_loop = 0;
tmp_wait = 0;
gfx_env.stage = 1; gfx_env.follower = 0;
while(

gfx_env.stage_old != gfx_env.stage ? (
gfx_env.stage == 1 ? rgb(255,255,0):
gfx_env.stage == 2 ? rgb(255,120,255):
gfx_env.stage == 3 ? (rgb(0,200,200); gfx_line(sgfx_x + tmp_loop-1, gfx_y, sgfx_x+tmp_loop-1,env_sgfx_y+sgfx_h); rgb(0,250,25)):
gfx_env.stage == 4 ? rgb(255,200,0):
gfx_env.stage == 5 ? rgb(255,120,120);
);
gfx_env.stage_old = gfx_env.stage;

gfx_env.stage != 4 ? (
gfx_env.new_complex_envelope(env1.at_shape, env1.dec1_shape, env1.dec2_shape, env1.rel_shape, env1.at_coef, env1.dec1_coef, env1.dec2_coef, env1.rel_coef);
):gfx_env.stage == 4 ? (
tmp_wait >= env_seconds ? gfx_env.stage = 5;
tmp_wait += 1;
);

gfx_lineto(sgfx_x + tmp_loop, env_sgfx_y + sgfx_h - gfx_env.real_level*19*sgfx_h/20); 
tmp_loop += 1;

gfx_env.envelope_stop == 0
);
gfx_env.envelope_stop = 0;


osc1.scroll_w = env_sgfx_w * (env_sgfx_w / tmp_loop);
osc1.scroll_offset = (env_sgfx_w / tmp_loop);
//scroll = slider247;

gfx_dest = -1;
gfx_x=sgfx_x; gfx_y=env_sgfx_y;gfx_a=1;
gfx_blit(127,1,0, sgfx_x + env_sgfx_w*(1/(osc1.scroll_offset))*(osc1.scroll-osc1.scroll_offset*osc1.scroll), env_sgfx_y, env_sgfx_w, sgfx_h);


white(); gfx_roundrect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h, 0);


g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) || osc1.gfx_seconds.dragging ? (
lightgrey(); gfx_x = sgfx_x + env_sgfx_w -65*zoom; gfx_y = env_sgfx_y + 3*zoom; 
gfx_drawstr("Zoom: "); gfx_drawnumber(osc1.gfx_seconds,1); gfx_drawstr("s"); 

osc1.scroll_w < env_sgfx_w ? (
gfx_osc1_scroll_x = sgfx_x + (env_sgfx_w-osc1.scroll_w)*osc1.scroll;
gfx_osc1_scroll_y = env_sgfx_y + sgfx_h - 10*zoom;
gfx_roundrect(gfx_osc1_scroll_x, gfx_osc1_scroll_y, osc1.scroll_w, 8*zoom, 4*zoom);
gfx_roundrect(gfx_osc1_scroll_x + 2*zoom, env_sgfx_y + sgfx_h - 8*zoom, osc1.scroll_w-4*zoom, 4*zoom, 2*zoom);
);
);

osc1.Volume.parameter_config (osc1.startslider,       7,        0,    10,  sgfx_x/zoom + 233,   sgfx_y/zoom +115, 120,    101,    1,   1);
osc1.volume.knob();
      black();gfx_setfont(1,"Arial",11*zoom,'b');
      #klabel = "LEVEL"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
      #klabel = " 2.5"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
      #klabel = " 5"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
      #klabel = "10"; gfx_measurestr(#klabel, klw, klh); osc1.Volume.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
      

osc1.Pan.parameter_config (osc1.startslider+ 23,       0,        -100,    100,  sgfx_x/zoom + 333,   sgfx_y/zoom +115, 120,    101,    1,   osc1.unison ? 4 : 2);
osc1.Pan.knob();
      black();gfx_setfont(1,"Arial",11*zoom,'b');
      osc1.unison ? #klabel = "WIDTH" : #klabel = "PAN"; gfx_measurestr(#klabel, klw, klh); osc1.PAN.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "L "; gfx_measurestr(#klabel, klw, klh); osc1.PAN.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); osc1.PAN.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
      #klabel = "C"; gfx_measurestr(#klabel, klw, klh); osc1.PAN.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); osc1.PAN.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
      #klabel = " R"; gfx_measurestr(#klabel, klw, klh); osc1.PAN.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
      
gfx_setfont(1,"Arial",11*size,'b');
black();
gfx_x = sgfx_x + 220*zoom; gfx_y = sgfx_y + 200*zoom;
gfx_rect(gfx_x, gfx_y, 60*zoom, 25*zoom);
gfx_g = 1;
 gfx_drawstr("TRANSP.", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
 gfx_x = sgfx_x + 220*zoom; gfx_y += 8*zoom;
 gfx_drawstr(sprintf(#, "%i", osc1.transpose), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
 
black();
gfx_x = sgfx_x + 285*zoom; gfx_y = sgfx_y + 200*zoom;
gfx_rect(gfx_x, gfx_y, 60, 25);
gfx_g = 1;
 gfx_drawstr("FINE", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
 gfx_x = sgfx_x + 285*zoom; gfx_y += 8*zoom;
 gfx_drawstr(sprintf(#, "%i", osc1.finetune), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
 
black();
gfx_x = sgfx_x + 350*zoom; gfx_y = sgfx_y + 200*zoom;
gfx_rect(gfx_x, gfx_y, 60, 25);
gfx_g = 1;
 gfx_drawstr("PITCHW.", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
 gfx_x = sgfx_x + 350*zoom; gfx_y += 8*zoom;
 gfx_drawstr(sprintf(#, "%i", slider(osc1.startslider+22)), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
  
 gfx_x = sgfx_x + 270*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
 Black();
 gfx_rect(sgfx_x + 270*zoom, env_sgfx_y + sgfx_h + 5*zoom, 100*zoom, 17*zoom);
 osc1.unison ? (
 gfx_g = 1; gfx_r = gfx_b = 0.35; 
 gfx_drawstr("FAT MODE: ON", 0x05, gfx_x+100*zoom, gfx_y + 17);
 ):(
 lightgrey();
 gfx_drawstr("FAT MODE: OFF", 0x05, gfx_x+100*zoom, gfx_y + 17);
 );
 

gfx_setfont(2,"Arial",16*zoom,'b'); Black();
gfx_x = sgfx_x + 5*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
gfx_drawstr("OSCILLATOR 1");
gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom,0);
gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 422*zoom, 364*zoom,0);

   !Number_input ? (
   
   mouse_cap == 2 ? (
   g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
   selection ? osc1.at_shape = selection - 1;
   selection = 0; caller = 1;
   );
   g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
   selection ? osc1.dec1_shape = selection - 1;
   selection = 0; caller = 1;
   );
   g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
   selection ? osc1.dec2_shape = selection - 1;
   selection = 0; caller = 1;
   );
   g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
   selection ? osc1.rel_shape = selection - 1;
   selection = 0; caller = 1;
   );
   
   );
   
   mouseClick == 1 ? (
      
       g_collision(nsgfx_x + sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_sine_level.dragstart();
       g_collision(nsgfx_x + sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_sine_Octave.dragstart();
       g_collision(nsgfx_x + sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_sine_factor.dragstart();
       g_collision(nsgfx_x + sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
       selection ? slider(osc1.startslider+3) = selection - 1;
       selection = 0; caller = 1;
       );
            
       g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_triangle_level.dragstart();
       g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_triangle_Octave.dragstart();
       g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_triangle_factor.dragstart();
       g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
       selection ? slider(osc1.startslider+7) = selection - 1;
       selection = 0; caller = 1;
       );
       
       g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_level.dragstart();
       g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_Octave.dragstart();
       g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_factor.dragstart();
       g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
       selection ? slider(osc1.startslider+11) = selection - 1;
       selection = 0; caller = 1;
       );
       
       g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_alt_level.dragstart();
       g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_alt_Octave.dragstart();
       g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_saw_alt_factor.dragstart();
       g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
       selection ? slider(osc1.startslider+15) = selection - 1;
       selection = 0; caller = 1;
       );
       
       g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_Square_level.dragstart();
       g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_Square_Octave.dragstart();
       g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc1.gfx_Square_PWM.dragstart();
       
       g_collision(gfx_osc1_attack_x, gfx_osc1_attack_y, 33*zoom, 15* zoom) ? osc1.gfx_attack.v_dragstart();
       g_collision(gfx_osc1_decay_x, gfx_osc1_decay_y, 33*zoom, 15* zoom) ? osc1.gfx_decay.v_dragstart();
       g_collision(gfx_osc1_breakpoint_x, gfx_osc1_breakpoint_y, 33*zoom, 15* zoom) ? osc1.gfx_breakpoint.v_dragstart();
       g_collision(gfx_osc1_decay2_x, gfx_osc1_decay2_y, 33*zoom, 15* zoom) ? osc1.gfx_decay2.v_dragstart();
       g_collision(gfx_osc1_sustain_x, gfx_osc1_sustain_y, 33*zoom, 15* zoom) ? osc1.gfx_sustain.v_dragstart();
       g_collision(gfx_osc1_release_x, gfx_osc1_release_y, 33*zoom, 15* zoom) ? osc1.gfx_release.v_dragstart();
       
       g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) ? (
          g_collision(sgfx_x + env_sgfx_w -65*zoom, env_sgfx_y + 3*zoom,65*zoom, 14*zoom) ? 
            osc1.gfx_seconds.dummy_dragstart(5, 0.5, 15);
            
          g_collision(gfx_osc1_scroll_x, gfx_osc1_scroll_y, osc1.scroll_w, 8*zoom) && osc1.scroll_w < env_sgfx_w ? 
            osc1.scroll.dummy_h_dragstart(0, 0, 1);
        );
       
       
       g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc1.at_coef.dummy_dragstart(0, -10, 10);
       g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc1.dec1_coef.dummy_dragstart(0, -10, 10);
       g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc1.dec2_coef.dummy_dragstart(0, -10, 10);
       g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc1.rel_coef.dummy_dragstart(0, -10, 10);
       
       osc1.Volume.k_collision() ? osc1.Volume.dragstart();
       osc1.pan.k_collision() ? osc1.pan.dragstart();
       
       g_collision(sgfx_x + 220*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? osc1.gfx_transpose.dragstart();
       g_collision(sgfx_x + 285*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? osc1.gfx_finetune.dragstart();
       g_collision(sgfx_x + 350*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? osc1.gfx_pitchamount.dragstart();
       
       
       g_collision(sgfx_x + 270*zoom, env_sgfx_y + sgfx_h + 5*zoom, 100*zoom, 17*zoom) ? (osc1.unison == 0 ? osc1.unison = 1 : osc1.unison = 0; caller = 1);
   ); // click
  
  mouseclick == -1 ? (
  osc1.gfx_sine_level.dragstop();
  osc1.gfx_sine_octave.dragstop();
  osc1.gfx_sine_factor.dragstop();
  osc1.gfx_triangle_level.dragstop();
  osc1.gfx_triangle_octave.dragstop();
  osc1.gfx_triangle_factor.dragstop();
  osc1.gfx_saw_level.dragstop();
  osc1.gfx_saw_octave.dragstop();
  osc1.gfx_saw_factor.dragstop();
  osc1.gfx_saw_alt_level.dragstop();
  osc1.gfx_saw_alt_octave.dragstop();
  osc1.gfx_saw_alt_factor.dragstop();
  osc1.gfx_Square_level.dragstop();
  osc1.gfx_Square_octave.dragstop();
  osc1.gfx_Square_PWM.dragstop();
  osc1.gfx_attack.dragstop();
  osc1.gfx_decay.dragstop();
  osc1.gfx_breakpoint.dragstop();
  osc1.gfx_decay2.dragstop();
  osc1.gfx_sustain.dragstop();
  osc1.gfx_release.dragstop();
  
  osc1.gfx_seconds.dummy_dragstop();
  osc1.scroll.dummy_dragstop();
  
  osc1.at_coef.dummy_dragstop();
  osc1.dec1_coef.dummy_dragstop();
  osc1.dec2_coef.dummy_dragstop();
  osc1.rel_coef.dummy_dragstop();
  
  osc1.Volume.dragstop();
  osc1.pan.dragstop();
  
  osc1.gfx_transpose.dragstop();
  osc1.gfx_finetune.dragstop();
  osc1.gfx_pitchamount.dragstop();
  
  );
  
  mouse_wheel ? 
      (
          g_collision(nsgfx_x + sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_sine_level.potwheel(); caller = 1);
          g_collision(nsgfx_x + sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_sine_factor.potwheel(); caller = 1);
          
          g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_triangle_level.potwheel(); caller = 1);
          g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_triangle_factor.potwheel(); caller = 1);
          
          g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_saw_level.potwheel(); caller = 1);
          g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_saw_factor.potwheel(); caller = 1);
          
          g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_saw_alt_level.potwheel(); caller = 1);
          g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_saw_alt_factor.potwheel(); caller = 1);
          
          g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_Square_level.potwheel(); caller = 1);
          g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc1.gfx_Square_PWM.potwheel(); caller = 1);
          
          osc1.Volume.k_collision() ? (osc1.Volume.potwheel(); caller = 1);
          osc1.Pan.k_collision() ? (osc1.pan.potwheel(); caller = 1);
          
      );
      
  osc1.gfx_sine_level.dragging ?  (osc1.gfx_sine_level.potdrag(); caller = 1);
  osc1.gfx_sine_octave.dragging ?  (osc1.gfx_sine_octave.potdrag_integer(); caller = 1);
  osc1.gfx_sine_factor.dragging ?  (osc1.gfx_sine_factor.potdrag(); caller = 1);
  osc1.gfx_triangle_level.dragging ?  (osc1.gfx_triangle_level.potdrag(); caller = 1);
  osc1.gfx_triangle_octave.dragging ?  (osc1.gfx_triangle_octave.potdrag_integer(); caller = 1);
  osc1.gfx_triangle_factor.dragging ?  (osc1.gfx_triangle_factor.potdrag(); caller = 1);
  osc1.gfx_saw_level.dragging ?  (osc1.gfx_saw_level.potdrag(); caller = 1);
  osc1.gfx_saw_octave.dragging ?  (osc1.gfx_saw_octave.potdrag_integer(); caller = 1);
  osc1.gfx_saw_factor.dragging ?  (osc1.gfx_saw_factor.potdrag(); caller = 1);
  osc1.gfx_saw_alt_level.dragging ?  (osc1.gfx_saw_alt_level.potdrag(); caller = 1);
  osc1.gfx_saw_alt_octave.dragging ?  (osc1.gfx_saw_alt_octave.potdrag_integer(); caller = 1);
  osc1.gfx_saw_alt_factor.dragging ?  (osc1.gfx_saw_alt_factor.potdrag(); caller = 1);
  osc1.gfx_Square_level.dragging ?  (osc1.gfx_Square_level.potdrag(); caller = 1);
  osc1.gfx_Square_octave.dragging ?  (osc1.gfx_Square_octave.potdrag_integer(); caller = 1);
  osc1.gfx_Square_PWM.dragging ?  (osc1.gfx_Square_PWM.potdrag(); caller = 1);
  osc1.gfx_attack.v_dragging ? (osc1.gfx_attack.v_potdrag(sgfx_h*0.75); caller = 1);
  osc1.gfx_decay.v_dragging ? (osc1.gfx_decay.v_potdrag(sgfx_h*0.75); caller = 1);
  osc1.gfx_breakpoint.v_dragging ? (osc1.gfx_breakpoint.v_potdrag(sgfx_h*0.75); caller = 1);
  osc1.gfx_decay2.v_dragging ? (osc1.gfx_decay2.v_potdrag(sgfx_h*0.75); caller = 1);
  osc1.gfx_sustain.v_dragging ? (osc1.gfx_sustain.v_potdrag(sgfx_h*0.75); caller = 1);
  osc1.gfx_release.v_dragging ? (osc1.gfx_release.v_potdrag(sgfx_h*0.75); caller = 1);
  
  osc1.gfx_seconds.dragging ? (osc1.gfx_seconds.dummy_potdrag(); caller = 1);
  osc1.scroll.h_dragging ? (osc1.scroll.dummy_h_potdrag(env_sgfx_w-osc1.scroll_w); caller = 1);
  
  osc1.at_coef.dragging ? (osc1.at_coef.dummy_potdrag(); caller = 1);
  osc1.dec1_coef.dragging ? (osc1.dec1_coef.dummy_potdrag(); caller = 1);
  osc1.dec2_coef.dragging ? (osc1.dec2_coef.dummy_potdrag(); caller = 1);
  osc1.rel_coef.dragging ? (osc1.rel_coef.dummy_potdrag(); caller = 1);
  
  osc1.Volume.dragging ? (osc1.Volume.potdrag(); caller = 1);
  osc1.pan.dragging ? (osc1.pan.potdrag(); caller = 1);
  
  osc1.gfx_transpose.dragging ? (osc1.gfx_transpose.potdrag_integer(); caller = 1);
  osc1.gfx_finetune.dragging ?  (osc1.gfx_finetune.potdrag_integer(); caller = 1);
  osc1.gfx_pitchamount.dragging ?  (osc1.gfx_pitchamount.potdrag_integer(); caller = 1);
  
  );//number input




 ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
 OSC1.gfx_sine_level.parameter_config      (osc1.startslider+1,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_sine_octave.parameter_config     (osc1.startslider+2,       1,        1,     8,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_sine_factor.parameter_config     (osc1.startslider+4,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_triangle_level.parameter_config  (osc1.startslider+5,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_triangle_octave.parameter_config (osc1.startslider+6,       1,        1,     8,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_triangle_factor.parameter_config (osc1.startslider+8,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_level.parameter_config       (osc1.startslider+9,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_octave.parameter_config      (osc1.startslider+10,      1,        1,     8,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_factor.parameter_config      (osc1.startslider+12,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_ALT_level.parameter_config   (osc1.startslider+13,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_ALT_octave.parameter_config  (osc1.startslider+14,      1,        1,     8,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SAW_ALT_factor.parameter_config  (osc1.startslider+16,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SQUARE_level.parameter_config    (osc1.startslider+17,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SQUARE_octave.parameter_config   (osc1.startslider+18,      1,        1,     8,  0, 0, 0,  0,  0,  0);
 OSC1.gfx_SQUARE_PWM.parameter_config      (osc1.startslider+19,      5,      0,    10,  0, 0, 0,  0,  0,  0);
 
 osc1.gfx_attack.parameter_config          (Env1.startslider,       150,      0,  1000,  0, 0, 0, 0, 0, 0);
 osc1.gfx_decay.parameter_config           (Env1.startslider+1,     200,      0,  2000,  0, 0, 0, 0, 0, 0);
 osc1.gfx_breakpoint.parameter_config      (Env1.startslider+2,       4,      0,    10,  0, 0, 0, 0, 0, 0);
 osc1.gfx_decay2.parameter_config          (Env1.startslider+3,     300,      0,  2000,  0, 0, 0, 0, 0, 0);
 osc1.gfx_sustain.parameter_config         (Env1.startslider+4,       8,      0,    10,  0, 0, 0, 0, 0, 0);
 osc1.gfx_release.parameter_config         (Env1.startslider+5,     150,      0,  4000,  0, 0, 0, 0, 0, 0);
 
 osc1.gfx_transpose.parameter_config       (Osc1.startslider+20,      0,    -36,    36,  0, 0, 0, 0, 0, 0);
 osc1.gfx_finetune.parameter_config        (Osc1.startslider+21,      0,   -100,   100,  0, 0, 0, 0, 0, 0);
 osc1.gfx_pitchamount.parameter_config     (Osc1.startslider+22,      12,   -36,    36,  0, 0, 0, 0, 0, 0);
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 sgfx_x = 450*zoom; sgfx_y = 20*zoom; sgfx_w = 200*zoom; sgfx_h = 100*zoom;
 osc2.GFXosc.render_waveform();
 
 black();
 gfx_rect(sgfx_x, sgfx_y, sgfx_w, sgfx_h);
 white();
 gfx_a = 0.6; gfx_line(sgfx_x, sgfx_y + sgfx_h / 2, sgfx_x + sgfx_w, sgfx_y + sgfx_h / 2); gfx_a = 1;
 
 gfx_x = sgfx_x; gfx_y = sgfx_y + sgfx_h/2;
 
 rgb(0,255,255);
 tmp_loop = 0;
 loop(sgfx_w,
 gfx_lineto(sgfx_x + tmp_loop, sgfx_y + sgfx_h/2 - (sgfx_h/2)*osc2.GFXosc.buf[tmp_loop * osc2.GFXosc.size / sgfx_w]);
 tmp_loop += 1;
 );
 white(); gfx_roundrect(sgfx_x, sgfx_y, sgfx_w, sgfx_h, 0);
 
 gfx_setfont(1,"Arial",11*size,'b');
 black();
 gfx_rect(sgfx_x + 21*sgfx_w / 20, sgfx_y, sgfx_w, sgfx_h);
 white();
 gfx_roundrect(sgfx_x + 21*sgfx_w / 20, sgfx_y, sgfx_w, sgfx_h,0);
 
 lightgrey();
 gfx_a = 0.6;
 gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + sgfx_h / 5);
 gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 2*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 2*sgfx_h / 5);
 gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 3*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 3*sgfx_h / 5);
 gfx_line(sgfx_x + 21*sgfx_w / 20, sgfx_y + 4*sgfx_h / 5, sgfx_x + 21*sgfx_w / 20 + sgfx_w, sgfx_y + 4*sgfx_h / 5);
 gfx_line(sgfx_x + 21*sgfx_w / 20 + sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + sgfx_w / 6, sgfx_y + sgfx_h);
 gfx_line(sgfx_x + 21*sgfx_w / 20 + 2*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 2*sgfx_w / 6, sgfx_y + sgfx_h);
 gfx_line(sgfx_x + 21*sgfx_w / 20 + 3*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 3*sgfx_w / 6, sgfx_y + sgfx_h);
 gfx_line(sgfx_x + 21*sgfx_w / 20 + 4*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 4*sgfx_w / 6, sgfx_y + sgfx_h);
 gfx_line(sgfx_x + 21*sgfx_w / 20 + 5*sgfx_w / 6, sgfx_y, sgfx_x + 21*sgfx_w / 20 + 5*sgfx_w / 6, sgfx_y + sgfx_h);
 gfx_a = 1;
 rgb(0,255,255);
 nsgfx_x = sgfx_x + 21*sgfx_w/20; sgfx_d = sgfx_w/6; sgfx_dy = sgfx_h/5;
 gfx_x = nsgfx_x; gfx_y = sgfx_y + sgfx_dy;
 gfx_drawstr("LVL", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x; gfx_y = sgfx_y + 2*sgfx_dy;
 gfx_drawstr("No", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x; gfx_y = sgfx_y + 3*sgfx_dy;
 gfx_drawstr("DEF", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x; gfx_y = sgfx_y + 4*sgfx_dy;
 gfx_drawstr("DEF#", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
 gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y;
 gfx_drawstr("SINE", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_g = abs(slider(osc2.startslider + 1)) / 40 + 0.75; gfx_r = abs(slider(osc2.startslider + 1)) / 20;
 gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", slider(osc2.startslider + 1)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
  gfx_drawstr(sprintf(#, "%i", slider(osc2.startslider + 2)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
  gfx_drawstr(slider(osc2.startslider + 3) == 0 ? "LIN" : slider(osc2.startslider + 3) == 1 ? "S" : slider(osc2.startslider + 3) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", osc2.sine_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
  
 gfx_a = 1;
 gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
 gfx_drawstr("TRI", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_g = abs(slider(osc2.startslider + 5)) / 40 + 0.75; gfx_r = abs(slider(osc2.startslider + 5)) / 20;
 gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", slider(osc2.startslider + 5)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
  gfx_drawstr(sprintf(#, "%i", slider(osc2.startslider + 6)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
  gfx_drawstr(slider(osc2.startslider + 7) == 0 ? "LIN" : slider(osc2.startslider + 7) == 1 ? "S" : slider(osc2.startslider + 7) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 2*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", osc2.triangle_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
  
 gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
 gfx_drawstr("SAW", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_g = abs(slider(osc2.startslider + 9)) / 40 + 0.75; gfx_r = abs(slider(osc2.startslider + 9)) / 20;
 gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", slider(osc2.startslider + 9)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
  gfx_drawstr(sprintf(#, "%i", slider(osc2.startslider + 10)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
  gfx_drawstr(slider(osc2.startslider + 11) == 0 ? "LIN" : slider(osc2.startslider + 11) == 1 ? "S" : slider(osc2.startslider + 11) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 3*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", osc2.saw_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
  
 gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
 gfx_drawstr("ALT", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_g = abs(slider(osc2.startslider + 13)) / 40 + 0.75; gfx_r = abs(slider(osc2.startslider + 13)) / 20;
 gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", slider(osc2.startslider + 13)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
  gfx_drawstr(sprintf(#, "%i", slider(osc2.startslider + 14)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
  gfx_drawstr(slider(osc2.startslider + 15) == 0 ? "LIN" : slider(osc2.startslider + 15) == 1 ? "S" : slider(osc2.startslider + 15) == 2 ? "EXP" : "Err", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 4*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", osc2.saw_alt_coef), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
  
 gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y; rgb(0,255,255);
 gfx_drawstr("SQR", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_g = abs(slider(osc2.startslider + 17)) / 40 + 0.75; gfx_r = abs(slider(osc2.startslider + 17)) / 20;
 gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", slider(osc2.startslider + 17)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 2*sgfx_dy;
  gfx_drawstr(sprintf(#, "%i", slider(osc2.startslider + 18)), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 3*sgfx_dy;
  gfx_drawstr(slider(osc2.startslider + 19) == 5 ? "OFF" : "PWM", 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 gfx_x = nsgfx_x + 5*sgfx_d; gfx_y = sgfx_y + 4*sgfx_dy;
  gfx_drawstr(sprintf(#, "%.2f", osc2.pwm*2), 0x05, gfx_x+sgfx_d, gfx_y + sgfx_dy);
 
 
 
 
 
 
 
 env_sgfx_y = sgfx_y + 2* sgfx_h + 3*sgfx_w/20;
 env_sgfx_w = 41*sgfx_w/20;
 black();
 gfx_rect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h);
 
 
 env_seconds = env_sgfx_w / osc2.gfx_seconds; //letzte Zahl sind Sekunden
 gfx_env.attack = env_seconds* synth.subosc_1.VCA2.attack / srate;
 gfx_env.decay = env_seconds* synth.subosc_1.VCA2.decay / srate;
 gfx_env.breakpoint = synth.subosc_1.VCA2.breakpoint;
 gfx_env.decay2 = env_seconds* synth.subosc_1.VCA2.decay2 / srate;
 gfx_env.sustain = synth.subosc_1.VCA2.sustain;
 gfx_env.release = env_seconds* synth.subosc_1.VCA2.release / srate;
 
 gfx_rect(sgfx_x + 15*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 50*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 85*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 120*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 155*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 190*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 
 gfx_rect(sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom);
 env_sgfx_d = 210*zoom/6; 
 
 !g_collision (sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom) && !osc2.at_coef.dragging && !osc2.dec1_coef.dragging && !osc2.dec2_coef.dragging && !osc2.rel_coef.dragging ? (
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
  gfx_drawstr("ATK", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.attack/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
  gfx_drawstr("DEC", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
  gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
  gfx_drawstr("SLP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay2/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
  gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
  gfx_drawstr("REL", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.release/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 ):(
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
  gfx_drawstr(osc2.at_shape == 0 ? "LIN" : osc2.at_shape == 1 ? "S" : osc2.at_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.at_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
  gfx_drawstr(osc2.dec1_shape == 0 ? "LIN" : osc2.dec1_shape == 1 ? "S" : osc2.dec1_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.dec1_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
  //gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
  gfx_drawstr(osc2.dec2_shape == 0 ? "LIN" : osc2.dec2_shape == 1 ? "S" : osc2.dec2_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.dec2_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
  //gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
  gfx_drawstr(osc2.rel_shape == 0 ? "LIN" : osc2.rel_shape == 1 ? "S" : osc2.rel_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.rel_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 );
 
 gfx_x = gfx_osc1_attack_x = sgfx_x; gfx_y = gfx_osc1_attack_y = env_sgfx_y - 45*zoom - (gfx_env.attack / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_decay_x = sgfx_x + 35*zoom; gfx_y = gfx_osc1_decay_y = env_sgfx_y - 45*zoom - (gfx_env.decay*0.5 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_breakpoint_x = sgfx_x + 70*zoom; gfx_y = gfx_osc1_breakpoint_y = env_sgfx_y - 45*zoom - (gfx_env.breakpoint) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_decay2_x = sgfx_x + 105*zoom; gfx_y = gfx_osc1_decay2_y = env_sgfx_y - 45*zoom - (gfx_env.decay2*0.5 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_sustain_x = sgfx_x+ 140*zoom; gfx_y = gfx_osc1_sustain_y = env_sgfx_y - 45*zoom - (gfx_env.sustain) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_release_x = sgfx_x+ 175*zoom; gfx_y = gfx_osc1_release_y = env_sgfx_y - 45*zoom - (gfx_env.release*0.25 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 
 
 gfx_setimgdim(127,10000,10000);
 gfx_dest = 127;
 black(); gfx_rect(0,0,10000,10000);
 
 rgb(0,255,255);
 gfx_x = sgfx_x+1; gfx_y = env_sgfx_y + sgfx_h-1;
 tmp_loop = 0;
 tmp_wait = 0;
 gfx_env.stage = 1; gfx_env.follower = 0;
 while(
 
 gfx_env.stage_old != gfx_env.stage ? (
 gfx_env.stage == 1 ? rgb(255,255,0):
 gfx_env.stage == 2 ? rgb(255,120,255):
 gfx_env.stage == 3 ? (rgb(0,200,200); gfx_line(sgfx_x + tmp_loop-1, gfx_y, sgfx_x+tmp_loop-1,env_sgfx_y+sgfx_h); rgb(0,250,25)):
 gfx_env.stage == 4 ? rgb(255,200,0):
 gfx_env.stage == 5 ? rgb(255,120,120);
 );
 gfx_env.stage_old = gfx_env.stage;
 
 gfx_env.stage != 4 ? (
 gfx_env.new_complex_envelope(Env2.at_shape, Env2.dec1_shape, Env2.dec2_shape, Env2.rel_shape, Env2.at_coef, Env2.dec1_coef, Env2.dec2_coef, Env2.rel_coef);
 ):gfx_env.stage == 4 ? (
 tmp_wait >= env_seconds ? gfx_env.stage = 5;
 tmp_wait += 1;
 );
 
 gfx_lineto(sgfx_x + tmp_loop, env_sgfx_y + sgfx_h - gfx_env.real_level*19*sgfx_h/20); 
 tmp_loop += 1;
 
 gfx_env.envelope_stop == 0
 );
 gfx_env.envelope_stop = 0;
 
 
 osc2.scroll_w = env_sgfx_w * (env_sgfx_w / tmp_loop);
 osc2.scroll_offset = (env_sgfx_w / tmp_loop);
 //scroll = slider247;
 
 gfx_dest = -1;
 gfx_x=sgfx_x; gfx_y=env_sgfx_y;gfx_a=1;
 gfx_blit(127,1,0, sgfx_x + env_sgfx_w*(1/(osc2.scroll_offset))*(osc2.scroll-osc2.scroll_offset*osc2.scroll), env_sgfx_y, env_sgfx_w, sgfx_h);
 
 
 white(); gfx_roundrect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h, 0);
 
 
 g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) || osc2.gfx_seconds.dragging ? (
 lightgrey(); gfx_x = sgfx_x + env_sgfx_w -65*zoom; gfx_y = env_sgfx_y + 3*zoom; 
 gfx_drawstr("Zoom: "); gfx_drawnumber(osc2.gfx_seconds,1); gfx_drawstr("s"); 
 
 osc2.scroll_w < env_sgfx_w ? (
 gfx_osc1_scroll_x = sgfx_x + (env_sgfx_w-osc2.scroll_w)*osc2.scroll;
 gfx_osc1_scroll_y = env_sgfx_y + sgfx_h - 10*zoom;
 gfx_roundrect(gfx_osc1_scroll_x, gfx_osc1_scroll_y, osc2.scroll_w, 8*zoom, 4*zoom);
 gfx_roundrect(gfx_osc1_scroll_x + 2*zoom, env_sgfx_y + sgfx_h - 8*zoom, osc2.scroll_w-4*zoom, 4*zoom, 2*zoom);
 );
 );
 
  
  osc2.Volume.parameter_config (osc2.startslider,       7,        0,    10,  sgfx_x/zoom + 233,   sgfx_y/zoom +115, 120,    101,    1,   1);
  osc2.volume.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "LEVEL"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "0"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = " 2.5"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = " 5"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "10"; gfx_measurestr(#klabel, klw, klh); osc2.Volume.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  osc2.Pan.parameter_config (osc2.startslider+ 23,       0,        -100,    100,  sgfx_x/zoom + 333,   sgfx_y/zoom +115, 120,    101,    1,   osc2.unison ? 4 : 2);
  osc2.Pan.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        osc2.unison ? #klabel = "WIDTH" : #klabel = "PAN"; gfx_measurestr(#klabel, klw, klh); osc2.PAN.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "L "; gfx_measurestr(#klabel, klw, klh); osc2.PAN.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); osc2.PAN.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "C"; gfx_measurestr(#klabel, klw, klh); osc2.PAN.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); osc2.PAN.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = " R"; gfx_measurestr(#klabel, klw, klh); osc2.PAN.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
      
       
    gfx_setfont(1,"Arial",11*size,'b');
    black();
    gfx_x = sgfx_x + 220*zoom; gfx_y = sgfx_y + 200*zoom;
    gfx_rect(gfx_x, gfx_y, 60*zoom, 25*zoom);
    gfx_g = 1;
     gfx_drawstr("TRANSP.", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
     gfx_x = sgfx_x + 220*zoom; gfx_y += 8*zoom;
     gfx_drawstr(sprintf(#, "%i", osc2.transpose), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
     
    black();
    gfx_x = sgfx_x + 285*zoom; gfx_y = sgfx_y + 200*zoom;
    gfx_rect(gfx_x, gfx_y, 60, 25);
    gfx_g = 1;
     gfx_drawstr("FINE", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
     gfx_x = sgfx_x + 285*zoom; gfx_y += 8*zoom;
     gfx_drawstr(sprintf(#, "%i", osc2.finetune), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
     
     
    black();
    gfx_x = sgfx_x + 350*zoom; gfx_y = sgfx_y + 200*zoom;
    gfx_rect(gfx_x, gfx_y, 60, 25);
    osc2.sync ? (
    gfx_r = 1; gfx_g = gfx_b = 0.35;
     gfx_drawstr("PITCHW.", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
     gfx_x = sgfx_x + 350*zoom; gfx_y += 8*zoom;
     osc2.sync == 1 ? #tmp_str = "OSC 1&2" :
     osc2.sync == 2 ? #tmp_str = "OSC 1" : #tmp_str = "OSC 2";
     gfx_drawstr(#tmp_str, 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
    ):(
    gfx_g = 1;
     gfx_drawstr("PITCHW.", 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy - 6*zoom);
     gfx_x = sgfx_x + 350*zoom; gfx_y += 8*zoom;
     gfx_drawstr(sprintf(#, "%i", osc2.pitchamount), 0x05, gfx_x+60*zoom, gfx_y + sgfx_dy);
    );
    
    gfx_x = sgfx_x + 150*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
    Black();
    gfx_rect(sgfx_x + 150*zoom, env_sgfx_y + sgfx_h + 5*zoom, 100*zoom, 17*zoom);
    osc2.sync ? (
    gfx_r = 1; gfx_g = gfx_b = 0.35; 
    gfx_drawstr("SYNCED TO OSC 1", 0x05, gfx_x+100*zoom, gfx_y + 17);
    ):(
    lightgrey();
    gfx_drawstr("SYNC TO OSC 1", 0x05, gfx_x+100*zoom, gfx_y + 17);
    );
    
    gfx_x = sgfx_x + 270*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
    Black();
    gfx_rect(sgfx_x + 270*zoom, env_sgfx_y + sgfx_h + 5*zoom, 100*zoom, 17*zoom);
    osc2.unison ? (
    gfx_g = 1; gfx_r = gfx_b = 0.35; 
    gfx_drawstr("FAT MODE: ON", 0x05, gfx_x+100*zoom, gfx_y + 17);
    ):(
    lightgrey();
    gfx_drawstr("FAT MODE: OFF", 0x05, gfx_x+100*zoom, gfx_y + 17);
    );
    
    black();
    gfx_setfont(2,"Arial",16*zoom,'b'); 
    gfx_x = sgfx_x + 5*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
    gfx_drawstr("OSCILLATOR 2");
    gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom,0);
    gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 422*zoom, 364*zoom,0);


    !Number_input ? (
    
    mouse_cap == 2 ? (
    g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? osc2.at_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? osc2.dec1_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? osc2.dec2_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? osc2.rel_shape = selection - 1;
    selection = 0; caller = 1;
    );
    
    );
    
    mouseClick == 1 ? (
       
        g_collision(nsgfx_x + sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_sine_level.dragstart();
        g_collision(nsgfx_x + sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_sine_Octave.dragstart();
        g_collision(nsgfx_x + sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_sine_factor.dragstart();
        g_collision(nsgfx_x + sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
        selection ? slider(osc2.startslider+3) = selection - 1;
        selection = 0; caller = 1;
        );
             
        g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_triangle_level.dragstart();
        g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_triangle_Octave.dragstart();
        g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_triangle_factor.dragstart();
        g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
        selection ? slider(osc2.startslider+7) = selection - 1;
        selection = 0; caller = 1;
        );
        
        g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_level.dragstart();
        g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_Octave.dragstart();
        g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_factor.dragstart();
        g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
        selection ? slider(osc2.startslider+11) = selection - 1;
        selection = 0; caller = 1;
        );
        
        g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_alt_level.dragstart();
        g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_alt_Octave.dragstart();
        g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_saw_alt_factor.dragstart();
        g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 3*sgfx_dy, sgfx_d, sgfx_dy) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
        selection ? slider(osc2.startslider+15) = selection - 1;
        selection = 0; caller = 1;
        );
        
        g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_Square_level.dragstart();
        g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 2*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_Square_Octave.dragstart();
        g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy) ? osc2.gfx_Square_PWM.dragstart();
        
        g_collision(gfx_osc1_attack_x, gfx_osc1_attack_y, 33*zoom, 15* zoom) ? osc2.gfx_attack.v_dragstart();
        g_collision(gfx_osc1_decay_x, gfx_osc1_decay_y, 33*zoom, 15* zoom) ? osc2.gfx_decay.v_dragstart();
        g_collision(gfx_osc1_breakpoint_x, gfx_osc1_breakpoint_y, 33*zoom, 15* zoom) ? osc2.gfx_breakpoint.v_dragstart();
        g_collision(gfx_osc1_decay2_x, gfx_osc1_decay2_y, 33*zoom, 15* zoom) ? osc2.gfx_decay2.v_dragstart();
        g_collision(gfx_osc1_sustain_x, gfx_osc1_sustain_y, 33*zoom, 15* zoom) ? osc2.gfx_sustain.v_dragstart();
        g_collision(gfx_osc1_release_x, gfx_osc1_release_y, 33*zoom, 15* zoom) ? osc2.gfx_release.v_dragstart();
        
        g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) ? (
           g_collision(sgfx_x + env_sgfx_w -65*zoom, env_sgfx_y + 3*zoom,65*zoom, 14*zoom) ? 
             osc2.gfx_seconds.dummy_dragstart(5, 0.5, 15);
             
           g_collision(gfx_osc1_scroll_x, gfx_osc1_scroll_y, osc2.scroll_w, 8*zoom) && osc2.scroll_w < env_sgfx_w ? 
             osc2.scroll.dummy_h_dragstart(0, 0, 1);
         );
        
        
        g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc2.at_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc2.dec1_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc2.dec2_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? osc2.rel_coef.dummy_dragstart(0, -10, 10);
        
        osc2.Volume.k_collision() ? osc2.Volume.dragstart();
        osc2.pan.k_collision() ? osc2.pan.dragstart();
        
        g_collision(sgfx_x + 220*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? osc2.gfx_transpose.dragstart();
        g_collision(sgfx_x + 285*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? osc2.gfx_finetune.dragstart();
        
        
        g_collision(sgfx_x + 150*zoom, env_sgfx_y + sgfx_h + 5*zoom, 90*zoom, 17*zoom) || g_collision(sgfx_x + 350*zoom, sgfx_y + 200*zoom, 60*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("NO SYNC|SYNC PITCH BOTH|SYNC PITCH OSC 1|SYNC PITCH OSC 2");
        selection ? slider(osc2.startslider+24) = selection - 1;
        selection = 0; caller = 1;
        );
        
        g_collision(sgfx_x + 270*zoom, env_sgfx_y + sgfx_h + 5*zoom, 100*zoom, 17*zoom) ? (osc2.unison == 0 ? osc2.unison = 1 : osc2.unison = 0; caller = 1);
        ); // click
   
   mouseclick == -1 ? (
   osc2.gfx_sine_level.dragstop();
   osc2.gfx_sine_octave.dragstop();
   osc2.gfx_sine_factor.dragstop();
   osc2.gfx_triangle_level.dragstop();
   osc2.gfx_triangle_octave.dragstop();
   osc2.gfx_triangle_factor.dragstop();
   osc2.gfx_saw_level.dragstop();
   osc2.gfx_saw_octave.dragstop();
   osc2.gfx_saw_factor.dragstop();
   osc2.gfx_saw_alt_level.dragstop();
   osc2.gfx_saw_alt_octave.dragstop();
   osc2.gfx_saw_alt_factor.dragstop();
   osc2.gfx_Square_level.dragstop();
   osc2.gfx_Square_octave.dragstop();
   osc2.gfx_Square_PWM.dragstop();
   osc2.gfx_attack.dragstop();
   osc2.gfx_decay.dragstop();
   osc2.gfx_breakpoint.dragstop();
   osc2.gfx_decay2.dragstop();
   osc2.gfx_sustain.dragstop();
   osc2.gfx_release.dragstop();
   
   osc2.gfx_seconds.dummy_dragstop();
   osc2.scroll.dummy_dragstop();
   
   osc2.at_coef.dummy_dragstop();
   osc2.dec1_coef.dummy_dragstop();
   osc2.dec2_coef.dummy_dragstop();
   osc2.rel_coef.dummy_dragstop();
   
   osc2.Volume.dragstop();
   osc2.pan.dragstop();
   
   osc2.gfx_transpose.dragstop();
   osc2.gfx_finetune.dragstop();
   
   );
   
   mouse_wheel ? 
       (
           g_collision(nsgfx_x + sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_sine_level.potwheel(); caller = 1);
           g_collision(nsgfx_x + sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_sine_factor.potwheel(); caller = 1);
           
           g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_triangle_level.potwheel(); caller = 1);
           g_collision(nsgfx_x + 2*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_triangle_factor.potwheel(); caller = 1);
           
           g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_saw_level.potwheel(); caller = 1);
           g_collision(nsgfx_x + 3*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_saw_factor.potwheel(); caller = 1);
           
           g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_saw_alt_level.potwheel(); caller = 1);
           g_collision(nsgfx_x + 4*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_saw_alt_factor.potwheel(); caller = 1);
           
           g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_Square_level.potwheel(); caller = 1);
           g_collision(nsgfx_x + 5*sgfx_d, sgfx_y + 4*sgfx_dy, sgfx_d, sgfx_dy)  ? (osc2.gfx_Square_PWM.potwheel(); caller = 1);
       
           osc2.Volume.k_collision() ? (osc2.Volume.potwheel(); caller = 1);
           osc2.pan.k_collision() ? (osc2.pan.potwheel(); caller = 1);
           
       );
       
   osc2.gfx_sine_level.dragging ?  (osc2.gfx_sine_level.potdrag(); caller = 1);
   osc2.gfx_sine_octave.dragging ?  (osc2.gfx_sine_octave.potdrag_integer(); caller = 1);
   osc2.gfx_sine_factor.dragging ?  (osc2.gfx_sine_factor.potdrag(); caller = 1);
   osc2.gfx_triangle_level.dragging ?  (osc2.gfx_triangle_level.potdrag(); caller = 1);
   osc2.gfx_triangle_octave.dragging ?  (osc2.gfx_triangle_octave.potdrag_integer(); caller = 1);
   osc2.gfx_triangle_factor.dragging ?  (osc2.gfx_triangle_factor.potdrag(); caller = 1);
   osc2.gfx_saw_level.dragging ?  (osc2.gfx_saw_level.potdrag(); caller = 1);
   osc2.gfx_saw_octave.dragging ?  (osc2.gfx_saw_octave.potdrag_integer(); caller = 1);
   osc2.gfx_saw_factor.dragging ?  (osc2.gfx_saw_factor.potdrag(); caller = 1);
   osc2.gfx_saw_alt_level.dragging ?  (osc2.gfx_saw_alt_level.potdrag(); caller = 1);
   osc2.gfx_saw_alt_octave.dragging ?  (osc2.gfx_saw_alt_octave.potdrag_integer(); caller = 1);
   osc2.gfx_saw_alt_factor.dragging ?  (osc2.gfx_saw_alt_factor.potdrag(); caller = 1);
   osc2.gfx_Square_level.dragging ?  (osc2.gfx_Square_level.potdrag(); caller = 1);
   osc2.gfx_Square_octave.dragging ?  (osc2.gfx_Square_octave.potdrag_integer(); caller = 1);
   osc2.gfx_Square_PWM.dragging ?  (osc2.gfx_Square_PWM.potdrag(); caller = 1);
   osc2.gfx_attack.v_dragging ? (osc2.gfx_attack.v_potdrag(sgfx_h*0.75); caller = 1);
   osc2.gfx_decay.v_dragging ? (osc2.gfx_decay.v_potdrag(sgfx_h*0.75); caller = 1);
   osc2.gfx_breakpoint.v_dragging ? (osc2.gfx_breakpoint.v_potdrag(sgfx_h*0.75); caller = 1);
   osc2.gfx_decay2.v_dragging ? (osc2.gfx_decay2.v_potdrag(sgfx_h*0.75); caller = 1);
   osc2.gfx_sustain.v_dragging ? (osc2.gfx_sustain.v_potdrag(sgfx_h*0.75); caller = 1);
   osc2.gfx_release.v_dragging ? (osc2.gfx_release.v_potdrag(sgfx_h*0.75); caller = 1);
   
   osc2.gfx_seconds.dragging ? (osc2.gfx_seconds.dummy_potdrag(); caller = 1);
   osc2.scroll.h_dragging ? (osc2.scroll.dummy_h_potdrag(env_sgfx_w-osc2.scroll_w); caller = 1);
   
   osc2.at_coef.dragging ? (osc2.at_coef.dummy_potdrag(); caller = 1);
   osc2.dec1_coef.dragging ? (osc2.dec1_coef.dummy_potdrag(); caller = 1);
   osc2.dec2_coef.dragging ? (osc2.dec2_coef.dummy_potdrag(); caller = 1);
   osc2.rel_coef.dragging ? (osc2.rel_coef.dummy_potdrag(); caller = 1);
   
   osc2.Volume.dragging ? (osc2.Volume.potdrag(); caller = 1);
   osc2.pan.dragging ? (osc2.pan.potdrag(); caller = 1);
   
   osc2.gfx_transpose.dragging ? (osc2.gfx_transpose.potdrag_integer(); caller = 1);
   osc2.gfx_finetune.dragging ?  (osc2.gfx_finetune.potdrag_integer(); caller = 1);
   
   );//number input
 
 
 
  ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
  osc2.gfx_sine_level.parameter_config      (osc2.startslider+1,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_sine_octave.parameter_config     (osc2.startslider+2,       1,        1,     8,  0, 0, 0,  0,  0,  0);
  osc2.gfx_sine_factor.parameter_config     (osc2.startslider+4,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_triangle_level.parameter_config  (osc2.startslider+5,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_triangle_octave.parameter_config (osc2.startslider+6,       1,        1,     8,  0, 0, 0,  0,  0,  0);
  osc2.gfx_triangle_factor.parameter_config (osc2.startslider+8,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_level.parameter_config       (osc2.startslider+9,       0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_octave.parameter_config      (osc2.startslider+10,      1,        1,     8,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_factor.parameter_config      (osc2.startslider+12,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_ALT_level.parameter_config   (osc2.startslider+13,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_ALT_octave.parameter_config  (osc2.startslider+14,      1,        1,     8,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SAW_ALT_factor.parameter_config  (osc2.startslider+16,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SQUARE_level.parameter_config    (osc2.startslider+17,      0,      -10,    10,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SQUARE_octave.parameter_config   (osc2.startslider+18,      1,        1,     8,  0, 0, 0,  0,  0,  0);
  osc2.gfx_SQUARE_PWM.parameter_config      (osc2.startslider+19,      5,      0,    10,  0, 0, 0,  0,  0,  0);
  
  osc2.gfx_attack.parameter_config          (Env2.startslider,       150,      0,  1000,  0, 0, 0, 0, 0, 0);
  osc2.gfx_decay.parameter_config           (Env2.startslider+1,     200,      0,  2000,  0, 0, 0, 0, 0, 0);
  osc2.gfx_breakpoint.parameter_config      (Env2.startslider+2,       4,      0,    10,  0, 0, 0, 0, 0, 0);
  osc2.gfx_decay2.parameter_config          (Env2.startslider+3,     300,      0,  2000,  0, 0, 0, 0, 0, 0);
  osc2.gfx_sustain.parameter_config         (Env2.startslider+4,       8,      0,    10,  0, 0, 0, 0, 0, 0);
  osc2.gfx_release.parameter_config         (Env2.startslider+5,     150,      0,  4000,  0, 0, 0, 0, 0, 0);
  
  osc2.gfx_transpose.parameter_config       (Osc2.startslider+20,      0,    -36,    36,  0, 0, 0, 0, 0, 0);
  osc2.gfx_finetune.parameter_config        (Osc2.startslider+21,      0,   -100,   100,  0, 0, 0, 0, 0, 0);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  sgfx_y = sgfx_y + 378*zoom;
  
  black();
  gfx_rect(sgfx_x, sgfx_y, sgfx_w, sgfx_h);
  white();
  gfx_a = 0.6; gfx_line(sgfx_x, sgfx_y + sgfx_h / 2, sgfx_x + sgfx_w, sgfx_y + sgfx_h / 2); gfx_a = 1;
  
  gfx_x = sgfx_x; gfx_y = sgfx_y + sgfx_h/2;
  
  rgb(80,255,80);
  tmp_loop = 0;
  loop(sgfx_w,
  
  m = gfx_filter.filter.svf_magnitude(per_to_freq(100*tmp_loop/sgfx_w,100));
  // Prevent magnitude from blowing up
  transfer < 0.001 ? transfer = 0.001;
  
  // Convert from scalar to db
  m = 20 * log10(m);
  
  m = 1.0 - (((m / 32) / 2) + 0.5);
  //TOP_MARGIN+(m * (gfx_h - (gfx_texth*2) - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM)));
  m= m*sgfx_h;
  
  gfx_lineto(sgfx_x + tmp_loop, min(sgfx_y+sgfx_h, max(sgfx_y, sgfx_y + m)));
  tmp_loop += 1;
  );
  white(); gfx_roundrect(sgfx_x, sgfx_y, sgfx_w, sgfx_h, 0);
  
  gfx_setfont(1,"Arial",11*size,'b');
  
  
  
  gfx_filter.Freq.parameter_config (synth.filter.startslider,       100,        0,    100,  sgfx_x/zoom + 233,   sgfx_y/zoom +18, 120,    101,    1,   1);
  gfx_filter.Freq.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "0"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = "70"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "475"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "3.6"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "22k"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Freq.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  gfx_filter.Resonance.parameter_config (synth.filter.startslider+1,       0,        0,    10,  sgfx_x/zoom + 328,   sgfx_y/zoom +18, 120,    101,    1,   1);
  gfx_filter.Resonance.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "RESONANCE"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.knoblabelposition_scaled(klw); gfx_x -= 5*zoom;gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "LO"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "MED"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "HI"; gfx_measurestr(#klabel, klw, klh); gfx_filter.Resonance.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  
  gfx_setfont(1,"Arial",11*size,'b');
  black();
  gfx_x = sgfx_x + 230*zoom; gfx_y = sgfx_y + 200*zoom;
  gfx_rect(gfx_x, gfx_y, 75*zoom, 25*zoom);
  gfx_g = 1;
   gfx_drawstr("FILTER TYPE", 0x05, gfx_x+75*zoom, gfx_y + sgfx_dy - 6*zoom);
   gfx_x = sgfx_x + 230*zoom; gfx_y += 8*zoom;
   synth.filter_type == 5 ? (
      #tmp_str = "LPF ";
      synth.filter_slope == 1 ? #tmp_str += "12":
      synth.filter_slope == 3 ? #tmp_str += "24":
      synth.filter_slope == 6 ? #tmp_str += "48";
   ):synth.filter_type == 8 ? (
      #tmp_str = "BANDPASS";
   );
   gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + sgfx_dy);
   
  black();
  gfx_x = sgfx_x + 320*zoom; gfx_y = sgfx_y + 200*zoom;
  gfx_rect(gfx_x, gfx_y, 75, 25);
  gfx_g = 1;
   gfx_drawstr("KEY FOLLOW", 0x05, gfx_x+75*zoom, gfx_y + sgfx_dy - 6*zoom);
   gfx_x = sgfx_x + 320*zoom; gfx_y += 8*zoom;
   synth.keyfollow == 0 ? #tmp_str = "OFF" :
   synth.keyfollow == 0.5 ? #tmp_str = "HALF" :
   synth.keyfollow == 1 ? #tmp_str = "FULL";
   gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + sgfx_dy);
   
   
  
  
  
  
  
  
  
  env_sgfx_y = sgfx_y + 2* sgfx_h + 3*sgfx_w/20;
  env_sgfx_w = 41*sgfx_w/20;
  black();
  gfx_rect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h);
  
  
  env_seconds = env_sgfx_w / synth.filter.gfx_seconds; //letzte Zahl sind Sekunden
  gfx_env.attack = env_seconds* env5.attack / srate;
  gfx_env.decay = env_seconds* env5.decay / srate;
  gfx_env.breakpoint = env5.breakpoint;
  gfx_env.decay2 = env_seconds* env5.decay2 / srate;
  gfx_env.sustain = env5.sustain;
  gfx_env.release = env_seconds* env5.release / srate;
  
  gfx_rect(sgfx_x + 15*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 50*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 85*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 120*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 155*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 190*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  
  gfx_rect(sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom);
  env_sgfx_d = 210*zoom/6; 
  
  !g_collision (sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom) && !env5.at_coef.dragging && !env5.dec1_coef.dragging && !env5.dec2_coef.dragging && !env5.rel_coef.dragging ? (
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
   gfx_drawstr("ATK", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.attack/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
   gfx_drawstr("DEC", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
   gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
   gfx_drawstr("SLP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay2/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
   gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
   gfx_drawstr("REL", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.release/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  ):(
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
   gfx_drawstr(env5.at_shape == 0 ? "LIN" : env5.at_shape == 1 ? "S" : env5.at_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env5.at_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
   gfx_drawstr(env5.dec1_shape == 0 ? "LIN" : env5.dec1_shape == 1 ? "S" : env5.dec1_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env5.dec1_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
   //gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
   gfx_drawstr(env5.dec2_shape == 0 ? "LIN" : env5.dec2_shape == 1 ? "S" : env5.dec2_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env5.dec2_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
   //gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
   gfx_drawstr(env5.rel_shape == 0 ? "LIN" : env5.rel_shape == 1 ? "S" : env5.rel_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env5.rel_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  );
  
  gfx_x = gfx_synth.filter_attack_x = sgfx_x; gfx_y = gfx_synth.filter_attack_y = env_sgfx_y - 45*zoom - (gfx_env.attack / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_synth.filter_decay_x = sgfx_x + 35*zoom; gfx_y = gfx_synth.filter_decay_y = env_sgfx_y - 45*zoom - (gfx_env.decay*0.5 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_synth.filter_breakpoint_x = sgfx_x + 70*zoom; gfx_y = gfx_synth.filter_breakpoint_y = env_sgfx_y - 45*zoom - (gfx_env.breakpoint) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_synth.filter_decay2_x = sgfx_x + 105*zoom; gfx_y = gfx_synth.filter_decay2_y = env_sgfx_y - 45*zoom - (gfx_env.decay2*0.5 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_synth.filter_sustain_x = sgfx_x+ 140*zoom; gfx_y = gfx_synth.filter_sustain_y = env_sgfx_y - 45*zoom - (gfx_env.sustain) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_synth.filter_release_x = sgfx_x+ 175*zoom; gfx_y = gfx_synth.filter_release_y = env_sgfx_y - 45*zoom - (gfx_env.release*0.25 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  
  
  gfx_setimgdim(127,10000,10000);
  gfx_dest = 127;
  black(); gfx_rect(0,0,10000,10000);
  
  rgb(0,255,255);
  gfx_x = sgfx_x+1; gfx_y = env_sgfx_y + sgfx_h-1;
  tmp_loop = 0;
  tmp_wait = 0;
  gfx_env.stage = 1; gfx_env.follower = 0;
  while(
  
  gfx_env.stage_old != gfx_env.stage ? (
  gfx_env.stage == 1 ? rgb(255,255,0):
  gfx_env.stage == 2 ? rgb(255,120,255):
  gfx_env.stage == 3 ? (rgb(0,200,200); gfx_line(sgfx_x + tmp_loop-1, gfx_y, sgfx_x+tmp_loop-1,env_sgfx_y+sgfx_h); rgb(0,250,25)):
  gfx_env.stage == 4 ? rgb(255,200,0):
  gfx_env.stage == 5 ? rgb(255,120,120);
  );
  gfx_env.stage_old = gfx_env.stage;
  
  gfx_env.stage != 4 ? (
  gfx_env.new_complex_envelope(env5.at_shape, env5.dec1_shape, env5.dec2_shape, env5.rel_shape, env5.at_coef, env5.dec1_coef, env5.dec2_coef, env5.rel_coef);
  ):gfx_env.stage == 4 ? (
  tmp_wait >= env_seconds ? gfx_env.stage = 5;
  tmp_wait += 1;
  );
  
  gfx_lineto(sgfx_x + tmp_loop, env_sgfx_y + sgfx_h - gfx_env.real_level*19*sgfx_h/20); 
  tmp_loop += 1;
  
  gfx_env.envelope_stop == 0
  );
  gfx_env.envelope_stop = 0;
  
  
  synth.filter.scroll_w = env_sgfx_w * (env_sgfx_w / tmp_loop);
  synth.filter.scroll_offset = (env_sgfx_w / tmp_loop);
  //scroll = slider247;
  
  gfx_dest = -1;
  gfx_x=sgfx_x; gfx_y=env_sgfx_y;gfx_a=1;
  gfx_blit(127,1,0, sgfx_x + env_sgfx_w*(1/(synth.filter.scroll_offset))*(synth.filter.scroll-synth.filter.scroll_offset*synth.filter.scroll), env_sgfx_y, env_sgfx_w, sgfx_h);
  
  
  white(); gfx_roundrect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h, 0);
  
  
  g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) || synth.filter.gfx_seconds.dragging ? (
  lightgrey(); gfx_x = sgfx_x + env_sgfx_w -65*zoom; gfx_y = env_sgfx_y + 3*zoom; 
  gfx_drawstr("Zoom: "); gfx_drawnumber(synth.filter.gfx_seconds,1); gfx_drawstr("s"); 
  
  synth.filter.scroll_w < env_sgfx_w ? (
  gfx_synth.filter_scroll_x = sgfx_x + (env_sgfx_w-synth.filter.scroll_w)*synth.filter.scroll;
  gfx_synth.filter_scroll_y = env_sgfx_y + sgfx_h - 10*zoom;
  gfx_roundrect(gfx_synth.filter_scroll_x, gfx_synth.filter_scroll_y, synth.filter.scroll_w, 8*zoom, 4*zoom);
  gfx_roundrect(gfx_synth.filter_scroll_x + 2*zoom, env_sgfx_y + sgfx_h - 8*zoom, synth.filter.scroll_w-4*zoom, 4*zoom, 2*zoom);
  );
  );
  
  
  black();
  gfx_setfont(2,"Arial",16*zoom,'b'); 
  gfx_x = sgfx_x + 5*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
  gfx_drawstr("FILTER (VCF)");
  gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom,0);
  gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 422*zoom, 364*zoom,0);
  
  
  
  
  
  gfx_filter.VCF_ENV.parameter_config (synth.filter.startslider+6,       0,        -100,    100,  sgfx_x/zoom + 233,   sgfx_y/zoom +115, 120,    101,    1,   1);
  gfx_filter.VCF_ENV.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "VCF_ENV"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "-100"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = "-50"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "± 0"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "50"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "100"; gfx_measurestr(#klabel, klw, klh); gfx_filter.VCF_ENV.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  
  
  
  anykey(sgfx_x + 339 * zoom, sgfx_y + 125*zoom, VCF_ON, "ON"); //40x40px

  
  
  
  
  
  
    !Number_input ? (
    
    mouse_cap == 2 ? (
    g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? synth.filter.at_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? synth.filter.dec1_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? synth.filter.dec2_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? synth.filter.rel_shape = selection - 1;
    selection = 0; caller = 1;
    );
    
    );
    
    mouseClick == 1 ? (
    
       g_collision(gfx_synth.filter_attack_x, gfx_synth.filter_attack_y, 33*zoom, 15* zoom) ? env5.gfx_attack.v_dragstart();
       g_collision(gfx_synth.filter_decay_x, gfx_synth.filter_decay_y, 33*zoom, 15* zoom) ? env5.gfx_decay.v_dragstart();
       g_collision(gfx_synth.filter_breakpoint_x, gfx_synth.filter_breakpoint_y, 33*zoom, 15* zoom) ? env5.gfx_breakpoint.v_dragstart();
       g_collision(gfx_synth.filter_decay2_x, gfx_synth.filter_decay2_y, 33*zoom, 15* zoom) ? env5.gfx_decay2.v_dragstart();
       g_collision(gfx_synth.filter_sustain_x, gfx_synth.filter_sustain_y, 33*zoom, 15* zoom) ? env5.gfx_sustain.v_dragstart();
       g_collision(gfx_synth.filter_release_x, gfx_synth.filter_release_y, 33*zoom, 15* zoom) ? env5.gfx_release.v_dragstart();
       
        
        
        g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? synth.filter.at_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? synth.filter.dec1_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? synth.filter.dec2_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? synth.filter.rel_coef.dummy_dragstart(0, -10, 10);
        
        gfx_filter.Freq.K_Collision() ? gfx_filter.Freq.dragstart();
        gfx_filter.Resonance.K_Collision() ? gfx_filter.Resonance.dragstart();
        gfx_filter.VCF_ENV.K_Collision() ? gfx_filter.VCF_ENV.dragstart();
        
        g_collision(sgfx_x + 230*zoom, sgfx_y + 200*zoom, 75*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LPF 12|LPF 24|LPF 48|BP");
        selection ? (
        selection == 1 ? (slider(synth.filter.startslider + 2) = 0; slider(synth.filter.startslider + 3) = 1); 
        selection == 2 ? (slider(synth.filter.startslider + 2) = 1; slider(synth.filter.startslider + 3) = 1); 
        selection == 3 ? (slider(synth.filter.startslider + 2) = 2; slider(synth.filter.startslider + 3) = 1); 
        selection == 4 ? (slider(synth.filter.startslider + 3) = 0); 
        selection = 0; caller = 1;
        );
        );

        g_collision(sgfx_x + 320*zoom, sgfx_y + 200*zoom, 75*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("OFF|HALF|FULL");
        selection ? (
        selection == 1 ? (slider(synth.filter.startslider + 4) = 0);
        selection == 2 ? (slider(synth.filter.startslider + 4) = .5);
        selection == 3 ? (slider(synth.filter.startslider + 4) = 1); 
        selection = 0; caller = 1;
        );
        );
        
        g_collision(sgfx_x + 339 * zoom, sgfx_y + 125*zoom, 40*zoom, 40*zoom) ? (slider(synth.filter.startslider + 5) == 0 ? slider(synth.filter.startslider + 5) = 1 : slider(synth.filter.startslider + 5) = 0; caller = 1);
    
    g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) ? (
       g_collision(sgfx_x + env_sgfx_w -65*zoom, env_sgfx_y + 3*zoom,65*zoom, 14*zoom) ? 
         synth.filter.gfx_seconds.dummy_dragstart(5, 0.5, 15);
     );
     
        g_collision(gfx_synth.filter_scroll_x, gfx_synth.filter_scroll_y, synth.filter.scroll_w, 8*zoom) && synth.filter.scroll_w < env_sgfx_w ? 
          synth.filter.scroll.dummy_h_dragstart(0, 0, 1);
    ); // click
   
   mouseclick == -1 ? (
  
   env5.gfx_attack.dragstop();
   env5.gfx_decay.dragstop();
   env5.gfx_breakpoint.dragstop();
   env5.gfx_decay2.dragstop();
   env5.gfx_sustain.dragstop();
   env5.gfx_release.dragstop();
   
   synth.filter.gfx_seconds.dummy_dragstop();
   synth.filter.scroll.dummy_dragstop();
   
   synth.filter.at_coef.dummy_dragstop();
   synth.filter.dec1_coef.dummy_dragstop();
   synth.filter.dec2_coef.dummy_dragstop();
   synth.filter.rel_coef.dummy_dragstop();
  
   gfx_filter.Freq.dragstop();
   gfx_filter.resonance.dragstop();
   gfx_filter.vcf_env.dragstop();
   
   );
   
   mouse_wheel ? 
       (
           gfx_filter.Freq.K_Collision() ? (gfx_filter.Freq.potwheel(); caller = 1);
           gfx_filter.Resonance.K_Collision() ? (gfx_filter.Resonance.potwheel(); caller = 1);
           gfx_filter.VCF_ENV.K_Collision() ? (gfx_filter.VCF_ENV.potwheel(); caller = 1);
       );
       
  
   env5.gfx_attack.v_dragging ? (env5.gfx_attack.v_potdrag(sgfx_h*0.75); caller = 1);
   env5.gfx_decay.v_dragging ? (env5.gfx_decay.v_potdrag(sgfx_h*0.75); caller = 1);
   env5.gfx_breakpoint.v_dragging ? (env5.gfx_breakpoint.v_potdrag(sgfx_h*0.75); caller = 1);
   env5.gfx_decay2.v_dragging ? (env5.gfx_decay2.v_potdrag(sgfx_h*0.75); caller = 1);
   env5.gfx_sustain.v_dragging ? (env5.gfx_sustain.v_potdrag(sgfx_h*0.75); caller = 1);
   env5.gfx_release.v_dragging ? (env5.gfx_release.v_potdrag(sgfx_h*0.75); caller = 1);
   
   synth.filter.gfx_seconds.dragging ? (synth.filter.gfx_seconds.dummy_potdrag(); caller = 1);
   synth.filter.scroll.h_dragging ? (synth.filter.scroll.dummy_h_potdrag(env_sgfx_w-synth.filter.scroll_w); caller = 1);
   
   synth.filter.at_coef.dragging ? (synth.filter.at_coef.dummy_potdrag(); caller = 1);
   synth.filter.dec1_coef.dragging ? (synth.filter.dec1_coef.dummy_potdrag(); caller = 1);
   synth.filter.dec2_coef.dragging ? (synth.filter.dec2_coef.dummy_potdrag(); caller = 1);
   synth.filter.rel_coef.dragging ? (synth.filter.rel_coef.dummy_potdrag(); caller = 1);
   
   gfx_filter.Freq.dragging ? (gfx_filter.Freq.potdrag(); caller = 1);
   gfx_filter.Resonance.dragging ? (gfx_filter.Resonance.potdrag(); caller = 1);
   gfx_filter.vcf_env.dragging ? (gfx_filter.vcf_env.potdrag(); caller = 1);
   
   
   
      synth.filter.scroll.h_dragging ? (synth.filter.scroll.dummy_h_potdrag(env_sgfx_w-synth.filter.scroll_w); caller = 1);
   );//number input
  
  
  
  
  ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
  
  env5.gfx_attack.parameter_config          (Env5.startslider,       150,      0,  1000,  0, 0, 0, 0, 0, 0);
  env5.gfx_decay.parameter_config           (Env5.startslider+1,     200,      0,  2000,  0, 0, 0, 0, 0, 0);
  env5.gfx_breakpoint.parameter_config      (Env5.startslider+2,       4,      0,    10,  0, 0, 0, 0, 0, 0);
  env5.gfx_decay2.parameter_config          (Env5.startslider+3,     300,      0,  2000,  0, 0, 0, 0, 0, 0);
  env5.gfx_sustain.parameter_config         (Env5.startslider+4,       8,      0,    10,  0, 0, 0, 0, 0, 0);
  env5.gfx_release.parameter_config         (Env5.startslider+5,     150,      0,  4000,  0, 0, 0, 0, 0, 0);
  
  
  
  
  
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 function pick_name() (
    this == 0 ? #tmp_str = "OFF" :
    this == 1 ? #tmp_str = "ON" :
    this == 2 ? #tmp_str = "MOD WHL" :
    this == 3 ? #tmp_str = "AFTERT." :
    this == 4 ? #tmp_str = "CV 1" :
    this == 5 ? #tmp_str = "CV 2" :
    this == 6 ? #tmp_str = "CV 3" :
    this == 7 ? #tmp_str = "CV 4" :
    this == 8 ? #tmp_str = "CV 5" :
    this == 9 ? #tmp_str = "CV 6" :
    this == 10 ? #tmp_str = "CV 7" :
    this == 11 ? #tmp_str = "CV 8" :
    this == 12 ? #tmp_str = "CV 9" :
    this == 13 ? #tmp_str = "CV 10" ;
 );
 
 function pick_controller() (
    gfx_x = mouse_x; gfx_y = mouse_y;
    selection = gfx_showmenu("OFF|ON|MOD WHEEL|AFTERTOUCH|CV 1|CV 2|CV 3|CV 4|CV 5|CV 6|CV 7|CV 8|CV 9|CV 10");
    selection ? (this = selection-1; selection = 0);
 );
 
 
 
 
 
 
 
 
 function draw_LFO_field () (
 
 black();
 gfx_setfont(2,"Arial",16*zoom,'b'); 
 gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 83*zoom,0);
 gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 422*zoom, 85*zoom,0);
 
 gfx_rect(sgfx_x, sgfx_y, 75*zoom, 73*zoom);
 gfx_setfont(2,"Arial",11*zoom,'b');
 
 gfx_x = sgfx_x; gfx_y = sgfx_y+2*zoom;
 this.form == 0 ? rgb(80,255,80) : lightgrey();
 this.CV_Select.pick_name();
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 gfx_x = sgfx_x; gfx_y = sgfx_y+12*zoom;
 this.form == 1 ? rgb(80,255,80) : lightgrey();
 gfx_drawstr("SINE", 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 gfx_x = sgfx_x; gfx_y = sgfx_y+24*zoom;
 this.form == 2 ? rgb(80,255,80) : lightgrey();
 gfx_drawstr("SQUARE", 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 gfx_x = sgfx_x; gfx_y = sgfx_y+36*zoom;
 this.form == 3 ? rgb(80,255,80) : lightgrey();
 gfx_drawstr("SAW UP", 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 gfx_x = sgfx_x; gfx_y = sgfx_y+48*zoom;
 this.form == 4 ? rgb(80,255,80) : lightgrey();
 gfx_drawstr("SAW DOWN", 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 gfx_x = sgfx_x; gfx_y = sgfx_y+60*zoom;
 this.form == 5 ? rgb(80,255,80) : lightgrey();
 gfx_drawstr("TRI", 0x05, gfx_x+75*zoom, gfx_y + 12*zoom);
 
 
 black();
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y-1;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("RATE x10", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 11*zoom;
 this.multiplier > 2 ? (rgb(80,255,80); #tmp_str = "ON"):(lightgrey();#tmp_str = "OFF");
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 black();
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 26;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("DELAY", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 rgb(80,255,80);
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 26 + 12*zoom;
 this.delay >= 0 ? (
 #tmp_str = sprintf(#, "%i", this.delay);
 ):this.delay == -1 ? (
 #tmp_str = "1 BAR";
 ):this.delay == -2 ? (
 #tmp_str = "1/2";
 ):this.delay == -3 ? (
 #tmp_str = "1/4";
 ):this.delay == -4 ? (
 #tmp_str = "1/8";
 ):this.delay == -5 ? (
 #tmp_str = "1/16";
 );
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 
 
 black();
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 53;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("ATTACK", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 rgb(80,255,80);
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 53 + 12*zoom;
 this.attack >= 0 ? (
 #tmp_str = sprintf(#, "%i", this.attack);
 ):this.attack == -1 ? (
 #tmp_str = "1 BAR";
 ):this.attack == -2 ? (
 #tmp_str = "1/2";
 ):this.attack == -3 ? (
 #tmp_str = "1/4";
 ):this.attack == -4 ? (
 #tmp_str = "1/8";
 ):this.attack == -5 ? (
 #tmp_str = "1/16";
 );
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 black();
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y-1;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("TEMPO SYNC", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 rgb(80,255,80);
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 11*zoom;
 this.time_sync == 0.125 ? (
 #tmp_str = "8 BARS";
 ):this.time_sync == 0.25 ? (
 #tmp_str = "4 BARS";
 ):this.time_sync == 0.5 ? (
 #tmp_str = "2 BARS";
 ):this.time_sync == 1 ? (
 #tmp_str = "1 BAR";
 ):this.time_sync == 2 ? (
 #tmp_str = "1/2";
 ):this.time_sync == 4 ? (
 #tmp_str = "1/4";
 ):this.time_sync == 8 ? (
 #tmp_str = "1/8";
 ):this.time_sync == 16 ? (
 #tmp_str = "1/16";
 ):this.time_sync == 32 ? (
 #tmp_str = "1/32";
 ):(
 #tmp_str = "DIAL"
 );
  this.time_sync ? this.time_sync_2 == 1 ? #tmp_str += " T";
  this.time_sync ? this.time_sync_2 == 2 ? #tmp_str += " D";
 
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 
 black();
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 26;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("CLOCK", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 rgb(80,255,80);
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 26 + 12*zoom;
 this.free_run == 1 ? (
 #tmp_str = "PROJECT";
 ):(
 lightgrey(); #tmp_str = "INT";
 );
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 
 
 black();
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 53;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("PHASE START", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 rgb(80,255,80);
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 53 + 12*zoom;
 this.free_run ? (
 sprintf(#tmp_str, "%i", this.cosphi*360);
 #tmp_str += "°";
 ):(
 lightgrey();
 #tmp_str = "NO SYNC";
 );
 gfx_drawstr(#tmp_str, 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 /*
 
 black();
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y-1;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("RATE x10", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 26;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("DELAY", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 gfx_x = sgfx_x + 240*zoom; gfx_y = sgfx_y + 53;
 gfx_rect(sgfx_x + 240*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("ATTACK", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 
 black();
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y-1;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("TEMPO SYNC", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 26;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("CLOCK", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 gfx_x = sgfx_x + 327*zoom; gfx_y = sgfx_y + 53;
 gfx_rect(sgfx_x + 327*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom);
 gfx_drawstr("PHASE", 0x05, gfx_x+75*zoom, gfx_y + 10*zoom);
 */
 
 this.gfx_rate.parameter_config (this.startslider+4,       0.5,        0,    1,  sgfx_x/zoom + 90,   sgfx_y/zoom +10, 120,    101,    1,   1);
 this.gfx_rate.knob();
       black();gfx_setfont(1,"Arial",11*zoom,'b');
       #klabel = "Hz"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.knoblabelposition_scaled(klw); gfx_y -= 10*zoom;gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0.3"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
       //#klabel = "0.6"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
       #klabel = "3"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       //#klabel = "12"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "30"; gfx_measurestr(#klabel, klw, klh); this.gfx_rate.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
 
 this.gfx_phaseshift.parameter_config (this.startslider+1,       0,        0,    360,  sgfx_x/zoom + 90,   sgfx_y/zoom +10, 120,    101,    1,   1);
 
 
 anykey(sgfx_x + 174 * zoom, sgfx_y + 22*zoom, 0, "MTRX"); //40x40px
 
 
 
 /* VAR!!!
 osc1.finetune.this.modamount = 20;
 osc2.finetune.this.modamount = 0.0;
 */
 
 
 !Number_input ? (
  
  mouse_cap == 2 ? (
    g_collision(sgfx_x + 240*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("1 Bar|1/2|1/4|1/18|1/16");
      selection ? (
        this.delay = -selection;
      );
      caller = 1;
    );
  
  g_collision(sgfx_x + 240*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("1 Bar|1/2|1/4|1/18|1/16");
    selection ? (
      this.attack = -selection;
    );
    caller = 1;
  );
  
  );
  
  
  mouseClick == 1 ? (
      
      g_collision(sgfx_x, sgfx_y+2*zoom, 75*zoom, 12*zoom) ? (
      slider(this.startslider) = 0; 
      this.CV_Select.pick_controller();
      caller = 1);
      g_collision(sgfx_x, sgfx_y+14*zoom, 75*zoom, 12*zoom) ? (slider(this.startslider) = 1; caller = 1);
      g_collision(sgfx_x, sgfx_y+26*zoom, 75*zoom, 12*zoom) ? (slider(this.startslider) = 2; caller = 1);
      g_collision(sgfx_x, sgfx_y+38*zoom, 75*zoom, 12*zoom) ? (slider(this.startslider) = 3; caller = 1);
      g_collision(sgfx_x, sgfx_y+50*zoom, 75*zoom, 12*zoom) ? (slider(this.startslider) = 4; caller = 1);
      g_collision(sgfx_x, sgfx_y+62*zoom, 75*zoom, 12*zoom) ? (slider(this.startslider) = 5; caller = 1);
      
      this.gfx_rate.K_Collision() ? this.gfx_rate.dragstart();
 
      /*
      g_collision(sgfx_x + 230*zoom, sgfx_y + 200*zoom, 75*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("HPF 12|HPF 24|HPF 48|BP");
      selection ? (
      selection == 1 ? (slider(synth.filter.startslider + 2) = 0; slider(synth.filter.startslider + 3) = 1); 
      selection == 2 ? (slider(synth.filter.startslider + 2) = 1; slider(synth.filter.startslider + 3) = 1); 
      selection == 3 ? (slider(synth.filter.startslider + 2) = 2; slider(synth.filter.startslider + 3) = 1); 
      selection == 4 ? (slider(synth.filter.startslider + 3) = 0); 
      selection = 0; caller = 1;
      );
      );
      */
      
      g_collision(sgfx_x + 174 * zoom, sgfx_y + 22*zoom, 40*zoom, 40*zoom) ? this.matrix = 1;
      
      g_collision(sgfx_x + 240*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom) ? (slider(this.startslider + 5) == 0 ? slider(this.startslider + 5) = 1 : slider(this.startslider + 5) = 0; caller = 1);
      //g_collision(sgfx_x + 327*zoom, sgfx_y +9*zoom, 75*zoom, 13*zoom) ? osc1.finetune.this.modamount.dummy_dragstart(0, -100, 100);
      //g_collision(sgfx_x + 327*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom) ? osc2.finetune.this.modamount.dummy_dragstart(0, -100, 100);
  
      g_collision(sgfx_x + 240*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom) ? (
        this.delay < 0 ? (
        //Takt_in_s = (240 / tempo);
          this.delay == -1 ? this.delay = (240 / tempo) * (1000);
          this.delay == -2 ? this.delay = (240 / tempo) * (1000/2);
          this.delay == -3 ? this.delay = (240 / tempo) * (1000/4);
          this.delay == -4 ? this.delay = (240 / tempo) * (1000/8);
          this.delay == -5 ? this.delay = (240 / tempo) * (1000/16);
        );
        this.delay.dummy_dragstart(0, 0, 6000);
      );
      
      g_collision(sgfx_x + 240*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom) ? (
        this.attack < 0 ? (
        //Takt_in_s = (240 / tempo);
          this.attack == -1 ? this.attack = (240 / tempo) * (1000);
          this.attack == -2 ? this.attack = (240 / tempo) * (1000/2);
          this.attack == -3 ? this.attack = (240 / tempo) * (1000/4);
          this.attack == -4 ? this.attack = (240 / tempo) * (1000/8);
          this.attack == -5 ? this.attack = (240 / tempo) * (1000/16);
        );
        this.attack.dummy_dragstart(0, 0, 6000);
      );
      
      g_collision(sgfx_x + 327*zoom, sgfx_y + 9*zoom, 75*zoom, 13*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; 
      selection = gfx_showmenu("8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32|>Triplet|8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|<1/32|>Dotted|8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32");
        selection ? (
        selection > 18 ? (slider(this.startslider + 3) = 2; selection -= 18):
        selection > 9 ? (slider(this.startslider + 3) = 1; selection -= 9):
        (slider(this.startslider + 3) = 0);
          slider(this.startslider + 2) = selection-1;
        );
        caller = 1;
      );
      
      g_collision(sgfx_x + 327*zoom, sgfx_y + 25 + 11*zoom, 75*zoom, 13*zoom) ? (this.free_run == 1 ? this.free_run = 0 : this.free_run = 1; caller = 1);
      
      this.free_run == 1 ? g_collision(sgfx_x + 327*zoom, sgfx_y + 52 + 11*zoom, 75*zoom, 13*zoom) ? this.gfx_phaseshift.dragstart();
 
      
  ); // click
 
 mouseclick == -1 ? (
 
 this.gfx_rate.dragstop();
 this.gfx_phaseshift.dragstop();
 //osc1.finetune.this.modamount.dummy_dragstop();
 //osc2.finetune.this.modamount.dummy_dragstop();
 
 this.delay.dummy_dragstop();
 this.attack.dummy_dragstop();
 );
 
 mouse_wheel ? 
     (
        this.gfx_rate.K_Collision() ? (this.gfx_rate.potwheel(); caller = 1);
     );
     
 
 this.gfx_rate.dragging ? (this.gfx_rate.potdrag(); caller = 1);
 this.gfx_phaseshift.dragging ? (this.gfx_phaseshift.potdrag_integer(); caller = 1);
 
 this.delay.dragging ? (this.delay.dummy_potdrag(); caller = 1);
 this.attack.dragging ? (this.attack.dummy_potdrag(); caller = 1);
 );//number input
 
 ); // LFO FIELD
 
 
 //LFO_1.startslider
 
 sgfx_x = 10*zoom;
 
 !LFO_1.matrix && !LFO_2.matrix && !LFO_3.matrix && !LFO_4.matrix ? (
 LFO_1.draw_LFO_field();
 gfx_setfont(2,"Arial",16*zoom,'b');
 gfx_x = sgfx_x + 173*zoom; gfx_y = sgfx_y-3*zoom;
 gfx_drawstr("LFO 1");
 sgfx_y += 93*zoom;
 LFO_2.draw_LFO_field();
 gfx_setfont(2,"Arial",16*zoom,'b');
 gfx_x = sgfx_x + 173*zoom; gfx_y = sgfx_y-3*zoom;
 gfx_drawstr("LFO 2");
 sgfx_y += 93*zoom;
 LFO_3.draw_LFO_field();
 gfx_setfont(2,"Arial",16*zoom,'b');
 gfx_x = sgfx_x + 173*zoom; gfx_y = sgfx_y-3*zoom;
 gfx_drawstr("LFO 3");
 sgfx_y += 93*zoom;
 LFO_4.draw_LFO_field();
 gfx_setfont(2,"Arial",16*zoom,'b');
 gfx_x = sgfx_x + 173*zoom; gfx_y = sgfx_y-3*zoom;
 gfx_drawstr("LFO 4");
 
 sgfx_Y -= 279 * zoom;
 );
 
 
 
 
 
 
 
 
 
// osc1.level.LFO_1.mode = 0;
// osc1.level.LFO_1.controller = 13;
// osc1.level.LFO_1.modamount = -3;
// LFO_2.matrix = 0;
 
 LFO_1.matrix ? (
 
   gfx_rect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom);
   gfx_setfont(4, "arial", 18*zoom, 'b'); rgb(0,255,0);
   gfx_x = sgfx_x +20*zoom; gfx_y = sgfx_y + 335*zoom;
   gfx_drawstr("LFO 1  MATRIX");
 
   rgb(0,255,0); gfx_a = 0.5;
   mtx_d = 34; 
   mtx_z1 = sgfx_y + 25*zoom;
   mtx_z2 = sgfx_y + 2*mtx_d + 50*zoom;
   mtx_z3 = sgfx_y + 4*mtx_d + 75*zoom;
   
   gfx_rect(sgfx_x,           mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z1;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   osc1.level.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.level.LFO_1.controller && osc1.level.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.level.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.level.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.level.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.pan.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.pan.LFO_1.controller && osc1.pan.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.pan.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.pan.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.pan.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.transpose.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.transpose.LFO_1.controller && osc1.transpose.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.transpose.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.transpose.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.transpose.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.finetune.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.finetune.LFO_1.controller && osc1.finetune.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.finetune.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.finetune.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.finetune.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.PWM.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.PWM.LFO_1.controller && osc1.PWM.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.PWM.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.PWM.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.PWM.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z1 - 20*zoom;
   gfx_drawstr("OSC 1");
   
   
 
   rgb(0,255,0); gfx_a = 0.5;
   gfx_rect(sgfx_x,           mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z2;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   osc2.level.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.level.LFO_1.controller && osc2.level.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.level.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.level.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.level.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.pan.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.pan.LFO_1.controller && osc2.pan.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.pan.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.pan.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.pan.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.transpose.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.transpose.LFO_1.controller && osc2.transpose.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.transpose.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.transpose.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.transpose.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.finetune.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.finetune.LFO_1.controller && osc2.finetune.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.finetune.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.finetune.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.finetune.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.PWM.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.PWM.LFO_1.controller && osc2.PWM.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.PWM.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.PWM.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.PWM.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z2 - 20*zoom;
   gfx_drawstr("OSC 2");
   
   
   rgb(0,255,0); gfx_a = 0.5;
   gfx_rect(sgfx_x,           mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z3;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   synth.filter_f.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   synth.filter_f.LFO_1.controller && synth.filter_f.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("FREQNCY", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(synth.filter_f.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d;
   synth.filter_f.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", synth.filter_f.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   
   
   NG.level.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.level.LFO_1.controller && NG.level.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.level.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.level.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.level.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   NG.pan.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.pan.LFO_1.controller && NG.pan.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.pan.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.pan.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.pan.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   NG.filter_f.LFO_1.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.filter_f.LFO_1.controller && NG.filter_f.LFO_1.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("FILTER F", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.filter_f.LFO_1.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.filter_f.LFO_1.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.filter_f.LFO_1.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +215*zoom; gfx_y = mtx_z3 - 20*zoom;
   gfx_drawstr("NOISE");
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +75*zoom; gfx_y = mtx_z3 - 20*zoom;
   gfx_drawstr("FILTER");
   
   
   
   
   !Number_input ? (
    
      mouseClick == 1 ? (
      
          !g_collision(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom) ? LFO_1.matrix = 0;
      
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_1.mode == 1 ? osc1.level.LFO_1.mode = 0 : osc1.level.LFO_1.mode = 1; caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_1.mode == 1 ? osc1.pan.LFO_1.mode = 0 : osc1.pan.LFO_1.mode = 1; caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_1.mode == 1 ? osc1.transpose.LFO_1.mode = 0 : osc1.transpose.LFO_1.mode = 1; caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_1.mode == 1 ? osc1.finetune.LFO_1.mode = 0 : osc1.finetune.LFO_1.mode = 1; caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_1.mode == 1 ? osc1.PWM.LFO_1.mode = 0 : osc1.PWM.LFO_1.mode = 1; caller = 1);
      
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_1.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_1.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_1.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_1.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_1.controller.pick_controller();caller = 1);
          
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_1.modamount.dummy_dragstart(0, -10, 10);caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_1.modamount.dummy_dragstart(0, -24, 24);caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_1.modamount.dummy_dragstart(0, 0, 4);caller = 1);
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_1.mode == 1 ? osc2.level.LFO_1.mode = 0 : osc2.level.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_1.mode == 1 ? osc2.pan.LFO_1.mode = 0 : osc2.pan.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_1.mode == 1 ? osc2.transpose.LFO_1.mode = 0 : osc2.transpose.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_1.mode == 1 ? osc2.finetune.LFO_1.mode = 0 : osc2.finetune.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_1.mode == 1 ? osc2.PWM.LFO_1.mode = 0 : osc2.PWM.LFO_1.mode = 1; caller = 1);
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_1.controller.pick_controller();caller = 1);
         
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_1.modamount.dummy_dragstart(0, -10, 10);caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_1.modamount.dummy_dragstart(0, -24, 24);caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_1.modamount.dummy_dragstart(0, 0, 4);caller = 1);
      
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_1.mode == 1 ? synth.filter_f.LFO_1.mode = 0 : synth.filter_f.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         
    
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_1.mode == 1 ? NG.level.LFO_1.mode = 0 : NG.level.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_1.mode == 1 ? NG.pan.LFO_1.mode = 0 : NG.pan.LFO_1.mode = 1; caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_1.mode == 1 ? NG.filter_f.LFO_1.mode = 0 : NG.filter_f.LFO_1.mode = 1; caller = 1);
         
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_1.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_1.controller.pick_controller();caller = 1);
         
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_1.modamount.dummy_dragstart(0, -10, 10);caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_1.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_1.modamount.dummy_dragstart(0, -10, 100);caller = 1);
         
      ); //click
      
       mouseclick == -1 ? (
        osc1.level.LFO_1.modamount.dummy_dragstop();
        osc1.pan.LFO_1.modamount.dummy_dragstop();
        osc1.transpose.LFO_1.modamount.dummy_dragstop();
        osc1.finetune.LFO_1.modamount.dummy_dragstop();
        osc1.PWM.LFO_1.modamount.dummy_dragstop();
         osc2.level.LFO_1.modamount.dummy_dragstop();
         osc2.pan.LFO_1.modamount.dummy_dragstop();
         osc2.transpose.LFO_1.modamount.dummy_dragstop();
         osc2.finetune.LFO_1.modamount.dummy_dragstop();
         osc2.PWM.LFO_1.modamount.dummy_dragstop();
         synth.filter_f.LFO_1.modamount.dummy_dragstop();
         
         NG.level.LFO_1.modamount.dummy_dragstop();
         NG.pan.LFO_1.modamount.dummy_dragstop();
         NG.filter_f.LFO_1.modamount.dummy_dragstop();
         
       );
       
       
       osc1.level.LFO_1.modamount.dragging ? (osc1.level.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc1.pan.LFO_1.modamount.dragging ? (osc1.pan.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc1.transpose.LFO_1.modamount.dragging ? (osc1.transpose.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc1.finetune.LFO_1.modamount.dragging ? (osc1.finetune.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc1.PWM.LFO_1.modamount.dragging ? (osc1.PWM.LFO_1.modamount.dummy_potdrag(); caller = 1);
       
       osc2.level.LFO_1.modamount.dragging ? (osc2.level.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc2.pan.LFO_1.modamount.dragging ? (osc2.pan.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc2.transpose.LFO_1.modamount.dragging ? (osc2.transpose.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc2.finetune.LFO_1.modamount.dragging ? (osc2.finetune.LFO_1.modamount.dummy_potdrag(); caller = 1);
       osc2.PWM.LFO_1.modamount.dragging ? (osc2.PWM.LFO_1.modamount.dummy_potdrag(); caller = 1);
       
       synth.filter_f.LFO_1.modamount.dragging ? (synth.filter_f.LFO_1.modamount.dummy_potdrag(); caller = 1);
              
       NG.level.LFO_1.modamount.dragging ? (NG.level.LFO_1.modamount.dummy_potdrag(); caller = 1);
       NG.pan.LFO_1.modamount.dragging ? (NG.pan.LFO_1.modamount.dummy_potdrag(); caller = 1);
       NG.filter_f.LFO_1.modamount.dragging ? (NG.filter_f.LFO_1.modamount.dummy_potdrag(); caller = 1);
       
   ); // number input
   );
   


 LFO_2.matrix ? (
 
   gfx_rect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom);
   gfx_setfont(4, "arial", 18*zoom, 'b'); rgb(0,255,0);
   gfx_x = sgfx_x +20*zoom; gfx_y = sgfx_y + 335*zoom;
   gfx_drawstr("LFO 2  MATRIX");
 
   rgb(0,255,0); gfx_a = 0.5;
   mtx_d = 34; 
   mtx_z1 = sgfx_y + 25*zoom;
   mtx_z2 = sgfx_y + 2*mtx_d + 50*zoom;
   mtx_z3 = sgfx_y + 4*mtx_d + 75*zoom;
   
   gfx_rect(sgfx_x,           mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z1;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   osc1.level.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.level.LFO_2.controller && osc1.level.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.level.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.level.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.level.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.pan.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.pan.LFO_2.controller && osc1.pan.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.pan.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.pan.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.pan.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.transpose.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.transpose.LFO_2.controller && osc1.transpose.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.transpose.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.transpose.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.transpose.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.finetune.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.finetune.LFO_2.controller && osc1.finetune.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.finetune.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.finetune.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.finetune.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc1.PWM.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc1.PWM.LFO_2.controller && osc1.PWM.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1;
   gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d/2;
   gfx_drawstr(osc1.PWM.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d;
   osc1.PWM.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc1.PWM.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z1 - 20*zoom;
   gfx_drawstr("OSC 1");
   
   
 
   rgb(0,255,0); gfx_a = 0.5;
   gfx_rect(sgfx_x,           mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z2;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   osc2.level.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.level.LFO_2.controller && osc2.level.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.level.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.level.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.level.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.pan.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.pan.LFO_2.controller && osc2.pan.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.pan.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.pan.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.pan.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.transpose.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.transpose.LFO_2.controller && osc2.transpose.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.transpose.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.transpose.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.transpose.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.finetune.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.finetune.LFO_2.controller && osc2.finetune.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.finetune.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.finetune.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.finetune.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   osc2.PWM.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   osc2.PWM.LFO_2.controller && osc2.PWM.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2;
   gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d/2;
   gfx_drawstr(osc2.PWM.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d;
   osc2.PWM.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", osc2.PWM.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z2 - 20*zoom;
   gfx_drawstr("OSC 2");
   
   
   rgb(0,255,0); gfx_a = 0.5;
   gfx_rect(sgfx_x,           mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 2*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 4*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 6*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 8*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   gfx_rect(sgfx_x + 10*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
   
   gfx_a = 0.7;
   gfx_setfont(5, "arial", 11*zoom, 'b');
   gfx_x = sgfx_x; gfx_y = mtx_z3;
   gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d;
   gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   synth.filter_f.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   synth.filter_f.LFO_2.controller && synth.filter_f.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("FREQNCY", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(synth.filter_f.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d;
   synth.filter_f.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", synth.filter_f.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   
   
   
   NG.level.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.level.LFO_2.controller && NG.level.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.level.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.level.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.level.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   NG.pan.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.pan.LFO_2.controller && NG.pan.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.pan.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.pan.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.pan.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   NG.filter_f.LFO_2.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
   NG.filter_f.LFO_2.controller && NG.filter_f.LFO_2.modamount ? gfx_a = 1 : gfx_a = 0.7;
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3;
   gfx_drawstr("FILTER F", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d/2;
   gfx_drawstr(NG.filter_f.LFO_2.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d;
   NG.filter_f.LFO_2.controller.pick_name();
   gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
   gfx_drawstr(sprintf(#, "%.1f", NG.filter_f.LFO_2.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +215*zoom; gfx_y = mtx_z3 - 20*zoom;
   gfx_drawstr("NOISE");
   
   gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
   gfx_x = sgfx_x +75*zoom; gfx_y = mtx_z3 - 20*zoom;
   gfx_drawstr("FILTER");
   
   
   
   
   !Number_input ? (
    
      mouseClick == 1 ? (
      
          !g_collision(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom) ? LFO_2.matrix = 0;
      
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_2.mode == 1 ? osc1.level.LFO_2.mode = 0 : osc1.level.LFO_2.mode = 1; caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_2.mode == 1 ? osc1.pan.LFO_2.mode = 0 : osc1.pan.LFO_2.mode = 1; caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_2.mode == 1 ? osc1.transpose.LFO_2.mode = 0 : osc1.transpose.LFO_2.mode = 1; caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_2.mode == 1 ? osc1.finetune.LFO_2.mode = 0 : osc1.finetune.LFO_2.mode = 1; caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_2.mode == 1 ? osc1.PWM.LFO_2.mode = 0 : osc1.PWM.LFO_2.mode = 1; caller = 1);
      
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_2.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_2.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_2.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_2.controller.pick_controller();caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_2.controller.pick_controller();caller = 1);
          
          g_collision(sgfx_x + 2*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_2.modamount.dummy_dragstart(0, -10, 10);caller = 1);
          g_collision(sgfx_x + 4*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
          g_collision(sgfx_x + 6*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_2.modamount.dummy_dragstart(0, -24, 24);caller = 1);
          g_collision(sgfx_x + 8*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
          g_collision(sgfx_x + 10*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_2.modamount.dummy_dragstart(0, 0, 4);caller = 1);
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_2.mode == 1 ? osc2.level.LFO_2.mode = 0 : osc2.level.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_2.mode == 1 ? osc2.pan.LFO_2.mode = 0 : osc2.pan.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_2.mode == 1 ? osc2.transpose.LFO_2.mode = 0 : osc2.transpose.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_2.mode == 1 ? osc2.finetune.LFO_2.mode = 0 : osc2.finetune.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_2.mode == 1 ? osc2.PWM.LFO_2.mode = 0 : osc2.PWM.LFO_2.mode = 1; caller = 1);
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_2.controller.pick_controller();caller = 1);
         
         g_collision(sgfx_x + 2*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_2.modamount.dummy_dragstart(0, -10, 10);caller = 1);
         g_collision(sgfx_x + 4*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 6*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_2.modamount.dummy_dragstart(0, -24, 24);caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_2.modamount.dummy_dragstart(0, 0, 4);caller = 1);
      
      
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_2.mode == 1 ? synth.filter_f.LFO_2.mode = 0 : synth.filter_f.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 2*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         
    
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_2.mode == 1 ? NG.level.LFO_2.mode = 0 : NG.level.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_2.mode == 1 ? NG.pan.LFO_2.mode = 0 : NG.pan.LFO_2.mode = 1; caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_2.mode == 1 ? NG.filter_f.LFO_2.mode = 0 : NG.filter_f.LFO_2.mode = 1; caller = 1);
         
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_2.controller.pick_controller();caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_2.controller.pick_controller();caller = 1);
         
         g_collision(sgfx_x + 6*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_2.modamount.dummy_dragstart(0, -10, 10);caller = 1);
         g_collision(sgfx_x + 8*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_2.modamount.dummy_dragstart(0, -100, 100);caller = 1);
         g_collision(sgfx_x + 10*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_2.modamount.dummy_dragstart(0, -10, 100);caller = 1);
         
      ); //click
      
       mouseclick == -1 ? (
        osc1.level.LFO_2.modamount.dummy_dragstop();
        osc1.pan.LFO_2.modamount.dummy_dragstop();
        osc1.transpose.LFO_2.modamount.dummy_dragstop();
        osc1.finetune.LFO_2.modamount.dummy_dragstop();
        osc1.PWM.LFO_2.modamount.dummy_dragstop();
         osc2.level.LFO_2.modamount.dummy_dragstop();
         osc2.pan.LFO_2.modamount.dummy_dragstop();
         osc2.transpose.LFO_2.modamount.dummy_dragstop();
         osc2.finetune.LFO_2.modamount.dummy_dragstop();
         osc2.PWM.LFO_2.modamount.dummy_dragstop();
         synth.filter_f.LFO_2.modamount.dummy_dragstop();
         
         NG.level.LFO_2.modamount.dummy_dragstop();
         NG.pan.LFO_2.modamount.dummy_dragstop();
         NG.filter_f.LFO_2.modamount.dummy_dragstop();
         
       );
       
       
       osc1.level.LFO_2.modamount.dragging ? (osc1.level.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc1.pan.LFO_2.modamount.dragging ? (osc1.pan.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc1.transpose.LFO_2.modamount.dragging ? (osc1.transpose.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc1.finetune.LFO_2.modamount.dragging ? (osc1.finetune.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc1.PWM.LFO_2.modamount.dragging ? (osc1.PWM.LFO_2.modamount.dummy_potdrag(); caller = 1);
       
       osc2.level.LFO_2.modamount.dragging ? (osc2.level.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc2.pan.LFO_2.modamount.dragging ? (osc2.pan.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc2.transpose.LFO_2.modamount.dragging ? (osc2.transpose.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc2.finetune.LFO_2.modamount.dragging ? (osc2.finetune.LFO_2.modamount.dummy_potdrag(); caller = 1);
       osc2.PWM.LFO_2.modamount.dragging ? (osc2.PWM.LFO_2.modamount.dummy_potdrag(); caller = 1);
       
       synth.filter_f.LFO_2.modamount.dragging ? (synth.filter_f.LFO_2.modamount.dummy_potdrag(); caller = 1);
              
       NG.level.LFO_2.modamount.dragging ? (NG.level.LFO_2.modamount.dummy_potdrag(); caller = 1);
       NG.pan.LFO_2.modamount.dragging ? (NG.pan.LFO_2.modamount.dummy_potdrag(); caller = 1);
       NG.filter_f.LFO_2.modamount.dragging ? (NG.filter_f.LFO_2.modamount.dummy_potdrag(); caller = 1);
       
   ); // number input
   );
   
   
   LFO_3.matrix ? (
   
     gfx_rect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom);
     gfx_setfont(4, "arial", 18*zoom, 'b'); rgb(0,255,0);
     gfx_x = sgfx_x +20*zoom; gfx_y = sgfx_y + 335*zoom;
     gfx_drawstr("LFO 3  MATRIX");
   
     rgb(0,255,0); gfx_a = 0.5;
     mtx_d = 34; 
     mtx_z1 = sgfx_y + 25*zoom;
     mtx_z2 = sgfx_y + 2*mtx_d + 50*zoom;
     mtx_z3 = sgfx_y + 4*mtx_d + 75*zoom;
     
     gfx_rect(sgfx_x,           mtx_z1, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 2*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 4*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 6*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 8*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 10*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
     
     gfx_a = 0.7;
     gfx_setfont(5, "arial", 11*zoom, 'b');
     gfx_x = sgfx_x; gfx_y = mtx_z1;
     gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d;
     gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     
     osc1.level.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc1.level.LFO_3.controller && osc1.level.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1;
     gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr(osc1.level.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d;
     osc1.level.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc1.level.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc1.pan.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc1.pan.LFO_3.controller && osc1.pan.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1;
     gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr(osc1.pan.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d;
     osc1.pan.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc1.pan.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc1.transpose.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc1.transpose.LFO_3.controller && osc1.transpose.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1;
     gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr(osc1.transpose.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d;
     osc1.transpose.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc1.transpose.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc1.finetune.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc1.finetune.LFO_3.controller && osc1.finetune.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1;
     gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr(osc1.finetune.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d;
     osc1.finetune.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc1.finetune.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc1.PWM.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc1.PWM.LFO_3.controller && osc1.PWM.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1;
     gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d/2;
     gfx_drawstr(osc1.PWM.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d;
     osc1.PWM.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc1.PWM.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
     gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z1 - 20*zoom;
     gfx_drawstr("OSC 1");
     
     
   
     rgb(0,255,0); gfx_a = 0.5;
     gfx_rect(sgfx_x,           mtx_z2, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 2*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 4*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 6*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 8*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 10*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
     
     gfx_a = 0.7;
     gfx_setfont(5, "arial", 11*zoom, 'b');
     gfx_x = sgfx_x; gfx_y = mtx_z2;
     gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d;
     gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     
     osc2.level.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc2.level.LFO_3.controller && osc2.level.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2;
     gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr(osc2.level.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d;
     osc2.level.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc2.level.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc2.pan.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc2.pan.LFO_3.controller && osc2.pan.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2;
     gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr(osc2.pan.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d;
     osc2.pan.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc2.pan.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc2.transpose.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc2.transpose.LFO_3.controller && osc2.transpose.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2;
     gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr(osc2.transpose.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d;
     osc2.transpose.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc2.transpose.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc2.finetune.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc2.finetune.LFO_3.controller && osc2.finetune.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2;
     gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr(osc2.finetune.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d;
     osc2.finetune.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc2.finetune.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     osc2.PWM.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     osc2.PWM.LFO_3.controller && osc2.PWM.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2;
     gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d/2;
     gfx_drawstr(osc2.PWM.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d;
     osc2.PWM.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", osc2.PWM.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     
     gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
     gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z2 - 20*zoom;
     gfx_drawstr("OSC 2");
     
     
     rgb(0,255,0); gfx_a = 0.5;
     gfx_rect(sgfx_x,           mtx_z3, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 2*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 4*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 6*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 8*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
     gfx_rect(sgfx_x + 10*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
     
     gfx_a = 0.7;
     gfx_setfont(5, "arial", 11*zoom, 'b');
     gfx_x = sgfx_x; gfx_y = mtx_z3;
     gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d/2;
     gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d;
     gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x; gfx_y = mtx_z3+3*mtx_d/2;
     gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     synth.filter_f.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     synth.filter_f.LFO_3.controller && synth.filter_f.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3;
     gfx_drawstr("FREQNCY", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d/2;
     gfx_drawstr(synth.filter_f.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d;
     synth.filter_f.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", synth.filter_f.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     
     
     
     NG.level.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     NG.level.LFO_3.controller && NG.level.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3;
     gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d/2;
     gfx_drawstr(NG.level.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d;
     NG.level.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", NG.level.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     NG.pan.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     NG.pan.LFO_3.controller && NG.pan.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3;
     gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d/2;
     gfx_drawstr(NG.pan.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d;
     NG.pan.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", NG.pan.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     NG.filter_f.LFO_3.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
     NG.filter_f.LFO_3.controller && NG.filter_f.LFO_3.modamount ? gfx_a = 1 : gfx_a = 0.7;
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3;
     gfx_drawstr("FILTER F", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d/2;
     gfx_drawstr(NG.filter_f.LFO_3.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d;
     NG.filter_f.LFO_3.controller.pick_name();
     gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
     gfx_drawstr(sprintf(#, "%.1f", NG.filter_f.LFO_3.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
     
     gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
     gfx_x = sgfx_x +215*zoom; gfx_y = mtx_z3 - 20*zoom;
     gfx_drawstr("NOISE");
     
     gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
     gfx_x = sgfx_x +75*zoom; gfx_y = mtx_z3 - 20*zoom;
     gfx_drawstr("FILTER");
     
     
     
     
     !Number_input ? (
      
        mouseClick == 1 ? (
        
            !g_collision(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom) ? LFO_3.matrix = 0;
        
            g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_3.mode == 1 ? osc1.level.LFO_3.mode = 0 : osc1.level.LFO_3.mode = 1; caller = 1);
            g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_3.mode == 1 ? osc1.pan.LFO_3.mode = 0 : osc1.pan.LFO_3.mode = 1; caller = 1);
            g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_3.mode == 1 ? osc1.transpose.LFO_3.mode = 0 : osc1.transpose.LFO_3.mode = 1; caller = 1);
            g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_3.mode == 1 ? osc1.finetune.LFO_3.mode = 0 : osc1.finetune.LFO_3.mode = 1; caller = 1);
            g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_3.mode == 1 ? osc1.PWM.LFO_3.mode = 0 : osc1.PWM.LFO_3.mode = 1; caller = 1);
        
            g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_3.controller.pick_controller();caller = 1);
            g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_3.controller.pick_controller();caller = 1);
            g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_3.controller.pick_controller();caller = 1);
            g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_3.controller.pick_controller();caller = 1);
            g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_3.controller.pick_controller();caller = 1);
            
            g_collision(sgfx_x + 2*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_3.modamount.dummy_dragstart(0, -10, 10);caller = 1);
            g_collision(sgfx_x + 4*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
            g_collision(sgfx_x + 6*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_3.modamount.dummy_dragstart(0, -24, 24);caller = 1);
            g_collision(sgfx_x + 8*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
            g_collision(sgfx_x + 10*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_3.modamount.dummy_dragstart(0, 0, 4);caller = 1);
        
           g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_3.mode == 1 ? osc2.level.LFO_3.mode = 0 : osc2.level.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_3.mode == 1 ? osc2.pan.LFO_3.mode = 0 : osc2.pan.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_3.mode == 1 ? osc2.transpose.LFO_3.mode = 0 : osc2.transpose.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_3.mode == 1 ? osc2.finetune.LFO_3.mode = 0 : osc2.finetune.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_3.mode == 1 ? osc2.PWM.LFO_3.mode = 0 : osc2.PWM.LFO_3.mode = 1; caller = 1);
        
           g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_3.controller.pick_controller();caller = 1);
           
           g_collision(sgfx_x + 2*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_3.modamount.dummy_dragstart(0, -10, 10);caller = 1);
           g_collision(sgfx_x + 4*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
           g_collision(sgfx_x + 6*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_3.modamount.dummy_dragstart(0, -24, 24);caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_3.modamount.dummy_dragstart(0, 0, 4);caller = 1);
        
        
           g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_3.mode == 1 ? synth.filter_f.LFO_3.mode = 0 : synth.filter_f.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 2*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
           
      
           g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_3.mode == 1 ? NG.level.LFO_3.mode = 0 : NG.level.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_3.mode == 1 ? NG.pan.LFO_3.mode = 0 : NG.pan.LFO_3.mode = 1; caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_3.mode == 1 ? NG.filter_f.LFO_3.mode = 0 : NG.filter_f.LFO_3.mode = 1; caller = 1);
           
           g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_3.controller.pick_controller();caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_3.controller.pick_controller();caller = 1);
           
           g_collision(sgfx_x + 6*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_3.modamount.dummy_dragstart(0, -10, 10);caller = 1);
           g_collision(sgfx_x + 8*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_3.modamount.dummy_dragstart(0, -100, 100);caller = 1);
           g_collision(sgfx_x + 10*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_3.modamount.dummy_dragstart(0, -10, 100);caller = 1);
           
        ); //click
        
         mouseclick == -1 ? (
          osc1.level.LFO_3.modamount.dummy_dragstop();
          osc1.pan.LFO_3.modamount.dummy_dragstop();
          osc1.transpose.LFO_3.modamount.dummy_dragstop();
          osc1.finetune.LFO_3.modamount.dummy_dragstop();
          osc1.PWM.LFO_3.modamount.dummy_dragstop();
           osc2.level.LFO_3.modamount.dummy_dragstop();
           osc2.pan.LFO_3.modamount.dummy_dragstop();
           osc2.transpose.LFO_3.modamount.dummy_dragstop();
           osc2.finetune.LFO_3.modamount.dummy_dragstop();
           osc2.PWM.LFO_3.modamount.dummy_dragstop();
           synth.filter_f.LFO_3.modamount.dummy_dragstop();
           
           NG.level.LFO_3.modamount.dummy_dragstop();
           NG.pan.LFO_3.modamount.dummy_dragstop();
           NG.filter_f.LFO_3.modamount.dummy_dragstop();
           
         );
         
         
         osc1.level.LFO_3.modamount.dragging ? (osc1.level.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc1.pan.LFO_3.modamount.dragging ? (osc1.pan.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc1.transpose.LFO_3.modamount.dragging ? (osc1.transpose.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc1.finetune.LFO_3.modamount.dragging ? (osc1.finetune.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc1.PWM.LFO_3.modamount.dragging ? (osc1.PWM.LFO_3.modamount.dummy_potdrag(); caller = 1);
         
         osc2.level.LFO_3.modamount.dragging ? (osc2.level.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc2.pan.LFO_3.modamount.dragging ? (osc2.pan.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc2.transpose.LFO_3.modamount.dragging ? (osc2.transpose.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc2.finetune.LFO_3.modamount.dragging ? (osc2.finetune.LFO_3.modamount.dummy_potdrag(); caller = 1);
         osc2.PWM.LFO_3.modamount.dragging ? (osc2.PWM.LFO_3.modamount.dummy_potdrag(); caller = 1);
         
         synth.filter_f.LFO_3.modamount.dragging ? (synth.filter_f.LFO_3.modamount.dummy_potdrag(); caller = 1);
                
         NG.level.LFO_3.modamount.dragging ? (NG.level.LFO_3.modamount.dummy_potdrag(); caller = 1);
         NG.pan.LFO_3.modamount.dragging ? (NG.pan.LFO_3.modamount.dummy_potdrag(); caller = 1);
         NG.filter_f.LFO_3.modamount.dragging ? (NG.filter_f.LFO_3.modamount.dummy_potdrag(); caller = 1);
         
     ); // number input
     );
     
     
     LFO_4.matrix ? (
     
       gfx_rect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom);
       gfx_setfont(4, "arial", 18*zoom, 'b'); rgb(0,255,0);
       gfx_x = sgfx_x +20*zoom; gfx_y = sgfx_y + 335*zoom;
       gfx_drawstr("LFO 4  MATRIX");
     
       rgb(0,255,0); gfx_a = 0.5;
       mtx_d = 34; 
       mtx_z1 = sgfx_y + 25*zoom;
       mtx_z2 = sgfx_y + 2*mtx_d + 50*zoom;
       mtx_z3 = sgfx_y + 4*mtx_d + 75*zoom;
       
       gfx_rect(sgfx_x,           mtx_z1, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 2*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 4*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 6*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 8*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 10*mtx_d, mtx_z1, 2*mtx_d, mtx_d*2, 0);
       
       gfx_a = 0.7;
       gfx_setfont(5, "arial", 11*zoom, 'b');
       gfx_x = sgfx_x; gfx_y = mtx_z1;
       gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z1+mtx_d;
       gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       
       osc1.level.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc1.level.LFO_4.controller && osc1.level.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1;
       gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr(osc1.level.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+mtx_d;
       osc1.level.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc1.level.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc1.pan.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc1.pan.LFO_4.controller && osc1.pan.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1;
       gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr(osc1.pan.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+mtx_d;
       osc1.pan.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc1.pan.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc1.transpose.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc1.transpose.LFO_4.controller && osc1.transpose.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1;
       gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr(osc1.transpose.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+mtx_d;
       osc1.transpose.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc1.transpose.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc1.finetune.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc1.finetune.LFO_4.controller && osc1.finetune.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1;
       gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr(osc1.finetune.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+mtx_d;
       osc1.finetune.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc1.finetune.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc1.PWM.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc1.PWM.LFO_4.controller && osc1.PWM.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1;
       gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d/2;
       gfx_drawstr(osc1.PWM.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+mtx_d;
       osc1.PWM.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z1+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc1.PWM.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
       gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z1 - 20*zoom;
       gfx_drawstr("OSC 1");
       
       
     
       rgb(0,255,0); gfx_a = 0.5;
       gfx_rect(sgfx_x,           mtx_z2, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 2*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 4*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 6*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 8*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 10*mtx_d, mtx_z2, 2*mtx_d, mtx_d*2, 0);
       
       gfx_a = 0.7;
       gfx_setfont(5, "arial", 11*zoom, 'b');
       gfx_x = sgfx_x; gfx_y = mtx_z2;
       gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z2+mtx_d;
       gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       
       osc2.level.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc2.level.LFO_4.controller && osc2.level.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2;
       gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr(osc2.level.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+mtx_d;
       osc2.level.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc2.level.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc2.pan.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc2.pan.LFO_4.controller && osc2.pan.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2;
       gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr(osc2.pan.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+mtx_d;
       osc2.pan.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 4*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc2.pan.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc2.transpose.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc2.transpose.LFO_4.controller && osc2.transpose.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2;
       gfx_drawstr("TRANSP.", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr(osc2.transpose.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+mtx_d;
       osc2.transpose.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc2.transpose.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc2.finetune.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc2.finetune.LFO_4.controller && osc2.finetune.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2;
       gfx_drawstr("FINETUNE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr(osc2.finetune.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+mtx_d;
       osc2.finetune.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc2.finetune.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       osc2.PWM.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       osc2.PWM.LFO_4.controller && osc2.PWM.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2;
       gfx_drawstr("PWM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d/2;
       gfx_drawstr(osc2.PWM.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+mtx_d;
       osc2.PWM.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z2+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", osc2.PWM.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       
       gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
       gfx_x = sgfx_x +50*zoom; gfx_y = mtx_z2 - 20*zoom;
       gfx_drawstr("OSC 2");
       
       
       rgb(0,255,0); gfx_a = 0.5;
       gfx_rect(sgfx_x,           mtx_z3, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 2*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 4*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 6*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 8*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
       gfx_rect(sgfx_x + 10*mtx_d, mtx_z3, 2*mtx_d, mtx_d*2, 0);
       
       gfx_a = 0.7;
       gfx_setfont(5, "arial", 11*zoom, 'b');
       gfx_x = sgfx_x; gfx_y = mtx_z3;
       gfx_drawstr("PARAM", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d/2;
       gfx_drawstr("MODE", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z3+mtx_d;
       gfx_drawstr("CTRL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x; gfx_y = mtx_z3+3*mtx_d/2;
       gfx_drawstr("AMOUNT", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       synth.filter_f.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       synth.filter_f.LFO_4.controller && synth.filter_f.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3;
       gfx_drawstr("FREQNCY", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d/2;
       gfx_drawstr(synth.filter_f.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+mtx_d;
       synth.filter_f.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 2*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", synth.filter_f.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       
       
       
       NG.level.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       NG.level.LFO_4.controller && NG.level.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3;
       gfx_drawstr("LEVEL", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d/2;
       gfx_drawstr(NG.level.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+mtx_d;
       NG.level.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 6*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", NG.level.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       NG.pan.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       NG.pan.LFO_4.controller && NG.pan.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3;
       gfx_drawstr("PAN", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d/2;
       gfx_drawstr(NG.pan.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+mtx_d;
       NG.pan.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 8*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", NG.pan.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       NG.filter_f.LFO_4.mode == 0 ? rgb(40,255,50) : rgb(0,255,150);
       NG.filter_f.LFO_4.controller && NG.filter_f.LFO_4.modamount ? gfx_a = 1 : gfx_a = 0.7;
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3;
       gfx_drawstr("FILTER F", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d/2;
       gfx_drawstr(NG.filter_f.LFO_4.mode == 0 ? "+ / -" : "x %", 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+mtx_d;
       NG.filter_f.LFO_4.controller.pick_name();
       gfx_drawstr(#tmp_str, 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       gfx_x = sgfx_x + 10*mtx_d; gfx_y = mtx_z3+3*mtx_d/2;
       gfx_drawstr(sprintf(#, "%.1f", NG.filter_f.LFO_4.modamount), 0x05, gfx_x+2*mtx_d, gfx_y+mtx_d/2);
       
       gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
       gfx_x = sgfx_x +215*zoom; gfx_y = mtx_z3 - 20*zoom;
       gfx_drawstr("NOISE");
       
       gfx_setfont(4, "arial", 15*zoom, 'b'); rgb(0,255,0); gfx_a = 1;
       gfx_x = sgfx_x +75*zoom; gfx_y = mtx_z3 - 20*zoom;
       gfx_drawstr("FILTER");
       
       
       
       
       !Number_input ? (
        
          mouseClick == 1 ? (
          
              !g_collision(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom) ? LFO_4.matrix = 0;
          
              g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_4.mode == 1 ? osc1.level.LFO_4.mode = 0 : osc1.level.LFO_4.mode = 1; caller = 1);
              g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_4.mode == 1 ? osc1.pan.LFO_4.mode = 0 : osc1.pan.LFO_4.mode = 1; caller = 1);
              g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_4.mode == 1 ? osc1.transpose.LFO_4.mode = 0 : osc1.transpose.LFO_4.mode = 1; caller = 1);
              g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_4.mode == 1 ? osc1.finetune.LFO_4.mode = 0 : osc1.finetune.LFO_4.mode = 1; caller = 1);
              g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_4.mode == 1 ? osc1.PWM.LFO_4.mode = 0 : osc1.PWM.LFO_4.mode = 1; caller = 1);
          
              g_collision(sgfx_x + 2*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_4.controller.pick_controller();caller = 1);
              g_collision(sgfx_x + 4*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_4.controller.pick_controller();caller = 1);
              g_collision(sgfx_x + 6*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_4.controller.pick_controller();caller = 1);
              g_collision(sgfx_x + 8*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_4.controller.pick_controller();caller = 1);
              g_collision(sgfx_x + 10*mtx_d, mtx_z1 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_4.controller.pick_controller();caller = 1);
              
              g_collision(sgfx_x + 2*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.level.LFO_4.modamount.dummy_dragstart(0, -10, 10);caller = 1);
              g_collision(sgfx_x + 4*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.pan.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
              g_collision(sgfx_x + 6*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.transpose.LFO_4.modamount.dummy_dragstart(0, -24, 24);caller = 1);
              g_collision(sgfx_x + 8*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.finetune.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
              g_collision(sgfx_x + 10*mtx_d, mtx_z1 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc1.PWM.LFO_4.modamount.dummy_dragstart(0, 0, 4);caller = 1);
          
             g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_4.mode == 1 ? osc2.level.LFO_4.mode = 0 : osc2.level.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_4.mode == 1 ? osc2.pan.LFO_4.mode = 0 : osc2.pan.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_4.mode == 1 ? osc2.transpose.LFO_4.mode = 0 : osc2.transpose.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_4.mode == 1 ? osc2.finetune.LFO_4.mode = 0 : osc2.finetune.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_4.mode == 1 ? osc2.PWM.LFO_4.mode = 0 : osc2.PWM.LFO_4.mode = 1; caller = 1);
          
             g_collision(sgfx_x + 2*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 4*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 6*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z2 + mtx_d, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_4.controller.pick_controller();caller = 1);
             
             g_collision(sgfx_x + 2*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.level.LFO_4.modamount.dummy_dragstart(0, -10, 10);caller = 1);
             g_collision(sgfx_x + 4*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.pan.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
             g_collision(sgfx_x + 6*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.transpose.LFO_4.modamount.dummy_dragstart(0, -24, 24);caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.finetune.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z2 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (osc2.PWM.LFO_4.modamount.dummy_dragstart(0, 0, 4);caller = 1);
          
          
             g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_4.mode == 1 ? synth.filter_f.LFO_4.mode = 0 : synth.filter_f.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 2*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 2*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (synth.filter_f.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
             
        
             g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_4.mode == 1 ? NG.level.LFO_4.mode = 0 : NG.level.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_4.mode == 1 ? NG.pan.LFO_4.mode = 0 : NG.pan.LFO_4.mode = 1; caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_4.mode == 1 ? NG.filter_f.LFO_4.mode = 0 : NG.filter_f.LFO_4.mode = 1; caller = 1);
             
             g_collision(sgfx_x + 6*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_4.controller.pick_controller();caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z3 + mtx_d, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_4.controller.pick_controller();caller = 1);
             
             g_collision(sgfx_x + 6*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.level.LFO_4.modamount.dummy_dragstart(0, -10, 10);caller = 1);
             g_collision(sgfx_x + 8*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.pan.LFO_4.modamount.dummy_dragstart(0, -100, 100);caller = 1);
             g_collision(sgfx_x + 10*mtx_d, mtx_z3 + 3*mtx_d/2, 2*mtx_d, mtx_d/2) ? (NG.filter_f.LFO_4.modamount.dummy_dragstart(0, -10, 100);caller = 1);
             
          ); //click
          
           mouseclick == -1 ? (
            osc1.level.LFO_4.modamount.dummy_dragstop();
            osc1.pan.LFO_4.modamount.dummy_dragstop();
            osc1.transpose.LFO_4.modamount.dummy_dragstop();
            osc1.finetune.LFO_4.modamount.dummy_dragstop();
            osc1.PWM.LFO_4.modamount.dummy_dragstop();
             osc2.level.LFO_4.modamount.dummy_dragstop();
             osc2.pan.LFO_4.modamount.dummy_dragstop();
             osc2.transpose.LFO_4.modamount.dummy_dragstop();
             osc2.finetune.LFO_4.modamount.dummy_dragstop();
             osc2.PWM.LFO_4.modamount.dummy_dragstop();
             synth.filter_f.LFO_4.modamount.dummy_dragstop();
             
             NG.level.LFO_4.modamount.dummy_dragstop();
             NG.pan.LFO_4.modamount.dummy_dragstop();
             NG.filter_f.LFO_4.modamount.dummy_dragstop();
             
           );
           
           
           osc1.level.LFO_4.modamount.dragging ? (osc1.level.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc1.pan.LFO_4.modamount.dragging ? (osc1.pan.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc1.transpose.LFO_4.modamount.dragging ? (osc1.transpose.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc1.finetune.LFO_4.modamount.dragging ? (osc1.finetune.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc1.PWM.LFO_4.modamount.dragging ? (osc1.PWM.LFO_4.modamount.dummy_potdrag(); caller = 1);
           
           osc2.level.LFO_4.modamount.dragging ? (osc2.level.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc2.pan.LFO_4.modamount.dragging ? (osc2.pan.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc2.transpose.LFO_4.modamount.dragging ? (osc2.transpose.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc2.finetune.LFO_4.modamount.dragging ? (osc2.finetune.LFO_4.modamount.dummy_potdrag(); caller = 1);
           osc2.PWM.LFO_4.modamount.dragging ? (osc2.PWM.LFO_4.modamount.dummy_potdrag(); caller = 1);
           
           synth.filter_f.LFO_4.modamount.dragging ? (synth.filter_f.LFO_4.modamount.dummy_potdrag(); caller = 1);
                  
           NG.level.LFO_4.modamount.dragging ? (NG.level.LFO_4.modamount.dummy_potdrag(); caller = 1);
           NG.pan.LFO_4.modamount.dragging ? (NG.pan.LFO_4.modamount.dummy_potdrag(); caller = 1);
           NG.filter_f.LFO_4.modamount.dragging ? (NG.filter_f.LFO_4.modamount.dummy_potdrag(); caller = 1);
           
       ); // number input
       );
       

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 /*
 env3.startslider = 102;
 NG.Filter.startslider = 108;
 env6.startslider = 115;
 NG.startslider = 121;
 */
 
 
 sgfx_x = 880*zoom; sgfx_y = 20*zoom; sgfx_w = 200*zoom; sgfx_h = 100*zoom;
   gfx_setfont(1,"Arial",11*size,'b');
   
 env_sgfx_y = sgfx_y + 2* sgfx_h + 3*sgfx_w/20;
 env_sgfx_w = 210*zoom; //41*sgfx_w/20;
 black();
 gfx_rect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h);
 
 
 env_seconds = 2*env_sgfx_w / NG.gfx_seconds; //letzte Zahl sind Sekunden
 gfx_env.attack = env_seconds* synth.subosc_1.VCA3.attack / srate;
 gfx_env.decay = env_seconds* synth.subosc_1.VCA3.decay / srate;
 gfx_env.breakpoint = synth.subosc_1.VCA3.breakpoint;
 gfx_env.decay2 = env_seconds* synth.subosc_1.VCA3.decay2 / srate;
 gfx_env.sustain = synth.subosc_1.VCA3.sustain;
 gfx_env.release = env_seconds* synth.subosc_1.VCA3.release / srate;
 
 gfx_rect(sgfx_x + 15*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 50*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 85*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 120*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 155*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 gfx_rect(sgfx_x + 190*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
 
 gfx_rect(sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom);
 env_sgfx_d = 210*zoom/6; 
 
 !g_collision (sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom) && !NG.at_coef.dragging && !NG.dec1_coef.dragging && !NG.dec2_coef.dragging && !NG.rel_coef.dragging ? (
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
  gfx_drawstr("ATK", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.attack/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
  gfx_drawstr("DEC", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
  gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
  gfx_drawstr("SLP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay2/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
  gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
  gfx_drawstr("REL", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.release/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 ):(
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
  gfx_drawstr(NG.at_shape == 0 ? "LIN" : NG.at_shape == 1 ? "S" : NG.at_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.at_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
  gfx_drawstr(NG.dec1_shape == 0 ? "LIN" : NG.dec1_shape == 1 ? "S" : NG.dec1_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.dec1_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
  //gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
  gfx_drawstr(NG.dec2_shape == 0 ? "LIN" : NG.dec2_shape == 1 ? "S" : NG.dec2_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.dec2_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
  //gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
  gfx_drawstr(NG.rel_shape == 0 ? "LIN" : NG.rel_shape == 1 ? "S" : NG.rel_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
  gfx_drawstr(sprintf(#, "%.2f", Env2.rel_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
 );
 
 VCA3 = (gfx_env.attack / env_seconds);
 
 gfx_x = gfx_osc1_attack_x = sgfx_x; gfx_y = gfx_osc1_attack_y = env_sgfx_y - 45*zoom - (gfx_env.attack / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_decay_x = sgfx_x + 35*zoom; gfx_y = gfx_osc1_decay_y = env_sgfx_y - 45*zoom - (gfx_env.decay*0.5 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_breakpoint_x = sgfx_x + 70*zoom; gfx_y = gfx_osc1_breakpoint_y = env_sgfx_y - 45*zoom - (gfx_env.breakpoint) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_decay2_x = sgfx_x + 105*zoom; gfx_y = gfx_osc1_decay2_y = env_sgfx_y - 45*zoom - (gfx_env.decay2*0.5 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_sustain_x = sgfx_x+ 140*zoom; gfx_y = gfx_osc1_sustain_y = env_sgfx_y - 45*zoom - (gfx_env.sustain) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 gfx_x = gfx_osc1_release_x = sgfx_x+ 175*zoom; gfx_y = gfx_osc1_release_y = env_sgfx_y - 45*zoom - (gfx_env.release*0.25 / env_seconds) * sgfx_h*0.75;
 gfx_blit(0,zoom*0.13,0);
 
 
 gfx_setimgdim(127,10000,10000);
 gfx_dest = 127;
 black(); gfx_rect(0,0,10000,10000);
 
 rgb(0,255,255);
 gfx_x = sgfx_x+1; gfx_y = env_sgfx_y + sgfx_h-1;
 tmp_loop = 0;
 tmp_wait = 0;
 gfx_env.stage = 1; gfx_env.follower = 0;
 while(
 
 gfx_env.stage_old != gfx_env.stage ? (
 gfx_env.stage == 1 ? rgb(255,255,0):
 gfx_env.stage == 2 ? rgb(255,120,255):
 gfx_env.stage == 3 ? (rgb(0,200,200); gfx_line(sgfx_x + tmp_loop-1, gfx_y, sgfx_x+tmp_loop-1,env_sgfx_y+sgfx_h); rgb(0,250,25)):
 gfx_env.stage == 4 ? rgb(255,200,0):
 gfx_env.stage == 5 ? rgb(255,120,120);
 );
 gfx_env.stage_old = gfx_env.stage;
 
 gfx_env.stage != 4 ? (
 gfx_env.new_complex_envelope(env3.at_shape, env3.dec1_shape, env3.dec2_shape, env3.rel_shape, env3.at_coef, env3.dec1_coef, env3.dec2_coef, env3.rel_coef);
 
  ):gfx_env.stage == 4 ? (
 tmp_wait >= env_seconds ? gfx_env.stage = 5;
 tmp_wait += 1;
 );
 
 gfx_lineto(sgfx_x + tmp_loop, env_sgfx_y + sgfx_h - gfx_env.real_level*19*sgfx_h/20); 
 tmp_loop += 1;
 
 gfx_env.envelope_stop == 0
 );
 gfx_env.envelope_stop = 0;
 
 
 NG.scroll_w = env_sgfx_w * (env_sgfx_w / tmp_loop);
 NG.scroll_offset = (env_sgfx_w / tmp_loop);
 //scroll = slider247;
 
 gfx_dest = -1;
 gfx_x=sgfx_x; gfx_y=env_sgfx_y;gfx_a=1;
 gfx_blit(127,1,0, sgfx_x + env_sgfx_w*(1/(NG.scroll_offset))*(NG.scroll-NG.scroll_offset*NG.scroll), env_sgfx_y, env_sgfx_w, sgfx_h);
 
 
 white(); gfx_roundrect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h, 0);
 
 
 g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) || NG.gfx_seconds.dragging ? (
 lightgrey(); gfx_x = sgfx_x + env_sgfx_w -65*zoom; gfx_y = env_sgfx_y + 3*zoom; 
 gfx_drawstr("Zoom: "); gfx_drawnumber(NG.gfx_seconds/2,1); gfx_drawstr("s"); 
 
 NG.scroll_w < env_sgfx_w ? (
 gfx_osc1_scroll_x = sgfx_x + (env_sgfx_w-NG.scroll_w)*NG.scroll;
 gfx_osc1_scroll_y = env_sgfx_y + sgfx_h - 10*zoom;
 gfx_roundrect(gfx_osc1_scroll_x, gfx_osc1_scroll_y, NG.scroll_w, 8*zoom, 4*zoom);
 gfx_roundrect(gfx_osc1_scroll_x + 2*zoom, env_sgfx_y + sgfx_h - 8*zoom, NG.scroll_w-4*zoom, 4*zoom, 2*zoom);
 );
 );
 
 
     
 NG.Volume.parameter_config (NG.startslider,       7,        0,    10,  sgfx_x/zoom + 25,   sgfx_y/zoom +20, 120,    101,    1,   1);
 NG.volume.knob();
       black();gfx_setfont(1,"Arial",11*zoom,'b');
       #klabel = "LEVEL"; gfx_measurestr(#klabel, klw, klh); NG.Volume.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); NG.Volume.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
       #klabel = " 2.5"; gfx_measurestr(#klabel, klw, klh); NG.Volume.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
       #klabel = " 5"; gfx_measurestr(#klabel, klw, klh); NG.Volume.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); NG.Volume.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "10"; gfx_measurestr(#klabel, klw, klh); NG.Volume.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
 
 NG.Pan.parameter_config (NG.startslider+ 1,       0,        -100,    100,  sgfx_x/zoom + 125,   sgfx_y/zoom +20, 120,    101,    1,   NG.unison ? 4 : 2);
 NG.Pan.knob();
       black();gfx_setfont(1,"Arial",11*zoom,'b');
       NG.unison ? #klabel = "WIDTH" : #klabel = "PAN"; gfx_measurestr(#klabel, klw, klh); NG.PAN.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "L "; gfx_measurestr(#klabel, klw, klh); NG.PAN.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
       #klabel = ""; gfx_measurestr(#klabel, klw, klh); NG.PAN.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
       #klabel = "C"; gfx_measurestr(#klabel, klw, klh); NG.PAN.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = ""; gfx_measurestr(#klabel, klw, klh); NG.PAN.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
       #klabel = " R"; gfx_measurestr(#klabel, klw, klh); NG.PAN.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
     
     
     
    black();
    gfx_setfont(2,"Arial",16*zoom,'b'); 
    gfx_x = sgfx_x + 26*zoom; gfx_y = env_sgfx_y + sgfx_h + 385*zoom;
    gfx_drawstr("NOISE GENERATOR");
    gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 220*zoom, 742*zoom,0);
    gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 222*zoom, 742*zoom,0);
  
  
    !Number_input ? (
    
    mouse_cap == 2 ? (
    g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.at_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.dec1_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.dec2_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.rel_shape = selection - 1;
    selection = 0; caller = 1;
    );
    
    );
    
    mouseClick == 1 ? (
       

        g_collision(gfx_osc1_attack_x, gfx_osc1_attack_y, 33*zoom, 15* zoom) ? NG.gfx_attack.v_dragstart();
        g_collision(gfx_osc1_decay_x, gfx_osc1_decay_y, 33*zoom, 15* zoom) ? NG.gfx_decay.v_dragstart();
        g_collision(gfx_osc1_breakpoint_x, gfx_osc1_breakpoint_y, 33*zoom, 15* zoom) ? NG.gfx_breakpoint.v_dragstart();
        g_collision(gfx_osc1_decay2_x, gfx_osc1_decay2_y, 33*zoom, 15* zoom) ? NG.gfx_decay2.v_dragstart();
        g_collision(gfx_osc1_sustain_x, gfx_osc1_sustain_y, 33*zoom, 15* zoom) ? NG.gfx_sustain.v_dragstart();
        g_collision(gfx_osc1_release_x, gfx_osc1_release_y, 33*zoom, 15* zoom) ? NG.gfx_release.v_dragstart();
        
        g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) ? (
           g_collision(sgfx_x + env_sgfx_w -65*zoom, env_sgfx_y + 3*zoom,65*zoom, 14*zoom) ? 
             NG.gfx_seconds.dummy_dragstart(5, 0.5, 15);
             
           g_collision(gfx_osc1_scroll_x, gfx_osc1_scroll_y, NG.scroll_w, 8*zoom) && NG.scroll_w < env_sgfx_w ? 
             NG.scroll.dummy_h_dragstart(0, 0, 1);
         );
        
        
        g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.at_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.dec1_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.dec2_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.rel_coef.dummy_dragstart(0, -10, 10);
        
        NG.Volume.k_collision() ? NG.Volume.dragstart();
        NG.pan.k_collision() ? NG.pan.dragstart();
   
        ); // click
   
   mouseclick == -1 ? (

   NG.gfx_attack.dragstop();
   NG.gfx_decay.dragstop();
   NG.gfx_breakpoint.dragstop();
   NG.gfx_decay2.dragstop();
   NG.gfx_sustain.dragstop();
   NG.gfx_release.dragstop();
   
   NG.gfx_seconds.dummy_dragstop();
   NG.scroll.dummy_dragstop();
   
   NG.at_coef.dummy_dragstop();
   NG.dec1_coef.dummy_dragstop();
   NG.dec2_coef.dummy_dragstop();
   NG.rel_coef.dummy_dragstop();
   
   NG.Volume.dragstop();
   NG.pan.dragstop();

   
   );
   
   mouse_wheel ? 
       (

           NG.Volume.k_collision() ? (NG.Volume.potwheel(); caller = 1);
           NG.pan.k_collision() ? (NG.pan.potwheel(); caller = 1);
           
       );
       

   NG.gfx_attack.v_dragging ? (NG.gfx_attack.v_potdrag(sgfx_h*0.75); caller = 1);
   NG.gfx_decay.v_dragging ? (NG.gfx_decay.v_potdrag(sgfx_h*0.75); caller = 1);
   NG.gfx_breakpoint.v_dragging ? (NG.gfx_breakpoint.v_potdrag(sgfx_h*0.75); caller = 1);
   NG.gfx_decay2.v_dragging ? (NG.gfx_decay2.v_potdrag(sgfx_h*0.75); caller = 1);
   NG.gfx_sustain.v_dragging ? (NG.gfx_sustain.v_potdrag(sgfx_h*0.75); caller = 1);
   NG.gfx_release.v_dragging ? (NG.gfx_release.v_potdrag(sgfx_h*0.75); caller = 1);
   
   NG.gfx_seconds.dragging ? (NG.gfx_seconds.dummy_potdrag(); caller = 1);
   NG.scroll.h_dragging ? (NG.scroll.dummy_h_potdrag(env_sgfx_w-NG.scroll_w); caller = 1);
   
   NG.at_coef.dragging ? (NG.at_coef.dummy_potdrag(); caller = 1);
   NG.dec1_coef.dragging ? (NG.dec1_coef.dummy_potdrag(); caller = 1);
   NG.dec2_coef.dragging ? (NG.dec2_coef.dummy_potdrag(); caller = 1);
   NG.rel_coef.dragging ? (NG.rel_coef.dummy_potdrag(); caller = 1);
   
   NG.Volume.dragging ? (NG.Volume.potdrag(); caller = 1);
   NG.pan.dragging ? (NG.pan.potdrag(); caller = 1);
   
 
   );//number input
  
  
  
  ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG

  NG.gfx_attack.parameter_config          (Env3.startslider,       150,      0,  1000,  0, 0, 0, 0, 0, 0);
  NG.gfx_decay.parameter_config           (Env3.startslider+1,     200,      0,  2000,  0, 0, 0, 0, 0, 0);
  NG.gfx_breakpoint.parameter_config      (Env3.startslider+2,       4,      0,    10,  0, 0, 0, 0, 0, 0);
  NG.gfx_decay2.parameter_config          (Env3.startslider+3,     300,      0,  2000,  0, 0, 0, 0, 0, 0);
  NG.gfx_sustain.parameter_config         (Env3.startslider+4,       8,      0,    10,  0, 0, 0, 0, 0, 0);
  NG.gfx_release.parameter_config         (Env3.startslider+5,     150,      0,  4000,  0, 0, 0, 0, 0, 0);

  
  
  
  
  
  
  
  sgfx_y = sgfx_y + 378*zoom;
  

  
  gfx_filter.NG_Freq.parameter_config (NG.filter.startslider,       100,        0,    100,  sgfx_x/zoom + 20,   sgfx_y/zoom -30, 120,    101,    1,   1);
  gfx_filter.NG_Freq.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "FILTER"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "0"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = "70"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "475"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "3.6"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "22k"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Freq.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  gfx_filter.NG_Resonance.parameter_config (NG.filter.startslider+1,       0,        0,    10,  sgfx_x/zoom + 130,   sgfx_y/zoom -30, 120,    101,    1,   1);
  gfx_filter.NG_Resonance.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "RESO."; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.knoblabelposition_scaled(klw); gfx_x -= 5*zoom;gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "LO"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "MED"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = ""; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "HI"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG_Resonance.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  
  gfx_setfont(1,"Arial",11*size,'b');
  black();
  gfx_x = sgfx_x + 10*zoom; gfx_y = sgfx_y + 50*zoom;
  gfx_rect(gfx_x, gfx_y, 40*zoom, 25*zoom);
  gfx_g = 1;
   gfx_drawstr("TYPE", 0x05, gfx_x+40*zoom, gfx_y + sgfx_dy - 6*zoom);
   gfx_x = sgfx_x + 10*zoom; gfx_y += 8*zoom;
   NG.filter_type == 5 ? (
      #tmp_str = "LPF ";
      NG.filter_slope == 1 ? #tmp_str += "12":
      NG.filter_slope == 3 ? #tmp_str += "24":
      NG.filter_slope == 6 ? #tmp_str += "48";
   ):NG.filter_type == 8 ? (
      #tmp_str = "BP";
   );
   gfx_drawstr(#tmp_str, 0x05, gfx_x+40*zoom, gfx_y + sgfx_dy);
   
  black();
  gfx_x = sgfx_x + 10*zoom; gfx_y = sgfx_y + 80*zoom;
  gfx_rect(gfx_x, gfx_y, 40, 25);
  gfx_g = 1;
   gfx_drawstr("KEY", 0x05, gfx_x+40*zoom, gfx_y + sgfx_dy - 6*zoom);
   gfx_x = sgfx_x + 10*zoom; gfx_y += 8*zoom;
   NG.keyfollow == 0 ? #tmp_str = "OFF" :
   NG.keyfollow == 0.5 ? #tmp_str = "HALF" :
   NG.keyfollow == 1 ? #tmp_str = "FULL";
   gfx_drawstr(#tmp_str, 0x05, gfx_x+40*zoom, gfx_y + sgfx_dy);
   
  black();
  gfx_x = sgfx_x + 87*zoom; gfx_y = sgfx_y - 40*zoom;
  gfx_rect(gfx_x, gfx_y, 40*zoom, 16*zoom);
  gfx_g = 1;
   //gfx_drawstr("KEY", 0x05, gfx_x+40*zoom, gfx_y + sgfx_dy - 6*zoom);
   //gfx_x = sgfx_x + 10*zoom; gfx_y += 8*zoom;
   NG.VCF_On == 0 ? #tmp_str = "OFF" :
   NG.VCF_ON == 1 ? #tmp_str = "ON" ;
   gfx_drawstr(#tmp_str, 0x05, gfx_x+40*zoom, gfx_y + 16*zoom);
    
  
  
  
  
  
  
  
  env_sgfx_y = sgfx_y + 2* sgfx_h + 3*sgfx_w/20;
  env_sgfx_w = 210*zoom;//41*sgfx_w/20;
  black();
  gfx_rect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h);
  
  
  env_seconds = 2*env_sgfx_w / NG.filter.gfx_seconds; //letzte Zahl sind Sekunden
  gfx_env.attack = env_seconds* env6.attack / srate;
  gfx_env.decay = env_seconds* env6.decay / srate;
  gfx_env.breakpoint = env6.breakpoint;
  gfx_env.decay2 = env_seconds* env6.decay2 / srate;
  gfx_env.sustain = env6.sustain;
  gfx_env.release = env_seconds* env6.release / srate;
  
  gfx_rect(sgfx_x + 15*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 50*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 85*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 120*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 155*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  gfx_rect(sgfx_x + 190*zoom, env_sgfx_y - 115*zoom, 3*zoom, 75*zoom);
  
  gfx_rect(sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom);
  env_sgfx_d = 210*zoom/6; 
  
  !g_collision (sgfx_x, env_sgfx_y - 30*zoom, 210*zoom, 25*zoom) && !env6.at_coef.dragging && !env6.dec1_coef.dragging && !env6.dec2_coef.dragging && !env6.rel_coef.dragging ? (
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
   gfx_drawstr("ATK", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.attack/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
   gfx_drawstr("DEC", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
   gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
   gfx_drawstr("SLP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.decay2/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
   gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
   gfx_drawstr("REL", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%i", 1000*gfx_env.release/env_seconds), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  ):(
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,255,0);
   gfx_drawstr(env6.at_shape == 0 ? "LIN" : env6.at_shape == 1 ? "S" : env6.at_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 0*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env6.at_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,255);
   gfx_drawstr(env6.dec1_shape == 0 ? "LIN" : env6.dec1_shape == 1 ? "S" : env6.dec1_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 1*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env6.dec1_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,255,255);
   //gfx_drawstr("BP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 2*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.breakpoint), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(0,250,25);
   gfx_drawstr(env6.dec2_shape == 0 ? "LIN" : env6.dec2_shape == 1 ? "S" : env6.dec2_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 3*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env6.dec2_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,200,0);
   //gfx_drawstr("SUS", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   //gfx_x = sgfx_x + 4*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   //gfx_drawstr(sprintf(#, "%.1f", 10*gfx_env.sustain), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 32*zoom;rgb(255,120,120);
   gfx_drawstr(env6.rel_shape == 0 ? "LIN" : env6.rel_shape == 1 ? "S" : env6.rel_shape == 2 ? "EXP", 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
   gfx_x = sgfx_x + 5*env_sgfx_d; gfx_y = env_sgfx_y - 22*zoom;
   gfx_drawstr(sprintf(#, "%.2f", env6.rel_coef), 0x05, gfx_x+env_sgfx_d, gfx_y + sgfx_dy);
  );
  
  gfx_x = gfx_NG.filter_attack_x = sgfx_x; gfx_y = gfx_NG.filter_attack_y = env_sgfx_y - 45*zoom - (gfx_env.attack / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_NG.filter_decay_x = sgfx_x + 35*zoom; gfx_y = gfx_NG.filter_decay_y = env_sgfx_y - 45*zoom - (gfx_env.decay*0.5 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_NG.filter_breakpoint_x = sgfx_x + 70*zoom; gfx_y = gfx_NG.filter_breakpoint_y = env_sgfx_y - 45*zoom - (gfx_env.breakpoint) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_NG.filter_decay2_x = sgfx_x + 105*zoom; gfx_y = gfx_NG.filter_decay2_y = env_sgfx_y - 45*zoom - (gfx_env.decay2*0.5 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_NG.filter_sustain_x = sgfx_x+ 140*zoom; gfx_y = gfx_NG.filter_sustain_y = env_sgfx_y - 45*zoom - (gfx_env.sustain) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  gfx_x = gfx_NG.filter_release_x = sgfx_x+ 175*zoom; gfx_y = gfx_NG.filter_release_y = env_sgfx_y - 45*zoom - (gfx_env.release*0.25 / env_seconds) * sgfx_h*0.75;
  gfx_blit(0,zoom*0.13,0);
  
  
  gfx_setimgdim(127,10000,10000);
  gfx_dest = 127;
  black(); gfx_rect(0,0,10000,10000);
  
  rgb(0,255,255);
  gfx_x = sgfx_x+1; gfx_y = env_sgfx_y + sgfx_h-1;
  tmp_loop = 0;
  tmp_wait = 0;
  gfx_env.stage = 1; gfx_env.follower = 0;
  while(
  
  gfx_env.stage_old != gfx_env.stage ? (
  gfx_env.stage == 1 ? rgb(255,255,0):
  gfx_env.stage == 2 ? rgb(255,120,255):
  gfx_env.stage == 3 ? (rgb(0,200,200); gfx_line(sgfx_x + tmp_loop-1, gfx_y, sgfx_x+tmp_loop-1,env_sgfx_y+sgfx_h); rgb(0,250,25)):
  gfx_env.stage == 4 ? rgb(255,200,0):
  gfx_env.stage == 5 ? rgb(255,120,120);
  );
  gfx_env.stage_old = gfx_env.stage;
  
  gfx_env.stage != 4 ? (
  gfx_env.new_complex_envelope(env6.at_shape, env6.dec1_shape, env6.dec2_shape, env6.rel_shape, env6.at_coef, env6.dec1_coef, env6.dec2_coef, env6.rel_coef);
  ):gfx_env.stage == 4 ? (
  tmp_wait >= env_seconds ? gfx_env.stage = 5;
  tmp_wait += 1;
  );
  
  gfx_lineto(sgfx_x + tmp_loop, env_sgfx_y + sgfx_h - gfx_env.real_level*19*sgfx_h/20); 
  tmp_loop += 1;
  
  gfx_env.envelope_stop == 0
  );
  gfx_env.envelope_stop = 0;
  
  
  NG.filter.scroll_w = env_sgfx_w * (env_sgfx_w / tmp_loop);
  NG.filter.scroll_offset = (env_sgfx_w / tmp_loop);
  //scroll = slider247;
  
  gfx_dest = -1;
  gfx_x=sgfx_x; gfx_y=env_sgfx_y;gfx_a=1;
  gfx_blit(127,1,0, sgfx_x + env_sgfx_w*(1/(NG.filter.scroll_offset))*(NG.filter.scroll-NG.filter.scroll_offset*NG.filter.scroll), env_sgfx_y, env_sgfx_w, sgfx_h);
  
  
  white(); gfx_roundrect(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h, 0);
  
  
  g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) || NG.filter.gfx_seconds.dragging ? (
  lightgrey(); gfx_x = sgfx_x + env_sgfx_w -65*zoom; gfx_y = env_sgfx_y + 3*zoom; 
  gfx_drawstr("Zoom: "); gfx_drawnumber(NG.filter.gfx_seconds/2,1); gfx_drawstr("s"); 
  
  NG.filter.scroll_w < env_sgfx_w ? (
  gfx_NG.filter_scroll_x = sgfx_x + (env_sgfx_w-NG.filter.scroll_w)*NG.filter.scroll;
  gfx_NG.filter_scroll_y = env_sgfx_y + sgfx_h - 10*zoom;
  gfx_roundrect(gfx_NG.filter_scroll_x, gfx_NG.filter_scroll_y, NG.filter.scroll_w, 8*zoom, 4*zoom);
  gfx_roundrect(gfx_NG.filter_scroll_x + 2*zoom, env_sgfx_y + sgfx_h - 8*zoom, NG.filter.scroll_w-4*zoom, 4*zoom, 2*zoom);
  );
  );
  
  
  /*
  black();
  gfx_setfont(2,"Arial",16*zoom,'b'); 
  gfx_x = sgfx_x + 5*zoom; gfx_y = env_sgfx_y + sgfx_h + 5*zoom;
  gfx_drawstr("FILTER (VCF)");
  gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 420*zoom, 362*zoom,0);
  gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 422*zoom, 364*zoom,0);
  */
  
  
  
  
  gfx_filter.NG.VCF_ENV.parameter_config (NG.filter.startslider+6,       0,        -100,    100,  sgfx_x/zoom + 74,   sgfx_y/zoom +50, 120,    101,    1,   1);
  gfx_filter.NG.VCF_ENV.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "VCF_ENV"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.knoblabelposition_scaled(klw);gfx_y -= 20*zoom; gfx_x += 70*zoom;gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "-100"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = "-50"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "± 0"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "50"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "100"; gfx_measurestr(#klabel, klw, klh); gfx_filter.NG.VCF_ENV.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  
  
  
  //anykey(sgfx_x + 339 * zoom, sgfx_y + 125*zoom, NG.VCF_ON, "ON"); //40x40px
  
  
  
  
  
  
  
    !Number_input ? (
    
    mouse_cap == 2 ? (
    g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.filter.at_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.filter.dec1_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.filter.dec2_shape = selection - 1;
    selection = 0; caller = 1;
    );
    g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LINEAR|S-SHAPE|EXP");
    selection ? NG.filter.rel_shape = selection - 1;
    selection = 0; caller = 1;
    );
    
    );
    
    mouseClick == 1 ? (
    
       g_collision(gfx_NG.filter_attack_x, gfx_NG.filter_attack_y, 33*zoom, 15* zoom) ? env6.gfx_attack.v_dragstart();
       g_collision(gfx_NG.filter_decay_x, gfx_NG.filter_decay_y, 33*zoom, 15* zoom) ? env6.gfx_decay.v_dragstart();
       g_collision(gfx_NG.filter_breakpoint_x, gfx_NG.filter_breakpoint_y, 33*zoom, 15* zoom) ? env6.gfx_breakpoint.v_dragstart();
       g_collision(gfx_NG.filter_decay2_x, gfx_NG.filter_decay2_y, 33*zoom, 15* zoom) ? env6.gfx_decay2.v_dragstart();
       g_collision(gfx_NG.filter_sustain_x, gfx_NG.filter_sustain_y, 33*zoom, 15* zoom) ? env6.gfx_sustain.v_dragstart();
       g_collision(gfx_NG.filter_release_x, gfx_NG.filter_release_y, 33*zoom, 15* zoom) ? env6.gfx_release.v_dragstart();
       
        
        
        g_collision(sgfx_x + 0*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.filter.at_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 1*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.filter.dec1_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 3*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.filter.dec2_coef.dummy_dragstart(0, -10, 10);
        g_collision(sgfx_x + 5*env_sgfx_d, env_sgfx_y - 32*zoom, env_sgfx_d, 25*zoom) ? NG.filter.rel_coef.dummy_dragstart(0, -10, 10);
        
        gfx_filter.NG_Freq.K_Collision() ? gfx_filter.NG_Freq.dragstart();
        gfx_filter.NG_Resonance.K_Collision() ? gfx_filter.NG_Resonance.dragstart();
        gfx_filter.NG.VCF_ENV.K_Collision() ? gfx_filter.NG.VCF_ENV.dragstart();
        
        g_collision(sgfx_x + 10*zoom, sgfx_y + 50*zoom, 40*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("LPF 12|LPF 24|LPF 48|BP");
        selection ? (
        selection == 1 ? (slider(NG.filter.startslider + 2) = 0; slider(NG.filter.startslider + 3) = 1); 
        selection == 2 ? (slider(NG.filter.startslider + 2) = 1; slider(NG.filter.startslider + 3) = 1); 
        selection == 3 ? (slider(NG.filter.startslider + 2) = 2; slider(NG.filter.startslider + 3) = 1); 
        selection == 4 ? (slider(NG.filter.startslider + 3) = 0); 
        selection = 0; caller = 1;
        );
        );
  
        g_collision(sgfx_x + 10*zoom, sgfx_y + 80*zoom, 40*zoom, 25 * zoom) ? (gfx_x = mouse_x; gfx_y = mouse_y; selection = gfx_showmenu("OFF|HALF|FULL");
        selection ? (
        selection == 1 ? (slider(NG.filter.startslider + 4) = 0);
        selection == 2 ? (slider(NG.filter.startslider + 4) = .5);
        selection == 3 ? (slider(NG.filter.startslider + 4) = 1); 
        selection = 0; caller = 1;
        );
        );
        
        g_collision(sgfx_x + 87*zoom, sgfx_y - 40*zoom, 40*zoom, 16*zoom) ? (slider(NG.filter.startslider + 5) == 0 ? slider(NG.filter.startslider + 5) = 1 : slider(NG.filter.startslider + 5) = 0; caller = 1);
    
    g_collision(sgfx_x, env_sgfx_y, env_sgfx_w, sgfx_h) ? (
       g_collision(sgfx_x + env_sgfx_w -65*zoom, env_sgfx_y + 3*zoom,65*zoom, 14*zoom) ? 
         NG.filter.gfx_seconds.dummy_dragstart(5, 0.5, 15);
     );
     
        g_collision(gfx_NG.filter_scroll_x, gfx_NG.filter_scroll_y, NG.filter.scroll_w, 8*zoom) && NG.filter.scroll_w < env_sgfx_w ? 
          NG.filter.scroll.dummy_h_dragstart(0, 0, 1);
    ); // click
   
   mouseclick == -1 ? (
  
   env6.gfx_attack.dragstop();
   env6.gfx_decay.dragstop();
   env6.gfx_breakpoint.dragstop();
   env6.gfx_decay2.dragstop();
   env6.gfx_sustain.dragstop();
   env6.gfx_release.dragstop();
   
   NG.filter.gfx_seconds.dummy_dragstop();
   NG.filter.scroll.dummy_dragstop();
   
   NG.filter.at_coef.dummy_dragstop();
   NG.filter.dec1_coef.dummy_dragstop();
   NG.filter.dec2_coef.dummy_dragstop();
   NG.filter.rel_coef.dummy_dragstop();
  
   gfx_filter.NG_Freq.dragstop();
   gfx_filter.NG_Resonance.dragstop();
   gfx_filter.NG.VCF_ENV.dragstop();
   
   );
   
   mouse_wheel ? 
       (
           gfx_filter.NG_Freq.K_Collision() ? (gfx_filter.NG_Freq.potwheel(); caller = 1);
           gfx_filter.NG_Resonance.K_Collision() ? (gfx_filter.NG_Resonance.potwheel(); caller = 1);
           gfx_filter.NG.VCF_ENV.K_Collision() ? (gfx_filter.NG.VCF_ENV.potwheel(); caller = 1);
       );
       
  
   env6.gfx_attack.v_dragging ? (env6.gfx_attack.v_potdrag(sgfx_h*0.75); caller = 1);
   env6.gfx_decay.v_dragging ? (env6.gfx_decay.v_potdrag(sgfx_h*0.75); caller = 1);
   env6.gfx_breakpoint.v_dragging ? (env6.gfx_breakpoint.v_potdrag(sgfx_h*0.75); caller = 1);
   env6.gfx_decay2.v_dragging ? (env6.gfx_decay2.v_potdrag(sgfx_h*0.75); caller = 1);
   env6.gfx_sustain.v_dragging ? (env6.gfx_sustain.v_potdrag(sgfx_h*0.75); caller = 1);
   env6.gfx_release.v_dragging ? (env6.gfx_release.v_potdrag(sgfx_h*0.75); caller = 1);
   
   NG.filter.gfx_seconds.dragging ? (NG.filter.gfx_seconds.dummy_potdrag(); caller = 1);
   NG.filter.scroll.h_dragging ? (NG.filter.scroll.dummy_h_potdrag(env_sgfx_w-NG.filter.scroll_w); caller = 1);
   
   NG.filter.at_coef.dragging ? (NG.filter.at_coef.dummy_potdrag(); caller = 1);
   NG.filter.dec1_coef.dragging ? (NG.filter.dec1_coef.dummy_potdrag(); caller = 1);
   NG.filter.dec2_coef.dragging ? (NG.filter.dec2_coef.dummy_potdrag(); caller = 1);
   NG.filter.rel_coef.dragging ? (NG.filter.rel_coef.dummy_potdrag(); caller = 1);
   
   gfx_filter.NG_Freq.dragging ? (gfx_filter.NG_Freq.potdrag(); caller = 1);
   gfx_filter.NG_Resonance.dragging ? (gfx_filter.NG_Resonance.potdrag(); caller = 1);
   gfx_filter.NG.VCF_ENV.dragging ? (gfx_filter.NG.VCF_ENV.potdrag(); caller = 1);
   
   
   
      NG.filter.scroll.h_dragging ? (NG.filter.scroll.dummy_h_potdrag(env_sgfx_w-NG.filter.scroll_w); caller = 1);
   );//number input
  
  
  
  
  ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
  
  env6.gfx_attack.parameter_config          (env6.startslider,       150,      0,  1000,  0, 0, 0, 0, 0, 0);
  env6.gfx_decay.parameter_config           (env6.startslider+1,     200,      0,  2000,  0, 0, 0, 0, 0, 0);
  env6.gfx_breakpoint.parameter_config      (env6.startslider+2,       4,      0,    10,  0, 0, 0, 0, 0, 0);
  env6.gfx_decay2.parameter_config          (env6.startslider+3,     300,      0,  2000,  0, 0, 0, 0, 0, 0);
  env6.gfx_sustain.parameter_config         (env6.startslider+4,       8,      0,    10,  0, 0, 0, 0, 0, 0);
  env6.gfx_release.parameter_config         (env6.startslider+5,     150,      0,  4000,  0, 0, 0, 0, 0, 0);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  sgfx_x = 1110 * zoom; sgfx_y = 20*zoom;
  black();
  gfx_setfont(2,"Arial",16*zoom,'b'); 
  gfx_x = sgfx_x + 28*zoom; gfx_y = sgfx_y + 715*zoom;
  gfx_drawstr("MASTER SETTINGS");
  gfx_roundrect(sgfx_x - 5*zoom, sgfx_y - 5*zoom, 220*zoom, 742*zoom,0);
  gfx_roundrect(sgfx_x - 6*zoom, sgfx_y - 6*zoom, 222*zoom, 742*zoom,0);
  
  
  
  
  
  
  gfx_glide.parameter_config (3,       0,        0,    1,  sgfx_x/zoom + 120,   sgfx_y/zoom +20, 120,    101,    1,   1);
  gfx_glide.knob();
        black();gfx_setfont(1,"Arial",11*zoom,'b');
        #klabel = "GLIDE"; gfx_measurestr(#klabel, klw, klh); gfx_glide.knoblabelposition_scaled(klw);gfx_drawstr(#klabel);
        gfx_setfont(2,"Arial",10*zoom,'b');
        #klabel = "0"; gfx_measurestr(#klabel, klw, klh); gfx_glide.labelposition_scaled(1,klw, klh); gfx_drawstr(#klabel);
        #klabel = "15m"; gfx_measurestr(#klabel, klw, klh); gfx_glide.labelposition_scaled(3,klw, klh); gfx_drawstr(#klabel);
        #klabel = "300m"; gfx_measurestr(#klabel, klw, klh); gfx_glide.labelposition_scaled(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
        #klabel = "1.5s"; gfx_measurestr(#klabel, klw, klh); gfx_glide.labelposition_scaled(7,klw, klh); gfx_drawstr(#klabel); 
        #klabel = "5s"; gfx_measurestr(#klabel, klw, klh); gfx_glide.labelposition_scaled(9,klw, klh); gfx_drawstr(#klabel);
  
  anykey(sgfx_x + 30 * zoom, sgfx_y + 30*zoom, Monoorpoly==1, "MONO");
  
  
  
   anykey(sgfx_x + 30 * zoom, sgfx_y + 130*zoom, show_sliders==1, "");  
     gfx_x += 50*zoom; gfx_y -= 30*zoom;
     gfx_drawstr("SHOW CV SLIDERS");
     
     
     
    ;
     
       !Number_input ? (
       
  
       mouseClick == 1 ? (
       

           gfx_glide.K_Collision() ? gfx_glide.dragstart();
        
           
           g_collision(sgfx_x + 30 * zoom, sgfx_y + 30*zoom, 40*zoom, 40*zoom) ? (slider2 == 0 ? slider2 = 1 : slider2 = 0; caller = 1);
       
           g_collision(sgfx_x + 30 * zoom, sgfx_y + 130*zoom, 40*zoom, 40*zoom) ? (
           show_sliders == 0 ? show_sliders =1 : show_sliders=0;
           slider_show(slider247,show_sliders);
           slider_show(slider248,show_sliders);
           slider_show(slider249,show_sliders);
           slider_show(slider250,show_sliders);
           slider_show(slider251,show_sliders);
           slider_show(slider252,show_sliders);
           slider_show(slider253,show_sliders);
           slider_show(slider254,show_sliders);
           slider_show(slider255,show_sliders);
           slider_show(slider256,show_sliders);
           );
           
           
       ); // click
      
      mouseclick == -1 ? (
     
      gfx_glide.dragstop();
      
      );
      
      mouse_wheel ? 
          (
              gfx_glide.K_Collision() ? (gfx_glide.potwheel(); caller = 1);
          );
          

      gfx_glide.dragging ? (gfx_glide.potdrag(); caller = 1);

      );//number input
     
     
     
     
     ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
     
     
     
     
     
     
 mouse_wheel = 0;
 caller == 1 ? (
     parameters_update_on == 0 ? (
         parameters_update();  
     );
 );
 
 //gfx_x = gfx_y = 0; black();gfx_setfont(1,"Arial",13*zoom,'b');
 //gfx_drawnumber(synth.subosc_1.VCA1.real_level,3);

