desc:Deesser (Tukan)
//author: Tukan
//version 1.1

slider1:-16<-32,0,0.1>-Threshold (dB)
slider2:0<0,100,1>-DONT Knee (%)
slider3:8<1,17,0.1>-DONT Ratio
slider4:75<0,100,0.01>-Key In
slider5:100<0,100,0.01>-Key Out
slider6:0<-24,24,0.1>-DONT Output (dB)
slider7:0<0,1,1{Off,On}>-Key Listen
slider8:0<0,1,1>-DONT Feedback
slider9:0<0,1,1>-DONT Sidechain
slider10:0<0,1,1>-DONT Metermode

slider11:3<0,5,0.01>-DONT Meterspeed
slider12:0<0,1,0.01>-DONT Dry amount
slider13:1<0,6,.01>-Scaling

filename:0,TKCC2gui/DSRBack.png
filename:1,TKCC2gui/APIBig.png
filename:2,TKCC2gui/APIRED.png
filename:3,TKCC2gui/APISmall.png
filename:4,TKCC2gui/switch.png
filename:5,TKCC2gui/CVU.png
filename:6,TKCC2gui/screw.png
filename:7,TKCC2gui/CCVU2.png
filename:8,TKCC2gui/gled.png
filename:9,TKCC2gui/oled.png
filename:10,TKCC2gui/rled.png
filename:11,TKCC2gui/menu.png
options:No_meter

in_pin:L in
in_pin:R in 
out_pin:L out
out_pin:R out

@init
ext_noinit = 1; 
gfx_ext_retina = 1;

ovrlgain = 1;

threshold = slider1;
knee_width = abs(slider1*2*slider2*0.01);
grold = 1;

inMeter = 0; ginMeter=0; gin2Meter=0;

ratio = 8;
slope = ((1 - ratio) / ratio);

attack = slider4/1000;
release = slider5/1000;
alphaA = attack>0 ? exp(-1 / (attack * srate)) : 0;
alphaR = release>0 ? exp(-1 / (release * srate)) : 0;

Tlo = (threshold - knee_width / 2);
Thi = (threshold + knee_width / 2);
knee_factor = (slope / (knee_width * 2));

yR = 0;
yA = 0;

function computeGain(x)
(
(x < Tlo) ? x = 0 :
(x > Thi) ? x = slope * (x - threshold) :
(delta = x - Tlo;
x = delta * delta * knee_factor;);
);

function smoothAverage(x, alphaA, alphaR)
(
eps = 0.0000000001;
yR = min(x, alphaR * yR + (1 - alphaR) * x + eps - eps);
yA = alphaA * yA + (1 - alphaA) * yR + eps - eps;
x = yA;
);

dbc = 20/log(10);
function db2ratio(d) ( 10^(d/20); );
function ratio2db(r) ( log(abs(r))*dbc; );

gr_meter = 1;
gr_meter_decay = exp(1/(1*srate));














meter_dif = 0.0005;

function meterspeed()
(
mspd = slider11;
meter_speed = mspd/srate;

mspd == 5 ? (
gr_meter2 < gr_meter ? (
  meter_speed /= 5;
  abs(gr_meter2 - gr_meter) > meter_dif ? (
    gr_meter2 = gr_meter2 + (meter_speed);
    
  );
//gr_meter *= 1.1;

):(


    gr_meter2 = gr_meter;

  );
);
;

mspd == 0 ? (
  gr_meter2 > gr_meter ? (
    gr_meter2 = gr_meter;
  );
);

mspd > 0 ? (
mspd < 5 ? (
gr_meter2 < gr_meter ? (

  abs(gr_meter2 - gr_meter) > meter_dif ? (
    gr_meter2 = gr_meter2 + (meter_speed);
    
  );
//gr_meter *= 1.1;

):(

  abs(gr_meter2 - gr_meter) > meter_dif ? (
    gr_meter2 = gr_meter2 - meter_speed*8;
   gr_meter2 < gr_meter ? gr_meter2 = gr_meter;
  );
);
);
);

gr_meter2 > 1 ? gr_meter2 =1;
);










  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  coords=srate+1;
  
    function limitgui(s low up)
                  ( min(max(s, low), up) );
    function deg(r)
                  ( r / $pi * 180 );
    function rad(d)
                  ( d * $pi / 180 );
                  
                  
 /******************************* GUI Function ***********************************/
 
 function xy(x y)
            ( gfx_x = x; gfx_y = y; );
 
 function rgb(r g b)
             ( gfx_r = r; gfx_g = g; gfx_b = b; );
 
 function rectIn  (xIn_ yIn_ wIn hIn)
   instance       (xIn yIn widthIn heightIn)
                  (
                   xIn = xIn_;
                   yIn = yIn_;
                   widthIn = wIn;
                   heightIn = hIn;
                   );
                 
 function rectOut  (xOut_ yOut_ wOut hOut c i)
   instance        (xOut yOut widthOut heightOut count index)
                   (
                    xOut = xOut_;
                    yOut = yOut_;
                    widthOut = wOut;
                    heightOut = hOut;
                    count = c;
                    index = i;
                    );                
 
 function potVal(v)
   instance      (frame val minVal maxVal count heightOut)
                 (
                  val = v;
                  frame = (val - minVal) * (count - 1) / (maxVal - minVal) + 0.5;
                  frame |= 0;
                 );
 
 function potCfg  (default_ minVal_ maxVal_ step_)
   instance        (default minVal maxVal step)
                   (
                    default = default_;
                    minVal = minVal_;
                    maxVal = maxVal_;
                    step    = step_;
                    this.potVal(default);
                   );
 
 function bkg(wImg hImg indImg)
              (
                gfx_a=1;
                coords[0] = coords[4] = 0;
                coords[1] = coords[5] = 0;;
                coords[2] = coords[6] = wImg;
                coords[3] = coords[7] = hImg;
                gfx_blitext(indImg, coords, 0);
               ); 
 
 function potDrawIn ()
   instance        (xIn yIn widthIn heightIn val)
                   (
                      gfx_r= 1; gfx_g = gfx_b =0;gfx_a= 0.5;
                      
                      gfx_line(xIn,yIn,xIn,heightIn+yIn);
                      gfx_line(xIn,heightIn+yIn,xIn+widthIn,heightIn+yIn);
                      gfx_line(xIn+widthIn,yIn,xIn+widthIn,heightIn+yIn);
                      gfx_line(xIn,yIn,xIn+widthIn,yIn);
       
                      gfx_r = gfx_g = gfx_b = 0.75;
                      gfx_x = xIn + widthIn/2-12;
                      gfx_y = yIn+heightIn/2-5;
                      gfx_drawnumber(val, 1);                   
                   );
 
 function knob()
   instance   (xOut yOut widthOut heightOut index frame val)
              (
               
                gfx_a=1;
                coords[0] = 0;
                coords[1] = frame * heightOut;
                coords[2] = coords[6] = widthOut;
                coords[3] = coords[7] = heightOut;
                coords[4] = xOut;
                coords[5] = yOut;
                gfx_blitext(index, coords, 0);
               );                                     
 
 function collision  ()
   instance          (xIn yIn widthIn heightIn)
                     (
                      mouse_x > xIn*zfct && mouse_x < xIn*zfct + widthIn*zfct && mouse_y > yIn*zfct && mouse_y < yIn*zfct + heightIn*zfct
                     );
 
 function dragStart ()
   instance          (dragging yOld default)
                     (
                      !ctrl ? (
                      yOld = mouse_y;
                      dragging = 1;
                     ) : 
                      this.potVal(default);
                     );
 
 function dragStop()
   instance        (dragging val valOld)
                   (
                    dragging = 0;
                    valOld = val;
                   );
 
    function potDrag()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                       !shift ? (
                       mstep = (this.maxval - this.minval)/100;
                      val = valOld + (yOld - mouse_y) * mstep;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      ):(
                      val = valOld + (yOld - mouse_y) * step;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      );
                     );
                     
    function potToggle()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                      valold == 0 ? (val = 1):(val=0);
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      valOld=val;
                       );
    
    function potWheel()
        local         (val)
        instance      (valOld minVal maxVal step)
                      (
                      mstep = (this.maxval - this.minval)/100;
                       val = valOld + (mouse_wheel/36)*mstep;
                       val = limitgui(val, minVal, maxVal);
                       this.potVal(val);
                       valOld=val;
                       mouse_wheel=0;
                        );
 
   
 gthresh.potcfg  (-16,-32,-0,.032); //default. von, bis, step
// gratio.potcfg (4,1,15,.015);
 gatt.potcfg   (75,62.4,100,.01); // 1500 - 20000
 grel.potcfg   (90,66.56,100,.01); // 2000 - 20000
// goutgain.potcfg   (0,-24,24,.048);
// gfeedback.potcfg   (0,0,1,1);
 Trick.potcfg   (0,0,1,1);
// SC.potcfg   (0,0,1,1);
// screw.potcfg   (3,0,5,.01);
// gknee.potcfg   (0,0,100,.1);
// gdry.potcfg   (0,0,1,.001);
 
 knobsx = 50; 
 knobsy = 60;
 gthresh.rectIn(knobsx,knobsy,75,75);//xpos,ypos,weite,höhe des img
 gthresh.rectOut(knobsx,knobsy, 75, 75, 61, 1); //Xpos,ypos,weite,höhe,Frames,bitmap

// gknee.rectIn(knobsx+95,knobsy+75, 10, 10);
// gknee.rectOut(knobsx+95,knobsy+75, 10, 10, 61, 6);
 
// gratio.rectIn(knobsx+120,knobsy, 75, 75);
// gratio.rectOut(knobsx+120,knobsy, 75, 75, 61, 2);
 
 gatt.rectIn(knobsx+120,knobsy+7, 60, 60); 
 gatt.rectOut(knobsx+120,knobsy+7, 60, 60, 61, 3);
 
grel.rectIn(knobsx+200,knobsy+7, 60, 60); 
grel.rectOut(knobsx+200,knobsy+7, 60, 60, 61, 3);

//knobsx+=260; knobsy+=133;
//goutgain.rectIn(knobsx,knobsy, 75, 75); 
//goutgain.rectOut(knobsx,knobsy, 75, 75, 61, 2);

//gdry.rectIn(knobsx-18,knobsy+85, 10, 10); 
//gdry.rectOut(knobsx-18,knobsy+85, 10, 10, 61, 6);

//screw.rectIn(knobsx+324,knobsy-175, 10, 10); 
//screw.rectOut(knobsx+324,knobsy-175, 10, 10, 61, 6);


//knobsx+=120;
//gfeedback.rectIn(knobsx,knobsy, 48, 60); 
//gfeedback.rectOut(knobsx,knobsy, 48, 60, 2, 4);

Trick.rectIn(knobsx+280,knobsy+7, 48, 60); 
Trick.rectOut(knobsx+280,knobsy+7, 48, 60, 2, 4);

//SC.rectIn(knobsx+120,knobsy, 48, 60); 
//SC.rectOut(knobsx+120,knobsy, 48, 60, 2, 4);









  
  errcnt = 0;
  tot_nbr_spl = 0;
  scnt = 0;
  
  offset = 0.0074;//0.0074;
  
  nd_posL = nd_posR = 0.6800809;;
  nd_speedL = nd_speedR = 0;
  
  dt = 10 / srate;
  
  mom = 0.00042;
  
  dbL = dbR = 0;
  overL = overR = 0;
  
  fact_up = 10 ^ (( 0 - 10)/20) * 0.3785 ;
  wl   = 0;
  damp = 0.995;//935; //1 - slider5 * (48000 / srate);
  
  mnmode = 0; // (0 ST, 1 SumMono, 2 MaxMono)
  meterInL = spl0;
  meterInR = spl1;
  



stattslider_on = 0;

function stattslider() (
//changer == 1 ?(
stattslider_on = 1;

threshold = slider1;
knee_width = abs(slider1*2*75*0.01);

ratio = 8;
slope = ((1 - ratio) / ratio);

attack = 1/1000;
release = 5/1000;
alphaA = attack>0 ? exp(-1 / (attack * srate)) : 0;
alphaR = release>0 ? exp(-1 / (release * srate)) : 0;

Tlo = (threshold - knee_width / 2);
Thi = (threshold + knee_width / 2);
knee_factor = (slope / (knee_width * 2));

output = 10^(0/20);

listen = slider7;


//****************************
//hp

n_hp = 6;
CHLP_sx = 16+slider4*1.20103;
CHLP_cx_hp = floor(exp(CHLP_sx*log(1.059))*8.17742);
cutoff_hp = 2*CHLP_cx_hp/srate;
res_hp = 10^(0.05*(-0/n_hp+1.5));

k = 0.5*res_hp*sin($pi*cutoff_hp);
CHLP_c1 = 0.5*(1-k)/(1+k);
CHLP_c2 = (0.5+CHLP_c1)*cos($pi*cutoff_hp);
CHLP_c3 = (0.5+CHLP_c1+CHLP_c2)*0.25;

CHLP_a0_hp = 2*CHLP_c3;
CHLP_a1_hp = -4*CHLP_c3;
CHLP_a2_hp = 2*CHLP_c3;
CHLP_b1_hp = -2*CHLP_c2;
CHLP_b2_hp = 2*CHLP_c1;

//****************************
//lp

n_lp = 6;
CHLP_sx = 16+slider5*1.20103;
CHLP_cx_lp = floor(exp(CHLP_sx*log(1.059))*8.17742);
cutoff_lp = 2*CHLP_cx_lp/srate;
res_lp = 10^(0.05*(-5/n_lp+1.5));

k = 0.5*res_lp*sin($pi*cutoff_lp);
CHLP_c1 = 0.5*(1-k)/(1+k);
CHLP_c2 = (0.5+CHLP_c1)*cos($pi*cutoff_lp);
CHLP_c3 = (0.5+CHLP_c1-CHLP_c2)*0.25;

CHLP_a0_lp = 2*CHLP_c3;
CHLP_a1_lp = 4*CHLP_c3;
CHLP_a2_lp = 2*CHLP_c3;
CHLP_b1_lp = -2*CHLP_c2;
CHLP_b2_lp = 2*CHLP_c1;


stattslider_on = 0;
);






@slider
changer = 1;



























@sample

changer == 1 ? (
stattslider_on == 0 ? (stattslider();changer = 0):(changer = 1);
);

/*
inL ? (oops = 0):(inL = spl0);
inR ? (oops = 0):(inR = spl1);
*/
clean0 = spl0;
clean1 = spl1;
/*
slider8 == 1 ?(
inL = feedL;//spl0;
inR = feedR;// spl1;
):(
inL = spl0; inR = spl1;
);
slider9 == 1 ? (
inL = spl2; inR = spl3;
);
*/








inl = spl0;
inr = spl1;
//********************************************* 
//hp
n_hp > 0 ? (
CHLP_out_hp_l_1 = CHLP_a0_hp*inl+CHLP_a1_hp*CHLP_hp_l_11+CHLP_a2_hp*CHLP_hp_l_12-CHLP_b1_hp*CHLP_hp_l_13-CHLP_b2_hp*CHLP_hp_l_14;
CHLP_hp_l_12 = CHLP_hp_l_11;
CHLP_hp_l_11 = inl;
CHLP_hp_l_14 = CHLP_hp_l_13;
CHLP_hp_l_13 = CHLP_out_hp_l_1;
CHLP_out_hp_l = CHLP_out_hp_l_1;
CHLP_out_hp_r_1 = CHLP_a0_hp*inr+CHLP_a1_hp*CHLP_hp_r_11+CHLP_a2_hp*CHLP_hp_r_12-CHLP_b1_hp*CHLP_hp_r_13-CHLP_b2_hp*CHLP_hp_r_14;
CHLP_hp_r_12 = CHLP_hp_r_11;
CHLP_hp_r_11 = inr;
CHLP_hp_r_14 = CHLP_hp_r_13;
CHLP_hp_r_13 = CHLP_out_hp_r_1;
CHLP_out_hp_r = CHLP_out_hp_r_1;
n_hp > 1 ? (
CHLP_out_hp_l_2 = CHLP_a0_hp*CHLP_out_hp_l_1+CHLP_a1_hp*CHLP_hp_l_21+CHLP_a2_hp*CHLP_hp_l_22-CHLP_b1_hp*CHLP_hp_l_23-CHLP_b2_hp*CHLP_hp_l_24;
CHLP_hp_l_22 = CHLP_hp_l_21;
CHLP_hp_l_21 = CHLP_out_hp_l_1;
CHLP_hp_l_24 = CHLP_hp_l_23;
CHLP_hp_l_23 = CHLP_out_hp_l_2;
CHLP_out_hp_l = CHLP_out_hp_l_2;
CHLP_out_hp_r_2 = CHLP_a0_hp*CHLP_out_hp_r_1+CHLP_a1_hp*CHLP_hp_r_21+CHLP_a2_hp*CHLP_hp_r_22-CHLP_b1_hp*CHLP_hp_r_23-CHLP_b2_hp*CHLP_hp_r_24;
CHLP_hp_r_22 = CHLP_hp_r_21;
CHLP_hp_r_21 = CHLP_out_hp_r_1;
CHLP_hp_r_24 = CHLP_hp_r_23;
CHLP_hp_r_23 = CHLP_out_hp_r_2;
CHLP_out_hp_r = CHLP_out_hp_r_2;
);
n_hp > 2 ? (
CHLP_out_hp_l_3 = CHLP_a0_hp*CHLP_out_hp_l_2+CHLP_a1_hp*CHLP_hp_l_31+CHLP_a2_hp*CHLP_hp_l_32-CHLP_b1_hp*CHLP_hp_l_33-CHLP_b2_hp*CHLP_hp_l_34;
CHLP_hp_l_32 = CHLP_hp_l_31;
CHLP_hp_l_31 = CHLP_out_hp_l_2;
CHLP_hp_l_34 = CHLP_hp_l_33;
CHLP_hp_l_33 = CHLP_out_hp_l_3;
CHLP_out_hp_l = CHLP_out_hp_l_3;
CHLP_out_hp_r_3 = CHLP_a0_hp*CHLP_out_hp_r_2+CHLP_a1_hp*CHLP_hp_r_31+CHLP_a2_hp*CHLP_hp_r_32-CHLP_b1_hp*CHLP_hp_r_33-CHLP_b2_hp*CHLP_hp_r_34;
CHLP_hp_r_32 = CHLP_hp_r_31;
CHLP_hp_r_31 = CHLP_out_hp_r_2;
CHLP_hp_r_34 = CHLP_hp_r_33;
CHLP_hp_r_33 = CHLP_out_hp_r_3;
CHLP_out_hp_r = CHLP_out_hp_r_3;
);
n_hp > 3 ? (
CHLP_out_hp_l_4 = CHLP_a0_hp*CHLP_out_hp_l_3+CHLP_a1_hp*CHLP_hp_l_41+CHLP_a2_hp*CHLP_hp_l_42-CHLP_b1_hp*CHLP_hp_l_43-CHLP_b2_hp*CHLP_hp_l_44;
CHLP_hp_l_42 = CHLP_hp_l_41;
CHLP_hp_l_41 = CHLP_out_hp_l_3;
CHLP_hp_l_44 = CHLP_hp_l_43;
CHLP_hp_l_43 = CHLP_out_hp_l_4;
CHLP_out_hp_l = CHLP_out_hp_l_4;
CHLP_out_hp_r_4 = CHLP_a0_hp*CHLP_out_hp_r_3+CHLP_a1_hp*CHLP_hp_r_41+CHLP_a2_hp*CHLP_hp_r_42-CHLP_b1_hp*CHLP_hp_r_43-CHLP_b2_hp*CHLP_hp_r_44;
CHLP_hp_r_42 = CHLP_hp_r_41;
CHLP_hp_r_41 = CHLP_out_hp_r_3;
CHLP_hp_r_44 = CHLP_hp_r_43;
CHLP_hp_r_43 = CHLP_out_hp_r_4;
CHLP_out_hp_r = CHLP_out_hp_r_4;
);
n_hp > 4 ? (
CHLP_out_hp_l_5 = CHLP_a0_hp*CHLP_out_hp_l_4+CHLP_a1_hp*CHLP_hp_l_51+CHLP_a2_hp*CHLP_hp_l_52-CHLP_b1_hp*CHLP_hp_l_53-CHLP_b2_hp*CHLP_hp_l_54;
CHLP_hp_l_52 = CHLP_hp_l_51;
CHLP_hp_l_51 = CHLP_out_hp_l_4;
CHLP_hp_l_54 = CHLP_hp_l_53;
CHLP_hp_l_53 = CHLP_out_hp_l_5;
CHLP_out_hp_l = CHLP_out_hp_l_5;
CHLP_out_hp_r_5 = CHLP_a0_hp*CHLP_out_hp_r_4+CHLP_a1_hp*CHLP_hp_r_51+CHLP_a2_hp*CHLP_hp_r_52-CHLP_b1_hp*CHLP_hp_r_53-CHLP_b2_hp*CHLP_hp_r_54;
CHLP_hp_r_52 = CHLP_hp_r_51;
CHLP_hp_r_51 = CHLP_out_hp_r_4;
CHLP_hp_r_54 = CHLP_hp_r_53;
CHLP_hp_r_53 = CHLP_out_hp_r_5;
CHLP_out_hp_r = CHLP_out_hp_r_5;
);
n_hp > 5 ? (
CHLP_out_hp_l_6 = CHLP_a0_hp*CHLP_out_hp_l_5+CHLP_a1_hp*CHLP_hp_l_61+CHLP_a2_hp*CHLP_hp_l_62-CHLP_b1_hp*CHLP_hp_l_63-CHLP_b2_hp*CHLP_hp_l_64;
CHLP_hp_l_62 = CHLP_hp_l_61;
CHLP_hp_l_61 = CHLP_out_hp_l_5;
CHLP_hp_l_64 = CHLP_hp_l_63;
CHLP_hp_l_63 = CHLP_out_hp_l_6;
CHLP_out_hp_l = CHLP_out_hp_l_6;
CHLP_out_hp_r_6 = CHLP_a0_hp*CHLP_out_hp_r_5+CHLP_a1_hp*CHLP_hp_r_61+CHLP_a2_hp*CHLP_hp_r_62-CHLP_b1_hp*CHLP_hp_r_63-CHLP_b2_hp*CHLP_hp_r_64;
CHLP_hp_r_62 = CHLP_hp_r_61;
CHLP_hp_r_61 = CHLP_out_hp_r_5;
CHLP_hp_r_64 = CHLP_hp_r_63;
CHLP_hp_r_63 = CHLP_out_hp_r_6;
CHLP_out_hp_r = CHLP_out_hp_r_6;
);
) : (
CHLP_out_hp_l = inl;
CHLP_out_hp_r = inr;
);
//*********************************************
//lp
n_lp > 0 ? (
CHLP_out_lp_l_1 = CHLP_a0_lp*CHLP_out_hp_l+CHLP_a1_lp*CHLP_lp_l_11+CHLP_a2_lp*CHLP_lp_l_12-CHLP_b1_lp*CHLP_lp_l_13-CHLP_b2_lp*CHLP_lp_l_14;
CHLP_lp_l_12 = CHLP_lp_l_11;
CHLP_lp_l_11 = CHLP_out_hp_l;
CHLP_lp_l_14 = CHLP_lp_l_13;
CHLP_lp_l_13 = CHLP_out_lp_l_1;
CHLP_out_lp_l = CHLP_out_lp_l_1;
CHLP_out_lp_r_1 = CHLP_a0_lp*CHLP_out_hp_r+CHLP_a1_lp*CHLP_lp_r_11+CHLP_a2_lp*CHLP_lp_r_12-CHLP_b1_lp*CHLP_lp_r_13-CHLP_b2_lp*CHLP_lp_r_14;
CHLP_lp_r_12 = CHLP_lp_r_11;
CHLP_lp_r_11 = CHLP_out_hp_r;
CHLP_lp_r_14 = CHLP_lp_r_13;
CHLP_lp_r_13 = CHLP_out_lp_r_1;
CHLP_out_lp_r = CHLP_out_lp_r_1;
n_lp > 1 ? (
CHLP_out_lp_l_2 = CHLP_a0_lp*CHLP_out_lp_l_1+CHLP_a1_lp*CHLP_lp_l_21+CHLP_a2_lp*CHLP_lp_l_22-CHLP_b1_lp*CHLP_lp_l_23-CHLP_b2_lp*CHLP_lp_l_24;
CHLP_lp_l_22 = CHLP_lp_l_21;
CHLP_lp_l_21 = CHLP_out_lp_l_1;
CHLP_lp_l_24 = CHLP_lp_l_23;
CHLP_lp_l_23 = CHLP_out_lp_l_2;
CHLP_out_lp_l = CHLP_out_lp_l_2;
CHLP_out_lp_r_2 = CHLP_a0_lp*CHLP_out_lp_r_1+CHLP_a1_lp*CHLP_lp_r_21+CHLP_a2_lp*CHLP_lp_r_22-CHLP_b1_lp*CHLP_lp_r_23-CHLP_b2_lp*CHLP_lp_r_24;
CHLP_lp_r_22 = CHLP_lp_r_21;
CHLP_lp_r_21 = CHLP_out_lp_r_1;
CHLP_lp_r_24 = CHLP_lp_r_23;
CHLP_lp_r_23 = CHLP_out_lp_r_2;
CHLP_out_lp_r = CHLP_out_lp_r_2;
);
n_lp > 2 ? (
CHLP_out_lp_l_3 = CHLP_a0_lp*CHLP_out_lp_l_2+CHLP_a1_lp*CHLP_lp_l_31+CHLP_a2_lp*CHLP_lp_l_32-CHLP_b1_lp*CHLP_lp_l_33-CHLP_b2_lp*CHLP_lp_l_34;
CHLP_lp_l_32 = CHLP_lp_l_31;
CHLP_lp_l_31 = CHLP_out_lp_l_2;
CHLP_lp_l_34 = CHLP_lp_l_33;
CHLP_lp_l_33 = CHLP_out_lp_l_3;
CHLP_out_lp_l = CHLP_out_lp_l_3;
CHLP_out_lp_r_3 = CHLP_a0_lp*CHLP_out_lp_r_2+CHLP_a1_lp*CHLP_lp_r_31+CHLP_a2_lp*CHLP_lp_r_32-CHLP_b1_lp*CHLP_lp_r_33-CHLP_b2_lp*CHLP_lp_r_34;
CHLP_lp_r_32 = CHLP_lp_r_31;
CHLP_lp_r_31 = CHLP_out_lp_r_2;
CHLP_lp_r_34 = CHLP_lp_r_33;
CHLP_lp_r_33 = CHLP_out_lp_r_3;
CHLP_out_lp_r = CHLP_out_lp_r_3;
);
n_lp > 3 ? (
CHLP_out_lp_l_4 = CHLP_a0_lp*CHLP_out_lp_l_3+CHLP_a1_lp*CHLP_lp_l_41+CHLP_a2_lp*CHLP_lp_l_42-CHLP_b1_lp*CHLP_lp_l_43-CHLP_b2_lp*CHLP_lp_l_44;
CHLP_lp_l_42 = CHLP_lp_l_41;
CHLP_lp_l_41 = CHLP_out_lp_l_3;
CHLP_lp_l_44 = CHLP_lp_l_43;
CHLP_lp_l_43 = CHLP_out_lp_l_4;
CHLP_out_lp_l = CHLP_out_lp_l_4;
CHLP_out_lp_r_4 = CHLP_a0_lp*CHLP_out_lp_r_3+CHLP_a1_lp*CHLP_lp_r_41+CHLP_a2_lp*CHLP_lp_r_42-CHLP_b1_lp*CHLP_lp_r_43-CHLP_b2_lp*CHLP_lp_r_44;
CHLP_lp_r_42 = CHLP_lp_r_41;
CHLP_lp_r_41 = CHLP_out_lp_r_3;
CHLP_lp_r_44 = CHLP_lp_r_43;
CHLP_lp_r_43 = CHLP_out_lp_r_4;
CHLP_out_lp_r = CHLP_out_lp_r_4;
);
n_lp > 4 ? (
CHLP_out_lp_l_5 = CHLP_a0_lp*CHLP_out_lp_l_4+CHLP_a1_lp*CHLP_lp_l_51+CHLP_a2_lp*CHLP_lp_l_52-CHLP_b1_lp*CHLP_lp_l_53-CHLP_b2_lp*CHLP_lp_l_54;
CHLP_lp_l_52 = CHLP_lp_l_51;
CHLP_lp_l_51 = CHLP_out_lp_l_4;
CHLP_lp_l_54 = CHLP_lp_l_53;
CHLP_lp_l_53 = CHLP_out_lp_l_5;
CHLP_out_lp_l = CHLP_out_lp_l_5;
CHLP_out_lp_r_5 = CHLP_a0_lp*CHLP_out_lp_r_4+CHLP_a1_lp*CHLP_lp_r_51+CHLP_a2_lp*CHLP_lp_r_52-CHLP_b1_lp*CHLP_lp_r_53-CHLP_b2_lp*CHLP_lp_r_54;
CHLP_lp_r_52 = CHLP_lp_r_51;
CHLP_lp_r_51 = CHLP_out_lp_r_4;
CHLP_lp_r_54 = CHLP_lp_r_53;
CHLP_lp_r_53 = CHLP_out_lp_r_5;
CHLP_out_lp_r = CHLP_out_lp_r_5;
);
n_lp > 5 ? (
CHLP_out_lp_l_6 = CHLP_a0_lp*CHLP_out_lp_l_5+CHLP_a1_lp*CHLP_lp_l_61+CHLP_a2_lp*CHLP_lp_l_62-CHLP_b1_lp*CHLP_lp_l_63-CHLP_b2_lp*CHLP_lp_l_64;
CHLP_lp_l_62 = CHLP_lp_l_61;
CHLP_lp_l_61 = CHLP_out_lp_l_5;
CHLP_lp_l_64 = CHLP_lp_l_63;
CHLP_lp_l_63 = CHLP_out_lp_l_6;
CHLP_out_lp_l = CHLP_out_lp_l_6;
CHLP_out_lp_r_6 = CHLP_a0_lp*CHLP_out_lp_r_5+CHLP_a1_lp*CHLP_lp_r_61+CHLP_a2_lp*CHLP_lp_r_62-CHLP_b1_lp*CHLP_lp_r_63-CHLP_b2_lp*CHLP_lp_r_64;
CHLP_lp_r_62 = CHLP_lp_r_61;
CHLP_lp_r_61 = CHLP_out_lp_r_5;
CHLP_lp_r_64 = CHLP_lp_r_63;
CHLP_lp_r_63 = CHLP_out_lp_r_6;
CHLP_out_lp_r = CHLP_out_lp_r_6;
);
) : (
CHLP_out_lp_l = CHLP_out_hp_l;
CHLP_out_lp_r = CHLP_out_hp_r;
);














inMeter = max(abs(spl0),abs(spl1));

xL = max(abs(CHLP_out_lp_l),abs(CHLP_out_lp_r));

xG = ratio2db(xL);
yG = computeGain(xG);
cG = smoothAverage(yG, alphaA, alphaR);
cL = db2ratio(cG);


listen == 0 ? (
spl0 = clean0 * slider12 + spl0 * cL * output;
spl1 = clean1 * slider12 + spl1 * cL * output;
);









gr = db2ratio(cL);
grv = ratio2db(gr);
//abs(gr_meter - meter_old) > 0.01 ? (gr_meter_decay = 1.01;//.111111;
gr_meter_decay = 1.1;
grv < gr_meter ? gr_meter=grv : ( gr_meter = grv; gr_meter>1?gr_meter=1; );// gr_meter*=gr_meter_decay
grmin = min( min(cG,cG) , grmin);

meterspeed();
meter_old = gr_meter;


  mom = 0.0001 + 0.00032 * abs(100-slider11*20)^3 / 125000;
 // mnmetersample(grv*0.63,grv*0.63,1,mom); // mode = (0 ST, 1 SumMono, 2 MaxMono), mnmom = speed
 
 
// inMeter = db2
inMeter > ginMeter ? ginMeter=inMeter : (ginMeter*=0.99997;  ginMeter<0.1?ginMeter=0; );








/// LIMITER ///////////////
ovrlParam1=1.5; //ovrlthresh
ovrlParam2=0.5; //output
ovrlParam3=0.5+0*0.5; //ovrlattack
ovrlParam4=0.5+0*0.5; //ovrlrelease
ovrlParam5=0; //softknee

//hard knee
ovrlthresh = pow(10, (2 * ovrlParam1) - 2);

ovrltrim = pow(10, (2 * ovrlParam2) - 1);
ovrlatt = pow(10, -0.01 - (2 * ovrlParam3));
ovrlrel = pow(10, -2 - (3 * ovrlParam4));


ovrlth = ovrlthresh;
ovrlg = ovrlgain;
ovrlat = ovrlatt;
ovrlre = ovrlrel;
ovrltr = ovrltrim;

ovrlol = spl0;
ovrlor = spl1;

ovrllev = (0.5 * ovrlg * abs(ovrlol + ovrlor));

(ovrllev > ovrlth) ?
(
ovrlg = ovrlg - (ovrlat * (ovrllev - ovrlth));
)
: //below ovrlthreshold
(
ovrlg = ovrlg + (ovrlre * (1 - ovrlg));
);

listen == 0 ? (
spl0 = (ovrlol * ovrltr * ovrlg);
spl1 = (ovrlor * ovrltr * ovrlg);
):(
spl0 = CHLP_out_lp_l;
spl1 = CHLP_out_lp_r;
);




ovrlgain = ovrlg;

 
















@gfx 450 171 //360












      mouseHold = mouse_cap & 1;
      ctrl = mouse_cap & 4;
      shift = mouse_cap & 8;
      mouseClick = mouseHold - lastCap;
      lastCap = mouseHold;
      mouse_xz = mouse_x;
      mouse_yz = mouse_y;
      
gfx_ext_flags == 0 ? (

      /////////////////////////////  ZFCT ////////////////////////
      zfct_w = 450; zfct_h = 171;
      gfx_setimgdim(127,zfct_w,zfct_h);
      gfx_dest = 127;
      zmnu != slider13 ? zmnu = slider13;
      mouse_xz = mouse_x / zfct;
      mouse_yz = mouse_y / zfct;
      ///////////////////////////////////////////////////////////
      
initial == 0 ? (
grmin = 0;

      gthresh=slider1;
      gthresh.val=gthresh;
      gthresh.potVal(gthresh.val);
      gratio=slider3;
      gratio.val=gratio;
      gratio.potVal(gratio.val);
      gatt=slider4;
      gatt.val=gatt;
      gatt.potVal(gatt.val);
      grel=slider5;
      grel.val=grel;
      grel.potVal(grel.val);
      goutgain=slider6;
      goutgain.val=goutgain;
      goutgain.potVal(goutgain.val);
      gfeedback=slider8;
      gfeedback.val=gfeedback;
      gfeedback.potVal(gfeedback.val);
          Trick=slider7;
          Trick.val=Trick;
          Trick.potVal(Trick.val);
          SC=slider9;
          SC.val=SC;
          SC.potVal(SC.val);
          initial = 1;
          screw=slider11;
          screw.val=screw;
          screw.potVal(screw.val);
          screw.valOld=screw;
          gdry=slider12;
          gdry.val=gdry;
          gdry.potVal(gdry.val);
          gdry.valOld=gdry;
);
  




/*
meter_bot=21;
meter_h=20; //min(gfx_h,gfx_h-4);
xscale=gfx_w*20/meter_bot;
meterx = 395; metery=40;
gfx_r=0.5;gfx_g=0.5;gfx_b=0.5; gfx_a=.1;
gfx_rect(0,0,650,300);
//gfx_rect(meterx,metery,220,120);

gfx_a=1;
gfx_x=meterx; gfx_y=metery+2;
gfx_blit(5,1,0);


dscale = 100/103;
slider10 == 0 ? (
gfx_r=0.1;gfx_g=0.1;gfx_b=0.1; gfx_a=1;
//gfx_rect(0,0,650,300);
gfx_rect(meterx,metery,220,120);
n= 1;
gfx_r=0.7;gfx_g=0.8;gfx_b=1; gfx_a=0.3;
loop(3,
gfx_line(meterx+120-(n*30),metery+10,meterx+120-(n*30),metery+110);
gfx_line(meterx+20,metery+10+(n*30),meterx+120,metery+10+(n*30));
n = n + 1;
);

gfx_r=0.7;gfx_g=0.8;gfx_b=1; gfx_a=1;
gfx_line(meterx+20,metery+10,meterx+20,metery+110);
gfx_line(meterx+120,metery+10,meterx+120,metery+110);
gfx_line(meterx+20,metery+10,meterx+120,metery+10);
gfx_line(meterx+20,metery+110,meterx+120,metery+110);
gfx_line(meterx+20,metery+110, meterx+120+(slider1*3), metery+10-(slider1*3));
grat = (slider1*3) - (slider1*3/slider3);
gfx_line(meterx+120+(slider1*3), metery+10-(slider1*3), meterx+120, metery+10-grat);
gfx_r=1; gfx_g=gfx_b=0; gfx_a=1;
gfx_rect(meterx+123,metery+10,5,(-1 * (log10(gr_meter)*100)));
grold > gr_meter ? (grold = gr_meter);
grold != 1 ? (gfx_rect(meterx+123,metery+10+(-1 * (log10(grold)*100)),5,1));

ticker += 1;
gcG > cG ? (
gcG = cG;
ticker = 0;
) : (
ticker > 15 ? (
gcG = cG;
ticker = 0;
);
);

gfx_r=0.7;gfx_g=0.8;gfx_b=1; gfx_a=1;
gfx_x = meterx + 145; gfx_y=metery+10;
gfx_drawstr("Thresh:");
gfx_x = meterx + 145; gfx_y=metery+20;
gfx_drawnumber(slider1,1);//(grmin,1);
gfx_drawstr(" dB");

gfx_x = meterx + 145; gfx_y=metery+33;
gfx_drawstr("Ratio:");
gfx_x = meterx + 145; gfx_y=metery+43;
gfx_drawnumber(slider3,1);//(grmin,1);
gfx_drawstr(" : 1");

gfx_x = meterx + 145; gfx_y=metery+56;
gfx_drawstr("Knee:"); 
gfx_x = meterx + 145; gfx_y=metery+66;
gfx_drawnumber(slider2,0); gfx_drawstr(" %");

gfx_r=1; gfx_g=gfx_b=0; gfx_a=1;
gfx_x = meterx + 148; gfx_y=metery+80;
gfx_drawnumber(gcG,1);//(grmin,1);
gfx_drawstr(" dB");
gfx_x = meterx + 148; gfx_y=metery+95;
gfx_drawnumber(grmin,1);
gfx_drawstr(" dB");
gfx_x = meterx + 148; gfx_y=metery+105;
gfx_drawstr(" (max)");
):(
gfx_r=0;gfx_g=0;gfx_b=0; gfx_a=1;
slider11 == 0 ?(gfx_r=1;gfx_g=0;gfx_b=0; gfx_a=1);
slider11 == 5 ?(gfx_r=0;gfx_g=0.5;gfx_b=0; gfx_a=1);
gfx_x = meterx+110;
gfx_y = metery+130;
// -71 = 0; -130 = -oo;
//gr_meter2 = 10^(-20/20);
gfx_g = 0;
winkel = (-133*0.017453)+(62*(gr_meter2)*0.017453);
//gfx_lineto(meterx+110+(100*(cos(winkel))),metery+130+(100*sin(winkel)));
       mnmetergfx(1, meterx+15, metery+15, 0, 1); //(0=flexible, x,y,redneedle, channel 1or2)
);
*/

gfx_r=gfx_g=gfx_b = 0.18;
//gfx_rect(0,0,450,170);
gfx_a=1; 
gfx_x=0;gfx_y=0; 
gfx_blit(0,1,0);

  scalegfx=1;
  grdb = abs(log10(gr_meter2)*20);
  //gfx_h =1;
  deesledy = 10;
  gfx_x = 313+(-12*scalegfx)+(-15*scalegfx); gfx_y = deesledy;
  grdb > 0.5 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = 313+2*(-12*scalegfx)+(-20*scalegfx); 
  grdb >= 2 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = 313+3*(-12*scalegfx)+(-25*scalegfx);
  grdb >= 3 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);  
  gfx_x = 313+4*(-12*scalegfx)+(-30*scalegfx); 
  grdb >= 5 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = 313+5*(-12*scalegfx)+(-35*scalegfx);
  grdb >= 8 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = 313+6*(-12*scalegfx)+(-40*scalegfx); 
  grdb >= 12 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = 313+7*(-12*scalegfx)+(-45*scalegfx);
  grdb >= 15 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 
  gfx_x = 313+8*(-12*scalegfx)+(-50*scalegfx);
  grdb >= 20 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 



gfx_a=1; 
gfx_x=0;gfx_y=0; 
//gfx_blit(0,1,0);


  gthresh.knob();
 // gratio.knob();
  gatt.knob();
  grel.knob();
  gfx_r=gfx_g=gfx_b = 0.0;
  gfx_rect(170,145,60,17);
  gfx_rect(250,145,60,17);
  gfx_b = 1; gfx_g=0.9; gfx_r=0;
  gfx_x = 173; gfx_y = 150;
  gfx_drawnumber(CHLP_cx_hp/1000,2); gfx_drawstr(" k");
  gfx_x = 253; gfx_y = 150;
  gfx_drawnumber(CHLP_cx_lp/1000,2); gfx_drawstr(" k");
 // goutgain.knob();
 // gfeedback.knob();
  Trick.knob();
 // SC.knob();
 // screw.knob();
 // gknee.knob();
 // gdry.knob();
 
 
 
 
 
 
   ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
   last_clicked_item = -1;
   Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
   menu_x = 10; menu_y = 10;
   gfx_x=menu_x;gfx_y=menu_y;
   gfx_blit(11,1,0);
 //  gfx_drawnumber(last_clicked_item, 0); 
   mouseClick ? (
   //helpshow ? helpshow = 0;
   mouse_xz > menu_x ? (
   mouse_xz < menu_x + 20 ? (
   mouse_yz > menu_y ? (
   mouse_yz < menu_y + 20 ? (
     gfx_x = menu_x;
     gfx_y = menu_y+20;

     
     
      #item2 =">Scaling|";#allitems = #item2;
     slider13 == sqrt(0.5) ? (#item2 = "!50%|"):(#item2 = "50%|");#allitems += #item2;
     slider13 == sqrt(0.75) ? (#item2 = "!75%|"):(#item2 = "75%|");#allitems += #item2;
     slider13 == 1 ? (#item2 = "!100%|"):(#item2 = "100%|");#allitems += #item2;
     slider13 == sqrt(1.5) ? (#item2 = "!150%|"):(#item2 = "150%|");#allitems += #item2;
     slider13 == sqrt(2) ? (#item2 = "!200%|"):(#item2 = "200%|");#allitems += #item2;
     slider13 == 0 ? (#item2 = "<!FREE|"):(#item2 = "<FREE|");#allitems += #item2;
     #item2 = "Show Info/Help";    #allitems += "Show Info/Help";
     last_clicked_item = gfx_showmenu(#allitems);
   );
   );
   );
   );
   );
   
   last_clicked_item == 1 ? zmnu = sqrt(0.5);
   last_clicked_item == 2 ? zmnu = sqrt(0.75);
   last_clicked_item == 3 ? zmnu = 1;
   last_clicked_item == 4 ? zmnu = sqrt(1.5);
   last_clicked_item == 5 ? zmnu = sqrt(2);
   last_clicked_item == 6 ? zmnu = 0;
   last_clicked_item == 7 ? helpshow = 1;
   
   
   helpshow == 1 ? (
   gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
   gfx_rect(menu_x+20,menu_y+0,300,60);
   gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
   gfx_x = menu_x+23; gfx_y = menu_y+3;
   gfx_drawstr("This plugin can be automated.");
   gfx_x = menu_x+23; gfx_y += 13;
   gfx_drawstr("");
   gfx_x = menu_x+23; gfx_y += 13;
   gfx_drawstr("(Fine tune knobs with shift)");
   gfx_x = menu_x+23; gfx_y += 13;
   gfx_drawstr("(Reset knobs with ctrl/cmd)");
   );
   
   
   ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
   
   
   
   
/********************************* Mouse Control ******************************/
mouseClick == 1 ? 
    (
      gthresh.collision()   ? gthresh.dragStart();   
   //   gratio.collision()  ? gratio.dragStart();  
      gatt.collision()    ? gatt.dragStart(); 
      grel.collision()    ? grel.dragStart();
   //   goutgain.collision()    ? goutgain.dragStart();
   //   gfeedback.collision()    ? gfeedback.potToggle();
      Trick.collision()    ? (Trick.potToggle();Changer = 1);
   //   SC.collision()    ? SC.potToggle();
   //   screw.collision()    ? screw.dragstart();
   //   gknee.collision()    ? gknee.dragstart();
   //   gdry.collision()    ? gdry.dragstart();     
 
    ):
mouseClick == -1  ? 
    (
      gthresh.dragStop();
   //   gratio.dragStop();
      gatt.dragStop();
      grel.dragStop();goutgain.dragStop();
    //  screw.dragstop();
    //  gknee.dragstop();
    //  gdry.dragstop();
     );

mouse_wheel ? 
    (
      gthresh.collision()   ? gthresh.potWheel():
   //   gratio.collision()  ? gratio.potWheel():
      gatt.collision()    ? gatt.potWheel():
      grel.collision()    ? grel.potWheel(): 
   //   goutgain.collision()    ? goutgain.potWheel():
    //  screw.collision()    ? screw.potWheel():
    //  gknee.collision()    ? gknee.potWheel():
    //  gdry.collision()    ? gdry.potWheel():
     mouse_wheel=0;
    );


gthresh.dragging  ? (gthresh.potDrag();Changer = 1);
//gratio.dragging ? (gratio.potDrag();Changer = 1);
gatt.dragging   ? (gatt.potDrag();Changer = 1);
grel.dragging   ? (grel.potDrag();Changer = 1);
//goutgain.dragging   ? (goutgain.potDrag();Changer = 1);
//screw.dragging   ? screw.potDrag();
//gknee.dragging   ? (gknee.potDrag();Changer = 1);
//gdry.dragging   ? (gdry.potDrag();Changer = 1);
/******************************* Slider Knob Control **************************/
  
gthresh!=gthresh.val?
    (
      gthresh=gthresh.val;
      slider1=gthresh;
      pot.potVal(gthresh.val);
      slider_automate(slider1);
     ):
gthresh!=slider1?
    (
      gthresh=slider1;
      gthresh.val=gthresh;
      gthresh.potVal(gthresh.val);
      gthresh.valOld=gthresh;
    );
  
gratio!=gratio.val?
    (
      gratio=gratio.val;
      slider3=gratio;
      pot.potVal(gratio.val);
     ):
gratio!=slider3?
    (
      gratio=slider3;
      gratio.val=gratio;
      gratio.potVal(gratio.val);
      gratio.valOld=gratio;
    );  
  
gatt!=gatt.val?
    (
      gatt=gatt.val;
      slider4=gatt;
      pot.potVal(gatt.val);
      slider_automate(slider4);
     ):
gatt!=slider4?
    (
      gatt=slider4;
      gatt.val=gatt;
      gatt.potVal(gatt.val);
      gatt.valOld=gatt;
    );

grel!=grel.val?
    (
      grel=grel.val;
      slider5=grel;
      pot.potVal(grel.val);
      slider_automate(slider5);
     ):
grel!=slider5?
    (
      grel=slider5;
      grel.val=grel;
      grel.potVal(grel.val);
      grel.valOld=grel;
    );

goutgain!=goutgain.val?
    (
      goutgain=goutgain.val;
      slider6=goutgain;
      pot.potVal(goutgain.val);
     ):
goutgain!=slider6?
    (
      goutgain=slider6;
      goutgain.val=goutgain;
      goutgain.potVal(goutgain.val);
      goutgain.valOld=goutgain;
    );
    
gfeedback!=gfeedback.val?
    (
      gfeedback=gfeedback.val;
      slider8=gfeedback;
      pot.potVal(gfeedback.val);
     ):
gfeedback!=slider8?
    (
      gfeedback=slider8;
      gfeedback.val=gfeedback;
      gfeedback.potVal(gfeedback.val);
      gfeedback.valOld=gfeedback;
    );
    Trick!=Trick.val?
        (
          Trick=Trick.val;
          slider7=Trick;
          pot.potVal(Trick.val);
          slider_automate(slider7);
         ):
    Trick!=slider7?
        (
          Trick=slider7;
          Trick.val=Trick;
          Trick.potVal(Trick.val);
          Trick.valOld=Trick;
        );
        
    SC!=SC.val?
        (
          SC=SC.val;
          slider9=SC;
          pot.potVal(SC.val);
         ):
    SC!=slider9?
        (
          SC=slider9;
          SC.val=SC;
          SC.potVal(SC.val);
          SC.valOld=SC;
        );
    screw!=screw.val?
        (
          screw=screw.val;
          slider11=screw;
          pot.potVal(screw.val);
         ):
    screw!=slider11?
        (
          screw=slider11;
          screw.val=screw;
          screw.potVal(screw.val);
          screw.valOld=screw;
        );
    gknee!=gknee.val?
        (
          gknee=gknee.val;
          slider2=gknee;
          pot.potVal(gknee.val);
         ):
    gknee!=slider2?
        (
          gknee=slider2;
          gknee.val=gknee;
          gknee.potVal(gknee.val);
          gknee.valOld=gknee;
        );

    gdry!=gdry.val?
        (
          gdry=gdry.val;
          slider12=gdry;
          pot.potVal(gdry.val);
         ):
    gdry!=slider12?
        (
          gdry=slider12;
          gdry.val=gdry;
          gdry.potVal(gdry.val);
          gdry.valOld=gdry;
        );










//gfx_y=0;
//gfx_x=gfx_w + log10(gr_meter)*xscale;


//gfx_rectto(gfx_w,meter_h);


/* INPUT METER
gin2Meter=100 + log10(ginMeter)*xscale;
gfx_x = meterx+60; gfx_y = metery+120;
gin2Meter > 0 ? (
gfx_rect(meterx+60, metery+120,100+gin2Meter,meter_h);
);
*/
/*
gfx_r=gfx_g=gfx_b=1; gfx_a=0.6;

s2=sqrt(2)/2;
g = s2;
while(
gfx_x=gfx_w + log10(g)*xscale;
gfx_x >= 0 ? (
gfx_y=0;
gfx_lineto(gfx_x,meter_h,0);
gfx_y=meter_h-gfx_texth;
gfx_x+=2;
gfx_drawnumber(log10(g)*20,0);
gfx_drawchar($'d');
gfx_drawchar($'B');
);
g*=s2;
gfx_x >=0;
);
*/




    //////////////////////// ZFCT ///////////////////////////////
    slider13 = zmnu;
    zfct = zmnu;
    zmnu == 0 ? zfct = min(gfx_w/zfct_w,gfx_h/zfct_h);
    
    zmnu != 0 ? zfct *= gfx_ext_retina;
    gfx_dest = -1;
    gfx_x=gfx_y=0;gfx_a=1;
    gfx_blit(127,zfct,0);
    /////////////////////////////////////////////////////////////  









):( /// ext flags

  grdb = abs(log10(gr_meter2)*20);
  gfx_h = gfx_w/7.4074074;
  scalegfx = gfx_h / 15;
  gfx_x = gfx_w+(-10*scalegfx)+(-15*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb > 0.5 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = gfx_w+2*(-10*scalegfx)+(-20*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 2 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = gfx_w+3*(-10*scalegfx)+(-25*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 3 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);  
  gfx_x = gfx_w+4*(-10*scalegfx)+(-30*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 5 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+5*(-10*scalegfx)+(-35*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 8 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+6*(-10*scalegfx)+(-40*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 12 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+7*(-10*scalegfx)+(-45*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 15 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+8*(-10*scalegfx)+(-50*scalegfx); gfx_y = -10*scalegfx; gfx_a = 1;
  grdb >= 20 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 
      
  
  gfx_x = gfx_w+(-10*scalegfx)+(-15*scalegfx); gfx_y = -10*scalegfx +25*scalegfx; gfx_a = 1;
  grdb > 0.5 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = gfx_w+2*(-10*scalegfx)+(-20*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 2 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);
  gfx_x = gfx_w+3*(-10*scalegfx)+(-25*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 3 ? gfx_blit(8,scalegfx,0,0,35,35,35):gfx_blit(8,scalegfx,0,0,0,35,35);  
  gfx_x = gfx_w+4*(-10*scalegfx)+(-30*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 5 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+5*(-10*scalegfx)+(-35*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 8 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+6*(-10*scalegfx)+(-40*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 12 ? gfx_blit(9,scalegfx,0,0,35,35,35):gfx_blit(9,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+7*(-10*scalegfx)+(-45*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 15 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 
  gfx_x = gfx_w+8*(-10*scalegfx)+(-50*scalegfx); gfx_y = -10*scalegfx+25*scalegfx; gfx_a = 1;
  grdb >= 20 ? gfx_blit(10,scalegfx,0,0,35,35,35):gfx_blit(10,scalegfx,0,0,0,35,35); 
  
); // ext flags
groldreset += 1;
groldreset > 45 ? (groldreset = 0; grold=1);

