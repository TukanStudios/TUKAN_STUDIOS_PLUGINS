desc:SumThing (Tukan)

slider1:-1<-1,0,0.01>-negative
slider2:1<0,1,0.01>-positive
slider4:0 <-60,60,0.1>-input (dB)
slider5:0<-60,60,0.1>-output (dB)
slider7:1<0,1,1{mono,stereo}>-mode
slider8:25<20,250,5>-scope size (ms)
slider9:0.5<0,2,0.01>-Desk Noise
slider10:0<-24,24,0.1>-Amount offset
slider11:1<0,3,1>-Desk Model
slider12:1<0,3,1{20,30,60,100}>-12 LoF
slider13:0<0,15,0.1>-13 Push (dB)
slider14:0<-15,0,0.1>-14 Pull (dB)

slider15:280<160,4000,1>-15 Peak (Hz)
slider16:0<0,1,1{dull,sharp}>-16 Q Mode
slider17:0<-12,12,0.1>-17 Gain (dB)

slider18:2<0,3,1{6k,8k,12k,15k}>-18 HSF (Hz)
slider19:0<-8,8,0.1>-19 High Gain (dB)

slider20:0<-12,12,0.1>-20 Output (dB)

slider21:0<-15,15,0.1>-21 LoSH Gain
slider22:0<0,1,1>-LoSelect
slider23:0<0,1,1>-Hiselect

slider24:0<0,1,1>-24 Is Master Track
slider25:1<0,1,1>-25 Master Precessing
slider26:1<0,1,1>-26 CH Processing
slider27:2<0,2,1>-27 Desk Select

slider28:0<0,1,1>-28 Limiter
slider29:50<0.1,100,0.1>-Meterspeed
slider30:0<-24,0,1>-30 Metercalibration

slider31:1<0,6,.01>-Scaling
//options:no_meter

in_pin:L in
in_pin:R in
out_pin:L out
out_pin:R out

filename:0,somegui/VUMeter1.png
filename:1,somegui/CCVU2.png
filename:2,somegui/CCVU3.png
filename:3,somegui/minichick.png
filename:4,somegui/minineve.png
filename:5,somegui/minissl.png
filename:6,somegui/bigchick.png
filename:7,somegui/bigneve.png
filename:8,somegui/bigssl.png
filename:9,somegui/switch.png
filename:10,somegui/back23.png
filename:11,somegui/LED.png
filename:12,somegui/back1.png
filename:13,somegui/back2.png
filename:14,somegui/sback1.png
filename:15,somegui/sback2.png
filename:16,somegui/sback3.png
filename:17,somegui/wfm.png
filename:18,somegui/arrows.png
filename:19,somegui/screw.png

filename:20,somegui/menu.png

@init
version = "Beta 0.8.2";
gfx_ext_retina = 1;

/*
function tanh(x)
(
x = exp(2*x);
(x - 1) / (x + 1);
);
*/
 gr_meter2 = 0;
 gr2_meter2 = 0;
 meter_dif = 0.0005;
  
  ext_noinit = 1;

function db2ratio(d) ( 10^(d/20); );
function ratio2db(r) ( log(abs(r))*dbc; );


function computeGain(x)
(
(x < Tlo) ? x = 0 :
(x > Thi) ? x = slope * (x - threshold) :
(delta = x - Tlo;
x = delta * delta * knee_factor;);
);

function smoothAverage(x, alphaR)
(
eps = 0.0000000001;
yR = min(x, alphaR * yR + (1 - alphaR) * x + eps - eps);
x = yR;
);

aab = 0;
  // DC Blocker to remove near-static frequency content
  // that would otherwise "offset" the waveform.
  function dcBlocker () instance (otml, itml)
  (
    /*
    srate < 50000 ? (stateOut *= 0.99); //99988487
    srate > 50000 ? (stateOut *= 0.99999999);
    
    stateOut += this - stateIn;
    stateIn = this;
    this = stateOut;
  */
  aab = srate/(srate*1.00008);
  srate < 400000 ? aab = srate/(srate*1.0002);
  srate < 200000 ? aab = srate/(srate*1.0003);
  srate < 100000 ? aab = srate/(srate*1.0007);
  srate < 50000 ? aab = srate/(srate*1.001);
  
  otm1=aab*otm1 + this - itm1; itm1=this; this=otm1;

  );

function initthings()
(
vslider2 = 0; vslider3 = 0;
slider21 > 0 ? (vslider2 = slider21):(vslider3 = slider21);

tempA = vslider2*10/15;
src_wetA = tgt_wetA = vslider2 <= 0 ? 0.0 : 10^(tempA/20);

tempB = (-7.5-vslider3*0.5);
src_wetB = tgt_wetB = vslider3 >= 0 ? 0.0 : 10^(tempB/20);

dry = 1;

initial = 1;


dbc = 20/log(10);


threshold = slider1;
knee_width = abs(slider1*2*slider2*0.01);
ceiling = 1/(db2ratio(threshold));
slope = -1;

release = slider3/1000;
alphaR = release>0 ? exp(-1 / (release * srate)) : 0;

Tlo = (threshold - knee_width / 2);
Thi = (threshold + knee_width / 2);
knee_factor = (slope / (knee_width * 2));

yR = 0;


//////// LIMITER
threshold = 0;
knee_width = 0;
ceiling = 1/(db2ratio(threshold));
slope = -1;

release = 30/1000;
alphaR = release>0 ? exp(-1 / (release * srate)) : 0;

Tlo = (threshold - knee_width / 2);
Thi = (threshold + knee_width / 2);
knee_factor = (slope / (knee_width * 2));

limitoutput = 10^(-1.5/20);
/////////// END LIMITER

histbuf=1000000;
histpos=0;

);


































  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  coords=srate+1;
  
    function limitgui(s low up)
                  ( min(max(s, low), up) );
    function deg(r)
                  ( r / $pi * 180 );
    function rad(d)
                  ( d * $pi / 180 );
                  
                  
 /******************************* GUI Function ***********************************/
 
 function xy(x y)
            ( gfx_x = x; gfx_y = y; );
 
 function rgb(r g b)
             ( gfx_r = r; gfx_g = g; gfx_b = b; );
 
 function rectIn  (xIn_ yIn_ wIn hIn)
   instance       (xIn yIn widthIn heightIn)
                  (
                   xIn = xIn_;
                   yIn = yIn_;
                   widthIn = wIn;
                   heightIn = hIn;
                   );
                 
 function rectOut  (xOut_ yOut_ wOut hOut c i)
   instance        (xOut yOut widthOut heightOut count index)
                   (
                    xOut = xOut_;
                    yOut = yOut_;
                    widthOut = wOut;
                    heightOut = hOut;
                    count = c;
                    index = i;
                    );                
 
 function potVal(v)
   instance      (frame val minVal maxVal count heightOut)
                 (
                  val = v;
                  frame = (val - minVal) * (count - 1) / (maxVal - minVal) + 0.5;
                  frame |= 0;
                 );
 
 function potCfg  (default_ minVal_ maxVal_ step_)
   instance        (default minVal maxVal step)
                   (
                    default = default_;
                    minVal = minVal_;
                    maxVal = maxVal_;
                    step    = step_;
                    //this.potVal();
                   );
 
 function bkg(wImg hImg indImg)
              (
                gfx_a=1;
                coords[0] = coords[4] = 0;
                coords[1] = coords[5] = 0;;
                coords[2] = coords[6] = wImg;
                coords[3] = coords[7] = hImg;
                gfx_blitext(indImg, coords, 0);
               ); 
 
 function potDrawIn ()
   instance        (xIn yIn widthIn heightIn val)
                   (
                      gfx_r= 1; gfx_g = gfx_b =0;gfx_a= 0.5;
                      
                      gfx_line(xIn,yIn,xIn,heightIn+yIn);
                      gfx_line(xIn,heightIn+yIn,xIn+widthIn,heightIn+yIn);
                      gfx_line(xIn+widthIn,yIn,xIn+widthIn,heightIn+yIn);
                      gfx_line(xIn,yIn,xIn+widthIn,yIn);
       
                      gfx_r = gfx_g = gfx_b = 0.75;
                      gfx_x = xIn + widthIn/2-12;
                      gfx_y = yIn+heightIn/2-5;
                      gfx_drawnumber(val, 1);                   
                   );
 
 function knob()
   instance   (xOut yOut widthOut heightOut index frame val)
              (
               
                gfx_a=1;
                coords[0] = 0;
                coords[1] = frame * heightOut;
                coords[2] = coords[6] = widthOut;
                coords[3] = coords[7] = heightOut;
                coords[4] = xOut;
                coords[5] = yOut;
                gfx_blitext(index, coords, 0);
               );                                     
 
 function collision  ()
   instance          (xIn yIn widthIn heightIn)
                     (
                      mouse_x > xIn*zfct && mouse_x < xIn*zfct + widthIn*zfct && mouse_y > yIn*zfct && mouse_y < yIn*zfct + heightIn*zfct
                     );
 
 function dragStart ()
   instance          (dragging yOld default)
                     (
                      !ctrl ? (
                      yOld = mouse_y;
                      dragging = 1;
                     ) : 
                      this.potVal(default);
                     );
 
 function dragStop()
   instance        (dragging val valOld)
                   (
                    dragging = 0;
                    valOld = val;
                   );
 
    function potDrag()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                       !shift ? (
                       mstep = (this.maxval - this.minval)/100;
                      val = valOld + (yOld - mouse_y) * mstep;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      ):(
                      val = valOld + (yOld - mouse_y) * step;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      );
                     );
                     
    function potToggle()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                      valold == 0 ? (val = 1):(val=0);
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      valOld=val;
                       );
    
    function potWheel()
        local         (val)
        instance      (valOld minVal maxVal step)
                      (
                      mstep = (this.maxval - this.minval)/100;
                       val = valOld + (mouse_wheel/36)*mstep;
                       val = limitgui(val, minVal, maxVal);
                       this.potVal(val);
                       valOld=val;
                       mouse_wheel=0;
                        );
 
   
 
 
 
 
 
 
 
 
 
 errcnt = 0;
 tot_nbr_spl = 0;
 scnt = 0;
 
 offset = 0.0074;//0.0074;
 
 nd_posL = nd_posR = 0;
 nd_speedL = nd_speedR = 0;
 
 dt = 10 / srate;
 
 mom = 0.00042;
 
 dbL = dbR = 0;
 overL = overR = 0;
 
 fact_up = 10 ^ (( 0 - 10)/20) * 0.3785 ;
 wl   = 0;
 damp = 0.995;//935; //1 - slider5 * (48000 / srate);
 
 mnmode = 0; // (0 ST, 1 SumMono, 2 MaxMono)
 meterInL = spl0;
 meterInR = spl1;
 
 function mnMetersample(meterInL, meterInR, mnmode, mnmom) //Mom = speed
 (
 tot_nbr_spl += 1;
 
 smpL = meterInL; 
 smpR = meterInR;
 
 mnmode == 1 ? ( 
   smpL = (meterInL + meterInR) * 0.5;
   smpR = smpL;  
 );
 
 mnmode >= 2 ? ( 
   smpL = max(meterInL, meterInR);
   smpR = smpL; 
 );
 
 smpL = abs(smpL);
 smpR = abs(smpR);
 
  
 scnt += 1;
 
 scnt === 10 ? (
     
   // move left needle
   
     force = smpL * fact_up  -  (nd_posL * .1 + offset);
     
     nd_speedL += force * dt / mnmom;  
     nd_speedL = nd_speedL * damp;
     nd_posL += nd_speedL * dt;
     nd_posL < 0 || nd_posL > 1 ? nd_speedL = 0;
   
     nd_posL = min(max(nd_posL,0),1);
   
     // move right needle
 
     force = smpR * fact_up  - (nd_posR * .1 + offset);
     
     nd_speedR += force * dt /mnmom;  
     nd_speedR = nd_speedR * damp;
     nd_posR += nd_speedR * dt;
     nd_posR < 0 || nd_posR > 1 ? nd_speedR = 0;
   
     nd_posR = min(max(nd_posR,0),1);
      
     overL -= 10;
     overR -= 10;
 
     scnt = 0;
   
 );
 );
 
 function mnmetergfx(mnmeterscale, mnmeterx, mnmetery, twometer, mnch, meterimg) //(0=flexible, x,y,redneedle, channel 1or2)
 (
 tot_nbr_spl_g  = tot_nbr_spl;
 
 overL_g = overL;
 overR_g = overR;
 nd_posL_g = nd_posL;
 nd_posR_g = nd_posR;
 
 tot_nbr_spl_g === tot_nbr_spl ? (
 
   dbL = (nd_posL_g * 23) - 20;
   dbR = (nd_posR_g * 23) - 20;
   
 ) : (
   errcnt += 1; // thread collision
 );
 
 
 gfx_a = 1; gfx_x = mnmeterx; gfx_y=mnmetery
 ;
 mnmeterscale == 0 ? (mnblitscale = gfx_w/190):(mnblitscale = mnmeterscale);
 gfx_blit(meterimg,mnblitscale,0);
 
 
 w1 = $pi * 16.5 / 180; 
 w2 = $pi * 45 / 180;
 
 xw = 190*mnblitscale; //max(1,floor((gfx_w-30) / 2));
 yw = 92*mnblitscale;//floor(xw / 1.5);
 
 r1 = 130*mnblitscale;//floor(yw * 0.85);
 
 
 
  xd = 10 + chan*(xw+10);
   mode === 1 ? xd += floor(xw/2);
   
   yd = 10;
 
   xa = mnblitscale*190/2;//gfx_w/2;//floor(xd + xw / 2);
   ya = floor(yd + yw * 1.1);
 
 
 
 _global.desk > 1 ? (
 
 
 twometer ? (
   chan = 1;
   chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
 
 
 
   ph = 51 + (ph+20)/23*83;//45 + (ph+20)/23*90; 
   aay = abs((90 - abs(ph))); 
   r1 = mnblitscale*(80+aay/5);
   
   ph = ph * ($pi / 180);
     
   cosp = cos(ph);
   sinp = sin(ph);
     
     ya = mnmetery+110*mnblitscale;
     xa= mnmeterx+2+(190*mnblitscale/2);//-(gfx_w/50);
   mnx1 = xa - cosp * r1 * 0.25;
   mny1 = ya - sinp * r1 * 0.25;
 
   mnx2 = xa - cosp * r1 * 1.1;
   mny2 = ya - sinp * r1 * 1.1;
 
   gfx_x = mnx1;
   gfx_y = mny1; 
   gfx_lineto(mnx2, mny2);
  );
   
 chan = 0;
 
   chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
   mnch == 2 ? (ph= dbR);
   ph = 51 + (ph+20)/23*83;//45 + (ph+20)/23*90; 
   aay = abs((90 - abs(ph))); 
   r1 = mnblitscale*(80+aay/5);
   
   ph = ph * ($pi / 180);
     
   cosp = cos(ph);
   sinp = sin(ph);
     
     ya = mnmetery+110*mnblitscale;
     xa= mnmeterx+2+(190*mnblitscale/2);//-(gfx_w/50);
   mnx1 = xa - cosp * r1 * 0.25;
   mny1 = ya - sinp * r1 * 0.25;
 
   mnx2 = xa - cosp * r1 * 1.1;
   mny2 = ya - sinp * r1 * 1.1;
 
   gfx_x = mnx1;
   gfx_y = mny1; 
   gfx_lineto(mnx2, mny2);
   
   
   
   
   
   ):( //global meter
   
   twometer ? (
     chan = 1;
     chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
   
   
   
     ph = 51 + (ph+20)/23*83;//45 + (ph+20)/23*90; 
     aay = abs((90 - abs(ph))); 
     r1 = mnblitscale*(80+aay/5);
     
     ph = ph * ($pi / 180);
       
     cosp = cos(ph);
     sinp = sin(ph);
       
       ya = mnmetery+55*mnblitscale;
       xa= mnmeterx+2+(190*mnblitscale/2);//-(gfx_w/50);
     mnx1 = xa - cosp * r1 * 0.25;
     mny1 = ya - sinp * r1 * 0.25;
   
     mnx2 = xa - cosp * r1 * 1.1;
     mny2 = ya - sinp * r1 * 1.1;
   
     gfx_x = mnx1;
     gfx_y = mny1; 
    // gfx_lineto(x2, y2);
    );
     
   chan = 0;
   
     chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
     mnch == 2 ? (ph= dbR);
     ph = 43 + (ph+20)/23*88;//45 + (ph+20)/23*90; 
     aay = abs((90 - abs(ph))); 
     r1 = mnblitscale*(70+aay/5);
     
     ph = ph * ($pi / 180);
       
     cosp = cos(ph);
     sinp = sin(ph);
       
       ya = mnmetery+95*mnblitscale;
       xa= mnmeterx+2+(180*mnblitscale/2);//-(gfx_w/50);
     mnx1 = xa - cosp * r1 * 0.25;
     mny1 = ya - sinp * r1 * 0.25;
   
     mnx2 = xa - cosp * r1 * 1.1;
     mny2 = ya - sinp * r1 * 1.1;
   
     gfx_x = mnx1;
     gfx_y = mny1; 
     gfx_lineto(mnx2,mny2);
   );
   
   
   
   
   
   
   
   
   
   
   
   );
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
function stattslider()
(
slider24 == 1 ? ( //Is master
slider27 == 0 ? (_global.desk = 1);
slider27 == 1 ? (_global.desk = 2);
slider27 == 2 ? (_global.desk = 3);
_global.process = slider26;
 _global.meter_speed = slider29;
 _global.meter_cal = slider30;
 
);
meter_speed = abs(100 - _global.meter_speed);

mom = 0.00010 + 0.00032 *  meter_speed^3 / 125000;  




_global.desk == 1 ? (
slider1 = -0.22; slider2 = 0.21; 
slider4 = 0;
input = 10^((slider4 + slider10)/20); output = 10^(-(7+slider10/1.1)/20);
noisewp = 0; noisedesk = -88;
noisech = slider9;
meter = 0;

slider15 = 4000;
slider17 = 2;
slider22 == 1 ? (slider12 = 3):(slider12 = 2);
slider23 == 1 ? (slider18 = 2):(slider18 = 1);
//initthings();
);

_global.desk == 2 ? (
slider1 = -0.0; slider2 = 0.0; 
slider4 = -37;
input = 10^((slider4 + slider10)/20);
output = 10^(-(slider4+slider10)/20);
 noisewp = 1; noisedesk = -119;
noisech = slider9;
meter = 2;

slider15 = 280;
slider17 = -2;
slider22 == 1 ? (slider12 = 3):(slider12 = 1);
slider23 == 1 ? (slider18 = 2):(slider18 = 1);
//initthings();
);

_global.desk == 3 ? (
slider1 = 0; slider2 = 1; 
slider4 = -26;
input = 10^((slider4 + slider10)/20);
output = 10^(-(slider4+slider10)/20);
 noisewp = 0; noisedesk = -106;
noisech = slider9;
meter = 1;

slider15 = 340;
slider17 = -1.2;
slider22 == 1 ? (slider12 = 3):(slider12 = 2);
slider23 == 1 ? (slider18 = 3):(slider18 = 2);
//initthings();
);









a=slider1;
b=slider2;

k1=a^2;
k2=1+2*a;
k3=b^2;
k4=1-2*b;

input=10^(slider4/20);
output=10^(slider5/20);

mode=slider7;

size=slider8;
histsize=size/1000*srate|0;




//vslider2 = slider13; vslider3 = slider14;
slider21 > 0 ? (vslider2 = slider21;vslider3 = 0):(vslider3 = slider21;vslider2=0);

//LowPass A
freqA = (slider12 == 0 ? (400) : (slider12 == 1 ? (860) : (slider12 == 2 ? (1800) : (2560) )));
fA = 2*$pi * min(freqA, 0.49 * srate) / srate;
qA = 0.04 * (30-vslider2)/15;

w0A = fA;
cos_w0A = cos(w0A);
alphaA = sin(w0A) / (2*qA);

b1A = 1 - cos_w0A;
b0A = b2A = 0.5 * b1A;
a0A = 1 + alphaA;
a1A = -2 * cos_w0A;
a2A = 1 - alphaA;

a1A /= a0A;
a2A /= a0A;
b0A /= a0A;
b1A /= a0A;
b2A /= a0A;

tempA = vslider2*15/15; //10/15
tgt_wetA = vslider2 <= 0 ? 0.0 : -1+10^(tempA/20);

//LowPass B
freqB = (slider12 == 0 ? (3820) : (slider12 == 1 ? (6500) : (slider12 == 2 ? (11560) : (13640) )));
fB = 2*$pi * min(freqB, 0.49 * srate) / srate;
qB = 0.04 * (30-abs(vslider3))/15;

w0B = fB;
cos_w0B = cos(w0B);
alphaB = sin(w0B) / (2*qB);

b1B = 1 - cos_w0B;
b0B = b2B = 0.5 * b1B;
a0B = 1 + alphaB;
a1B = -2 * cos_w0B;
a2B = 1 - alphaB;

a1B /= a0B;
a2B /= a0B;
b0B /= a0B;
b1B /= a0B;
b2B /= a0B;

tempB = (-15-vslider3); //(-7.5-vslider3*0.5);
tgt_wetB = vslider3 >= 0 ? 0.0 : 10^(tempB/20);

dry = 1;

//Peak
fC= 2*$pi * min(slider15, 0.49 * srate) / srate;
tmp = (slider16 == 0 ? 0.6 : 1.2);
qC = tmp;
dB_gainC = slider17;

w0C = fC;
alphaC = sin(w0C) / (2*qC);
aC = 10^(db_gainC / 40);

b0C = 1 + alphaC * aC;
b1C = a1C = -2 * cos(w0C);
b2C = 1 - alphaC * aC;
a0C = 1 + alphaC / aC;
a2C = 1 - alphaC / aC;

a1C /= a0C;
a2C /= a0C;
b0C /= a0C;
b1C /= a0C;
b2C /= a0C;

//HighShelf
freq2 = (slider18 == 0 ? 2000 : (slider18 == 1 ? 3200 : (slider18 == 2 ? 5300 :  6400 )));
qD = (slider18 == 0 ? 0.5 : (slider18 == 1 ? 0.48 : (slider18 == 2 ? 0.46 :  0.46 )));

fD = 2*$pi * min(freq2, 0.49 * srate) / srate;

slider18 > 1 ? (
slider19 >= 0 ? tmp2 = slider19;
slider19 < 0 ? tmp2 = slider19*0.75;
):(
tmp2 = slider19;
);
dB_gainD = tmp2;

w0D = fD;
cos_w0D = cos(w0D);
aD = 10^(db_gainD / 40);

tmp0D = 2 * sqrt(aD) * sin(w0D) / (2 * qD);
tmp1D = (aD + 1) - (aD - 1) * cos_w0D;
tmp2D = (aD + 1) + (aD - 1) * cos_w0D;

b0D = aD * (tmp2D + tmp0D);
b1D = -2 * aD * ((aD - 1) + (aD + 1) * cos_w0D);
b2D = aD * (tmp2D - tmp0D);
a0D = tmp1D + tmp0D;
a1D = 2 * ((aD - 1) - (aD + 1) * cos_w0D);
a2D = tmp1D - tmp0D;

a1D /= a0D;
a2D /= a0D;
b0D /= a0D;
b1D /= a0D;
b2D /= a0D;

//Output
outvol = 10^(slider20/20);

_global.desk == 1 ? (
input = 10^((slider4 + slider10)/20); output = 10^(-(slider10/1.2)/20);meter = 0;
);
_global.desk == 2 ? (
input = 10^((slider4 + slider10)/20);output = 10^(-(slider4+slider10)/20);meter = 2;
);
_global.desk == 3 ? (
input = 10^((slider4 + slider10)/20);output = 10^(-(slider4+slider10)/20);meter = 1;
);
);

stattslider();

function desk1() //Rich overtones
(
slider1 = -0.22; slider2 = 0.21; 
slider4 = 0;
input = 10^((slider4 + slider10)/20); output = 10^(-(7+slider10/1.1)/20);
noisewp = 0; noisedesk = -88;
noisech = slider9;
meter = 0;

slider15 = 4000;
slider17 = 2;
slider22 == 1 ? (slider12 = 3):(slider12 = 2);
slider23 == 1 ? (slider18 = 2):(slider18 = 1);
initthings();
stattslider();
);

function desk2() // Nevish
(
slider1 = -0.0; slider2 = 0.0; 
slider4 = -37;
input = 10^((slider4 + slider10)/20);
output = 10^(-(slider4+slider10)/20);
 noisewp = 1; noisedesk = -119;
noisech = slider9;
meter = 2;

slider15 = 280;
slider17 = -2;
slider22 == 1 ? (slider12 = 3):(slider12 = 1);
slider23 == 1 ? (slider18 = 2):(slider18 = 1);
initthings();
stattslider();
);

function desk3() // VCA
(
slider1 = 0; slider2 = 1; 
slider4 = -26;
input = 10^((slider4 + slider10)/20);
output = 10^(-(slider4+slider10)/20);
 noisewp = 0; noisedesk = -106;
noisech = slider9;
meter = 1;

slider15 = 340;
slider17 = -1.2;
slider22 == 1 ? (slider12 = 3):(slider12 = 2);
slider23 == 1 ? (slider18 = 3):(slider18 = 2);
initthings();
stattslider();
);

deskfade = 1;

initthings();


@slider
stattslider();










@block

d_wetA = (tgt_wetA-src_wetA)/samplesblock;
twetA = src_wetA;
src_wetA = tgt_wetA;
d_wetB = (tgt_wetB-src_wetB)/samplesblock;
twetB = src_wetB;
src_wetB = tgt_wetB;
//_global.desk = 0;




























@sample
/*
_global.desk == 0 ? (
gdq +=1;
);
gdq > 2*srate ? (
slider11 = 0;
);
*/
slider24 == 1 ? (
_global.SumThing_Master = srate/2;
gsm_present = 1;
):(
_global.SumThing_Master <= 0 ? (
gsm_present = 0;
):(
gsm_present = 1;
_global.SumThing_Master -= 1;
);

);



gsm_present == 1 ? (


slider11 != _global.desk ? //(deskswitch = 1);
(
slider11 = _global.desk;
slider11 == 1 ? (desk1(););
slider11 == 2 ? (desk2(););
slider11 == 3 ? (desk3(););
);



deskswitch == 1 ? (
deskfade -= 0.0005;
);
deskfade < 0 ? (
deskswitch = 2;
slider11 = _global.desk;
slider11 == 1 ? (desk1(););
slider11 == 2 ? (desk2(););
slider11 == 3 ? (desk3(););
);
deskswitch == 2 ? (
deskfade += 0.0005;
);
deskfade > 1 ? (
deskfade = 1; deskswitch = 0;
);




slider24 == 0 ? ( /////////////// NOT MASTER

_global.process == 1 ? (

noiselevel=10^(noisedesk/20);


NoiseWP == 1 ? (
noise=rand(2)-1;
b0 = 0.99886 * b0 + noise * 0.0555179;
b1 = 0.99332 * b1 + noise * 0.0750759;
b2 = 0.96900 * b2 + noise * 0.1538520;
b3 = 0.86650 * b3 + noise * 0.3104856;
b4 = 0.55000 * b4 + noise * 0.5329522;
b5 = -0.7616 * b5 - noise * 0.0168980;
pink = b0 + b1 + b2 + b3 + b4 + b5 + b6 + noise * 0.5362;
b6 = noise * 0.115926;
Noise=pink*noiselevel*noisech;
):(
noise=rand(2)-1;
noise=(noise*noiselevel*noisech);
);




x0=spl0*input;
x1=spl1*input;

x0<a?(
y0=(k1+x0)/(k2-x0);
);
(a<=x0)&&(x0<=b)?(
y0=x0;
);
x0>b?(
y0=(x0-k3)/(x0+k4);
);

x1<a?(
y1=(k1+x1)/(k2-x1);
);
(a<=x1)&&(x1<=b)?(
y1=x1;
);
x1>b?(
y1=(x1-k3)/(x1+k4);
);

//spl0=tanh(y0);
//spl1=tanh(y1);
slider11 > 0 ? (
spl0=y0*output+noise;
spl1=y1*output+noise;
spl0.dcblocker(); //otm1=0.999*otm1 + spl0 - itm1; itm1=spl0; spl0=otm1;
spl1.dcblocker(); //otm2=0.999*otm2 + spl1 - itm2; itm2=spl1; spl1=otm2;
);

histbuf[histpos]=spl0;
histbuf[histpos+histsize]=spl1;

histpos+=1;
histpos >= histsize ? histpos=0;


meter_speed = _global.meter_speed;
scaler = 10^(abs(_global.meter_cal)/20);
mnmetersample(spl0*scaler,spl1*scaler,1,mom); // mode = (0 ST, 1 SumMono, 2 MaxMono), mnmom = speed


          
); // ENdE _global.process




):(         //////////////// MASTER
_global.desk = slider27+1;

slider25 == 1 ? ( //Master process

twetA += d_wetA;
wetA = twetA;

twetB += d_wetB;
wetB = twetB;

inA = spl0;
inB = spl1;

//LowPass A
//--Left
x2AA = x1AA;
x1AA = x0AA;
x0AA = inA;

y2AA = y1AA;
y1AA = y0AA;
y0AA = b0A*x0AA + b1A*x1AA + b2A*x2AA - a1A*y1AA - a2A*y2AA;

//--Right
x2BA = x1BA;
x1BA = x0BA;
x0BA = inB;

y2BA = y1BA;
y1BA = y0BA;
y0BA = b0A*x0BA + b1A*x1BA + b2A*x2BA - a1A*y1BA - a2A*y2BA;

//LowPass B
//--Left
x2AB = x1AB;
x1AB = x0AB;
x0AB = inA;

y2AB = y1AB;
y1AB = y0AB;
y0AB = b0B*x0AB + b1B*x1AB + b2B*x2AB - a1B*y1AB - a2B*y2AB;

//--Right
x2BB = x1BB;
x1BB = x0BB;
x0BB = inB;

y2BB = y1BB;
y1BB = y0BB;
y0BB = b0B*x0BB + b1B*x1BB + b2B*x2BB - a1B*y1BB - a2B*y2BB;

//Push/Pull
//LowPass A + LowPass B inverted + Dry input
//--Output
out0 = y0AA*wetA + y0AB*wetB*-1 + inA*dry;
out1 = y0BA*wetA + y0BB*wetB*-1 + inB*dry;

//Peak
//--Left
x2AC = x1AC;
x1AC = x0AC;
x0AC = out0;

y2AC = y1AC;
y1AC = y0AC;
y0AC = b0C*x0AC + b1C*x1AC + b2C*x2AC - a1C*y1AC - a2C*y2AC;

//--Right
x2BC = x1BC;
x1BC = x0BC;
x0BC = out1;

y2BC = y1BC;
y1BC = y0BC;
y0BC = b0C*x0BC + b1C*x1BC + b2C*x2BC - a1C*y1BC - a2C*y2BC;

//--Output
out2 = y0AC;
out3 = y0BC;

//HighShelf
//--Left
x2AD = x1AD;
x1AD = x0AD;
x0AD = out2;

y2AD = y1AD;
y1AD = y0AD;
y0AD = b0D*x0AD + b1D*x1AD + b2D*x2AD - a1D*y1AD - a2D*y2AD;

//--Right
x2BD = x1BD;
x1BD = x0BD;
x0BD = out3;

y2BD = y1BD;
y1BD = y0BD;
y0BD = b0D*x0BD + b1D*x1BD + b2D*x2BD - a1D*y1BD - a2D*y2BD;

//--Output

spl0 = y0AD;
spl1 = y0BD;


spl0 *= outvol;
spl1 *= outvol;

spl0 = spl0 + spl1 * 0.001;
spl1 = spl1 + spl0 * 0.001;



scaler = 10^(abs(_global.meter_cal)/20);
themode = mini;
mnmetersample(spl0*scaler,spl1*scaler,themode,mom); // mode = (0 ST, 1 SumMono, 2 MaxMono), mnmom = speed

// Limiter /////////////////////////////////

slider28 == 1 ?(
inL = spl0;
inR = spl1;
):(
inL = 0; inR = 0;
);

xL = max(abs(inL),abs(inR));

xG = ratio2db(xL);
yG = computeGain(xG);
cG = smoothAverage(yG, alphaR);
cL = db2ratio(cG);


slider28 == 1 ? (
spl0 = inL * cL * ceiling * limitoutput;
spl1 = inR * cL * ceiling * limitoutput;
);
//gr = db2ratio(cL);
//grv = ratio2db(gr);
//grv < gr_meter ? gr_meter=grv : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );
//grmin = min( min(cG,cG) , grmin);

////////////// END LIMITER /////////////////////


); /// End master process

); /////////////// END MASTER




 spl0 *= deskfade; spl1 *= deskfade;











); // gsm_present ?
























@gfx 380 300 // 380 ??



      mouseHold = mouse_cap & 1;
      ctrl = mouse_cap & 4;
      shift = mouse_cap & 8;
      mouseClick = mouseHold - lastCap;
      lastCap = mouseHold;

meter_speed = abs(100 - _global.meter_speed);

mom = 0.00010 + 0.00032 *  meter_speed^3 / 125000;  



initial == 1 ? (
           gamount=slider10;
           gamount.val=gamount;
           gamount.potVal(gamount.val);
           gamount.valOld=gamount;

            gnoise=slider9;
            gnoise.val=gnoise;
            gnoise.potVal(gnoise.val);
            gnoise.valOld=gnoise;
            
            glo=slider21;
            glo.val=glo;
            glo.potVal(glo.val);
            glo.valOld=glo;
            
             ghi=slider19;
             ghi.val=ghi;
             ghi.potVal(ghi.val);
             ghi.valOld=ghi;
            
              gout=slider20;
              gout.val=gout;
              gout.potVal(gout.val);
              gout.valOld=gout;
              
              gspeed!=slider29?
                  (
                    gspeed=slider29;
                    gspeed.val=gspeed;
                    gspeed.potVal(gspeed.val);
                    gspeed.valOld=gspeed;
                  );
              
               gcal!=slider30?
                   (
                     gcal=slider30;
                     gcal.val=gcal;
                     gcal.potVal(gcal.val);
                     gcal.valOld=gcal;
                   );
                   
              stattslider();
initial = 0;
);


/********************************* Mouse Control ******************************/
mouseClick == 1 ? 
    (
      gamount.collision()   ? gamount.dragStart();   
      gnoise.collision()  ? gnoise.dragStart();  
 glo.collision()  ? glo.dragStart(); 
 ghi.collision()  ? ghi.dragStart(); 
 gout.collision()  ? gout.dragStart();
 
 gspeed.collision()  ? gspeed.dragStart(); 

 
 gcal.collision()  ? gcal.dragStart(); 
 
 mouse_xz < 80 ? (
 mouse_yz < 20 ? (
 slider24 == 1 ? (slider24 = 0): gsm_present == 0 ? (slider24 == 0 ? (slider24 = 1):(slider24=0)):(master_present = 30);
 );
 );
    ):
mouseClick == -1  ? 
    (
      gamount.dragStop();
      gnoise.dragStop();
      glo.dragStop();
      ghi.dragStop();
      gout.dragStop();
      gspeed.dragStop();
      gcal.dragStop();
     );

mouse_wheel ? 
    (
      gamount.collision()   ? gamount.potWheel():
      gnoise.collision()  ? gnoise.potWheel():
      glo.collision()  ? glo.potWheel():
      ghi.collision()  ? ghi.potWheel():
      gout.collision()  ? gout.potWheel():
      gspeed.collision()  ? gspeed.potWheel():
      gcal.collision()  ? gcal.potWheel():
     mouse_wheel=0;
    );


gamount.dragging  ? (gamount.potDrag();Changer = 1);
gnoise.dragging ? (gnoise.potDrag();Changer = 1);
glo.dragging ? (glo.potDrag();Changer = 1);
ghi.dragging ? (ghi.potDrag();Changer = 1);
gout.dragging ? (gout.potDrag();Changer = 1);
gspeed.dragging ? (gspeed.potDrag();Changer = 1);
gcal.dragging ? (gcal.potDrag();Changer = 1);

      function knopf(kfile, kx,ky,kframe,kbitmap,kmin,kmax,kslider)
      (
      gfx_x=kx; gfx_y=ky;
      weg = abs(kmax - kmin);
      //scry = kbitmap*(floor((kframe-1)*(kslider / weg)));
       kframe = (kslider - kmin) * (kframe-1) / (kmax - kmin);// + 0.5;
       scry = kbitmap * floor(kframe);
       gfx_blit(kfile,1,0,1,scry,kbitmap,kbitmap);
      );


     function miniknopf(kfile, kx,ky,kframe,kbitmap,kmin,kmax,kslider,knopfscale)
     (
     gfx_x=kx; gfx_y=ky;
     weg = abs(kmax - kmin);
     //scry = kbitmap*(floor((kframe-1)*(kslider / weg)));
      kframe = (kslider - kmin) * (kframe-1) / (kmax - kmin);// + 0.5;
      scry = kbitmap * floor(kframe);
      gfx_blit(kfile,knopfscale,0,1,scry,kbitmap,kbitmap);
     );
 
     
     
     mouse_xz = mouse_x;
     mouse_yz = mouse_y;
   
          
          
     
     
gfx_ext_flags == 1 ? (

     
slider24 == 0 ? ( ///////// NOT MASTER

 



     gfx_mode=0; gfx_a = 1;
 
      scale2 = 1.12 ;blitscale = gfx_w/190;
      gfx_x = -((gfx_w/10)*scale2)/2; gfx_y = 0; 
      //gfx_blit(meter,scale2*blitscale,0);//5
      slider11 == 0 ? (gfx_blit(17,scale2*blitscale,0));//5
      
      

      mnmetergfx(0, 0, 0, 0, 1, _global.desk - 1);
       mini = 1;

     
     
  gr_meter_decay = exp(1/(1*srate));
  
  _global.process == 0 ? (
  gfx_r=0.5; gfx_g=0.5; gfx_b=0.5; gfx_a=0.2;
  
  gfx_rect(0,0,gfx_w, gfx_h);  
  );
  
  
  knopfimg = _global.desk + 2;
  
  knscale = 0.4*gfx_w/40;
  
  
  gfx_x = 0; gfx_y = gfx_h-35*knscale; gfx_a = 1;
/*
  _global.desk == 1 ? (gfx_blit(14,1,0,0,260,gfx_w, gfx_h));
  _global.desk == 2 ? (gfx_blit(15,1,0,0,260,gfx_w, gfx_h));
  _global.desk == 3 ? (gfx_blit(16,1,0,0,260,gfx_w, 150));
*/
  
  
  gfx_r=0.4; gfx_g=0.4; gfx_b=0.4; gfx_a=1;
  
  gfx_rect(0,gfx_h-39*knscale,gfx_w, gfx_h);  
  
  miniknopf(knopfimg,0,gfx_h-(38*knscale),61,40,-24,24,slider10,knscale);
  
  miniknopf(knopfimg,(gfx_w) - (40*knscale),gfx_h-(38*knscale),61,40,0,2,slider9,knscale);
  

  gamount.potcfg  (0,-24,24,.024); //default. von, bis, step 9 bis 2 10 bis 24
  gamount.rectIn(0,gfx_h-(35*knscale),40*knscale,40*knscale);//xpos,ypos,weite,höhe des img
  gamount.rectOut(0,gfx_h-(35*knscale), 40*knscale, 40*knscale, 61, 1); //Xpos,ypos,weite,höhe,Frames,bitmap
  
  gnoise.potcfg  (0.5,0,2,.002); //default. von, bis, step 9 bis 2 10 bis 24
  gnoise.rectIn((gfx_w) - (40*knscale),gfx_h-(35*knscale),40*knscale,40*knscale);//xpos,ypos,weite,höhe des img
  gnoise.rectOut((gfx_w) - (40*knscale),gfx_h-(35*knscale), 40*knscale, 40*knscale, 61, 1); //Xpos,ypos,weite,höhe,Frames,bitmap


  ):( ////// MASTER
  

  

    
      mnmetergfx(0, 0, 0, 0, 1, _global.desk - 1);
       mini = 1;

  
  
  knopfimg = slider11 + 2;
  
  knscale = 0.4*gfx_w/40;
  
 
  gfx_r=0.2; gfx_g=0.2; gfx_b=0.2; gfx_a=1;
  
  
  gfx_rect(0,gfx_h-32*knscale,gfx_w, gfx_h);
  gfx_x = 0; gfx_y = gfx_h-24*knscale;
  gfx_blit(18,gfx_w/100,0);
/*  
  gfx_r=0; gfx_g=0; gfx_b=0; gfx_a=1;
  gfx_x = (gfx_w/2)-32; gfx_y = gfx_h - 12;
  gfx_drawstr("< dsk");
  slider27 == 0 ? (gfx_drawnumber(1,0));
  slider27 == 1 ? (gfx_drawnumber(2,0));
  slider27 == 2 ? (gfx_drawnumber(3,0));
  gfx_drawstr(" >");
  */ 
  mouseclick == 1 ? (
  mouse_xz < gfx_w / 2 ? (slider27 -= 1);
  mouse_xz > gfx_w / 2 ? (slider27 += 1);
  slider27 == -1 ? (slider27 = 2);
  slider27 == 3 ? (slider27 = 0);
  stattslider();
  );
  
  ); ///////// END MASTER
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
):( // EXT FLAGS


      /////////////////////////////  ZFCT ////////////////////////
      zfct_w = 491; zfct_h = 300;
      gfx_setimgdim(127,zfct_w,zfct_h);
      gfx_dest = 127;
      zmnu != slider31 ? zmnu = slider31;
      mouse_xz = mouse_xz / zfct;
      mouse_yz = mouse_yz / zfct;
      ///////////////////////////////////////////////////////////





slider24 == 0 ? (/// NOT MASTER


//slider11 > 0 ? (
gsm_present > 0 ? (
  gamount.potcfg  (0,-24,24,.024); //default. von, bis, step 9 bis 2 10 bis 24
  gamount.rectIn(40,100,75,75);//xpos,ypos,weite,höhe des img
  gamount.rectOut(40,100, 75, 75, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap
  
  gnoise.potcfg  (0.5,0,2,.002); //default. von, bis, step 9 bis 2 10 bis 24
  gnoise.rectIn(160,100,75,75);//xpos,ypos,weite,höhe des img
  gnoise.rectOut(160,100, 75, 75, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap

knopfimg = _global.desk + 5;
  

  gfx_r=.4; gfx_g=.4; gfx_b=.4; gfx_a=1;
  
  gfx_rect(0,0,gfx_w, gfx_h);  
  
      scale2 = 1 ;blitscale = 1;
      gfx_x = 280; gfx_y = 90; 
      gfx_blit(meter,scale2*blitscale,0);//5
      
    
      
      mnmetergfx(1, 280, 90, 0, 1, _global.desk - 1);
       mini = 0;
      
      _global.desk > 1 ? (
      nix = 0;
      ):( //desk = 1
      gfx_r=0;gfx_g=0;gfx_b=0;
      gfx_x = 40 + 330; gfx_y = 40 + 140; //+95 - +125
      gr_meter3 = gr_meter2;
      winkel = (-148*0.017453)+(75*(gr_meter3)*0.017453);
            winkel > -0.75 ? (
            winkel = -0.75;
            );
            slider1 == 1 ? (gfx_g = 0);
      //gfx_lineto(40+330+((70)*(cos(winkel))),40+140+((70*blitscale)*sin(winkel)));
      
      
      );
      
      
      
      
      _global.process == 0 ? (
      gfx_r=0.5; gfx_g=0.5; gfx_b=0.5; gfx_a=0.5;
      
      gfx_rect(280,90,190, 91);  
      );
      
      
      
gfx_x = 0; gfx_y = 0; gfx_a = 1;

_global.desk == 1 ? (gfx_blit(14,1,0));
_global.desk == 2 ? (gfx_blit(15,1,0));
_global.desk == 3 ? (gfx_blit(16,1,0));

  knopf(knopfimg,40,100,61,75,-24,24,slider10);
  knopf(knopfimg,160,100,61,75,0,2,slider9);
/*
      gfx_r=0;gfx_g=0;gfx_b=0;
      gfx_x = gfx_w/2; gfx_y = 125*blitscale;
      gr_meter3 = gr2_meter2;
      winkel = (-133*0.017453)+(1.08*61*(gr_meter3-0.01)*0.017453);
            winkel > -0.91 ? (
            winkel = -0.91;
            );
            gfx_r = 1; gfx_g=0;
      slider1 == 1 ? (gfx_lineto((gfx_w/2)+((110*blitscale)*(cos(winkel))),125*blitscale+((110*blitscale)*sin(winkel))));
      
      gfx_r = 0;
 */    

  gr_meter_decay = exp(1/(1*srate));


       ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
       last_clicked_item = -1;
       Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
       menu_x = 5; menu_y = 25;
       gfx_x=menu_x;gfx_y=menu_y;
       gfx_blit(20,1,0);
       //gfx_drawnumber(last_clicked_item, 0); 
       mouseClick ? (
       //helpshow ? helpshow = 0;
       mouse_xz > menu_x ? (
       mouse_xz < menu_x + 20 ? (
       mouse_yz > menu_y ? (
       mouse_yz < menu_y + 20 ? (
      gfx_x = menu_x;
      gfx_y = menu_y+20;
       #item2 =">Scaling|";#allitems = #item2;
      slider31 == sqrt(0.5) ? (#item2 = "!50%|"):(#item2 = "50%|");#allitems += #item2;
      slider31 == sqrt(0.75) ? (#item2 = "!75%|"):(#item2 = "75%|");#allitems += #item2;
      slider31 == 1 ? (#item2 = "!100%|"):(#item2 = "100%|");#allitems += #item2;
      slider31 == sqrt(1.5) ? (#item2 = "!150%|"):(#item2 = "150%|");#allitems += #item2;
      slider31 == sqrt(2) ? (#item2 = "!200%|"):(#item2 = "200%|");#allitems += #item2;
      slider31 == 0 ? (#item2 = "<!FREE||"):(#item2 = "<FREE||");#allitems += #item2;
      //slider33 == 0 ? (#item2 = "Dark Mode||"):(#item2 = "!Dark Mode||");    
      //#allitems += #item2;
      #item2 = "Show Info/Help";    #allitems += #item2;
      last_clicked_item = gfx_showmenu(#allitems);
       );
       );
       );
       );
       );
       
          last_clicked_item == 1 ? zmnu = sqrt(0.5);
          last_clicked_item == 2 ? zmnu = sqrt(0.75);
          last_clicked_item == 3 ? zmnu = 1;
          last_clicked_item == 4 ? zmnu = sqrt(1.5);
          last_clicked_item == 5 ? zmnu = sqrt(2);
          last_clicked_item == 6 ? zmnu = 0;
         // last_clicked_item == 7 ? slider33 == 0 ? (slider33 = 1):(slider33=0);
       last_clicked_item == 7 ? helpshow = 1;
       
       helpshow == 1 ? (
       gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.8;
       gfx_rect(menu_x+0,menu_y+0,350,120);
       gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
       gfx_x = menu_x+3; gfx_y = menu_y+3;
       gfx_drawstr("This plugin can be automated.");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 26;
       gfx_drawstr("(Fine tune knobs with shift)");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("(Reset knobs with ctrl/cmd)");
       );
       
       
       ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
      

master_present > 0 ? (
master_present -= 1;
gfx_x = 0; gfx_y = 0; gfx_a = 1;
gfx_r=gfx_g=gfx_b=0;
gfx_rect(8,22,280,20);
gfx_x = 14; gfx_y = 30;
  gfx_r=1; gfx_g=.4; gfx_b=.4; gfx_a=1;
gfx_drawstr("Master instance already present...");
);


):( // slider 11 global desk
gfx_x = 0; gfx_y = 0; gfx_a = 1;
gfx_r=gfx_g=gfx_b=0;
gfx_rect(0,0,gfx_w,gfx_h);

gfx_blit(15,1,0,0,0,265,23);
gfx_x = 1; gfx_y = 25;
  gfx_r=1; gfx_g=.4; gfx_b=.4; gfx_a=1;
gfx_drawstr("Waiting for master..");


); //slider 11 global desk



):( ///// MASTER

  
    gfx_r=0.5; gfx_g=0.5; gfx_b=0.5; gfx_a=1;
    
    gfx_rect(0,0,gfx_w, gfx_h);  
    
    
      scale2 = 1 ;blitscale = 1;
      gfx_x = 40; gfx_y = 40; 
      gfx_blit(meter,scale2*blitscale,0);//5
      
      mnmetergfx(1, 40, 40, 0, 1, _global.desk - 1);
      mnmetergfx(1, 40+225, 40, 0, 2, _global.desk - 1);
 mini = 0;
      


      
      
  slider25 == 0 ? (
  gfx_r=0.5; gfx_g=0.5; gfx_b=0.5; gfx_a=0.5;
  
  gfx_rect(40,40,190+225, 91);  
  );
  gfx_a = 1;
  
gfx_x = 0; gfx_y=0; gfx_a=1;

slider27 == 2 ? (gfx_blit(10,1,0));
slider27 == 1 ? (gfx_blit(13,1,0));
slider27 == 0 ? (gfx_blit(12,1,0));

  gr_meter_decay = exp(1/(1*srate));
  
  
  
  knopfimg = _global.desk + 5;
    
    
    knopf(knopfimg,40,180,61,75,-15,15,slider21);
    knopf(knopfimg,160,180,61,75,-15,15,slider19);
    knopf(knopfimg,325,180,61,75,-12,12,slider20);
    knopf(19,40+92,145,61,10,0,100,slider29);
    knopf(19,265+92,145,61,10,-24,0,slider30);
  
gfx_x = 0; gfx_y=190; //Lo select
gfx_blit(9,1,0,0,60*slider22,48,60);

gfx_x = 225; gfx_y=190; //Hi select
gfx_blit(9,1,0,0,60*slider23,48,60);

gfx_x = 265; gfx_y=190; //Limiter
gfx_blit(9,1,0,0,60*slider28,48,60);

gfx_x = 400; gfx_y=190; //master processing
gfx_blit(9,1,0,0,60*slider25,48,60);

gfx_x = 430; gfx_y=190; //channel processing
gfx_blit(9,1,0,0,60*slider26,48,60);



/*
    gfx_r=0.5; gfx_g=0.0; gfx_b=0.0; gfx_a=1;
    
    gfx_rect(0,0,80, 20); // IS MASTER?
    deskx = 110;
    gfx_rect(deskx,275,80, 20); // desk1
    gfx_rect(deskx + 100,275,80, 20); // desk2
    gfx_rect(deskx + 200,275,80, 20); // desk2 
    
    gfx_rect(0+15,190+5,18, 40); // desk2 
*/
    deskx = 110;
gfx_x = 5+ deskx + 47; gfx_y = 274; gfx_a = 1;
slider27 == 0 ? (gfx_blit(11,0.8,0,0,0,30,30)):(gfx_blit(11,0.8,0,0,30,30,30)); //LED
gfx_x = 105+deskx + 47; 
slider27 == 1 ? (gfx_blit(11,0.8,0,0,0,30,30)):(gfx_blit(11,0.8,0,0,30,30,30)); //LED
gfx_x = 205+deskx + 47;
slider27 == 2 ? (gfx_blit(11,0.8,0,0,0,30,30)):(gfx_blit(11,0.8,0,0,30,30,30)); //LED


  glo.potcfg  (0,-15,15,.015); //default. von, bis, step 9 bis 2 10 bis 24
  glo.rectIn(40,180,75,75);//xpos,ypos,weite,höhe des img
  glo.rectOut(40,180, 75, 75, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap
  
  ghi.potcfg  (0,-15,15,.015); //default. von, bis, step 9 bis 2 10 bis 24
  ghi.rectIn(160,180,75,75);//xpos,ypos,weite,höhe des img
  ghi.rectOut(160,180, 75, 75, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap

  gout.potcfg  (0,-12,12,.015); //default. von, bis, step 9 bis 2 10 bis 24
  gout.rectIn(325,180,75,75);//xpos,ypos,weite,höhe des img
  gout.rectOut(325,180, 75, 75, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap
  
  gspeed.potcfg  (50,0,100,0.1); //default. von, bis, step 9 bis 2 10 bis 24
  gspeed.rectIn(40+92,145,10,10);//xpos,ypos,weite,höhe des img
  gspeed.rectOut(40+92,145, 10, 10, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap
  
  gcal.potcfg  (0,-24,0,.024); //default. von, bis, step 9 bis 2 10 bis 24
  gcal.rectIn(265+92,145,10,10);//xpos,ypos,weite,höhe des img
  gcal.rectOut(265+92,145, 10, 10, 61, 7); //Xpos,ypos,weite,höhe,Frames,bitmap
  

  mouseClick == 1 ? (
      
      katze = 0;
   
      mouse_yz > 275 ? (
      mouse_yz < 295 ? (
        mouse_xz > deskx ? (
         mouse_xz < deskx + 80 ? (
           slider27 = 0;
           slider_automate(slider27);
         );
        );
      
  mouse_xz > deskx+100 ? (
  mouse_xz < deskx+100 + 80 ? (
  slider27 = 1;
  slider_automate(slider27);
  );
  );
  mouse_xz > deskx+200 ? (
  mouse_xz < deskx+200 + 80 ? (
  slider27 = 2;
  slider_automate(slider27);
  );
  );
 );
   );
   
   
   mouse_yz > 195 ? (
   mouse_yz < 235 ? (
   mouse_xz > 15 ? (
   mouse_xz < 15 + 18 ? (
   slider22 == 0 ? (slider22 = 1):(slider22 = 0);
   slider_automate(slider22);
   );
   );
   mouse_xz > 225 + 15 ? (
   mouse_xz < 225 + 15 + 18 ? (
   slider23 == 0 ? (slider23 = 1):(slider23 = 0);
   slider_automate(slider23);
   );
   );
   
  mouse_xz > 400 + 15 ? (
  mouse_xz < 400 + 15 + 18 ? (
  slider25 == 0 ? (slider25 = 1):(slider25 = 0);
  slider_automate(slider25);
  );
  ); 
  
   mouse_xz > 430 + 15 ? (
   mouse_xz < 430 + 15 + 18 ? (
   slider26 == 0 ? (slider26 = 1):(slider26 = 0);
   slider_automate(slider26);
   );
   );
 
   mouse_xz > 265 + 15 ? (
   mouse_xz < 265 + 15 + 18 ? (
   slider28 == 0 ? (slider28 = 1):(slider28 = 0);
   slider_automate(slider28);
   );
   );
   
   );
   );
   
// gfx_x = 265; gfx_y=190; //Limiter

   stattslider();
      );
      
gfx_x = 310; gfx_y = 168; gfx_a = 1;
cG == 0 ? (gfx_blit(11,1,0,0,30,30,30)):(gfx_blit(11,1,0,0,0,30,30)); //LED
      
       ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
       last_clicked_item = -1;
       Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
       menu_x = 5; menu_y = 25;
       gfx_x=menu_x;gfx_y=menu_y;
       gfx_blit(20,1,0);
       //gfx_drawnumber(last_clicked_item, 0); 
       mouseClick ? (
       //helpshow ? helpshow = 0;
       mouse_xz > menu_x ? (
       mouse_xz < menu_x + 20 ? (
       mouse_yz > menu_y ? (
       mouse_yz < menu_y + 20 ? (
      gfx_x = menu_x;
      gfx_y = menu_y+20;
       #item2 =">Scaling|";#allitems = #item2;
      slider31 == sqrt(0.5) ? (#item2 = "!50%|"):(#item2 = "50%|");#allitems += #item2;
      slider31 == sqrt(0.75) ? (#item2 = "!75%|"):(#item2 = "75%|");#allitems += #item2;
      slider31 == 1 ? (#item2 = "!100%|"):(#item2 = "100%|");#allitems += #item2;
      slider31 == sqrt(1.5) ? (#item2 = "!150%|"):(#item2 = "150%|");#allitems += #item2;
      slider31 == sqrt(2) ? (#item2 = "!200%|"):(#item2 = "200%|");#allitems += #item2;
      slider31 == 0 ? (#item2 = "<!FREE||"):(#item2 = "<FREE||");#allitems += #item2;
      //slider33 == 0 ? (#item2 = "Dark Mode||"):(#item2 = "!Dark Mode||");    
      //#allitems += #item2;
      #item2 = "Show Info/Help";    #allitems += #item2;
      last_clicked_item = gfx_showmenu(#allitems);
       );
       );
       );
       );
       );
       
          last_clicked_item == 1 ? zmnu = sqrt(0.5);
          last_clicked_item == 2 ? zmnu = sqrt(0.75);
          last_clicked_item == 3 ? zmnu = 1;
          last_clicked_item == 4 ? zmnu = sqrt(1.5);
          last_clicked_item == 5 ? zmnu = sqrt(2);
          last_clicked_item == 6 ? zmnu = 0;
         // last_clicked_item == 7 ? slider33 == 0 ? (slider33 = 1):(slider33=0);
       last_clicked_item == 7 ? helpshow = 1;
       
       helpshow == 1 ? (
       gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.8;
       gfx_rect(menu_x+0,menu_y+0,350,120);
       gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
       gfx_x = menu_x+3; gfx_y = menu_y+3;
       gfx_drawstr("This plugin can be automated.");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+3; gfx_y += 26;
       gfx_drawstr("(Fine tune knobs with shift)");
       gfx_x = menu_x+3; gfx_y += 13;
       gfx_drawstr("(Reset knobs with ctrl/cmd)");
       );
       
       
       ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
      
      
      
      
      
      
      
      
      
      
      
); /// END MASTER








gfx_x = 47; gfx_y = -6; gfx_a = 1;
slider24 == 1 ? (gfx_blit(11,1,0,0,0,30,30)):(gfx_blit(11,1,0,0,30,30,30)); //LED

gfx_r = 1; gfx_g = 0; gfx_b = 0; gfx_a = 1;
gfx_x = 290; gfx_y = 3; gfx_drawstr("Version: "); gfx_drawstr(version);




            gspeed.dragging ? (
            gfx_x = 185; gfx_y = 145; gfx_g=gfx_b=0; gfx_r=1;gfx_a=1;
            gfx_drawstr("Meter speed: "); gfx_drawnumber(slider29,0); gfx_drawstr("%");
            );
  gcal.dragging ? (
  gfx_x = 145; gfx_y = 145; gfx_g=gfx_b=0; gfx_r=1;gfx_a=1;
  gfx_drawstr("Meter calibration: "); gfx_drawnumber(slider30,1); gfx_drawstr("dB");
  );          
     




    //////////////////////// ZFCT ///////////////////////////////
    slider31 = zmnu;
    zfct = zmnu;
    zmnu == 0 ? zfct = min(gfx_w/zfct_w,gfx_h/zfct_h);
    
    zmnu != 0 ? zfct *= gfx_ext_retina;
    gfx_dest = -1;
    gfx_x=gfx_y=0;gfx_a=1;
    gfx_blit(127,zfct,0);
    /////////////////////////////////////////////////////////////  
    
); // EXT FLAGS


  //  gthresh.knob();
  
  //gthresh.potcfg  (-16,-32,-0,.032); //default. von, bis, step
  
  //knobsx = 50; 
  //knobsy = 50;
  //gthresh.rectIn(knobsx,knobsy,75,75);//xpos,ypos,weite,höhe des img
  //gthresh.rectOut(knobsx,knobsy, 75, 75, 61, 1); //Xpos,ypos,weite,höhe,Frames,bitmap

/******************************* Slider Knob Control **************************/

slider24 == 0 ? ( // NOT MASTER
     gamount!=gamount.val?
         (
           gamount=gamount.val;
           slider10=gamount;
           slider_automate(slider10);
           pot.potVal(gamount.val);
           stattslider();
          ):
     gamount!=slider10?
         (
           gamount=slider10;
           gamount.val=gamount;
           gamount.potVal(gamount.val);
           gamount.valOld=gamount;
         );
          

        gnoise!=gnoise.val?
            (
              gnoise=gnoise.val;
              slider9=gnoise;
              slider_automate(slider9);
              pot.potVal(gnoise.val);
              stattslider();
             ):
      gnoise!=slider9?
          (
            gnoise=slider9;
            gnoise.val=gnoise;
            gnoise.potVal(gnoise.val);
            gnoise.valOld=gnoise;
          );
          
):( // Master

        glo!=glo.val?
            (
              glo=glo.val;
              slider21=glo;
              slider_automate(slider21);
              pot.potVal(glo.val);
              stattslider();
             ):
      glo!=slider21?
          (
            glo=slider21;
            glo.val=glo;
            glo.potVal(glo.val);
            glo.valOld=glo;
          );
          
         ghi!=ghi.val?
             (
               ghi=ghi.val;
               slider19=ghi;
               slider_automate(slider19);
               pot.potVal(ghi.val);
               stattslider();
              ):
       ghi!=slider19?
           (
             ghi=slider19;
             ghi.val=ghi;
             ghi.potVal(ghi.val);
             ghi.valOld=ghi;
           );
           
          gout!=gout.val?
              (
                gout=gout.val;
                slider20=gout;
                slider_automate(slider20);
                pot.potVal(gout.val);
                stattslider();
               ):
        gout!=slider20?
            (
              gout=slider20;
              gout.val=gout;
              gout.potVal(gout.val);
              gout.valOld=gout;
            );

         gspeed!=gspeed.val?
             (
               gspeed=gspeed.val;
               slider29=gspeed;
               slider_automate(slider29);
               pot.potVal(gspeed.val);
               stattslider();
              ):
       gspeed!=slider29?
           (
             gspeed=slider29;
             gspeed.val=gspeed;
             gspeed.potVal(gspeed.val);
             gspeed.valOld=gspeed;
           );
           
          gcal!=gcal.val?
              (
                gcal=gcal.val;
                slider30=gcal;
                slider_automate(slider30);
                pot.potVal(gcal.val);
                stattslider();
               ):
        gcal!=slider30?
            (
              gcal=slider30;
              gcal.val=gcal;
              gcal.potVal(gcal.val);
              gcal.valOld=gcal;
            );
            
            
       
); // END MASTER
  
  
// stattslider();
