desc:NC76 (Tukan)
// Version 1.1


// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//tags: dynamics compressor
//author: Stillwell

slider1:0<-60,0,0.1>-DONT !Threshold (dB)
slider2:5<0,9,1{Blown Capacitor 4 (Deprecated),Blown Capacitor 8 (Deprecated),Blown Capacitor 12 (Deprecated),Blown Capacitor 20 (Deprecated),Blown Capacitor All (Deprecated),4,8,12,20,All}>-Ratio
slider3:-10<-60,17,0.1>-OUT Gain (dB)
slider4:100<20,800,10>-Attack (uS)
slider5:250<10,1100,1>-Release (mS)
slider6:100<0,100,0.1>-DONT Mix (%)
slider7:0.77<0,4,0.01>-IN GAIN
slider8:0<0,1,1>-Punch
slider9:0<0,1,1>-SC-KEY
slider10:0<0,1>-TRICK
slider11:4.9<0,5,0.01>-Meterspeed
slider12:0<0,1,1>-DONT Peak needle when 1
slider13:0<0,1,1>-Fast release
slider14:1<0,6,.01>-Scaling

filename:0,76gui/CVU.png
filename:1,76gui/76Back.png
filename:2,76gui/MY1176.png
filename:3,76gui/MY1176small.png
filename:4,76gui/1176button.png
filename:5,76gui/screw.png
filename:6,76gui/CCVU2.png
filename:7,76gui/menu.png

options:no_meter


in_pin:left input
in_pin:right input
in_pin:External SC / L
in_pin:External SC / R
out_pin:left output
out_pin:right output

@init
gfx_ext_retina = 1;
ovrlgain = 1;

  log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
  db2log = 0.11512925464970228420089957273422; // ln(10) / 20 
  attime=0.010;
  reltime=0.100;
  ratio=0;
  cratio=0;
  rundb=0;
  overdb=0;
  ratatcoef = exp(-1/(0.00001 * srate));
  ratrelcoef = exp(-1/(0.5 * srate));
  atcoef=exp(-1/(attime * srate));
  relcoef=exp(-1/(reltime * srate));
  mix=1;
  gr_meter=1;
  gr_meter_decay = exp(1/(1*srate));
  grk = 0;
  softknee = 0;
  
  meter_dif = 0.0005;
  gr_meter2 = 1;
  function meterspeed()
  (
  mspd = slider11;
  meter_speed = mspd/srate;
  
  mspd == 5 ? (
  gr_meter2 < gr_meter ? (
    meter_speed /= 5;
    abs(gr_meter2 - gr_meter) > meter_dif ? (
      gr_meter2 = gr_meter2 + (meter_speed);
      
    );
  //gr_meter *= 1.1;
  
  ):(
  
  
      gr_meter2 = gr_meter;
  
    );
  );
  ;
  
  mspd == 0 ? (
    gr_meter2 > gr_meter ? (
      gr_meter2 = gr_meter;
    );
  );
  
  mspd > 0 ? (
  mspd < 5 ? (
  gr_meter2 < gr_meter ? (
  
    abs(gr_meter2 - gr_meter) > meter_dif ? (
      gr_meter2 = gr_meter2 + (meter_speed);
      
    );
  //gr_meter *= 1.1;
  
  ):(
  
    abs(gr_meter2 - gr_meter) > meter_dif ? (
      gr_meter2 = gr_meter2 - meter_speed*8;
     gr_meter2 < gr_meter ? gr_meter2 = gr_meter;
    );
  );
  );
  );
  
  gr_meter2 > 1 ? gr_meter2 =1;
  );
  
  //==============================================================================
    gfx_clear=1;
    //ext_noinit=1;
    lastCap=1;
    mouse_wheel=1;
  player = 0;
   initial = 0;
      function limitgui(s low up)
                    ( min(max(s, low), up) );
      function deg(r)
                    ( r / $pi * 180 );
      function rad(d)
                    ( d * $pi / 180 );
  
  
  
  
  /******************************* GUI Function ***********************************/
  
    function xy(x y)
               ( gfx_x = x; gfx_y = y; );
    
    function rgb(r g b)
                ( gfx_r = r; gfx_g = g; gfx_b = b; );
    
    function rectIn  (xIn_ yIn_ wIn hIn)
      instance       (xIn yIn widthIn heightIn)
                     (
                      xIn = xIn_;
                      yIn = yIn_;
                      widthIn = wIn;
                      heightIn = hIn;
                      );
                    
    function rectOut  (xOut_ yOut_ wOut hOut c i)
      instance        (xOut yOut widthOut heightOut count index)
                      (
                       xOut = xOut_;
                       yOut = yOut_;
                       widthOut = wOut;
                       heightOut = hOut;
                       count = c;
                       index = i;
                       );                
    
    function potVal(v)
      instance      (frame val minVal maxVal count heightOut)
                    (
                     val = v;
                     frame = (val - minVal) * (count - 1) / (maxVal - minVal) + 0.5;
                     frame |= 0;
                    );
    
    function potCfg  (default_ minVal_ maxVal_ step_)
      instance        (default minVal maxVal step)
                      (
                       default = default_;
                       minVal = minVal_;
                       maxVal = maxVal_;
                       step    = step_;
                       this.potVal(default);
                      );
  
    function bkg(wImg hImg indImg)
                 (
                   gfx_a=1;
                   coords[0] = coords[4] = 0;
                   coords[1] = coords[5] = 0;;
                   coords[2] = coords[6] = wImg;
                   coords[3] = coords[7] = hImg;
                   gfx_blitext(indImg, coords, 0);
                  ); 
    
    function potDrawIn ()
      instance        (xIn yIn widthIn heightIn val)
                      (
                         gfx_r= 1; gfx_g = gfx_b =0;gfx_a= 0.5;
                         
                         gfx_line(xIn,yIn,xIn,heightIn+yIn);
                         gfx_line(xIn,heightIn+yIn,xIn+widthIn,heightIn+yIn);
                         gfx_line(xIn+widthIn,yIn,xIn+widthIn,heightIn+yIn);
                         gfx_line(xIn,yIn,xIn+widthIn,yIn);
          
                         gfx_r = gfx_g = gfx_b = 0.75;
                         gfx_x = xIn + widthIn/2-12;
                         gfx_y = yIn+heightIn/2-5;
                         gfx_drawnumber(val, 1);                   
                      );
    
    function knob()
      instance   (xOut yOut widthOut heightOut index frame val)
                 (
                  
                   gfx_a=1;
                   coords[0] = 0;
                   coords[1] = frame * heightOut;
                   coords[2] = coords[6] = widthOut;
                   coords[3] = coords[7] = heightOut;
                   coords[4] = xOut;
                   coords[5] = yOut;
                   gfx_blitext(index, coords, 0);
                  );                                     
    
    function collision  ()
      instance          (xIn yIn widthIn heightIn)
                        (
                        mouse_x > xIn*zfct && mouse_x < xIn*zfct + widthIn*zfct && mouse_y > yIn*zfct && mouse_y < yIn*zfct + heightIn*zfct
                        );
    
    function dragStart ()
      instance          (dragging yOld default)
                        (
                         !ctrl ? (
                         yOld = mouse_y;
                         dragging = 1;
                        ) : 
                         this.potVal(default);
                        );
    
    function dragStop()
      instance        (dragging val valOld)
                      (
                       dragging = 0;
                       valOld = val;
                      );
    
    function potDrag()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                       !shift ? (
                       mstep = (this.maxval - this.minval)/100;
                      val = valOld + (yOld - mouse_y) * mstep;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      ):(
                      val = valOld + (yOld - mouse_y) * step;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      );
                     );
                     
 
    function potWheel()
        local         (val)
        instance      (valOld minVal maxVal step)
                      (
                      mstep = (this.maxval - this.minval)/100;
                       val = valOld + (mouse_wheel/36)*mstep;
                       val = limitgui(val, minVal, maxVal);
                       this.potVal(val);
                       valOld=val;
                       mouse_wheel=0;
                        );
    /*
    slider10:100<0,100,1>-Input Att
    slider11:0<0,100,1>-Service Old
    slider12:0<0,100,1>-Denoiser
    slider13:0<-100,100,2>-Output
    */
  gInGain.potcfg  (0.77,0,4,.004);
  gOutGain.potcfg (-10,-60,17,0.077);
  gAtt.potcfg (100,20,800,1);
  gRel.potcfg (250,10,1100,1); 
 // gRatio.potcfg   (4,4,8,4);
 // gSidechain.potcfg (0,0,1,1);
  screw.potcfg   (4.9,0,5,.005);
  knobsx = 80;
  knobsy = 60;
  gInGain.rectIn(knobsx, knobsy, 100, 100);
  gInGain.rectOut(knobsx, knobsy, 100, 100, 61, 2);
  
  screw.rectIn(knobsx+140,knobsy+45, 10, 10); 
  screw.rectOut(knobsx+140,knobsy+45, 10, 10, 61, 5);
  
  knobsx +=190;
//knobsy = 60;
 gOutGain.rectIn(knobsx, knobsy, 100, 100);
 gOutGain.rectOut(knobsx, knobsy, 100, 100, 61, 2);
  
    knobsx +=190;
    knobsy += 13;
   gAtt.rectIn(knobsx, knobsy-20, 40, 40);
   gAtt.rectOut(knobsx, knobsy-20, 40, 40, 61, 3);
  
   gRel.rectIn(knobsx, knobsy+60, 40, 40);
   gRel.rectOut(knobsx, knobsy+60, 40, 40, 61, 3);
  

  
  
  
  function stattslider() (
  mom = 0.00010 + 0.00032 * abs(100-slider11*20)^3 / 125000; 
  
  
  thresh = 0;
  threshv = exp(thresh * db2log);
  
  capsc = log2db;
  
  
  //(rpos = slider2) > 4 ? ( rpos -= 5; ) : ( capsc *= 2.08136898; /* broken capacitor */ );
  //ratio = (rpos==0 ? 4 : (rpos==1 ? 8 : (rpos == 2 ? 12 : (rpos == 3 ? 20 : 20 ))));
  
  //rpos == 4 ? (allin=1; cratio=24;) : (allin=0; cratio = ratio;);
  
  //rpos == 0 ? (ratio = 2);
  slider2 = floor(slider2);
  slider2 == 5 ? (ratio = 4);
  slider2 == 6 ? (ratio = 8);
  slider2 == 7 ? (ratio = 12);
  slider2 == 8 ? (ratio = 20);
  slider2 == 9 ? (allin=1; cratio=12;) : (allin=0; cratio = ratio;);
  slider2 < 5 ? (ratio=2);
  
  cthresh = (softknee ? (thresh -3) : thresh);
  cthreshv = exp(cthresh * db2log);
  makeup = slider3;
  makeupv = exp((makeup+autogain) * db2log);
  attime = 2*slider4 / 1000000;
  slider8==1?(attime+=0.008);
   reltime = slider5 / 1000; allin == 1 ? (reltime=slider5/10000);
   slider13 == 1 ? reltime /= 5;
  atcoef=exp(-1/(attime * srate));
  relcoef=exp(-1/(reltime * srate));
  mix=1;//slider6/100;
  ingain=exp(db2log*12)*slider7;
  
  
  
  
  
  
  

  
  
  
  
  
  );
  
  
  
  
  
  
  
  
  
  
  
  
  errcnt = 0;
  tot_nbr_spl = 0;
  scnt = 0;
  
  offset = 0.0074;//0.0074;
  
  nd_posL = nd_posR = 0.6800809;;
  nd_speedL = nd_speedR = 0;
  
  dt = 10 / srate;
  
  mom = 0.00042;
  
  dbL = dbR = 0;
  overL = overR = 0;
  
  fact_up = 10 ^ (( 0 - 10)/20) * 0.3785 ;
  wl   = 0;
  damp = 0.995;//935; //1 - slider5 * (48000 / srate);
  
  mnmode = 0; // (0 ST, 1 SumMono, 2 MaxMono)
  meterInL = spl0;
  meterInR = spl1;
  
  function mnMetersample(meterInL, meterInR, mnmode, mnmom) //Mom = speed
  (
  tot_nbr_spl += 1;
  
  smpL = meterInL; 
  smpR = meterInR;
  
  mnmode == 1 ? ( 
    smpL = (meterInL + meterInR) * 0.5;
    smpR = smpL;  
  );
  
  mnmode >= 2 ? ( 
    smpL = max(meterInL, meterInR);
    smpR = smpL; 
  );
  
  smpL = abs(smpL);
  smpR = abs(smpR);
  
   
  scnt += 1;
  
  scnt === 10 ? (
      
    // move left needle
    
      force = smpL * fact_up  -  (nd_posL * .1 + offset);
      
      nd_speedL += force * dt / mnmom;  
      nd_speedL = nd_speedL * damp;
      nd_posL += nd_speedL * dt;
      nd_posL < 0 || nd_posL > 1 ? nd_speedL = 0;
    
      nd_posL = min(max(nd_posL,0),1);
    
      // move right needle
  
      force = smpR * fact_up  - (nd_posR * .1 + offset);
      
      nd_speedR += force * dt /mnmom;  
      nd_speedR = nd_speedR * damp;
      nd_posR += nd_speedR * dt;
      nd_posR < 0 || nd_posR > 1 ? nd_speedR = 0;
    
      nd_posR = min(max(nd_posR,0),1);
       
      overL -= 10;
      overR -= 10;
  
      scnt = 0;
    
  );
  );
  
  function mnmetergfx(mnmeterscale, mnmeterx, mnmetery, twometer, mnch) //(0=flexible, x,y,redneedle, channel 1or2)
  (
  tot_nbr_spl_g  = tot_nbr_spl;
  
  overL_g = overL;
  overR_g = overR;
  nd_posL_g = nd_posL;
  nd_posR_g = nd_posR;
  
  tot_nbr_spl_g === tot_nbr_spl ? (
  
    dbL = (nd_posL_g * 23) - 20;
    dbR = (nd_posR_g * 23) - 20;
    
  ) : (
    errcnt += 1; // thread collision
  );
  
  
  gfx_a = 1; gfx_x = mnmeterx; gfx_y=mnmetery
  ;
  mnmeterscale == 0 ? (mnblitscale = gfx_w/190):(mnblitscale = mnmeterscale);
  gfx_blit(6,mnblitscale,0);
  
  
  w1 = $pi * 16.5 / 180; 
  w2 = $pi * 45 / 180;
  
  xw = 190*mnblitscale; //max(1,floor((gfx_w-30) / 2));
  yw = 92*mnblitscale;//floor(xw / 1.5);
  
  r1 = 130*mnblitscale;//floor(yw * 0.85);
  
  
  
   xd = 10 + chan*(xw+10);
    mode === 1 ? xd += floor(xw/2);
    
    yd = 10;
  
    xa = mnblitscale*190/2;//gfx_w/2;//floor(xd + xw / 2);
    ya = floor(yd + yw * 1.1);
  
  
  twometer ? (
    chan = 1;
    chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
  
    ph = 51 + (ph+20)/23*83;//45 + (ph+20)/23*90; 
    aay = abs((90 - abs(ph))); 
    r1 = mnblitscale*(80+aay/5);
    
    ph = ph * ($pi / 180);
      
    cosp = cos(ph);
    sinp = sin(ph);
      
      ya = mnmetery+110*mnblitscale;
      xa= mnmeterx+2+(190*mnblitscale/2);//-(gfx_w/50);
    x1 = xa - cosp * r1 * 0.25;
    y1 = ya - sinp * r1 * 0.25;
  
    x2 = xa - cosp * r1 * 1.1;
    y2 = ya - sinp * r1 * 1.1;
  
    gfx_x = x1;
    gfx_y = y1; 
    gfx_lineto(x2, y2);
   );
    
  chan = 0;
  
    chan == 0 ? (ph = dbL; gfx_r=gfx_b=gfx_g=0) : (ph = dbR; gfx_r=1;gfx_b=gfx_g=0);
    mnch == 2 ? (ph= dbR);
    ph = 51 + (ph+20)/23*83;//45 + (ph+20)/23*90; 
    aay = abs((90 - abs(ph))); 
    r1 = mnblitscale*(80+aay/5);
    
    ph = ph * ($pi / 180);
      
    cosp = cos(ph);
    sinp = sin(ph);
      
      ya = mnmetery+110*mnblitscale;
      xa= mnmeterx+2+(190*mnblitscale/2);//-(gfx_w/50);
    x1 = xa - cosp * r1 * 0.25;
    y1 = ya - sinp * r1 * 0.25;
  
    x2 = xa - cosp * r1 * 1.1;
    y2 = ya - sinp * r1 * 1.1;
  
    gfx_x = x1;
    gfx_y = y1; 
    gfx_lineto(x2, y2);
    
    );
    
    
    
    
    
    
    
    
    
    
  
  
  
  
  
  

@slider

stattslider();

@sample

spl0*=ingain;
spl1*=ingain;
spl2*=ingain;
spl3*=ingain;

  ospl0 = spl0;
  ospl1 = spl1;
  slider9 == 0 ? (
  aspl0 = abs(spl0);
  aspl1 = abs(spl1);
  ):(
 aspl0 = abs(spl2);
 aspl1 = abs(spl3); 
  );
  
  maxspl = max(aspl0, aspl1);
  maxspl = maxspl * maxspl;
  runave = maxspl + rmscoef * (runave - maxspl);
  det = sqrt(max(0,runave));

  overdb = max(0, capsc * log(det/cthreshv));

  overdb - rundb > 5 ? (averatio = 4;);

  overdb > rundb ? (
    rundb = overdb + atcoef * (rundb - overdb);
    runratio = averatio + ratatcoef * (runratio - averatio);
  ) : (
    rundb = overdb + relcoef * (rundb - overdb);
    runratio = averatio + ratrelcoef * (runratio - averatio);
  );
  overdb = rundb;
  averatio = runratio;

  allin ? (
    cratio = 4 + averatio;
  ) : (
    cratio = ratio;
  );
  allin == 1 ? (allratio=1.4):(allratio=1);
  gr = -overdb * allratio *  (cratio-1)/cratio;
  grv = exp(gr * db2log);
  
  runmax = maxover + relcoef * (runmax - maxover);  // highest peak for setting att/rel decays in reltime
  maxover = runmax;
grgr = (1/gr_meter)/20;

gr_meter_decay = 1.1;
grv < gr_meter ? gr_meter=grv : ( gr_meter = grv; gr_meter>1?gr_meter=1; );// gr_meter*=gr_meter_decay
grmin = min( min(cG,cG) , grmin);

meterspeed();

//grv = 10^(-6/20);//////////////////////////////////////////////////
  mom = 0.0001 + 0.00032 * abs(100-slider11*20)^3 / 125000;
  mnmetersample(grv*0.63,grv*0.63,1,mom); // mode = (0 ST, 1 SumMono, 2 MaxMono), mnmom = speed
  

  slider10 == 1 ? (
  spl0 = (-1*(spl0+(-1* spl0 * grv )))* makeupv * mix;
  spl1 = (-1*(spl1+(-1* spl1*  grv )))* makeupv * mix;  
  ) : (
  spl0 *= grv * makeupv * mix;
  spl1 *= grv * makeupv * mix;  
  );
  
  
  
  
  spl0 += ospl0 * (1-mix); // ????????????????????????? AHHH! DAS IST PARALLEL COMPERSSION!
  spl1 += ospl1 * (1-mix);



/// LIMITER ///////////////
ovrlParam1=1.5; //ovrlthresh
ovrlParam2=0.5; //output
ovrlParam3=0.5+0*0.5; //ovrlattack
ovrlParam4=0.5+0*0.5; //ovrlrelease
ovrlParam5=0; //softknee

//hard knee
ovrlthresh = pow(10, (2 * ovrlParam1) - 2);

ovrltrim = pow(10, (2 * ovrlParam2) - 1);
ovrlatt = pow(10, -0.01 - (2 * ovrlParam3));
ovrlrel = pow(10, -2 - (3 * ovrlParam4));


ovrlth = ovrlthresh;
ovrlg = ovrlgain;
ovrlat = ovrlatt;
ovrlre = ovrlrel;
ovrltr = ovrltrim;

ovrlol = spl0;
ovrlor = spl1;

ovrllev = (0.5 * ovrlg * abs(ovrlol + ovrlor));

(ovrllev > ovrlth) ?
(
ovrlg = ovrlg - (ovrlat * (ovrllev - ovrlth));
)
: //below ovrlthreshold
(
ovrlg = ovrlg + (ovrlre * (1 - ovrlg));
);

spl0 = (ovrlol * ovrltr * ovrlg);
spl1 = (ovrlor * ovrltr * ovrlg);

ovrlgain = ovrlg;


  
  
  
  
  
  
  
  
  
  
  

@gfx 906 213 // request horizontal/vertical heights (0 means dont care)
     
     //exp(1/20)

     play_state == 0 ? (
      gr_meter = min(gr_meter *= 1.05, 1); // decay meter here so if the audio processing stops it doesnt "stick"
      //gr_meter*=1.2;
      );
      /*
      grk == 0 ? (gr_meter = min(gr_meter *= 1.3,1));
      */
      gfx_r=1; gfx_g=gfx_b=0; gfx_a=0.8;
      
      meter_bot=20;
      meter_h=min(gfx_h,32);
      xscale=gfx_w*20/meter_bot;
   
      
      
      function toggles(tog) (
      tog == 0 ? (tog = 1):(tog=0);
      );         
      
      
      mouseHold = mouse_cap & 1;
      ctrl = mouse_cap & 4;
      shift = mouse_cap & 8;
      alt = mouse_cap & 16;
      mouseClick = mouseHold - lastCap;
      lastCap = mouseHold;
      
      
gfx_ext_flags == 0 ? (      
      /////////////////////////////  ZFCT ////////////////////////
      zfct_w = 906; zfct_h = 213;
      gfx_setimgdim(127,zfct_w,zfct_h);
      gfx_dest = 127;
      zmnu != slider14 ? zmnu = slider14;
      mouse_xz = mouse_x / zfct;
      mouse_yz = mouse_y / zfct;
      ///////////////////////////////////////////////////////////
      meterx = 590;
      metery = 40;
      
      gfx_x = meterx+15; gfx_y = metery+15; gfx_a=1;
      
      
      slider12 == 1 ? ( //peak needle
      
      gfx_blit(6,1,0);
      
      gfx_x = meterx+110;
      gfx_y = metery+130;
      // -71 = 0; -130 = -oo;
gfx_r=0;gfx_g=0;gfx_b=0; gfx_a=1;
slider11 == 0 ?(gfx_r=1;gfx_g=0;gfx_b=0; gfx_a=1);
slider11 == 5 ?(gfx_r=0;gfx_g=0.5;gfx_b=0; gfx_a=1);
      
      
      
// gr_meter2 = 10^(-4/20);
winkel = (-133*0.017453)+(62*(gr_meter2)*0.017453);
      winkel > -0.91 ? (
      winkel = -0.91;
      );
gfx_lineto(meterx+110+(100*(cos(winkel))),metery+130+(100*sin(winkel)));
      gr_meter_old = gr_meter;
      gfx_x = meterx+65; gfx_y = metery + 85; gfx_r=gfx_b=gfx_g=0.25;
      gfx_drawstr("PEAK NEEDLE");
      
      ):( //peak needle // oder VU
       mnmetergfx(1, meterx+15, metery+15, 0, 1); //(0=flexible, x,y,redneedle, channel 1or2)
      );
      
      //
        gfx_x = 0; gfx_y = 0;
     gfx_blit(1,1,0); 
                        
   
      
  
      initial == 0 ? (
            gInGain=slider7;
            gInGain.val=gInGain;
            gInGain.potVal(gInGain.val);
                gOutGain=slider3;
                gOutGain.val=gOutGain;
                gOutGain.potVal(gOutGain.val);
               gAtt=820-slider4;
               gAtt.val=gAtt;
               gAtt.potVal(gAtt.val);              
              gRel=1150-slider5;
              gRel.val=gRel;
              gRel.potVal(gRel.val);
              screw=slider11;
              screw.val=screw;
              screw.potVal(screw.val);
              screw.valOld=screw;
      initial = 1;

      );
              
      
      
      
      
      ksx=540;
      ksy=40;
      gfx_x=ksx; gfx_y=ksy;slider2 == 8 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
      slider2 == 9 ? (gfx_blit(4,1,0,0,35,35,35));
      ksy+=35;
      gfx_x=ksx; gfx_y=ksy;slider2 == 7 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
      slider2 == 9 ? (gfx_blit(4,1,0,0,35,35,35));
      ksy+=35;
      gfx_x=ksx; gfx_y=ksy;slider2 == 6 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
      slider2 == 9 ? (gfx_blit(4,1,0,0,35,35,35));
      ksy+=35;
      gfx_x=ksx; gfx_y=ksy;slider2 == 5 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
      slider2 == 9 ? (gfx_blit(4,1,0,0,35,35,35));
       ksx=540;
       ksy=40;
      
       
       
       tksx=820;
       tksy=40;
       gfx_x=tksx; gfx_y=tksy;slider8 == 1 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
       tksy+=35;
       gfx_x=tksx; gfx_y=tksy;slider9 == 1 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
       tksy+=35;
       gfx_x=tksx; gfx_y=tksy;slider10 == 1 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
       tksy+=35;
       gfx_x=tksx; gfx_y=tksy;slider2 == 9 ? (gfx_blit(4,1,0,0,35,35,35)):(gfx_blit(4,1,0,0,0,35,35));
        tksx=820;
        tksy=40;
        
        
        changer = 0;
      gInGain.knob();
     gOutGain.knob();      
      gAtt.knob();
      gRel.knob();
      screw.knob();
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
        ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
        last_clicked_item = -1;
        Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
        menu_x = 0; menu_y = 0;
        gfx_x=menu_x;gfx_y=menu_y;
        gfx_blit(7,1,0);
      //  gfx_drawnumber(last_clicked_item, 0); 
        mouseClick ? (
        //helpshow ? helpshow = 0;
        mouse_xz > menu_x ? (
        mouse_xz < menu_x + 20 ? (
        mouse_yz > menu_y ? (
        mouse_yz < menu_y + 20 ? (
          gfx_x = menu_x;
          gfx_y = menu_y+20;
          slider2 == 0 ? (#item1 = "!Ratio 2:1 (All out)|"):(#item1 = "Ratio 2:1 (All out)|"); 
           #allitems = #item1;
          slider13 == 1 ? (#item1 = "!Fast release||"):(#item1 = "Fast release||"); 
          #allitems += #item1;
           #item2 =">Scaling|";#allitems += #item2;
          slider14 == sqrt(0.5) ? (#item2 = "!50%|"):(#item2 = "50%|");#allitems += #item2;
          slider14 == sqrt(0.75) ? (#item2 = "!75%|"):(#item2 = "75%|");#allitems += #item2;
          slider14 == 1 ? (#item2 = "!100%|"):(#item2 = "100%|");#allitems += #item2;
          slider14 == sqrt(1.5) ? (#item2 = "!150%|"):(#item2 = "150%|");#allitems += #item2;
          slider14 == sqrt(2) ? (#item2 = "!200%|"):(#item2 = "200%|");#allitems += #item2;
          slider14 == 0 ? (#item2 = "<!FREE|"):(#item2 = "<FREE|");#allitems += #item2;
          #item2 = "Show Info/Help";    #allitems += #item2;
           last_clicked_item = gfx_showmenu(#allitems);
        );
        );
        );
        );
        );
        
        
        last_clicked_item == 1 ? (slider2 = 2; slider_automate(slider2););
        last_clicked_item == 2 ? (slider13 == 0 ? (slider13 = 1; slider_automate(slider13)):(slider13 = 0; slider_automate(slider13)); stattslider());
        
        last_clicked_item == 3 ? zmnu = sqrt(0.5);
        last_clicked_item == 4 ? zmnu = sqrt(0.75);
        last_clicked_item == 5 ? zmnu = 1;
        last_clicked_item == 6 ? zmnu = sqrt(1.5);
        last_clicked_item == 7 ? zmnu = sqrt(2);
        last_clicked_item == 8 ? zmnu = 0;
        
        last_clicked_item == 9 ? helpshow = 1;
        
        screw.collision()    ? (
        gfx_x = screw.xIn-0;gfx_y=screw.yIn-15;gfx_r=gfx_g=gfx_b=0; gfx_rect(gfx_x, gfx_y, 90, 13); 
        gfx_x +=2; gfx_y+=2;gfx_r=gfx_g=gfx_b=1; gfx_drawstr("Meter speed")
        );
        
        
        helpshow == 1 ? (
        gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
        gfx_rect(menu_x+20,menu_y+0,300,80);
        gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
        gfx_x = menu_x+23; gfx_y = menu_y+3;
        gfx_drawstr("- Screw above Tukan logo: Meter speed");
        gfx_x = menu_x+23; gfx_y += 26;
        gfx_drawstr("This plugin can be automated.");
        gfx_x = menu_x+23; gfx_y += 13;
        gfx_drawstr("");
        gfx_x = menu_x+23; gfx_y += 13;
        gfx_drawstr("(Fine tune knobs with shift)");
        gfx_x = menu_x+23; gfx_y += 13;
        gfx_drawstr("(Reset knobs with ctrl/cmd)");
        );
        
        
        ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
        
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      /********************************* Mouse Control ******************************/
      mouseClick == 1 ? 
          (
            gInGain.collision()   ? gInGain.dragStart();   
            gOutGain.collision()  ? gOutGain.dragStart();  
            gAtt.collision()    ? gAtt.dragStart(); 
            gRel.collision()    ? gRel.dragStart(); 
            screw.collision()    ? alt ? (slider12 == 1 ? (slider12=0):(slider12=1)):(screw.dragstart());
            mouse_xz > ksx+7 ?(
            mouse_xz < ksx-7 + 33?(
            mouse_yz > ksy ?(
            mouse_yz < ksy + 35 ?(
            slider2 = 8;
            alt ? (slider2 = 0);
            slider_automate(slider2);
            changer =1;
            );
            );
            );
            );
            ksy+=35;
            mouse_xz > ksx+7 ?(
            mouse_xz < ksx-7 + 33?(
            mouse_yz > ksy ?(
            mouse_yz < ksy + 35 ?(
            slider2 = 7;
            alt ? (slider2 = 0);
            slider_automate(slider2);
            changer =1;
            );
            );
            );
            );
            ksy+=35;            mouse_xz > ksx+7 ?(
            mouse_xz < ksx-7 + 33?(
            mouse_yz > ksy ?(
            mouse_yz < ksy + 35 ?(
            slider2 = 6;
            alt ? (slider2 = 0);
            slider_automate(slider2);
            changer =1;
            );
            );
            );
            );
            ksy+=35;            mouse_xz > ksx+7 ?(
            mouse_xz < ksx-7 + 33?(
            mouse_yz > ksy ?(
            mouse_yz < ksy + 35 ?(
            slider2 = 5;
            alt ? (slider2 = 0);
            slider_automate(slider2);
            changer =1;
            );
            );
            );
            );
            mouse_xz > tksx+7 ?(
                   mouse_xz < tksx-7 + 33?(
                   mouse_yz > tksy ?(
                   mouse_yz < tksy + 35 ?(
                   slider8 = toggles(slider8);
                   slider_automate(slider8);
                   changer =1;
                   );
                   );
                   );
                   );
                   tksy+=35;
                   mouse_xz > tksx+7 ?(
                   mouse_xz < tksx-7 + 33?(
                   mouse_yz > tksy ?(
                   mouse_yz < tksy + 35 ?(
                   slider9 = toggles(slider9);
                   slider_automate(slider9);
                   changer =1;
                   );
                   );
                   );
                   );
                   tksy+=35;            mouse_xz > tksx+7 ?(
                   mouse_xz < tksx-7 + 33?(
                   mouse_yz > tksy ?(
                   mouse_yz < tksy + 35 ?(
                   slider10 = toggles(slider10);
                   slider_automate(slider10);
                   changer =1;
                   );
                   );
                   );
                   );
                   tksy+=35;            mouse_xz > tksx+7 ?(
                   mouse_xz < tksx-7 + 33?(
                   mouse_yz > tksy ?(
                   mouse_yz < tksy + 35 ?(
                   //slider11 = 1;//toggles(slider11);
                   changer =1;
                   slider2 = 9;
                   alt ? (slider2 = 0);
                   slider_automate(slider2);
                   );
                   );
                   );
                   );
            ):
      mouseClick == -1  ? 
          (
            gInGain.dragStop();
            gOutGain.dragStop();
            gAtt.dragStop();
            gRel.dragStop();
            screw.dragstop();
          );
      
      mouse_wheel ? 
          (
            gInGain.collision()   ? gInGain.potWheel():
            gOutGain.collision()  ? gOutGain.potWheel():
            gAtt.collision()    ? gAtt.potWheel():
            gRel.collision()    ? gRel.potWheel():
            screw.collision()    ? screw.potWheel():
            mouse_wheel=0;
          );
      
      
      gInGain.dragging  ? gInGain.potDrag();
      gOutGain.dragging ? gOutGain.potDrag();
      gAtt.dragging   ? gAtt.potDrag();
      gRel.dragging   ? gRel.potDrag();
      screw.dragging   ? screw.potDrag();
      /******************************* Slider Knob Control **************************/
      gInGain!=gInGain.val?
          (
            gInGain=gInGain.val;
            slider7=gInGain;
            pot.potVal(gInGain.val);
            slider_automate(slider7);
            changer =1;
           ):
      gInGain!=slider7?
          (
            gInGain=slider7;
            gInGain.val=gInGain;
            gInGain.potVal(gInGain.val);
            gInGain.valOld=gInGain;
            changer =1;
          );
          
          gOutGain!=gOutGain.val?
              (
                gOutGain=gOutGain.val;
                slider3=gOutGain;
                pot.potVal(gOutGain.val);
                slider_automate(slider3);
                changer =1;
               ):
          gOutGain!=slider3?
              (
                gOutGain=slider3;
                gOutGain.val=gOutGain;
                gOutGain.potVal(gOutGain.val);
                gOutGain.valOld=gOutGain;
                changer =1;
              );
              
              
         gAtt!=gAtt.val?
             (
               gAtt=gAtt.val;
               slider4=820-gAtt;
               pot.potVal(gAtt.val);
               slider_automate(slider4);
               changer =1;
              ):
         gAtt!=820-slider4?
             (
               gAtt=820-slider4;
               gAtt.val=gAtt;
               gAtt.potVal(gAtt.val);
               gAtt.valOld=gAtt;
               changer =1;
             );
             
        gRel!=gRel.val?
            (
              gRel=gRel.val;
              Slider5=1150-gRel;
              pot.potVal(gRel.val);
              slider_automate(slider5);
              changer =1;
             ):
        gRel!=1150-slider5?
            (
              gRel=1150-slider5;
              gRel.val=gRel;
              gRel.potVal(gRel.val);
              gRel.valOld=gRel;
              changer =1;
            );
        screw!=screw.val?
            (
              screw=screw.val;
              slider11=screw;
              pot.potVal(screw.val);
              slider_automate(slider11);
              changer = 1;
             ):
        screw!=slider11?
            (
              screw=slider11;
              screw.val=screw;
              screw.potVal(screw.val);
              screw.valOld=screw;
              changer = 1;
            );
        
        
            
            
            
            changer == 1 ? (
            stattslider();
            );
            
            
   //////////////////////// ZFCT ///////////////////////////////
   slider14 = zmnu;
   zfct = zmnu;
   zmnu == 0 ? zfct = min(gfx_w/zfct_w,gfx_h/zfct_h);
   
   zmnu != 0 ? zfct *= gfx_ext_retina;
   gfx_dest = -1;
   gfx_x=gfx_y=0;gfx_a=1;
   gfx_blit(127,zfct,0);
   /////////////////////////////////////////////////////////////   
            
            
  ):( // EXT FLAGS
      gfx_mode=0; gfx_a = 1; 
    
    
    slider12 == 1 ? (
      scale2 = 1.12;blitscale = gfx_w/190;
      gfx_x = -((gfx_w/10)*scale2)/2; gfx_y = -12*blitscale; 
      gfx_blit(6,scale2*blitscale,0);//5
      //gr_meter2=10^(-0/20);
      gfx_r=0;gfx_g=0;gfx_b=0;
      gfx_x = gfx_w/2; gfx_y = 125*blitscale;
      winkel = (-133*0.017453)+(62*(gr_meter2)*0.017453);
            winkel > -0.91 ? (
            winkel = -0.91;
            );
      gfx_lineto((gfx_w/2)+((110*blitscale)*(cos(winkel))),125*blitscale+((110*blitscale)*sin(winkel)));
      
      ):(
      mnmetergfx(0, 0, -12*blitscale, 0, 1); //(0=flexible, x,y,redneedle, channel 1or2)
      );
      
       gfx_x = 2; gfx_y = 1;
      gfx_r=0;gfx_g=0;gfx_b=0; gfx_drawstr("76");
    slider12 == 1 ? (
    gfx_drawstr(" P");
    );  
  
  
  ); // EXT FLAgs
            
            
            
            
            
