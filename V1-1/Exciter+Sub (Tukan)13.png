desc:Exciter+Sub (Tukan)
// Version 1.1

// Copyright 2007, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//tags: processing exciter distortion
//author: Stillwell

slider1:0<0,100,0.1>-01 Exciter Mix (%)
slider2:100<0,100,0.1>-DONT Drive (%)
slider3:5000<1500,9000,100>-03 Exciter Frequency (Hz)
slider5:29<0,40,1>-05 Bottom Frequency (Hz)
slider6:0.1<0,5,0.001>-DONT Size (sharp <> dull) 

slider4:6<0,20,.05>-04 Bottom Mix (dB)

slider7:0<-12,12,0.05>-07 Output
slider8:1<0,1,1>-08 Bottom On
slider9:1<0,1,1>-09 Exciter On
slider10:0<0,2,1>-Solo Low/High

filename:0,EXCgui/EXCBack.png
filename:1,EXCgui/APIBig.png
filename:2,EXCgui/APIRED.png
filename:3,EXCgui/APISmall.png
filename:4,EXCgui/switch.png
filename:5,EXCgui/greenled.png
filename:6,EXCgui/menu.png


in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init

//ext_noinit = 1;
ovrlgain = 1;


//slider5:22000<20,22000,1>Frequency (Hz)
//slider6:0.1<0,1,0.001>Size (sharp <> dull)
slide3r_LP=0;//<-24,24,0.1>Output (dB)
slider4_LP=150;//<4,500,10>Chunk (ms)
slider5_LP=0.5;//<0,1>Overlap 0.5 vorher
//slider4:0<-120,6,1>Wet Mix (dB)
slide7r_LP=1;//<-120,6,1>Dry Mix (dB)

fd1l = fd2l = fd1r = fd2r = 0;
bufsize=-1;










  gain1 = 0;
  freq1 = freq;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  gain3 = 0;
  freq3 = freq * 2;
  a3 = 10^(gain3/40);
  s3 = 1;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = (1 + cosw03)/2;
  b13 = -(1 + cosw03);
  b23 = (1 + cosw03)/2;
  a03 = 1 + alpha3;
  a13 = -2 * cosw03;
  a23 = 1 - alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;









































cding = 8.65617025;

initial = 0;

  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  coords=srate+1;
  
      function limitgui(s low up)
                  ( min(max(s, low), up) );
    function deg(r)
                  ( r / $pi * 180 );
    function rad(d)
                  ( d * $pi / 180 );
                  
                  
 /******************************* GUI Function ***********************************/
    function xy(x y)
               ( gfx_x = x; gfx_y = y; );
    
    function rgb(r g b)
                ( gfx_r = r; gfx_g = g; gfx_b = b; );
    
    function rectIn  (xIn_ yIn_ wIn hIn)
      instance       (xIn yIn widthIn heightIn)
                     (
                      xIn = xIn_;
                      yIn = yIn_;
                      widthIn = wIn;
                      heightIn = hIn;
                      );
                    
    function rectOut  (xOut_ yOut_ wOut hOut c i)
      instance        (xOut yOut widthOut heightOut count index)
                      (
                       xOut = xOut_;
                       yOut = yOut_;
                       widthOut = wOut;
                       heightOut = hOut;
                       count = c;
                       index = i;
                       );                
    
    function potVal(v)
      instance      (frame val minVal maxVal count heightOut)
                    (
                     val = v;
                     frame = (val - minVal) * (count - 1) / (maxVal - minVal) + 0.5;
                     frame |= 0;
                    );
    
    function potCfg  (default_ minVal_ maxVal_ step_)
      instance        (default minVal maxVal step)
                      (
                       default = default_;
                       minVal = minVal_;
                       maxVal = maxVal_;
                       step    = step_;
                       this.potVal(default);
                      );
  
    function bkg(wImg hImg indImg)
                 (
                   gfx_a=1;
                   coords[0] = coords[4] = 0;
                   coords[1] = coords[5] = 0;;
                   coords[2] = coords[6] = wImg;
                   coords[3] = coords[7] = hImg;
                   gfx_blitext(indImg, coords, 0);
                  ); 
    
    function potDrawIn ()
      instance        (xIn yIn widthIn heightIn val)
                      (
                         gfx_r= 1; gfx_g = gfx_b =0;gfx_a= 0.5;
                         
                         gfx_line(xIn,yIn,xIn,heightIn+yIn);
                         gfx_line(xIn,heightIn+yIn,xIn+widthIn,heightIn+yIn);
                         gfx_line(xIn+widthIn,yIn,xIn+widthIn,heightIn+yIn);
                         gfx_line(xIn,yIn,xIn+widthIn,yIn);
          
                         gfx_r = gfx_g = gfx_b = 0.75;
                         gfx_x = xIn + widthIn/2-12;
                         gfx_y = yIn+heightIn/2-5;
                         gfx_drawnumber(val, 1);                   
                      );
    
    function knob()
      instance   (xOut yOut widthOut heightOut index frame val)
                 (
                  
                   gfx_a=1;
                   coords[0] = 0;
                   coords[1] = frame * heightOut;
                   coords[2] = coords[6] = widthOut;
                   coords[3] = coords[7] = heightOut;
                   coords[4] = xOut;
                   coords[5] = yOut;
                   gfx_blitext(index, coords, 0);
                  );                                     
    
    function collision  ()
      instance          (xIn yIn widthIn heightIn)
                        (
                         mouse_x > xIn && mouse_x < xIn + widthIn && mouse_y > yIn && mouse_y < yIn + heightIn
                        );
    
    function dragStart ()
      instance          (dragging yOld default)
                        (
                         !ctrl ? (
                         yOld = mouse_y;
                         dragging = 1;
                        ) : 
                         this.potVal(default);
                        );
    
    function dragStop()
      instance        (dragging val valOld)
                      (
                       dragging = 0;
                       valOld = val;
                      );
    
    function potDrag()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                       !shift ? (
                       mstep = (this.maxval - this.minval)/100;
                      val = valOld + (yOld - mouse_y) * mstep;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      ):(
                      val = valOld + (yOld - mouse_y) * step;
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      );
                     );
                     
    function potToggle()
          local      (val)
            instance   (valOld minVal maxVal yOld step)
                     (
                      valold == 0 ? (val = 1):(val=0);
                      val = limitgui(val, minVal, maxVal);
                      this.potVal(val);
                      valOld=val;
                       );
    
    function potWheel()
        local         (val)
        instance      (valOld minVal maxVal step)
                      (
                      mstep = (this.maxval - this.minval)/100;
                       val = valOld + (mouse_wheel/36)*mstep;
                       val = limitgui(val, minVal, maxVal);
                       this.potVal(val);
                       valOld=val;
                       mouse_wheel=0;
                        );
 
   
   /*
   slider1:0<0,100,0.1>Mix (%)
   slider2:1000<0,100,0.1>Drive (%)
   slider3:5000<1500,9000,100>Frequency (Hz)
   
   slider4:0.5<0,1,0.01>level
   slider5:0.3<0,1,0.01>tune
   slider6:0.3<0,1,0.01>threshold
   
   
   */
 glfreq.potcfg  (29,0,40,0.31); //default. von, bis, step
 //glthresh.potcfg (0.3,0,1,.01);
 gllevel.potcfg   (6,0,20,.02);
 ghfreq.potcfg   (5000,1500,9000,7.5);
 ghlevel.potcfg   (0,0,100,.1);
 goutgain.potcfg   (0,-12,12,.024);
 LowOn.potcfg   (1,0,1,1);
 HighOn.potcfg   (1,0,1,1);
 
 knobsx = 50;
 knobsy = 100;
 glfreq.rectIn(knobsx,knobsy,75,75);//xpos,ypos,weite,höhe des img
 glfreq.rectOut(knobsx,knobsy, 75, 75, 61, 1); //Xpos,ypos,weite,höhe,Frames,bitmap
 
 ghfreq.rectIn(knobsx,knobsy+130, 75, 75); 
 ghfreq.rectOut(knobsx,knobsy+130, 75, 75, 61, 1);
 
 knobsx+=75+60;
// glthresh.rectIn(knobsx,knobsy+7, 60, 60);
// glthresh.rectOut(knobsx,knobsy+7, 60, 60, 61, 3);
 
 knobsx+=60+60;
 gllevel.rectIn(knobsx,knobsy, 75, 75); 
 gllevel.rectOut(knobsx,knobsy, 75, 75, 61, 2);
 
ghlevel.rectIn(knobsx,knobsy+130, 75, 75); 
ghlevel.rectOut(knobsx,knobsy+130, 75, 75, 61, 2);
 
 knobsx +=110;
 LowOn.rectIn(knobsx,knobsy+7, 48, 60); 
 LowOn.rectOut(knobsx,knobsy+7, 48, 60, 2, 4);
 
 HighOn.rectIn(knobsx,knobsy+7+130, 48, 60); 
 HighOn.rectOut(knobsx,knobsy+7+130, 48, 60, 2, 4);
 
knobsx+=48+60;
goutgain.rectIn(knobsx,knobsy, 75, 75); 
goutgain.rectOut(knobsx,knobsy, 75, 75, 61, 2);



function stattslider() (
  xoutgain = exp(slider7/cding);
  slider5 > 40 ? slider5 = 40;
  
  solobot = floor(slider10);
  
  
  amount = max(min(0.1,1),0.01);
  damp = amount*20;
  c = 1/tan($pi*1000/srate); //1000 war mal slider5
  fk = 1 / (1 + c*(c+damp));
  fa1 = 2 * (1 - c*c) * fk;
  fa0 = (1 + c*(c-damp)) * fk;
  
  LPGain = 10 ^ (slide3r_LP / 20);
  
  nbufsize=srate*0.001*slider4_LP; nbufsize=nbufsize&65534; 
  nbufsize != bufsize ? (bufsize=nbufsize; bufpos=0);
  slider5_LP=min(1,max(0,slider5_LP)); rspos=bufsize*slider5_LP; invbs=1/rspos;
  drymix=2 ^ (slide7r_LP/6); wetmix=slider4/10;//2 ^ (slider4/6);
  LFnew = 0;

  
  
  sx = 16+1.3*slider5*1.20103;
  cx_lp = floor(exp(sx*log(1.059))*8.17742);
  cutoff_lp = 2*cx_lp/srate;
  res_lp = 10^(0.05*(0/n_lp+1.5));
  k = 0.5*res_lp*sin($pi*cutoff_lp);
  c1 = 0.5*(1-k)/(1+k);
  c2 = (0.5+c1)*cos($pi*cutoff_lp);
  c3 = (0.5+c1-c2)*0.25;
  
  a0_lp = 2*c3;
  a1_lp = 4*c3;
  a2_lp = 2*c3;
  b1_lp = -2*c2;
  b2_lp = 2*c1;
  
  
  
  
  
    mix=(10 * slider1) / 100;
    drive=100 / 100;
    mix1 = 1 - mix;
    drive1 = 1 / (1 - (drive / 2));
    drive2 = drive / 2;
    freq = slider3;
  
    gain1 = 0;
    freq1 = freq;
    a1 = 1;
    s1 = 1;
    q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
    w01 = 2 * $pi * freq1/srate;
    cosw01 = cos(w01);
    sinw01 = sin(w01);
    alpha1 = sinw01 / (2 * q1);
  
    b01 = (1 - cosw01)/2;
    b11 = (1 - cosw01);
    b21 = (1 - cosw01)/2;
    a01 = 1 + alpha1;
    a11 = -2 * cosw01;
    a21 = 1 - alpha1;
    b01 /= a01;
    b11 /= a01;
    b21 /= a01;
    a11 /= a01;
    a21 /= a01;
  
    gain3 = 0;
    freq3 = freq * 2;
    a3 = 10^(gain3/40);
    s3 = 1;
    q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
    w03 = 2 * $pi * freq3/srate;
    cosw03 = cos(w03);
    sinw03 = sin(w03);
    alpha3 = sinw03 / (2 * q3);
  
    b03 = (1 + cosw03)/2;
    b13 = -(1 + cosw03);
    b23 = (1 + cosw03)/2;
    a03 = 1 + alpha3;
    a13 = -2 * cosw03;
    a23 = 1 - alpha3;
    b03 /= a03;
    b13 /= a03;
    b23 /= a03;
    a13 /= a03;
    a23 /= a03;
);













@slider
stattslider();  


@sample



n_lp = 6;
//n_lp > 0 ? (
out_hp_l = spl0;
out_hp_r = spl1;

out_lp_l_1 = a0_lp*out_hp_l+a1_lp*mem_lp_l_11+a2_lp*mem_lp_l_12-b1_lp*mem_lp_l_13-b2_lp*mem_lp_l_14;
mem_lp_l_12 = mem_lp_l_11;
mem_lp_l_11 = out_hp_l;
mem_lp_l_14 = mem_lp_l_13;
mem_lp_l_13 = out_lp_l_1;
out_lp_l = out_lp_l_1;
out_lp_r_1 = a0_lp*out_hp_r+a1_lp*mem_lp_r_11+a2_lp*mem_lp_r_12-b1_lp*mem_lp_r_13-b2_lp*mem_lp_r_14;
mem_lp_r_12 = mem_lp_r_11;
mem_lp_r_11 = out_hp_r;
mem_lp_r_14 = mem_lp_r_13;
mem_lp_r_13 = out_lp_r_1;
out_lp_r = out_lp_r_1;
n_lp > 1 ? (
out_lp_l_2 = a0_lp*out_lp_l_1+a1_lp*mem_lp_l_21+a2_lp*mem_lp_l_22-b1_lp*mem_lp_l_23-b2_lp*mem_lp_l_24;
mem_lp_l_22 = mem_lp_l_21;
mem_lp_l_21 = out_lp_l_1;
mem_lp_l_24 = mem_lp_l_23;
mem_lp_l_23 = out_lp_l_2;
out_lp_l = out_lp_l_2;
out_lp_r_2 = a0_lp*out_lp_r_1+a1_lp*mem_lp_r_21+a2_lp*mem_lp_r_22-b1_lp*mem_lp_r_23-b2_lp*mem_lp_r_24;
mem_lp_r_22 = mem_lp_r_21;
mem_lp_r_21 = out_lp_r_1;
mem_lp_r_24 = mem_lp_r_23;
mem_lp_r_23 = out_lp_r_2;
out_lp_r = out_lp_r_2;
);
n_lp > 2 ? (
out_lp_l_3 = a0_lp*out_lp_l_2+a1_lp*mem_lp_l_31+a2_lp*mem_lp_l_32-b1_lp*mem_lp_l_33-b2_lp*mem_lp_l_34;
mem_lp_l_32 = mem_lp_l_31;
mem_lp_l_31 = out_lp_l_2;
mem_lp_l_34 = mem_lp_l_33;
mem_lp_l_33 = out_lp_l_3;
out_lp_l = out_lp_l_3;
out_lp_r_3 = a0_lp*out_lp_r_2+a1_lp*mem_lp_r_31+a2_lp*mem_lp_r_32-b1_lp*mem_lp_r_33-b2_lp*mem_lp_r_34;
mem_lp_r_32 = mem_lp_r_31;
mem_lp_r_31 = out_lp_r_2;
mem_lp_r_34 = mem_lp_r_33;
mem_lp_r_33 = out_lp_r_3;
out_lp_r = out_lp_r_3;
);
n_lp > 3 ? (
out_lp_l_4 = a0_lp*out_lp_l_3+a1_lp*mem_lp_l_41+a2_lp*mem_lp_l_42-b1_lp*mem_lp_l_43-b2_lp*mem_lp_l_44;
mem_lp_l_42 = mem_lp_l_41;
mem_lp_l_41 = out_lp_l_3;
mem_lp_l_44 = mem_lp_l_43;
mem_lp_l_43 = out_lp_l_4;
out_lp_l = out_lp_l_4;
out_lp_r_4 = a0_lp*out_lp_r_3+a1_lp*mem_lp_r_41+a2_lp*mem_lp_r_42-b1_lp*mem_lp_r_43-b2_lp*mem_lp_r_44;
mem_lp_r_42 = mem_lp_r_41;
mem_lp_r_41 = out_lp_r_3;
mem_lp_r_44 = mem_lp_r_43;
mem_lp_r_43 = out_lp_r_4;
out_lp_r = out_lp_r_4;
);
n_lp > 4 ? (
out_lp_l_5 = a0_lp*out_lp_l_4+a1_lp*mem_lp_l_51+a2_lp*mem_lp_l_52-b1_lp*mem_lp_l_53-b2_lp*mem_lp_l_54;
mem_lp_l_52 = mem_lp_l_51;
mem_lp_l_51 = out_lp_l_4;
mem_lp_l_54 = mem_lp_l_53;
mem_lp_l_53 = out_lp_l_5;
out_lp_l = out_lp_l_5;
out_lp_r_5 = a0_lp*out_lp_r_4+a1_lp*mem_lp_r_51+a2_lp*mem_lp_r_52-b1_lp*mem_lp_r_53-b2_lp*mem_lp_r_54;
mem_lp_r_52 = mem_lp_r_51;
mem_lp_r_51 = out_lp_r_4;
mem_lp_r_54 = mem_lp_r_53;
mem_lp_r_53 = out_lp_r_5;
out_lp_r = out_lp_r_5;
);
n_lp > 5 ? (
out_lp_l_6 = a0_lp*out_lp_l_5+a1_lp*mem_lp_l_61+a2_lp*mem_lp_l_62-b1_lp*mem_lp_l_63-b2_lp*mem_lp_l_64;
mem_lp_l_62 = mem_lp_l_61;
mem_lp_l_61 = out_lp_l_5;
mem_lp_l_64 = mem_lp_l_63;
mem_lp_l_63 = out_lp_l_6;
out_lp_l = out_lp_l_6;
out_lp_r_6 = a0_lp*out_lp_r_5+a1_lp*mem_lp_r_61+a2_lp*mem_lp_r_62-b1_lp*mem_lp_r_63-b2_lp*mem_lp_r_64;
mem_lp_r_62 = mem_lp_r_61;
mem_lp_r_61 = out_lp_r_5;
mem_lp_r_64 = mem_lp_r_63;
mem_lp_r_63 = out_lp_r_6;
out_lp_r = out_lp_r_6;
);

subspl0 = out_lp_l;
subspl1 = out_lp_r;




// alte sub routine
fd0l = (fk*subspl0) - (fa1*fd1l) - (fa0*fd2l);
fd0r = (fk*subspl1) - (fa1*fd1r) - (fa0*fd2r);

lpspl0 = (fd0l + fd1l + fd1l + fd2l)*LPGain;
lpspl1 = (fd0r + fd1r + fd1r + fd2r)*LPGain;

fd2l = fd1l;
fd2r = fd1r;

fd1l = fd0l;
fd1r = fd0r;

lpspl0 *= LPGain;
lpspl1 *= LPGain;

//######
ss0=subspl0;//lpspl0;
ss1=subspl1;//lpspl1;

hbp=bufpos&65534;
s0r=bufsize[hbp]; // read these early
s1r=bufsize[hbp+1];

(bufpos*2)[0]=lpspl0;
(bufpos*2)[1]=lpspl1;

bufpos < rspos ? (
  sc=bufpos*invbs;
  lpspl0=hbp[0]*sc + s0r*(1-sc);
  lpspl1=hbp[1]*sc + s1r*(1-sc);
) : (
  lpspl0=hbp[0];
  lpspl1=hbp[1];
);

(bufpos+=1) >= bufsize ? bufpos=0;
subspl0=lpspl0*wetmix + spl0;
subspl1=lpspl1*wetmix + spl1;

greenled < max(abs(lpspl0), abs(plspl1)) ? (greenled = max(abs(lpspl0), abs(lpspl1)));
// ende alte subroutine


slider8 == 0 ? (
subspl0 = spl0;
subspl1 = spl1;
);


























  dry0 = subspl0;
  dry1 = subspl1;

  //hpf to extract HF signal
  ospl0 = dry0;
  dry0 = b01 * dry0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
  xl21 = xl11;
  xl11 = ospl0;
  yl21 = yl11;
  yl11 = dry0;

  ospl1 = dry1;
  dry1 = b01 * dry1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
  xr21 = xr11;
  xr11 = ospl1;
  yr21 = yr11;
  yr11 = dry1;

  //enhance HF signal
  wet0 = drive1 * (1.5 * dry0) * (1 - abs((1.5 * dry0) * drive2));
  wet1 = drive1 * (1.5 * dry1) * (1 - abs((1.5 * dry1) * drive2)); 
  wet0 /= 1.5;
  wet1 /= 1.5;

  //hpf to isolate enhance signal
  ospl0 = wet0;
  wet0 = b03 * wet0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
  xl23 = xl13;
  xl13 = ospl0;
  yl23 = yl13;
  yl13 = wet0;

  ospl1 = wet1;
  wet1 = b03 * wet1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
  xr23 = xr13;
  xr13 = ospl1;
  yr23 = yr13;
  yr13 = wet1;


slider9 == 0 ? (
wet0 = 0;
wet1 = 0;
);

solobot == 0 ? (
  spl0 = xoutgain *  (subspl0 + (mix) * wet0);
  spl1 = xoutgain *  (subspl1 + (mix) * wet1);
): solobot == 1 ? (
  spl0 = lpspl0;
  spl1 = lpspl0;
):(  
  spl0 = wet0;
  spl1 = wet1;
);  
  
  
  
  
  
  /// LIMITER ///////////////
  ovrlParam1=1.5; //ovrlthresh
  ovrlParam2=0.5; //output
  ovrlParam3=0.5+0*0.5; //ovrlattack
  ovrlParam4=0.5+0*0.5; //ovrlrelease
  ovrlParam5=0; //softknee
  
  //hard knee
  ovrlthresh = pow(10, (2 * ovrlParam1) - 2);
  
  ovrltrim = pow(10, (2 * ovrlParam2) - 1);
  ovrlatt = pow(10, -0.01 - (2 * ovrlParam3));
  ovrlrel = pow(10, -2 - (3 * ovrlParam4));
  
  
  ovrlth = ovrlthresh;
  ovrlg = ovrlgain;
  ovrlat = ovrlatt;
  ovrlre = ovrlrel;
  ovrltr = ovrltrim;
  
  ovrlol = spl0;
  ovrlor = spl1;
  
  ovrllev = (0.5 * ovrlg * abs(ovrlol + ovrlor));
  
  (ovrllev > ovrlth) ?
  (
  ovrlg = ovrlg - (ovrlat * (ovrllev - ovrlth));
  )
  : //below ovrlthreshold
  (
  ovrlg = ovrlg + (ovrlre * (1 - ovrlg));
  );
  
  spl0 = (ovrlol * ovrltr * ovrlg);
  spl1 = (ovrlor * ovrltr * ovrlg);
  
  ovrlgain = ovrlg;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
@gfx 651 352
  
      mouseHold = mouse_cap & 1;
      ctrl = mouse_cap & 4;
      alt = mouse_cap & 16;
      shift = mouse_cap & 8;
      mouseClick = mouseHold - lastCap;
      lastCap = mouseHold;
  
  initial == 0 ? (
  glfreq=slider5;
  glfreq.val=glfreq;
  glfreq.potVal(glfreq.val);
  glthresh=0.1;
  glthresh.val=glthresh;
  glthresh.potVal(glthresh.val);
  gllevel=slider4;
  gllevel.val=gllevel;
  gllevel.potVal(gllevel.val);
  ghfreq=slider3;
  ghfreq.val=ghfreq;
  ghfreq.potVal(ghfreq.val);
  ghlevel=slider1;
  ghlevel.val=ghlevel;
  ghlevel.potVal(ghlevel.val);
  goutgain=slider7;
  goutgain.val=goutgain;
  goutgain.potVal(goutgain.val);
      LowOn=slider8;
      LowOn.val=LowOn;
      LowOn.potVal(LowOn.val);
      HighOn=slider9;
      HighOn.val=HighOn;
      HighOn.potVal(HighOn.val);
            initial = 1;
  );
  
  
  
  
  
  /*
  slider1:0<0,100,0.1>-Mix (%)
  slider2:100<0,100,0.1>-Drive (%)
  slider3:5000<1500,9000,100>-Frequency (Hz)
  slider5:150<10,320,3>-Frequency (Hz)
  slider6:0.1<0,5,0.001>-Size (sharp <> dull) 
  
  slider4:6<0,20,.05>-Wet Mix (dB)
  
  */
  
  
  
  
  
  
  gfx_ext_flags == 1 ? (
  gfx_r = 0.2; gfx_g=0.2;gfx_b=0.2;gfx_a=0.8;
  gfx_rect(0,0,gfx_w,gfx_h);
  
  
  gfx_r = 0.4; gfx_b = 0.8; gfx_g = 0 ; gfx_a = 1;
  gfx_rect(0,0,gfx_w,gfx_h/5);
  //OUT
  slider7 > 0 ? (
  gfx_rect(2*gfx_w/5,(3*gfx_h/5)-(2*gfx_h/5)*(slider7/12),gfx_w/5,(2*gfx_h/5)*(slider7/12));
  ):(
  gfx_rect(2*gfx_w/5,(3*gfx_h/5),gfx_w/5, (2*gfx_h/5)*(Abs(slider7)/12));
  );
  
  //Low
  gfx_r = 0.8; gfx_b = 00; gfx_g = 0 ; gfx_a = 1;
  gfx_rect(0,(gfx_h)-(4*gfx_h/5)*(slider5/320),gfx_w/5,gfx_h);
  
  
  gfx_r = 0; gfx_b = 0; gfx_g = 0.8; gfx_a = 1;
  gfx_rect(gfx_w/5,(gfx_h)-(4*gfx_h/5)*(slider4/20),gfx_w/5,gfx_h);
  
  
  //high
  gfx_r = 0.8; gfx_b = 00; gfx_g = 0 ; gfx_a = 1;
  gfx_rect(3*gfx_w/5,(gfx_h)-(4*gfx_h/5)*(slider3/9000),gfx_w/5,gfx_h);
  
  
  gfx_r = 0; gfx_b = 0; gfx_g = 0.8; gfx_a = 1;
  gfx_rect(4*gfx_w/5,(gfx_h)-(4*gfx_h/5)*(slider1/100),gfx_w/5,gfx_h);
  
  
  
  gfx_r = 0.7; gfx_b = 0.7; gfx_g = 0.7; gfx_a = 1;
  gfx_line(0,-1+gfx_h/5,gfx_w,-1+gfx_h/5);
  gfx_x = 0; gfx_y = gfx_h - 12; gfx_drawstr("Lows");
  gfx_x = gfx_w-32; gfx_y = gfx_h - 12; gfx_drawstr("High");
  
  
  
  
  mouseClick == 1 ? 
      (
        mouse_x < gfx_w / 5   ? (glfreq.dragStart();  alt==16 ? solobot == 1 ? (solobot = 0):(solobot=1));
    //    glthresh.collision()  ? glthresh.dragStart();  
        mouse_x > gfx_w / 5 ? (mouse_x < 2*gfx_w / 5    ? gllevel.dragStart()); 
        mouse_x > 3*gfx_w / 5 ? (mouse_x < 4*gfx_w / 5    ? ghfreq.dragStart(); alt==16 ? solobot == 2 ? (solobot = 0):(solobot=2));
        mouse_x > 4 * gfx_w / 5 ? ghlevel.dragStart();
        mouse_x > 2 * gfx_w / 5 ? (mouse_x < 3 *gfx_w / 5  ? goutgain.dragStart());
       // LowOn.collision()    ? LowOn.potToggle();
       // HighOn.collision()    ? HighOn.potToggle();
      ):
  mouseClick == -1  ? 
      (
        glfreq.dragStop();
     //   glthresh.dragStop();
        gllevel.dragStop();
        ghfreq.dragStop();ghlevel.dragStop();goutgain.dragStop();
        //LowOn.dragStop();
        //HighOn.dragStop();
       );
  
  /*
  mouse_wheel ? 
      (
        mouse_x < gfx_w / 5   ? glfreq.potWheel():
     //   glthresh.collision()  ? glthresh.potWheel():
        mouse_x > gfx_w / 5 ? (mouse_x < 2*gfx_w / 5     ? gllevel.potWheel()):
        mouse_x > 3*gfx_w / 5 ? (mouse_x < 4*gfx_w / 5   ? ghfreq.potWheel()): 
        mouse_x > 4 * gfx_w / 5 ? ghlevel.potWheel():
        mouse_x > 2 * gfx_w / 5 ? (mouse_x < 3 *gfx_w / 5  ? goutgain.potWheel()):
      //  LowOn.collision()    ? LowOn.potWheel():
      //  HighOn.collision()    ? HighOn.potWheel():
        mouse_wheel=0;
      );
  */
  
  
  
  ):( // EXT FLAGS
  
  
  
  
  
  
  
    gfx_y=0; gfx_x =0;
   gfx_blit(0,1,0);
    glfreq.knob();
 //   glthresh.knob();
    gllevel.knob();
    ghfreq.knob();
    ghlevel.knob();
    goutgain.knob();
    LowOn.knob();
    HighOn.knob();
    
    
    ggreenled=greenled*20;
    ggreenled > 1 ? (ggreenled=1);
    ggreenled < 0.05 ? (ggreenled=0);
    greenled *= 0.65;
    
    gfx_r = 0; gfx_b=0; gfx_g = ggreenled; gfx_a = 1;
    //gfx_circle(10,10,5,1);
    gfx_y=150; gfx_x = 190;
    gfx_blit(5,0.8,0,0,64*floor(ggreenled+0.5)*29,64,64);
    // solobot = 0;
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
       
       ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
       last_clicked_item = -1;
       Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
       menu_x = 28; menu_y = 14;
       gfx_x=menu_x;gfx_y=menu_y;
       gfx_blit(6,1,0);
     //  gfx_drawnumber(last_clicked_item, 0); 
       mouseClick ? (
       //helpshow ? helpshow = 0;
       mouse_x > menu_x ? (
       mouse_x < menu_x + 20 ? (
       mouse_y > menu_y ? (
       mouse_y < menu_y + 20 ? (
         gfx_x = menu_x;
         gfx_y = menu_y+20;
         slider10 == 1 ? (#item1 = "!Solo fat bottom|"):(#item1 = "Solo fat bottom|");  #allitems = #item1;
         slider10 == 2 ? (#item2 = "!Solo exciter||"):(#item2 = "Solo exciter||");  #allitems += #item2;
         #item3 = "Show Info/Help";    #allitems += #item3;
         last_clicked_item = gfx_showmenu(#allitems);
       );
       );
       );
       );
       );
       
       
       last_clicked_item == 1 ? (slider10 == 1 ? (slider10=0):(slider10=1);slider_automate(slider10););
       last_clicked_item == 2 ? (slider10 == 2 ? (slider10=0):(slider10=2);slider_automate(slider10););
       last_clicked_item == 3 ? helpshow = 1;
     
       helpshow == 1 ? (
       gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
       gfx_rect(menu_x+20,menu_y+0,300,100);
       gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
       gfx_x = menu_x+23; gfx_y = menu_y+3;
       gfx_drawstr("Tip: Quick activate bottom / exciter");
       gfx_x = menu_x+23; gfx_y += 13;
       gfx_drawstr("solo by alt+click the frequency knob.");
       gfx_x = menu_x+23; gfx_y += 26;
       gfx_drawstr("This plugin can be automated.");
       gfx_x = menu_x+23; gfx_y += 13;
       gfx_drawstr("");
       gfx_x = menu_x+23; gfx_y += 13;
       gfx_drawstr("(Fine tune knobs with shift)");
       gfx_x = menu_x+23; gfx_y += 13;
       gfx_drawstr("(Reset knobs with ctrl/cmd)");
       );
       
       
       ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
       
       
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
  /********************************* Mouse Control ******************************/
  mouseClick == 1 ? 
      (
        glfreq.collision()   ? (glfreq.dragStart();  alt==16 ? slider10 == 1 ? (slider10 = 0):(slider10=1));
    //    glthresh.collision()  ? glthresh.dragStart();  
        gllevel.collision()    ? gllevel.dragStart(); 
        ghfreq.collision()    ? (ghfreq.dragStart(); alt==16 ? slider10 == 2 ? (slider10 = 0):(slider10=2));
        ghlevel.collision()    ? ghlevel.dragStart();
        goutgain.collision()    ? goutgain.dragStart();
        LowOn.collision()    ? LowOn.potToggle();
        HighOn.collision()    ? HighOn.potToggle();
      ):
  mouseClick == -1  ? 
      (
        glfreq.dragStop();
     //   glthresh.dragStop();
        gllevel.dragStop();
        ghfreq.dragStop();ghlevel.dragStop();goutgain.dragStop();
        //LowOn.dragStop();
        //HighOn.dragStop();
       );
  
  mouse_wheel ? 
      (
        glfreq.collision()   ? glfreq.potWheel():
     //   glthresh.collision()  ? glthresh.potWheel():
        gllevel.collision()    ? gllevel.potWheel():
        ghfreq.collision()    ? ghfreq.potWheel(): 
        ghlevel.collision()    ? ghlevel.potWheel():
        goutgain.collision()    ? goutgain.potWheel():
      //  LowOn.collision()    ? LowOn.potWheel():
      //  HighOn.collision()    ? HighOn.potWheel():
        mouse_wheel=0;
      );
      
      
      
      
      
      
      
  ); // EXT FLAGS
  
  glfreq.dragging  ? glfreq.potDrag();
 // glthresh.dragging ? glthresh.potDrag();
  gllevel.dragging   ? gllevel.potDrag();
  ghfreq.dragging   ? ghfreq.potDrag();
  ghlevel.dragging   ? ghlevel.potDrag();
  goutgain.dragging   ? goutgain.potDrag();
  LowOn.dragging   ? LowOn.potDrag();
  HighOn.dragging   ? HighOn.potDrag();
  /******************************* Slider Knob Control **************************/
    
    
   
   
   
  glfreq!=glfreq.val?
      (
        glfreq=glfreq.val;
        slider5=glfreq;
        pot.potVal(glfreq.val);
        slider_automate(slider5);
        LFnew = 1;
       ):
  glfreq!=slider5?
      (
        glfreq=slider5;
        glfreq.val=glfreq;
        glfreq.potVal(glfreq.val);
        glfreq.valOld=glfreq;
        LFnew=1;
      );
    
    /*
  glthresh!=glthresh.val?
      (
        glthresh=glthresh.val;
        slider6=glthresh;
        pot.potVal(glthresh.val);
       ):
       
  glthresh!=slider6?
      (
        glthresh=slider6;
        glthresh.val=glthresh;
        glthresh.potVal(glthresh.val);
        glthresh.valOld=glthresh;
      );  
    */
  gllevel!=gllevel.val?
      (
        gllevel=gllevel.val;
        slider4=gllevel;
        pot.potVal(gllevel.val);
        slider_automate(slider4);
        LFnew=1;
       ):
  gllevel!=slider4?
      (
        gllevel=slider4;
        gllevel.val=gllevel;
        gllevel.potVal(gllevel.val);
        gllevel.valOld=gllevel;
        LFnew=1;
      );
  
  ghfreq!=ghfreq.val?
      (
        ghfreq=ghfreq.val;
        slider3=ghfreq;
        pot.potVal(ghfreq.val);
        slider_automate(slider3);
       ):
  ghfreq!=slider3?
      (
        ghfreq=slider3;
        ghfreq.val=ghfreq;
        ghfreq.potVal(ghfreq.val);
        ghfreq.valOld=ghfreq;
      );
  
  ghlevel!=ghlevel.val?
      (
        ghlevel=ghlevel.val;
        slider1=ghlevel;
        pot.potVal(ghlevel.val);
        slider_automate(slider1);
       ):
  ghlevel!=slider1?
      (
        ghlevel=slider1;
        ghlevel.val=ghlevel;
        ghlevel.potVal(ghlevel.val);
        ghlevel.valOld=ghlevel;
      );
      
  goutgain!=goutgain.val?
      (
        goutgain=goutgain.val;
        slider7=goutgain;
        pot.potVal(goutgain.val);
        slider_automate(slider7);
       ):
  goutgain!=slider7?
      (
        goutgain=slider7;
        goutgain.val=goutgain;
        goutgain.potVal(goutgain.val);
        goutgain.valOld=goutgain;
      );
      LowOn!=LowOn.val?
          (
            LowOn=LowOn.val;
            slider8=LowOn;
            pot.potVal(LowOn.val);
            slider_automate(slider8);
           ):
      LowOn!=slider8?
          (
            LowOn=slider8;
            LowOn.val=LowOn;
            LowOn.potVal(LowOn.val);
            LowOn.valOld=LowOn;
          );
          
      HighOn!=HighOn.val?
          (
            HighOn=HighOn.val;
            slider9=HighOn;
            pot.potVal(HighOn.val);
            slider_automate(slider9);
           ):
      HighOn!=slider9?
          (
            HighOn=slider9;
            HighOn.val=HighOn;
            HighOn.potVal(HighOn.val);
            HighOn.valOld=HighOn;
          );
          
          
          
stattslider();
/*
          
          
          xoutgain = exp(slider7/cding);
          
          
          //LFnew=1 ? (
          amount = max(min(slider6,1),0.01);
          damp = amount*20;
          c = 1/tan($pi*slider5/srate);
          fk = 1 / (1 + c*(c+damp));
          fa1 = 2 * (1 - c*c) * fk;
          fa0 = (1 + c*(c-damp)) * fk;
          
          LPGain = 10 ^ (slide3r_LP / 20);
          
          nbufsize=srate*0.001*slider4_LP; nbufsize=nbufsize&65534; 
          nbufsize != bufsize ? (bufsize=nbufsize; bufpos=0);
          slider5_LP=min(1,max(0,slider5_LP)); rspos=bufsize*slider5_LP; invbs=1/rspos;
          drymix=2 ^ (slide7r_LP/6); wetmix=slider4;//2 ^ (slider4/6);
          LFnew = 0;
          //):(
          LFnew=0 ;
          //);
          
          
          
          
          
          
          
          
          
          
            mix=(10 * slider1) / 100;
            drive=slider2 / 100;
            mix1 = 1 - mix;
            drive1 = 1 / (1 - (drive / 2));
            drive2 = drive / 2;
            freq = slider3;
          
            gain1 = 0;
            freq1 = freq;
            a1 = 1;
            s1 = 1;
            q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
            w01 = 2 * $pi * freq1/srate;
            cosw01 = cos(w01);
            sinw01 = sin(w01);
            alpha1 = sinw01 / (2 * q1);
          
            b01 = (1 - cosw01)/2;
            b11 = (1 - cosw01);
            b21 = (1 - cosw01)/2;
            a01 = 1 + alpha1;
            a11 = -2 * cosw01;
            a21 = 1 - alpha1;
            b01 /= a01;
            b11 /= a01;
            b21 /= a01;
            a11 /= a01;
            a21 /= a01;
          
            gain3 = 0;
            freq3 = freq * 2;
            a3 = 10^(gain3/40);
            s3 = 1;
            q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
            w03 = 2 * $pi * freq3/srate;
            cosw03 = cos(w03);
            sinw03 = sin(w03);
            alpha3 = sinw03 / (2 * q3);
          
            b03 = (1 + cosw03)/2;
            b13 = -(1 + cosw03);
            b23 = (1 + cosw03)/2;
            a03 = 1 + alpha3;
            a13 = -2 * cosw03;
            a23 = 1 - alpha3;
            b03 /= a03;
            b13 /= a03;
            b23 /= a03;
            a13 /= a03;
            a23 /= a03;
          
    
