desc:WTFM Synth (Tukan)


slider1:5<0,10,0.01>-Master Level
slider2:0<0,1,1{Poly, Mono}>-Mono Mode
slider3:0<0,1,0.01>-Glide

slider4:7<0,10,0.01>                  -OSC 1 Level
slider5:5<0,44,1>                     -OSC 1 Waveform
slider6:0<-100,100,0.1>               -OSC 1 Pan
slider7:0<-36,36,1>                   -OSC 1 Transpose
slider8:0<-100,100,1>                 -OSC 1 Finetune
slider9:12<-36,36,1>                  -OSC 1 Pitchamount
slider10:0<0,3,1{ENV1,ENV2,ENV3,ENV4}>                     -OSC 1 VCA ENV
slider11:1<0,1,1{OFF, On}>            -OSC 1 ON
slider12:2.5<0,5>                     -OSC 1 Square Width
slider13:1<1,4,1>                     -OSC 1 Sync
slider14:0<0,10,0.1>                  -10 OSC 1 Level Amt
slider15:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-11 OSC 1 Level Mod
slider16:1<0,1,1{Absolute, Centered}> -12 OSC 1 Level Mode
slider17:0<-100,100,1>                -13 OSC 1 Pan Amt
slider18:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-14 OSC 1 Pan Mod
slider19:1<0,1,1{Absolute, Centered}> -15 OSC 1 Pan Mode
slider20:0<-36,36,0.1>                 -16 OSC 1 Transpose Amt
slider21:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter fEnv, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}> -OSC 1 Transpose Mod
slider22:1<0,1,1{Absolute, Centered}>   -OSC 1 Transpose Mode
slider23:0<-100,100,1>                  -19 OSC 1 Finetune Amt
slider24:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 1 Finetune Mod
slider25:1<0,1,1{Absolute, Centered}>- OSC 1 Finetune Mode
slider26:0<-5,5,.01>                 - OSC 1 Square Amt
slider27:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 1 Square Mod
slider28:1<0,1,1{Absolute, Centered}> -OSC 1 Squaree Mode
slider29:0<0,2,1{OFF, On}>            -25 OSC 1 Level Wheel
slider30:0<0,2,1{OFF, On}>            -26 OSC 1 Pan Wheel
slider31:0<0,2,1{OFF, On}>            -OSC 1 Transpose Wheel
slider32:0<0,2,1{OFF, On}>            -OSC 1 Fintune Wheel
slider33:0<0,2,1{OFF, On}>            -OSC 1 Square Wheel
//Transpose //Fine //Pan //Pitchamount


slider34:7<0,10,0.01>                  -OSC 2 Level
slider35:5<0,44,1>                     -OSC 2 Waveform
slider36:0<-100,100,0.1>               -OSC 2 Pan
slider37:0<-36,36,1>                   -OSC 2 Transpose
slider38:0<-100,100,1>                 -OSC 2 Finetune
slider39:12<-36,36,1>                  -OSC 2 Pitchamount
slider40:0<0,3,1{ENV1,ENV2,ENV3,ENV4}> -OSC 2 VCA ENV
slider41:1<0,1,1{OFF, On}>             -OSC 2 ON
slider42:2.5<0,5>                      -OSC 2 Square Width
slider43:2<1,4,1>                      -OSC 2 Sync
slider44:0<0,10,0.1>                   -OSC 2 Level Amt
slider45:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 2 Level Mod
slider46:1<0,1,1{Absolute, Centered}> -OSC 2 Level Mode
slider47:0<-100,100,1>                 - OSC 2 Pan Amt
slider48:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 2 Pan Mod
slider49:1<0,1,1{Absolute, Centered}> -OSC 2 Pan Mode
slider50:0<-36,36,0.1>                 - OSC 2 Transpose Amt
slider51:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 2 Transpose Mod
slider52:1<0,1,1{Absolute, Centered}>  -OSC 2 Transpose Mode
slider53:0<-100,100,1>                 -OSC 2 Finetune Amt
slider54:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 2 Finetune Mod
slider55:1<0,1,1{Absolute, Centered}> -OSC 2 Finetune Mode
slider56:0<-5,5,.01>                  -OSC 2 Square Amt
slider57:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 2 Square Mod
slider58:1<0,1,1{Absolute, Centered}> -OSC 2 Squaree Mode
slider59:0<0,2,1{OFF, On}>            -OSC 2 Level Wheel
slider60:0<0,2,1{OFF, On}>            -OSC 2 Pan Wheel
slider61:0<0,2,1{OFF, On}>            -OSC 2 Transpose Wheel
slider62:0<0,2,1{OFF, On}>            -OSC 2 Fintune Wheel
slider63:0<0,2,1{OFF, On}>            -OSC 2 Square Wheel


slider64:7<0,10,0.01>                  -OSC 3 Level
slider65:5<0,44,1>                     -OSC 3 Waveform
slider66:0<-100,100,0.1>               -OSC 3 Pan
slider67:0<-36,36,1>                   -OSC 3 Transpose
slider68:0<-100,100,1>                 -OSC 3 Finetune
slider69:12<-36,36,1>                  -OSC 3 Pitchamount
slider70:0<0,3,1{ENV1,ENV2,ENV3,ENV4}> -OSC 3 VCA ENV
slider71:1<0,1,1{OFF, On}>             -OSC 3 ON
slider72:2.5<0,5>                      -OSC 3 Square Width
slider73:3<1,4,1>                      -OSC 3 Sync
slider74:0<0,10,0.1>                   -OSC 3 Level Amt
slider75:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 3 Level Mod
slider76:1<0,1,1{Absolute, Centered}> -OSC 3 Level Mode
slider77:0<-100,100,1>                 - OSC 3 Pan Amt
slider78:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 3 Pan Mod
slider79:1<0,1,1{Absolute, Centered}>  -OSC 3 Pan Mode
slider80:0<-36,36,0.1>                 - OSC 3 Transpose Amt
slider81:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 3 Transpose Mod
slider82:1<0,1,1{Absolute, Centered}>  -OSC 3 Transpose Mode
slider83:0<-100,100,1>                 -OSC 3 Finetune Amt
slider84:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 3 Finetune Mod
slider85:1<0,1,1{Absolute, Centered}> -OSC 3 Finetune Mode
slider86:0<-5,5,.01>                  -OSC 3 Square Amt
slider87:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 3 Square Mod
slider88:1<0,1,1{Absolute, Centered}> -OSC 3 Squaree Mode
slider89:0<0,2,1{OFF, On}>            -OSC 3 Level Wheel
slider90:0<0,2,1{OFF, On}>            -OSC 3 Pan Wheel
slider91:0<0,2,1{OFF, On}>            -OSC 3 Transpose Wheel
slider92:0<0,2,1{OFF, On}>            -OSC 3 Fintune Wheel
slider93:0<0,2,1{OFF, On}>            -OSC 3 Square Wheel


slider94:7<0,10,0.01>                  -OSC 4 Level
slider95:5<0,44,1>                     -OSC 4 Waveform
slider96:0<-100,100,0.1>               -OSC 4 Pan
slider97:0<-36,36,1>                   -OSC 4 Transpose
slider98:0<-100,100,1>                 -OSC 4 Finetune
slider99:12<-36,36,1>                  -OSC 4 Pitchamount
slider100:0<0,3,1{ENV1,ENV2,ENV3,ENV4}>-OSC 4 VCA ENV
slider101:1<0,1,1{OFF, On}>            -OSC 4 ON
slider102:2.5<0,5>                     -OSC 4 Square Width
slider103:4<1,4,1>                     -OSC 4 Sync
slider104:0<0,10,0.1>                  -OSC 4 Level Amt
slider105:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 4 Level Mod
slider106:1<0,1,1{Absolute, Centered}> -OSC 4 Level Mode
slider107:0<-100,100,1>                 - OSC 4 Pan Amt
slider108:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 4 Pan Mod
slider119:1<0,1,1{Absolute, Centered}> -OSC 4 Pan Mode
slider110:0<-36,36,0.1>                 - OSC 4 Transpose Amt
slider111:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 4 Transpose Mod
slider112:1<0,1,1{Absolute, Centered}> -OSC 4 Transpose Mode
slider113:0<-100,100,1>                  -OSC 4 Finetune Amt
slider114:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 4 Finetune Mod
slider115:1<0,1,1{Absolute, Centered}> -OSC 4 Finetune Mode
slider116:0<-5,5,.01>                  -OSC 4 Square Amt
slider117:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-OSC 4 Square Mod
slider118:1<0,2,1{Absolute, Centered}> -OSC 4 Squaree Mode
slider119:0<0,2,1{OFF, On}>            -OSC 4 Level Wheel
slider120:0<0,2,1{OFF, On}>            -OSC 4 Pan Wheel
slider121:0<0,2,1{OFF, On}>            -OSC 4 Transpose Wheel
slider122:0<0,2,1{OFF, On}>            -OSC 4 Fintune Wheel
slider123:0<0,2,1{OFF, On}>            -OSC 4 Square Wheel





//SLOPE Q Freq Type Keyfollow 
slider125:100<0,100,.1>-Filter Freq
slider126:0<0,10,0.01>-Filter Q
slider127:1<0,2,1{12,24,48}>-Filter Slope Legacy
slider128:1<0,8,1{Linear, Linear Xtreme, Lad1, Lad2, 303, MS Typ 1, MS Typ 2, Steiner, SteinerA}>-Filter Type
slider129:1<0,1,0.5>-Key Follow
slider130:1<0,1,1{OFF,ON}>-Filter On
slider131:0<-100,100,1>-VCF ENV

slider132:0<-100,100,0.1>                  -Filter Amt
slider133:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-Filter Mod
slider134:1<0,1,1{Absolute, Centered}>-Filter Mode
slider135:0<0,2,1{OFF, On}>            -Filter Wheel

slider136:0<-10,10,0.01>                  -Q Amt
slider137:0<0,30,1{OFF,LFO,ENV1,ENV2,ENV3,ENV4,Filter Env, CV1,CV2,CV3,CV4,CV5,CV6,CV7,CV8,CV9,CV10,CV11,CV12,CV13,CV14,CV15,CV16,CV17,CV18,CV19,CV20,CV21,CV22,CV23,CV24}>-Q Mod
slider138:1<0,1,1{Absolute, Centered}>-Q Mode
slider139:0<0,2,1{OFF, On}>            -Q Wheel

slider140:5<1,5,1{OFF, Sinus, Square, RampUp, RampDown, Triangle}>-136 LFO SHAPE
slider141:0.5<0,1,0.001>-LFO Rate
slider142:0<0,4000,1>-LFO Delay
slider143:0<0,4000,1>-LFO Attack


slider144:64<0,127,1>-140 Velocity Threshold
slider145:1<1,10,.01>-Veloctiy ratio
slider146:0<-127,127,1>-Velocity offset
slider147:1<0,5,0.01>-Velo Boost





slider150:150<0,1000,1>                -ENV 1 Attack
slider151:300<0,2000,1>                -ENV 1 Decay
slider152:8<0,10,.01>                  -ENV 1 Sustain
slider153:150<0,4000,1>                -ENV 1 Release
slider154:0<0,1,1{Short, Long}>        -ENV 1 Long

slider155:150<0,1000,1>                -ENV 2Attack
slider156:300<0,2000,1>                -ENV 2 Decay
slider157:8<0,10,.01>                  -ENV 2 Sustain
slider158:150<0,4000,1>                -ENV 2 Release
slider159:0<0,1,1{Short, Long}>        -ENV 2 Long

slider160:150<0,1000,1>                -ENV 3 Attack
slider161:300<0,2000,1>                -ENV 3 Decay
slider162:8<0,10,.01>                  -ENV 3 Sustain
slider163:150<0,4000,1>                -ENV 3 Release
slider164:0<0,1,1{Short, Long}>        -ENV 3 Long

slider165:150<0,1000,1>                -ENV 6 Attack
slider166:300<0,2000,1>                -ENV 6 Decay
slider167:8<0,10,.01>                  -ENV 6 Sustain
slider168:150<0,4000,1>                -ENV 6 Release
slider169:0<0,1,1{Short, Long}>        -ENV 6 Long

slider170:150<0,1000,1>                -ENV 5 Attack
slider171:300<0,2000,1>                -ENV 5 Decay
slider172:8<0,10,.01>                  -ENV 5 Sustain
slider173:150<0,4000,1>                -ENV 5 Release
slider174:0<0,1,1{Short, Long}>        -ENV 5 Long


slider175:0<0,2,1{OFF,CH1,CH2}>-CHORUS
slider176:0<0,80,1>-Low Cut
slider177:0<-30,30>-Clipper boost
//slider176:filter_type=1<0,28,1{Linear,MS-20,Linear x2,Moog,Ladder,303,MS-20 asym,DblRes,DualPeak,TriplePeak,svf nl 2p,svf nl 4p,svf nl 2p inc,svf nl 4p inc,rectified resonance,Steiner,SteinerA,Muck,Pill2p,Pill4p,Pill2p Aggro,Pill4p Aggro,Pill2p Stacc,Pill4p Stacc,Ladder3,Ladder6,HLadder,SVF2,SVF4}>Filter type
slider178:0<0,1,1{WT, FM}>-Synth Mode

slider179:100<0,100,1>-Operator 1
slider180:75<0,100,1>-Operator 2
slider181:50<0,100,1>-Operator 3
slider182:50<0,100,1>-Operator 4
slider183:50<0,100,1>-Operator 5
slider184:50<0,100,1>-Operator 6
slider185:0<0,100,1>-Feedback
slider186:5<1,32,1>-Algo
slider187:0<0,1,1>-Start Env at 0
slider188:12<-36,36,1>-FM Pitchamount
slider189:0<-36,36,1>-FM Transpose

slider232:0<0,1>-CV 1
slider233:0<0,1>-CV 2
slider234:0<0,1>-CV 3
slider235:0<0,1>-CV 4
slider236:0<0,1>-CV 5
slider237:0<0,1>-CV 6
slider238:0<0,1>-CV 7
slider239:0<0,1>-CV 8
slider240:0<0,1>-CV 9
slider241:0<0,1>-CV 10
slider242:0<0,1>-CV 11
slider243:0<0,1>-CV 12
slider244:0<0,1>-CV 13
slider245:0<0,1>-CV 14
slider246:0<0,1>-CV 15
slider247:0<0,1>-CV 16
slider248:0<0,1>-CV 17
slider249:0<0,1>-CV 18
slider250:0<0,1>-CV 19
slider251:0<0,1>-CV 20
slider252:0<0,1>-CV 21
slider253:0<0,1>-CV 22
slider254:0<0,1>-CV 23
slider255:0<0,1>-CV 24


options:gmem=TukanCVOne
//1 000 000 + currenttrack*100
//0 - 23 = CV 1 - 24
//23 - 99 Spare for later use

import SynthAdd/fft_real_synth.jsfx-inc
import SynthAdd/wavetable.jsfx-inc
import SynthAdd/tk_lib.jsfx-inc
import SynthAdd/svf_filter.jsfx-inc
import SynthAdd/cookdsp.jsfx-inc
import SynthAdd/skf.Saike_Yutani_Filters.jsfx-inc

filename:0,SynthAdd/poly-g.png
filename:1,SynthAdd/WTSynthADSR.png
filename:2,SynthAdd/WTSynth.png
filename:3,SynthAdd/WTSynth2.png
filename:4,SynthAdd/WTSynthmini.png
filename:5,SynthAdd/WTSynth2mini.png
filename:6,SynthAdd/Cycles/01.wav
filename:7,SynthAdd/Cycles/02.wav
filename:8,SynthAdd/Cycles/03.wav
filename:9,SynthAdd/Cycles/04.wav
filename:10,SynthAdd/Cycles/05.wav
filename:11,SynthAdd/Cycles/06.wav
filename:12,SynthAdd/Cycles/07.wav
filename:13,SynthAdd/Cycles/08.wav
filename:14,SynthAdd/Cycles/09.wav
filename:15,SynthAdd/Cycles/10.wav
filename:16,SynthAdd/Cycles/11.wav
filename:17,SynthAdd/Cycles/12.wav
filename:18,SynthAdd/Cycles/13.wav
filename:19,SynthAdd/Cycles/14.wav
filename:20,SynthAdd/Cycles/15.wav
filename:21,SynthAdd/Cycles/16.wav
filename:22,SynthAdd/Cycles/17.wav
filename:23,SynthAdd/Cycles/18.wav
filename:24,SynthAdd/Cycles/19.wav
filename:25,SynthAdd/Cycles/20.wav
filename:26,SynthAdd/Cycles/21.wav
filename:27,SynthAdd/Cycles/22.wav
filename:28,SynthAdd/Cycles/23.wav
filename:29,SynthAdd/Cycles/24.wav
filename:30,SynthAdd/Cycles/25.wav
filename:31,SynthAdd/Cycles/26.wav
filename:32,SynthAdd/Cycles/27.wav
filename:33,SynthAdd/Cycles/28.wav
filename:34,SynthAdd/Cycles/29.wav
filename:35,SynthAdd/Cycles/30.wav
filename:36,SynthAdd/Cycles/31.wav
filename:37,SynthAdd/Cycles/32.wav
filename:38,SynthAdd/Cycles/33.wav
filename:39,SynthAdd/Cycles/34.wav
filename:40,SynthAdd/Cycles/35.wav
filename:41,SynthAdd/Cycles/36.wav
filename:42,SynthAdd/Cycles/37.wav
filename:43,SynthAdd/Cycles/38.wav
filename:44,SynthAdd/Cycles/39.wav
filename:45,SynthAdd/switch.png
filename:46,SynthAdd/rled.png
filename:47,SynthAdd/gled.png
filename:48,SynthAdd/MBC_POWER.png
filename:49,SynthAdd/button.png
filename:50,SynthAdd/DXAlgos.png
filename:51,SynthAdd/S2_logo.png



@init
WTFM_Version = 0.51;

gfx_ext_retina = 1;


///////////////////////////// SKF /////////////////////////
lfilter_mode = filter_mode;
lmorph = morph;

log10d20_conversion  = .11512925464970228420089957273422;

function rc_set(rc)
  instance(a) (
    a = 1 / (rc * srate + 1);
);
function rc_lp(sample)
  instance(lp, a) (
    lp += a * (sample - lp);
);
function smooth()
  instance (lp, smooth) (
    lp = smooth;
    smooth = this.rc_lp(this);
);

filter_mode=0;
cutoff.rc_set(0.0033);
cutoff.smooth = cutoff;
resonance.rc_set(0.0033);
resonance.smooth = resonance;
drive.rc_set(0.0033);
drive.smooth = drive;
boost.rc_set(0.0033);
boost.smooth = boost;







///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  MAYBE END UP IN A LIBRARY  //////////////////////////////////////////////////////////////////////
function chorus_do_korg(signal)
(
    read1_ = this.d1.delay_fsread2(this.lfo1.sine_do() * this.depth1 + this.center1);
    //read2_ = this.d2.delay_fsread2(this.lfo2.sine_do() * this.depth2 + this.center2);
    read3_ = this.d3.delay_fsread2(this.lfo3.sine_do() * this.depth3 + this.center3);
    //read4_ = this.d4.delay_fsread2(this.lfo4.sine_do() * this.depth4 + this.center4);
    read5_ = this.d5.delay_fsread2(this.lfo5.sine_do() * this.depth5 + this.center5);
    //read6_ = this.d6.delay_fsread2(this.lfo6.sine_do() * this.depth6 + this.center6);
    read7_ = this.d7.delay_fsread2(this.lfo7.sine_do() * this.depth7 + this.center7);
    //read8_ = this.d8.delay_fsread2(this.lfo8.sine_do() * this.depth8 + this.center8);

    this.d1.delay_write(signal + read1_ * this.feed);
    //this.d2.delay_write(signal + read2_ * this.feed);
    this.d3.delay_write(signal + read3_ * this.feed);
    //this.d4.delay_write(signal + read4_ * this.feed);
    this.d5.delay_write(signal + read5_ * this.feed);
    //this.d6.delay_write(signal + read6_ * this.feed);
    this.d7.delay_write(signal + read7_ * this.feed);
    //this.d8.delay_write(signal + read8_ * this.feed);

    sum_ = (read1_+read3_+read5_+read7_) *0.5 ; //* 0.707;

    signal + (sum_ - signal) * this.bal;
);


function clear_chorus_buffer () (
//memset(dest,value,length)
memset(chorusL.d1.buf,0,chorus.d1.size);
memset(chorusL.d2.buf,0,chorus.d2.size);
memset(chorusL.d3.buf,0,chorus.d3.size);
memset(chorusL.d4.buf,0,chorus.d4.size);
memset(chorusL.d5.buf,0,chorus.d5.size);
memset(chorusL.d6.buf,0,chorus.d6.size);
memset(chorusL.d7.buf,0,chorus.d7.size);
memset(chorusL.d8.buf,0,chorus.d8.size);

memset(chorusr.d1.buf,0,chorus.d1.size);
memset(chorusr.d2.buf,0,chorus.d2.size);
memset(chorusr.d3.buf,0,chorus.d3.size);
memset(chorusr.d4.buf,0,chorus.d4.size);
memset(chorusr.d5.buf,0,chorus.d5.size);
memset(chorusr.d6.buf,0,chorus.d6.size);
memset(chorusr.d7.buf,0,chorus.d7.size);
memset(chorusr.d8.buf,0,chorus.d8.size);

memset(chorusL.lfo1.buf.buf,0,chorus.lfo1.buf.size);
memset(chorusL.lfo2.buf.buf,0,chorus.lfo2.buf.size);
memset(chorusL.lfo3.buf.buf,0,chorus.lfo3.buf.size);
memset(chorusL.lfo4.buf.buf,0,chorus.lfo4.buf.size);
memset(chorusL.lfo5.buf.buf,0,chorus.lfo5.buf.size);
memset(chorusL.lfo6.buf.buf,0,chorus.lfo6.buf.size);
memset(chorusL.lfo7.buf.buf,0,chorus.lfo7.buf.size);
memset(chorusL.lfo8.buf.buf,0,chorus.lfo8.buf.size);

memset(chorusr.lfo1.buf.buf,0,chorus.lfo1.buf.size);
memset(chorusr.lfo2.buf.buf,0,chorus.lfo2.buf.size);
memset(chorusr.lfo3.buf.buf,0,chorus.lfo3.buf.size);
memset(chorusr.lfo4.buf.buf,0,chorus.lfo4.buf.size);
memset(chorusr.lfo5.buf.buf,0,chorus.lfo5.buf.size);
memset(chorusr.lfo6.buf.buf,0,chorus.lfo6.buf.size);
memset(chorusr.lfo7.buf.buf,0,chorus.lfo7.buf.size);
memset(chorusr.lfo8.buf.buf,0,chorus.lfo8.buf.size);
);

function dcBlocker () instance ()
  (
  aab = srate/(srate*1.00008);
  srate < 400000 ? aab = srate/(srate*1.0002);
  srate < 200000 ? aab = srate/(srate*1.0003);
  srate < 100000 ? aab = srate/(srate*1.0007);
  srate < 50000 ? aab = srate/(srate*1.001);
  
  this.otm1=aab*this.otm1 + this - this.itm1; this.itm1=this; this=this.otm1;

  );

  
function sigma (input, sigma_steep) local (tmp_x) (  // turns 0 - 1 into a sigma from 0 - 1
    tmp_x = 1/sigma_steep; // Sigma 1/x -> je größer X, desto weniger linear
    tmp_factor = 0.5 / ((0.5 * (tanh(((0.5))/tmp_x))));
     ((0.5 * (tanh(((input-0.5))/tmp_x)))*tmp_factor + 0.5);
);

function explog (input, factor) (
input^factor; // 1=linear, < 1 = log (schnell rein), > 1 = exp (langsam rein)
);





function band_set_filter(t, f, g, qval, slope)
 instance (enabled, type, frequency, gain, q, filter, color) (
  type = t; frequency = f; gain = g; q = qval;
  type == 0 ? filter.svf_eq(frequency, q, db_to_gain(gain)) :
    type == 1 ? filter.svf_hp(frequency, q, slope) :
      type == 2 ? filter.svf_hpb(frequency, slope) :
        type == 3 ? filter.svf_ls(frequency, q, db_to_gain(gain)) :
          type == 4 ? filter.svf_hs(frequency, q, db_to_gain(gain)) :
            type == 5 ? filter.svf_lp(frequency, q, slope) :
              type == 6 ? filter.svf_lpb(frequency, slope) :
                type == 7 ? filter.svf_bs(frequency, q) :
                  type == 8 ? filter.svf_bp2(frequency, q) :
                    type == 9 ? filter.svf_st(frequency, q, gain) :
                      type == 10 ? filter.svf_pultecls(frequency, q, gain) :
                        type == 11 ? filter.svf_ap(frequency, q) :
                          type == 12 ? filter.svf_analog_lowcut(frequency, q, gain) :
                            type == 13 ? filter.svf_analog_highcut(frequency, q, gain);
);

  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);

  MAX_Q = 4;
  MIN_Q = 0.10;
  Q_LOG_MAX = log(MAX_Q / MIN_Q);
  
/*
 * Convert slider % to frequency
 */
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);

/*
 * Convert frequency to slider %
 */
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);


function per_to_q(x, range) (
  MIN_Q * exp(Q_LOG_MAX * x / range);LFO
);

/*
 * Convert frequency to slider %
 */
function q_to_per(q, range) (
  range * log(q / MIN_Q) / Q_LOG_MAX;
);

function band_init()
  instance (enabled, type, frequency, gain, q, filter, color) ( 
  filter.svf_set_sample_rate(SAMPLE_RATE);
  filter.svf_bypass();
  //color.create_color(0,0,0);

  filter.a1 = filter.t_a1;
  filter.a2 = filter.t_a2;
  filter.a3 = filter.t_a3;

  filter.m0 = filter.t_m0;
  filter.m1 = filter.t_m1;
  filter.m2 = filter.t_m2;
  filter.iter_t = 1.0;
);






function modulate_parameter () (
this.modresult = 0;
  this.mod ? (
    this.mod == 1 ? (
     !this.mod.centered ? the_modulator = LFO_1.real_level;
     this.mod.centered ? the_modulator = LFO_1.real_levelc;
    this.modresult = (this.mod.amt * The_modulator);
    ); //(this.mod.amt*0.5*this.mod.centered)) * LFO_1.real_level) :
    //this.mod == 2 ? (this.modresult = this.mod.amt * envelope_real_level[this.subosc_number-1]) :
    //this.mod == 3 ? (this.modresult = this.mod.amt * envelope_real_level[12+this.subosc_number-1]) :
    //this.mod == 4 ? (this.modresult = this.mod.amt * envelope_real_level[24+this.subosc_number-1]) :
    //this.mod == 5 ? (this.modresult = this.mod.amt * envelope_real_level[36+this.subosc_number-1]) :
    //this.mod == 6 ? (this.modresult = this.mod.amt * envelope_real_level[48+this.subosc_number-1]) :
    this.mod == 7 ? (this.modresult = this.mod.amt * CVSlider[0]) :
    this.mod == 8 ? (this.modresult = this.mod.amt * CVSlider[1]) :
    this.mod == 9 ? (this.modresult = this.mod.amt * CVSlider[2]) :
    this.mod == 10? (this.modresult = this.mod.amt * CVSlider[3]) :
    this.mod == 11? (this.modresult = this.mod.amt * CVSlider[4]) :
    this.mod == 12? (this.modresult = this.mod.amt * CVSlider[5]) :
    this.mod == 13? (this.modresult = this.mod.amt * CVSlider[6]) :
    this.mod == 14? (this.modresult = this.mod.amt * CVSlider[7]) :
    this.mod == 15? (this.modresult = this.mod.amt * CVSlider[8]) :
    this.mod == 16? (this.modresult = this.mod.amt * CVSlider[9]) :
    this.mod == 17? (this.modresult = this.mod.amt * CVSlider[10]) :
    this.mod == 18? (this.modresult = this.mod.amt * CVSlider[11]) :
    this.mod == 19? (this.modresult = this.mod.amt * CVSlider[12]) :
    this.mod == 20? (this.modresult = this.mod.amt * CVSlider[13]) :
    this.mod == 21? (this.modresult = this.mod.amt * CVSlider[14]) :
    this.mod == 22? (this.modresult = this.mod.amt * CVSlider[15]) :
    this.mod == 23? (this.modresult = this.mod.amt * CVSlider[16]) :
    this.mod == 24? (this.modresult = this.mod.amt * CVSlider[17]) :
    this.mod == 25? (this.modresult = this.mod.amt * CVSlider[18]) :
    this.mod == 26? (this.modresult = this.mod.amt * CVSlider[19]) :
    this.mod == 27? (this.modresult = this.mod.amt * CVSlider[20]) :
    this.mod == 28? (this.modresult = this.mod.amt * CVSlider[21]) :
    this.mod == 29? (this.modresult = this.mod.amt * CVSlider[22]) :
    this.mod == 30? (this.modresult = this.mod.amt * CVSlider[23]);
    this.mod.centered ? this.modresult -= this.mod.amt * 0.5;
    this.mod.wheel == 1 ? this.modresult *= modwheel;
    this.mod.wheel == 2 ? this.modresult *= aftertouch/127;
  ):(
    this.mod.wheel == 1 ? this.modresult = this.mod.amt * modwheel;
    this.mod.wheel == 2 ? this.modresult = this.mod.amt * aftertouch/127;
  );
    
  
);


function modulate_osc () (
  
  //this.level.modresult = 0;
  //this.pan.modresult = 0;
  //this.transpose.modresult = 0;
  //this.finetune.modresult = 0;
  //this.pwm.modresult = 0;

  this.level.modulate_parameter();
  this.pan.modulate_parameter();
  this.transpose.modulate_parameter();
  this.finetune.modulate_parameter();
  this.pwm.modulate_parameter();
  
  this.level.running = this.level + this.level.modresult;
  this.pan.running = this.pan + this.pan.modresult;
  this.transpose.running = this.transpose + this.transpose.modresult;
  this.finetune.running = this.finetune + this.finetune.modresult;
  this.pwm.running = this.pwm + this.pwm.modresult;
  
);



function my_reset() (
  this.ic1eq0 = this.ic2eq0 = 0.0001;
  this.ic1eq1 = this.ic2eq1 = 0.0001;
  this.cas1.ic1eq0 = this.cas1.ic2eq0 = 0.00001;
  this.cas1.ic1eq1 = this.cas1.ic2eq1 = 0.00001;
  this.cas2.ic1eq0 = this.cas2.ic2eq0 = -0.0001;
   this.cas2.ic1eq1 = this.cas2.ic2eq1 = -0.0001;
);



 
function VCF() (
filter_result_diff = 0.1;



this.VCF_Trigger || this.VCA_Count >= srate/250 ? (
this..filter.modulate_parameter();
this..filterq.modulate_parameter();
    modq_further = 0;
    this..filterq.mod == 2 ? (this..filterq.modresult = this..filterq.mod.amt * envelope_real_level[this.subosc_number-1]; modq_further = 1) :
    this..filterq.mod == 3 ? (this..filterq.modresult = this..filterq.mod.amt * envelope_real_level[12+this.subosc_number-1]; modq_further = 1) :
    this..filterq.mod == 4 ? (this..filterq.modresult = this..filterq.mod.amt * envelope_real_level[24+this.subosc_number-1]; modq_further = 1) :
    this..filterq.mod == 5 ? (this..filterq.modresult = this..filterq.mod.amt * envelope_real_level[36+this.subosc_number-1]; modq_further = 1) :
    this..filterq.mod == 6 ? (this..filterq.modresult = this..filterq.mod.amt * envelope_real_level[48+this.subosc_number-1]; modq_further = 1) :
    this.transpose.running = this..transpose.running;
    modq_further ? (
    this..filterq.mod.wheel == 1 ? this..filterq.modresult *= modwheel;
    this..filterq.mod.wheel == 2 ? this..filterq.modresult *= aftertouch/127;
    this..filterq..mod.centered ? this..filterq.modresult -= this..filterq.mod.amt * 0.5;
    );



this.VCF_filter_result = min(this..filter_f.running,100) + this.VCF.real_level*this..VCF_ENV + this..filter.modresult;
this.note ? this.filter_note = this.note-19 + this..pitchamount.running * norm_pitchwheel;
this..keyfollow ? (
this..keyfollow == 0.5 ? this.keyfollow_add = 0.5 : this.keyfollow_add = 0;
this.key_offset = freq_to_per(osc_a0^(this.filter_note+this.keyfollow_add),100);
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT + this.key_offset*this..keyfollow;
):(
this.VCF_FILTER_RESULT2 = this.VCF_FILTER_RESULT;
);
this.VCA_Count = 0;
//this.resonance = min(10,max(0,(((this..filter_q.running - 0.707) + this..filterqmodresult) /10) ) );// min(10.707,max(0.707, this..filter_q.running+ this..filterq.modresult)) / 10;
this.resonance = min(1,max(0,(this..filter_q.running-0.707)/10 + this..filterq.modresult / 10));//  min(10,max(0,(((this..filter_q.running - 0.707) + this..filterqmodresult) /10) ) );// min(10.707,max(0.707, this..filter_q.running+ this..filterq.modresult)) / 10;
this.cutoff = max(0,min(this.VCF_FILTER_RESULT2,100)) / 100;
this.skf.init_filter(filter_type, this.cutoff, this.cutoff, 0, 0, this.resonance);
//this.band_set_filter(this..filter_type, per_to_freq(max(0,min(this.VCF_FILTER_RESULT2,100)),100), this..filter_gain, min(10.707,max(0.707, this..filter_q.running+ this..filterq.modresult)), this..filter_slope);
    //slider230 = this.VCF_Filter_result2;
  this.VCF_trigger ? (
    //this.filter.svf_set_to_target();
    //this.filter.my_reset();
    nothing = 0;
    
    //loop(10,
    //this.filter.svf_tick();
    //this.filter.svf_tick();
    //ssl = 0;//this.outputL*0.1;// * preamp;
    //ssr = 0;//this.outputR*0.1;// * preamp;
    //this..skf.processSample(filter_type);
    //);
     
  );
);
this.VCA_Count += 1;

//this.filter.svf_set_to_target();
this.VCF_Trigger == 0 ? (
//this.filter.svf_tick();
nothing = 0;
):(
//this.VCF_Trigger = 0;
nothing = 0;
);
//this.filter.svf_tick();
//this.outputL = this.filter.svf_svf0(this.outputL + 0.001);
//this.outputR = this.filter.svf_svf1(this.outputR + 0.001);




/*
this.VCF_Trigger ? (
//this.filter.svf_reset();
trigger_katze += 1;
this.VCF_Trigger = 0;
loop(6,
this.outputL = this.filter.svf_svf0(0.0001);
this.outputR = this.filter.svf_svf1(0.0001);
this.filter.svf_tick();
);
);
*/

//this.filter.svf_tick();
//);
//this.outputL = this.filter.svf_svf0(this.outputL + 0.00);
//this.outputR = this.filter.svf_svf1(this.outputR + 0.00);
//this.VCF_FILTER_RESULT2 = min(this.VCF_FILTER_RESULT2, 100);

//this.VCF_trigger || abs(this.VCF_FILTER_RESULT2 - this.VCF_FILTER_RESULT_OLD) > 0.9 || this..filter_type != this.filter_type_old || this..filter_gain.running != this.filter_gain_old || this..filter_q.running != this.filter_q_old || this..filter_slope != this.filter_slope_old ? (
//this.VCF_trigger || abs(this.VCF_FILTER_RESULT2 - this.VCF_FILTER_RESULT_OLD) > filter_result_diff || this..filter_q.running != this.filter_q_old ? (
//this.band_set_filter(this..filter_type, per_to_freq(min(this.VCF_FILTER_RESULT2,100),100), this..filter_gain, this..filter_q.running, this..filter_slope);

//this.filter_f_old = this..filter_f.running;
//this.filter_gain_old = this..filter_gain.running;
//this.filter_q_old = this..filter_q.running;
//this.filter_slope_old = this..filter_slope;
//this.VCF_FILTER_RESULT_old = this.VCF_FILTER_RESULT2;
//this.filter.svf_set_to_target();
//this.filter.svf_tick();
//this.filter.svf_set_to_target();
//);

//this.filter.svf_tick();


//this.outputL = this.filter.svf_svf0(this.outputL + 0.001);
//this.outputL = this.biquad_do(this.outputL + 0.001);
//this.outputR = this.NG.biquad_do(this.outputR + 0.001);
//this.outputR = this.filter.svf_svf1(this.outputR + 0.001);

);


/*

function NG_VCF() (

this.ng.VCF_filter_result = min(NG.filter_f.running,100) + this.VCF2.real_level*NG.VCF_ENV;
katze = this..VCF2.real_level;
this.note ? this.ng.filter_note = this.note-19 + NG.pitchamount.running * norm_pitchwheel;
NG.keyfollow ? (
NG.keyfollow == 0.5 ? this.ng.keyfollow_add = 0.5 : this.ng.keyfollow_add = 0;
this.ng.key_offset = freq_to_per(osc_a0^(this.ng.filter_note+this.ng.keyfollow_add),100);
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT + this.ng.key_offset*NG.keyfollow;
):(
this.ng.VCF_FILTER_RESULT2 = this.ng.VCF_FILTER_RESULT;
);

this.ng.VCF_FILTER_RESULT2 = min(this.ng.VCF_FILTER_RESULT2, 100);

this.ng.VCF_trigger || abs(this.ng.VCF_FILTER_RESULT2 - this.ng.VCF_FILTER_RESULT_OLD) > 0.9 || NG.filter_type != this.ng.filter_type_old || NG.filter_gain.running != this.ng.filter_gain_old || NG.filter_q.running != this.ng.filter_q_old || NG.filter_slope != this.ng.filter_slope_old ? (
this.NG.band_set_filter(NG.filter_type, per_to_freq(min(this.ng.VCF_FILTER_RESULT2,100),100), NG.filter_gain, NG.filter_q.running, NG.filter_slope);
this.ng.filter_type_old = NG.filter_type;
this.ng.filter_f_old = NG.filter_f.running;
this.ng.filter_gain_old = NG.filter_gain.running;
this.ng.filter_q_old = NG.filter_q.running;
this.ng.filter_slope_old = NG.filter_slope;
this.ng.VCF_FILTER_RESULT_old = this.ng.VCF_FILTER_RESULT2;
//this.ng.filter.svf_set_to_target();
);

this.ng.VCF_trigger ? this.ng.VCF_trigger = 0;

this.NG.filter.svf_tick();
this.noise = this.ng.filter.svf_svf0(this.noise + 0.001);// / (NG.filter_q*10);
//this.noise = this.ng.filter.svf_svf1(this.noise + 0.00001);

);

*/



function velo_compressor (velo_in) instance (velo_tmp) (

    velo_fixed > 0 ? (velo_fixed) : (
      velo_in <= velo_thresh ? velo_tmp = velo_in :
                                 velo_tmp = velo_thresh + (velo_in-velo_thresh)/velo_ratio;
                                 floor(min(127,max(0,velo_tmp*velo_boost + velo_offset))+0.5);
    );
                                   
);
   

function sub_midi_in () (
         msg3 != 0 ? (
         this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
         this.note = this.note_running = msg2; this.velocity = velo_compressor(msg3))
         : 
         (this.release_trigger = 1; this.start_trigger = 0; //this.on = 0; this.note = 0;
          );
);

function sub_midi_in_mono () (

         this..msg3 != 0 ? (
         
            this..mono_note_1_old == 0 ? (
              this.on = this.update = this.start_trigger = 1; this.release_trigger = 0; 
              this.note = this.note_running = msg2; this.velocity = velo_compressor(msg3); this..mono_note_1_old = 1;
              this.note_distance = 0; this.note_target = this..msg2;
            ):(
              this.note_distance = this..msg2 - this.note_running;
              this.note_target = this..msg2; msg3 != 0 ? this.velocity = velo_compressor(msg3);
            );
         
         ):( 
          this.release_trigger = 1; this.start_trigger = 0;
          this..mono_note_1_old = 0;
           //this.on = 0; this.note = 0;
          );
);


function midi_in () (

MonoOrPoly ? (

msg3 != 0 ? (
this.mono_note_1 == 0 ? (this.mono_note_1 = msg2; this.last_msg3 = msg3) :
this.mono_note_2 == 0 ? this.mono_note_2 = msg2:
this.mono_note_3 == 0 ? this.mono_note_3 = msg2:
this.mono_note_4 == 0 ? this.mono_note_4 = msg2:
this.mono_note_5 == 0 ? this.mono_note_5 = msg2:
this.mono_note_6 == 0 ? this.mono_note_6 = msg2:
this.mono_note_7 == 0 ? this.mono_note_7 = msg2:
this.mono_note_8 == 0 ? this.mono_note_8 = msg2:
this.mono_note_9 == 0 ? this.mono_note_9 = msg2:
this.mono_note_10 == 0 ? this.mono_note_10 = msg2:
this.mono_note_11 == 0 ? this.mono_note_11 = msg2:
this.mono_note_12 == 0 ? this.mono_note_12 = msg2;

):(
this.note_release = 1;
this.mono_note_1 == msg2 ? (this.mono_note_1 = 0; this.mono_sort = 1):
this.mono_note_2 == msg2 ? (this.mono_note_2 = 0; this.mono_sort = 1):
this.mono_note_3 == msg2 ? (this.mono_note_3 = 0; this.mono_sort = 1):
this.mono_note_4 == msg2 ? (this.mono_note_4 = 0; this.mono_sort = 1):
this.mono_note_5 == msg2 ? (this.mono_note_5 = 0; this.mono_sort = 1):
this.mono_note_6 == msg2 ? (this.mono_note_6 = 0; this.mono_sort = 1):
this.mono_note_7 == msg2 ? (this.mono_note_7 = 0; this.mono_sort = 1):
this.mono_note_8 == msg2 ? (this.mono_note_8 = 0; this.mono_sort = 1):
this.mono_note_9 == msg2 ? (this.mono_note_9 = 0; this.mono_sort = 1):
this.mono_note_10 == msg2 ? (this.mono_note_10 = 0; this.mono_sort = 1):
this.mono_note_11 == msg2 ? (this.mono_note_11 = 0; this.mono_sort = 1):
this.mono_note_12 == msg2 ? (this.mono_note_12 = 0; this.mono_sort = 1);
);


this.mono_sort ? (
this.mono_note_1 == 0 ? (
this.mono_note_1 = this.mono_note_2;
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_2 == 0 ? (
this.mono_note_2 = this.mono_note_3;
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_3 == 0 ? (
this.mono_note_3 = this.mono_note_4;
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_4 == 0 ? (
this.mono_note_4 = this.mono_note_5;
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_5 == 0 ? (
this.mono_note_5 = this.mono_note_6;
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_6 == 0 ? (
this.mono_note_6 = this.mono_note_7;
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_7 == 0 ? (
this.mono_note_7 = this.mono_note_8;
this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_8 == 0 ? (

this.mono_note_8 = this.mono_note_9;
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_9 == 0 ? (
this.mono_note_9 = this.mono_note_10;
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_10 == 0 ? (
this.mono_note_10 = this.mono_note_11;
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
):
this.mono_note_11 == 0 ? (
this.mono_note_11 = this.mono_note_12;
this.mono_note_12 = 0;
);
this.mono_sort = 0;
);




this.mono_note_12 != 0 ? this.mono_note_last = this.mono_note_12:
this.mono_note_11 != 0 ? this.mono_note_last = this.mono_note_11:
this.mono_note_10 != 0 ? this.mono_note_last = this.mono_note_10:
this.mono_note_9 != 0 ? this.mono_note_last = this.mono_note_9:
this.mono_note_8 != 0 ? this.mono_note_last = this.mono_note_8:
this.mono_note_7 != 0 ? this.mono_note_last = this.mono_note_7:
this.mono_note_6 != 0 ? this.mono_note_last = this.mono_note_6:
this.mono_note_5 != 0 ? this.mono_note_last = this.mono_note_5:
this.mono_note_4 != 0 ? this.mono_note_last = this.mono_note_4:
this.mono_note_3 != 0 ? this.mono_note_last = this.mono_note_3:
this.mono_note_2 != 0 ? this.mono_note_last = this.mono_note_2:
this.mono_note_1 != 0 ? this.mono_note_last = this.mono_note_1:
(this.mono_note_last = 0; this.mono_note_1_old = 0);

this.mono_note_last == 0 ? (this.msg3 = 0) : (
msg3 != 0 ? (this.last_msg3 = msg3; this.msg3 = msg3);
msg3 == 0 ? this.msg3 = this.last_msg3;
//this.msg3 = msg3;
);

//msg2 != this.mono_note_last ? (
this.msg2 = this.mono_note_last;
//!this.note_release ? (this.subosc_1.sub_midi_in()):(this.note_release = 0; this.mono_note_last == 0 ? this.subosc_1.sub_midi_in());
this.mono_note_last_old != this.mono_note_last ? (
this.mono_note_last_old = this.mono_note_last;
this.subosc_1.sub_midi_in_mono();
);

//);


):( // POLY
msg3 == 0 ? (
this.subosc_1.note == msg2 ? this.subosc_1.sub_midi_in():
this.subosc_2.note == msg2 ? this.subosc_2.sub_midi_in():
this.subosc_3.note == msg2 ? this.subosc_3.sub_midi_in():
this.subosc_4.note == msg2 ? this.subosc_4.sub_midi_in():
this.subosc_5.note == msg2 ? this.subosc_5.sub_midi_in():
this.subosc_6.note == msg2 ? this.subosc_6.sub_midi_in():
this.subosc_7.note == msg2 ? this.subosc_7.sub_midi_in():
this.subosc_8.note == msg2 ? this.subosc_8.sub_midi_in():
this.subosc_9.note == msg2 ? this.subosc_9.sub_midi_in():
this.subosc_10.note == msg2 ? this.subosc_10.sub_midi_in():
this.subosc_11.note == msg2 ? this.subosc_11.sub_midi_in():
this.subosc_12.note == msg2 ? this.subosc_12.sub_midi_in();
);


caught = 0;

this.subosc_1.note == msg2 ? (this.subosc_1.sub_midi_in(); caught = 1):
this.subosc_2.note == msg2 ? (this.subosc_2.sub_midi_in(); caught = 1):
this.subosc_3.note == msg2 ? (this.subosc_3.sub_midi_in(); caught = 1):
this.subosc_4.note == msg2 ? (this.subosc_4.sub_midi_in(); caught = 1):
this.subosc_5.note == msg2 ? (this.subosc_5.sub_midi_in(); caught = 1):
this.subosc_6.note == msg2 ? (this.subosc_6.sub_midi_in(); caught = 1):
this.subosc_7.note == msg2 ? (this.subosc_7.sub_midi_in(); caught = 1):
this.subosc_8.note == msg2 ? (this.subosc_8.sub_midi_in(); caught = 1):
this.subosc_9.note == msg2 ? (this.subosc_9.sub_midi_in(); caught = 1):
this.subosc_10.note == msg2 ? (this.subosc_10.sub_midi_in(); caught = 1):
this.subosc_11.note == msg2 ? (this.subosc_11.sub_midi_in(); caught = 1):
this.subosc_12.note == msg2 ? (this.subosc_12.sub_midi_in(); caught = 1);

    //this.subosc_1.note == 0 || this.subosc_1.note == msg2 ?
    caught == 0 ? (
    !this.subosc_1.on ? this.subosc_1.sub_midi_in():
    !this.subosc_2.on ? this.subosc_2.sub_midi_in():
    !this.subosc_3.on ? this.subosc_3.sub_midi_in():
    !this.subosc_4.on ? this.subosc_4.sub_midi_in():
    !this.subosc_5.on ? this.subosc_5.sub_midi_in():
    !this.subosc_6.on ? this.subosc_6.sub_midi_in():
    !this.subosc_7.on ? this.subosc_7.sub_midi_in():
    !this.subosc_8.on ? this.subosc_8.sub_midi_in():
    !this.subosc_9.on ? this.subosc_9.sub_midi_in():
    !this.subosc_10.on ? this.subosc_10.sub_midi_in():
    !this.subosc_11.on ? this.subosc_11.sub_midi_in():
    !this.subosc_12.on ? this.subosc_12.sub_midi_in();
  
  
    );

); // MONOPOLY

);


function fetch_subosc () (
this.subosc_number == 1 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 2 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 3 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 4 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 5 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 6 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_7.note_running;
  this.velocity = Synth.Subosc_7.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_8.note_running;
  this.velocity = Synth.Subosc_8.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_9.note_running;
  this.velocity = Synth.Subosc_9.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_10.note_running;
  this.velocity = Synth.Subosc_10.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_11.note_running;
  this.velocity = Synth.Subosc_11.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_12.note_running;
  this.velocity = Synth.Subosc_12.Velocity;
  this.starttrigger = 1;
);
); //Function

function fetch_unison_subosc () (
this.subosc_number == 7 ? (
  this.note_running = Synth.Subosc_1.note_running;
  this.note_target = synth.subosc_1.note_target;
  this.note_distance = Synth.Subosc_1.note_distance;
  this.velocity = Synth.Subosc_1.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 8 ? (
  this.note_running = Synth.Subosc_2.note_running;
  this.velocity = Synth.Subosc_2.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 9 ? (
  this.note_running = Synth.Subosc_3.note_running;
  this.velocity = Synth.Subosc_3.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 10 ? (
  this.note_running = Synth.Subosc_4.note_running;
  this.velocity = Synth.Subosc_4.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 11 ? (
  this.note_running = Synth.Subosc_5.note_running;
  this.velocity = Synth.Subosc_5.Velocity;
  this.starttrigger = 1;
):this.subosc_number == 12 ? (
  this.note_running = Synth.Subosc_6.note_running;
  this.velocity = Synth.Subosc_6.Velocity;
  this.starttrigger = 1;
);
); //Function


function make_osc () (
memory_point = this.GFXosc.four_init(memory_point, 2048);
memory_point = this.subosc_1.four_init(memory_point, 2048);
memory_point = this.subosc_2.four_init(memory_point, 2048);
memory_point = this.subosc_3.four_init(memory_point, 2048);
memory_point = this.subosc_4.four_init(memory_point, 2048);
memory_point = this.subosc_5.four_init(memory_point, 2048);
memory_point = this.subosc_6.four_init(memory_point, 2048);
memory_point = this.subosc_7.four_init(memory_point, 2048);
memory_point = this.subosc_8.four_init(memory_point, 2048);
memory_point = this.subosc_9.four_init(memory_point, 2048);
memory_point = this.subosc_10.four_init(memory_point, 2048);
memory_point = this.subosc_11.four_init(memory_point, 2048);
memory_point = this.subosc_12.four_init(memory_point, 2048);

this.subosc_1.subosc_number = 1;
this.subosc_2.subosc_number = 2;
this.subosc_3.subosc_number = 3;
this.subosc_4.subosc_number = 4;
this.subosc_5.subosc_number = 5;
this.subosc_6.subosc_number = 6;
this.subosc_7.subosc_number = 7;
this.subosc_8.subosc_number = 8;
this.subosc_9.subosc_number = 9;
this.subosc_10.subosc_number = 10;
this.subosc_11.subosc_number = 11;
this.subosc_12.subosc_number = 12;

this.subosc_1 = 1;
this.subosc_2 = 2;
this.subosc_3 = 3;
this.subosc_4 = 4;
this.subosc_5 = 5;
this.subosc_6 = 6;
this.subosc_7 = 7;
this.subosc_8 = 8;
this.subosc_9 = 9;
this.subosc_10 = 10;
this.subosc_11 = 11;
this.subosc_12 = 12;

);


function make_filters () (
this.subosc_1.band_init();
this.subosc_2.band_init();
this.subosc_3.band_init();
this.subosc_4.band_init();
this.subosc_5.band_init();
this.subosc_6.band_init();
this.subosc_7.band_init();
this.subosc_8.band_init();
this.subosc_9.band_init();
this.subosc_10.band_init();
this.subosc_11.band_init();
this.subosc_12.band_init();

this.subosc_1.NG.band_init();
this.subosc_2.NG.band_init();
this.subosc_3.NG.band_init();
this.subosc_4.NG.band_init();
this.subosc_5.NG.band_init();
this.subosc_6.NG.band_init();
this.subosc_7.NG.band_init();
this.subosc_8.NG.band_init();
this.subosc_9.NG.band_init();
this.subosc_10.NG.band_init();
this.subosc_11.NG.band_init();
this.subosc_12.NG.band_init();

this.subosc_1.biquad(0,0,0);;
this.subosc_2.biquad(0,0,0);;
this.subosc_3.biquad(0,0,0);;
this.subosc_4.biquad(0,0,0);;
this.subosc_5.biquad(0,0,0);;
this.subosc_6.biquad(0,0,0);;
this.subosc_7.biquad(0,0,0);;
this.subosc_8.biquad(0,0,0);;
this.subosc_9.biquad(0,0,0);;
this.subosc_10.biquad(0,0,0);;
this.subosc_11.biquad(0,0,0);;
this.subosc_12.biquad(0,0,0);;

this.subosc_1.NG.biquad(0,0,0);;
this.subosc_2.NG.biquad(0,0,0);;
this.subosc_3.NG.biquad(0,0,0);;
this.subosc_4.NG.biquad(0,0,0);;
this.subosc_5.NG.biquad(0,0,0);;
this.subosc_6.NG.biquad(0,0,0);;
this.subosc_7.NG.biquad(0,0,0);;
this.subosc_8.NG.biquad(0,0,0);;
this.subosc_9.NG.biquad(0,0,0);;
this.subosc_10.NG.biquad(0,0,0);;
this.subosc_11.NG.biquad(0,0,0);;
this.subosc_12.NG.biquad(0,0,0);;
);


function mono_glide() (
          note_glide == 0 ? (
            this.note = this.note_running = this.note_target;
          ):(
            abs(this.note_running - this.note_target) < 0.01 ? (this.note_running = this.note_target; this.note_distance = 0):
            this.note_running += (this.note_distance/(srate*0.001*note_glide));
            abs(this.note - this.note_running) > max(0.01,this.note_distance/100) ? (this.note = this.note_running;);
            
            this.note_distance > 0 ? this.note_running > this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
            this.note_distance < 0 ? this.note_running < this.note_target ? (this.note_running = this.note_target; this.note_distance = 0);
          );
);




///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////  DAS  HIER  LANDET  IN  DER LIBRARY  ////////////////////////////////////////////////////////////////////// 


function stereo_to_mono_wave(buf, len) (
  i = 0; loop((len / 2) | 0,
    buf[i] = (buf[i*2] + buf[i*2+1]) * 0.5;
    i += 1;
  );
);

function render_waveform()
  local(x, dx, loopy, count, buf, size, gain)
(
size = this.size; buf = this.buf;


schnuckel = this..waveform;
this..waveform == 2 ? (
schnuckel2 = 0;
  x = 0;
  loopy = 0; 
  dx = 2*$pi / (size);
    loop(size,
      buf[loopy] = sin(x);
      loopy += 1;
      x += dx;
    );
):
this..waveform == 3 ? (
schnuckel2 = 1;
  x = 0;
  count = 0;
  dx = 4/size;
  loopy = 0;

    loopy = 0; x = 0;
    loop(size,
      buf[loopy] = x;
      loopy += 1;
      loopy <= (size)/4 ? x += dx :
      loopy <= (size)*0.75 ? x -= dx :
      x += dx;
    );

):
this..waveform == 4 ? (
  loopy = 0;
  dx = 2 / (size);
    x = 1;
    loop(size,
      buf[loopy] = x;
      loopy += 1;
      x -= dx;
    );
):
this..waveform == 5 ? (

    loopy = 0; x = 1;
    loop(size,
      buf[loopy] = x;
      loopy < this..pwm.running*size ? x = 1 : x = -1;
      loopy += 1;
    );

):(
memset(1000000,0,4096);
buf = this.buf; size = this.size;
  
  //lfile = slider130;
  filehandle=file_open(this..waveform);//slider130);
  filefluff = filehandle;
  //read_file(filehandle);
  filehandle > 0 ? (
    file_riff(filehandle, wavechn, wavesrate);
    wavechn ? (
      wavelen = file_avail(filehandle);
      file_mem(filehandle,1000000,wavelen);
    );
    file_close(filehandle);
    wavechn == 2 ? (
      stereo_to_mono_wave(buf, wavelen);
      wavelen = (wavelen / 2) | 0;
    );
    
    //normalize_wave(wavebuf, wavelen);
    dummy.wave_init(1000000, wavelen);
    this.size = 2048;
    //osc.wave_setf(50);
  );
  
  buf_loop = 0;
  loop(2048,
  dummy.t = buf_loop / 2048;
    this.buf[buf_loop] = dummy.wave_spline5();//1000000[buf_loop*(wavelen / 2048)];
    buf_loop += 1;
  );
);

this.four_fft();
); // Function


function new_ADSR () (
/*
this.stage == 1 ? (
  this.attack == 0 ? (
  this.level = 1;this.follower = 0; this.stage = 2;
  this.envelope_stop = 0;
  ):(
  this.envelope_stop = 0;
  this.level += this.attack_step; this.follower += 1; this.follower >= this.attack || this.level >= 1 ? (this.level = 1; this.follower = 0; this.stage = 2);
  );

): this.stage == 2 ? (
  this.decay2 == 0 ? (
  this.level = this.sustain; this.follower = 0; this.stage = 4;
  ):(
  this.level += this.decay_step; this.follower += 1; this.follower >= this.decay2 ? (this.follower = 0; this.stage = 4);
  );

): this.stage == 4 ? (
  this.level = this.sustain;

): this.stage == 5 ? (
  this.real_level -= this.level/this.release; this.follower += 1; 
  this.follower >= this.release ? (this.level = this.follower = 0; this.envelope_stop = 1);// this.attack == 0 ? this.level = this.real_level = 1);
  this.real_level <= 0.00001 ? (this.level = 0; this.envelope_stop = 1);
  ):(
  this.real_level = this.level;
  );
);
*/
this.stage == 1 ? (
              this.envelope_stop = 0;
              this.follower += 1;
              this.follower >= this.attack || this.level >= 1 ? (
                this.real_level = this.level = 1; this.follower = 0; this.stage = 2
              ):(
                this.real_level = max(this.real_level, this.level += this.attack_step);
              );
            );
            this.stage == 2 ? (
              this.follower += 1;
              this.follower >= this.decay2 ? (
                this.follower = 0; this.stage = 4;
              ):(
                this.real_level = this.level += this.decay_step;
              );
            );
            this.stage == 4 ? (
              this.real_level = this.level = this.sustain;
            );
            this.stage == 5 ? (
              this.real_level -= this.level/this.release; this.follower += 1; 
              this.follower >= this.release ? (this.level = this.follower = 0; this.envelope_stop = 1);// this.attack == 0 ? this.level = this.real_level = 1);
              this.real_level <= 0.00001 ? (this.level = 0; this.envelope_stop = 1);
            );
);



function new_complex_envelope (attack.shape, dec1.shape, dec2.shape, release.shape, attack.coef, dec1.coef, dec2.coef, release.coef) (

this.stage == 1 ? (
  this.attack == 0 ? (this.level = 1; this.follower = 0; this.stage = 2; this.envelope_stop = 0):(
    this.follower*0 >= this.attack || this.level + (1/this.attack) > 1 ? (
        this.follower = 0; this.stage = 2; this.level = 1;
    ):(
        this.level += 1/this.attack; this.follower += 1;
        this.envelope_stop = 0;
    );
  );
);
this.stage == 2 ? (
  this.decay == 0 ? (this.level = this.breakpoint; this.follower = 0; this.stage = 3):(
    this.follower >= this.decay || this.level - (1-this.breakpoint)/this.decay < this.breakpoint ? ( // 
        this.follower = 0;  this.stage = 3; //this.level = this.breakpoint;
    ):(
        this.level -= (1-this.breakpoint)/this.decay; this.follower += 1; 
    );
  );
);
this.stage == 3 ? (
  this.decay2 == 0 ? (this.follower = 0; this.stage = 4):(
    this.breakpoint <= this.sustain ? (
        this.follower >= this.decay2 ? ( //|| this.level - (this.breakpoint - this.sustain)/this.decay2 > this.sustain ? ( // 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    ):(
        this.follower >= this.decay2 ? ( // || this.level - (this.breakpoint - this.sustain)/this.decay2 < this.sustain ? ( 
            this.follower = 0;  this.stage = 4; //this.level = this.sustain;
        ):(
            this.level -= (this.breakpoint - this.sustain)/this.decay2; //this.follower += 1; 
        );
    );
  );
);

this.stage == 4 ? this.level = this.sustain; //(this.sustain_old != this.sustain ? (this.level = this.sustain; this.sustain_old = this.sustain));

this.stage == 5 ? (
  this.release == 0 ? (this.level = 0; this.follower = 0; this.envelope_stop =1):(
    this.follower == 0 ? this.level = this.release_level = this.real_level;
    this.level -= this.release_level/this.release; //absolute release time
    //this.level -= 1/this.release; //relative Release time
    this.follower += 1;
  );
);

this.stage == 1 ? (
    attack.shape == 0 ? (
        this.real_level = this.level;
    ):attack.shape == 2 ? (
        this.real_level = explog(this.level, attack.coef);
    ):attack.shape == 1 ? (
        this.real_level = sigma(this.level, attack.coef);
    );
):this.stage == 2 ? (
    dec1.shape == 0 ? (
        this.real_level = this.level;
    ):dec1.shape == 2 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*explog((1-(this.follower/this.decay)), dec1.coef);
    ):dec1.shape == 1 ? (
        tmp_fac = (1-this.breakpoint); // this.level muss von 1-0 skaliert sein...
        this.real_level = this.breakpoint+tmp_fac*sigma((1-(this.follower/this.decay)), dec1.coef);
    );
):this.stage == 3 ? (
    dec2.shape == 0 ? (
        this.real_level = this.level;
    ):dec2.shape == 2 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint+ tmp_fac*explog(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*explog((1-(this.follower/this.decay2)), dec2.coef);
        );
    ):dec2.shape == 1 ? (
        this.sustain > this.breakpoint ? (
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.breakpoint + tmp_fac*sigma(((this.follower/this.decay2)), dec2.coef);
        ):(
            tmp_fac = abs(this.sustain - this.breakpoint);
            this.real_level = this.sustain+ tmp_fac*sigma((1-(this.follower/this.decay2)), dec2.coef);
        );
    );
   this.follower += 1; 
):this.stage == 4 ? (this.real_level = this.level;

):this.stage == 5 ? (
    release.shape == 0 ? (
        this.real_level = this.level;
    ):release.shape == 2 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.level*explog(1-(this.follower/this.release), release.coef);
    ):release.shape == 1 ? (
        //this.follower == 1 ? this.release_level = this.level;
        tmp_fac = (this.release_level);
        this.real_level = this.release_level*sigma(1-(this.follower/this.release), release.coef);
    );
    this.real_level <= 0.00001 ? (this.level = 0; this.envelope_stop = 1);
);

//this.stage != 1 ? this.real_level = this.level;


); // end function





function sync_osc () (
this..sync_to == this..osc_number ? (syncdummy = 0) :
this..sync_to == 1 ? (
this == 1 ? (osc1.subosc_1.t < osc1.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc1.subosc_2.t < osc1.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc1.subosc_3.t < osc1.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc1.subosc_4.t < osc1.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc1.subosc_5.t < osc1.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc1.subosc_6.t < osc1.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc1.subosc_7.t < osc1.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc1.subosc_8.t < osc1.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc1.subosc_9.t < osc1.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc1.subosc_10.t < osc1.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc1.subosc_11.t < osc1.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc1.subosc_12.t < osc1.subosc_12.t_old ? (this.wave_sync(0)));
):this..sync_to == 2 ? (
this == 1 ? (osc2.subosc_1.t < osc2.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc2.subosc_2.t < osc2.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc2.subosc_3.t < osc2.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc2.subosc_4.t < osc2.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc2.subosc_5.t < osc2.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc2.subosc_6.t < osc2.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc2.subosc_7.t < osc2.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc2.subosc_8.t < osc2.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc2.subosc_9.t < osc2.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc2.subosc_10.t < osc2.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc2.subosc_11.t < osc2.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc2.subosc_12.t < osc2.subosc_12.t_old ? (this.wave_sync(0)));
):this..sync_to == 3 ? (
this == 1 ? (osc3.subosc_1.t < osc3.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc3.subosc_2.t < osc3.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc3.subosc_3.t < osc3.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc3.subosc_4.t < osc3.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc3.subosc_5.t < osc3.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc3.subosc_6.t < osc3.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc3.subosc_7.t < osc3.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc3.subosc_8.t < osc3.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc3.subosc_9.t < osc3.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc3.subosc_10.t < osc3.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc3.subosc_11.t < osc3.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc3.subosc_12.t < osc3.subosc_12.t_old ? (this.wave_sync(0)));
):this..sync_to == 4 ? (
this == 1 ? (osc4.subosc_1.t < osc4.subosc_1.t_old ? (this.wave_sync(0))):
this == 2 ? (osc4.subosc_2.t < osc4.subosc_2.t_old ? (this.wave_sync(0))):
this == 3 ? (osc4.subosc_3.t < osc4.subosc_3.t_old ? (this.wave_sync(0))):
this == 4 ? (osc4.subosc_4.t < osc4.subosc_4.t_old ? (this.wave_sync(0))):
this == 5 ? (osc4.subosc_5.t < osc4.subosc_5.t_old ? (this.wave_sync(0))):
this == 6 ? (osc4.subosc_6.t < osc4.subosc_6.t_old ? (this.wave_sync(0))):
this == 7 ? (osc4.subosc_7.t < osc4.subosc_7.t_old ? (this.wave_sync(0))):
this == 8 ? (osc4.subosc_8.t < osc4.subosc_8.t_old ? (this.wave_sync(0))):
this == 9 ? (osc4.subosc_9.t < osc4.subosc_9.t_old ? (this.wave_sync(0))):
this == 10 ? (osc4.subosc_10.t < osc4.subosc_10.t_old ? (this.wave_sync(0))):
this == 11 ? (osc4.subosc_11.t < osc4.subosc_11.t_old ? (this.wave_sync(0))):
this == 12 ? (osc4.subosc_12.t < osc4.subosc_12.t_old ? (this.wave_sync(0)));
);

);




function slew_rate() (

this > this.before_slew_rate + slew_rate ? (this.after_slew_rate = this.before_slew_rate + slew_rate; slew_rate_n = 1):
this < this.before_slew_rate - slew_rate ? (this.after_slew_rate = this.before_slew_rate - slew_rate; slew_rate_n = -1):
(this.after_slew_rate = this; slew_rate_n = 0);

this.before_slew_rate = this.after_slew_rate;
);


function cheap_LFO_generator () (
   this.form == 1 ? this.abs_position = (1+sin((this.chase_position+0.75) * 2 * $pi))/2;
   this.form == 2 ? this.abs_position = floor(this.chase_position+0.5);
   this.form == 3 ? this.abs_position = this.chase_Position;
   this.form == 4 ? this.abs_position = this.chase_position == 0 ? 0 : 1-this.chase_position;
   this.form == 5 ? (
     this.chase_position <= 0.5 ?  this.abs_position = this.chase_position * 2 : this.abs_position = 1- (this.chase_position-0.5) * 2;
   );
   
   this.form == 1 ? this.abs_position2 = (1+sin(this.chase_position * 2 * $pi))/2;
   this.form == 2 ? this.abs_position2 = floor(this.chase_position+0.5);
   this.form == 3 ? (
   this.chase_position2 = this.chase_position + 0.5;
   this.chase_position2 >= 1 ? this.chase_position2 -= 1;
   this.abs_position2 = this.chase_position2;
    );
   this.form == 4 ? (
   
   this.chase_position2 = this.chase_position + 0.5;
   this.chase_position2 >= 1 ? this.chase_position2 -= 1;
   this.abs_position2 = 1-this.chase_position2;
   );
   this.form == 5 ? (
   this.chase_position2 = this.chase_position + 0.25;
   this.chase_position2 >= 1 ? this.chase_position2 -= 1;
     this.chase_position2 <= 0.5 ?  this.abs_position2 = this.chase_position2 * 2 : this.abs_position2 = 1- (this.chase_position2-0.5) * 2;
   );
   
   this.chase_position += (this.tempo_Hz) / srate;
   this.chase_position >= 1 ? this.chase_position -= 1;
   
);
   
function LFO_Generator (CV) (
   this.sync_on == 1 ? ( //TEMP SYNCED
   Takt_in_s = (240 / tempo);
   this.time_sync_2 == 1 ? (this.T_Fac = 1.5):(this.T_Fac=1);
   this.Hertz = Takt_in_s / (this.time_sync*this.T_Fac);
   this.time_sync_2 == 2 ? this.Hertz *= 1.5;
   this.cosphi = this.phase_shift / 360;
   ):(
   this.vslider41 = this.tempo_hz * this.multiplier;
   this.vslider41 != 0 ? this.Hertz = 1/this.vslider41;
   this.cosphi = this.phase_shift / 360;
   );
   
   //block_ ... + (pos_add/srate) 
   this.n_durchgaenge = ((block_play_position + (pos_add/srate) + this.cosphi*this.Hertz) / this.Hertz);
   
   
   this.free_run == 1 ? ( //1 = Time sync, not free run
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   play_state == 1 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   play_state == 5 ? this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   ):(
   this.phase_position = this.n_durchgaenge - floor(this.n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   this.run_on_stop == 1 ? (
   this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   ):(
   play_state == 1 ? this.phase_position += (1/this.Hertz) / srate;
   play_state == 5 ? this.phase_position += (1/this.Hertz) / srate;
   this.phase_position >= 1 ? this.phase_position = 0;
   );
   );
   
 
   this.sinus_Position = sin(this.phase_position * 2 * $pi);
   this.flip_position = sign(this.sinus_Position);
   this.ramp_up_position = -1 + 2*this.phase_position;
   this.ramp_down_position = 1 - 2*this.phase_position;
   
   this.phase_position <= 0.25 ? this.triangle_position = this.phase_position * 4:
   this.phase_position <= 0.5 ?  this.triangle_position = 1 - (this.phase_position-0.25) * 4:
   this.phase_position <= 0.75 ? this.triangle_position = (this.phase_position-0.5) * -4:
   this.phase_position > 0.75 ?  this.triangle_position = -1 + (this.phase_position - 0.75) * 4;

   this.form == 0 ? (
   this.CV_Select == 1 ? CV = 1 :
   this.CV_Select == 2 ? CV = modwheel :
   this.CV_Select == 3 ? CV = aftertouch/127 :
   this.CV_Select == 4 ? CV = CV_1 :
   this.CV_Select == 5 ? CV = CV_2 :
   this.CV_Select == 6 ? CV = CV_3 :
   this.CV_Select == 7 ? CV = CV_4 :
   this.CV_Select == 8 ? CV = CV_5 :
   this.CV_Select == 9 ? CV = CV_6 :
   this.CV_Select == 10 ? CV = CV_7 :
   this.CV_Select == 11 ? CV = CV_8 :
   this.CV_Select == 12 ? CV = CV_9 :
   this.CV_Select == 13 ? CV = CV_10 :
   CV = 0;
   this.abs_position = CV;
   );
   this.form == 1 ? this.abs_position = this.sinus_Position;
   this.form == 2 ? this.abs_position = this.flip_Position;
   this.form == 3 ? this.abs_position = this.ramp_up_Position;
   this.form == 4 ? this.abs_position = this.ramp_down_Position;
   this.form == 5 ? this.abs_position = this.triangle_Position;
   this.abs_position.slew_rate();
   this.abs_position = this.abs_position.after_slew_rate;

);





function play_suboscillator () (

this.fetch_subosc();

this.t_old = this.t;
this..sync_to ? this.sync_osc();

abs(this.pwm_old - this..pwm.running) > 0.002 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this..waveform >= 2 ? (

    mod_further = 0;
    this..transpose.mod == 2 ? (this.transpose.running = this..transpose.mod.amt * envelope_real_level[this.subosc_number-1]; mod_further = 1) :
    this..transpose.mod == 3 ? (this.transpose.running = this..transpose.mod.amt * envelope_real_level[12+this.subosc_number-1]; mod_further = 1) :
    this..transpose.mod == 4 ? (this.transpose.running = this..transpose.mod.amt * envelope_real_level[24+this.subosc_number-1]; mod_further = 1) :
    this..transpose.mod == 5 ? (this.transpose.running = this..transpose.mod.amt * envelope_real_level[36+this.subosc_number-1]; mod_further = 1) :
    this..transpose.mod == 6 ? (this.transpose.running = this..transpose.mod.amt * envelope_real_level[48+this.subosc_number-1]; mod_further = 1) :
    this.transpose.running = this..transpose.running;
    mod_further ? (
    this..transpose.mod.wheel == 1 ? this.transpose.running *= modwheel;
    this..transpose.mod.wheel == 2 ? this.transpose.running *= aftertouch/127;
    this..transpose.mod.centered ? this.transpose.running -= this..transpose.mod.amt * 0.5;
    );

    mod_further = 0;
    this..finetune.mod == 2 ? (this.finetune.running = this..finetune.mod.amt * envelope_real_level[this.subosc_number-1]; mod_further = 1) :
    this..finetune.mod == 3 ? (this.finetune.running = this..finetune.mod.amt * envelope_real_level[12+this.subosc_number-1]; mod_further = 1) :
    this..finetune.mod == 4 ? (this.finetune.running = this..finetune.mod.amt * envelope_real_level[24+this.subosc_number-1]; mod_further = 1) :
    this..finetune.mod == 5 ? (this.finetune.running = this..finetune.mod.amt * envelope_real_level[36+this.subosc_number-1]; mod_further = 1) :
    this..finetune.mod == 6 ? (this.finetune.running = this..finetune.mod.amt * envelope_real_level[48+this.subosc_number-1]; mod_further = 1) :
    this.finetune.running = this..finetune.running;
    mod_further ? (
    this..finetune.mod.wheel == 1 ? this.finetune.running *= modwheel;
    this..finetune.mod.wheel == 2 ? this.finetune.running *= aftertouch/127;
    this..finetune.mod.centered ? this.finetune.running -= this..finetune.mod.amt * 0.5;
    );


this..waveform == 5 ? abs(this.pwm_old - this..pwm.running) > 0.05 ? (this.want_render_waveform = 1; this.pwm_old = this.pwm..running);    

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0;  this.four_ifft()):

 this.want_update || abs(this.note_running + this.transpose.running + (this.finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.01 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this.transpose.running + (this.finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ?  this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63);
 );
 this.output = this.wave_lerp()*envelope_real_level[(this..VCA_ENV-1)*12 + this.subosc_number-1] * this.velocity/127;

 );
 this..waveform == 1 ? (
 this.noise=(rand(2)-1);
 this.this.noise_b0 = 0.99886 * this.this.noise_b0 + this.noise * 0.0555179;
 this.this.noise_b1 = 0.99332 * this.this.noise_b1 + this.noise * 0.0750759;
 this.this.noise_b2 = 0.96900 * this.this.noise_b2 + this.noise * 0.1538520;
 this.this.noise_b3 = 0.86650 * this.this.noise_b3 + this.noise * 0.3104856;
 this.this.noise_b4 = 0.55000 * this.this.noise_b4 + this.noise * 0.5329522;
 this.this.noise_b5 = -0.7616 * this.this.noise_b5 - this.noise * 0.0168980;
 this.output = this.this.noise_b0 + this.this.noise_b1 + this.this.noise_b2 + this.this.noise_b3 + this.this.noise_b4 + this.this.noise_b5 + this.this.noise_b6 + this.noise * 0.5362;
 this.output *= 0.3*envelope_real_level[(this..VCA_ENV-1)*12 + this.subosc_number-1] * this.velocity/127;
 this.noise_b6 = this.noise * 0.115926;
 ):this..waveform == 0 ? (
 this.output =(rand(2)-1)*envelope_real_level[(this..VCA_ENV-1)*12 + this.subosc_number-1] * this.velocity/127;
 );
 
);



function play_unison_suboscillator () (

this.fetch_unison_subosc();

this.t_old = this.t;
this..sync_to ? this.sync_osc();


abs(this.pwm_old - this..pwm.running) > 0.05 ? (this.want_render_waveform = 1; this.pwm_old = this..pwm.running);

this.want_render_waveform ? (this.render_waveform(); this.want_render_waveform = 0):

 this.want_update || abs(this.note_running + this..transpose.running - (this..finetune.running/100) + this..pitchamount*norm_pitchwheel - this.pitch_old) > 0.1 ? (
 this.freq = main_tuning*(osc_a0^(this.note_running - 48 + this..transpose.running - (this..finetune.running/100) + this..pitchamount *norm_pitchwheel));
 this.four_setf(this.freq);
 this.four_update() ? this.four_ifft();
 this.want_update = 0;
 this.pitch_old = abs(this.note_running + this..transpose.running + (this..finetune.running/100) + pitchwheel / 63)
 );
 this.output = this.wave_trunc() * envelope_real_level[(this..osc_number-1)*12 + this.subosc_number-7] * this.velocity/127;
  //aakatze += 1;
);

function play_oscillator() (
/*
this.unison ? (
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;

synth.subosc_1.on ? this.subosc_7.play_unison_suboscillator() : (this.subosc_7.output = 0; this.subosc_7.note = this.subosc_7.note_distance = 0);
synth.subosc_2.on ? this.subosc_8.play_unison_suboscillator() : this.subosc_8.output = 0;
synth.subosc_3.on ? this.subosc_9.play_unison_suboscillator() : this.subosc_9.output = 0;
synth.subosc_4.on ? this.subosc_10.play_unison_suboscillator() : this.subosc_10.output = 0;
synth.subosc_5.on ? this.subosc_11.play_unison_suboscillator() : this.subosc_11.output = 0;
synth.subosc_6.on ? this.subosc_12.play_unison_suboscillator() : this.subosc_12.output = 0;
):(
*/
synth.subosc_1.on ? this.subosc_1.play_suboscillator() : (this.subosc_1.output = 0; this.subosc_1.note = this.subosc_1.note_distance = 0);
synth.subosc_2.on ? this.subosc_2.play_suboscillator() : this.subosc_2.output = 0;
synth.subosc_3.on ? this.subosc_3.play_suboscillator() : this.subosc_3.output = 0;
synth.subosc_4.on ? this.subosc_4.play_suboscillator() : this.subosc_4.output = 0;
synth.subosc_5.on ? this.subosc_5.play_suboscillator() : this.subosc_5.output = 0;
synth.subosc_6.on ? this.subosc_6.play_suboscillator() : this.subosc_6.output = 0;
synth.subosc_7.on ? this.subosc_7.play_suboscillator() : this.subosc_7.output = 0;
synth.subosc_8.on ? this.subosc_8.play_suboscillator() : this.subosc_8.output = 0;
synth.subosc_9.on ? this.subosc_9.play_suboscillator() : this.subosc_9.output = 0;
synth.subosc_10.on ? this.subosc_10.play_suboscillator() : this.subosc_10.output = 0;
synth.subosc_11.on ? this.subosc_11.play_suboscillator() : this.subosc_11.output = 0;
synth.subosc_12.on ? this.subosc_12.play_suboscillator() : this.subosc_12.output = 0;
//);

);









function fill_subosc () (
this.VCA1.attack = env1.attack;
this.VCA1.attack_step = env1.attack_step;
this.VCA1.decay = env1.decay;
this.VCA1.breakpoint = env1.breakpoint;
this.VCA1.decay2 = env1.decay2;
this.VCA1.decay_step = env1.decay_step;
this.VCA1.sustain = env1.sustain;
this.VCA1.release = env1.release;
this.VCA1.at_shape = env1.at_shape;
this.VCA1.dec1_shape = env1.dec1_shape;
this.VCA1.dec2_shape = env1.dec2_shape;
this.VCA1.dec1_coef = env1.dec1_coef;
this.VCA1.dec2_coef = env1.dec2_coef;
this.VCA1.at_coef = env1.at_coef;
this.VCA1.rel_shape = env1.rel_shape;
this.VCA1.rel_coef = env1.rel_coef;

this.VCA2.attack = env2.attack;
this.VCA2.attack_step = env2.attack_step;
this.VCA2.decay = env2.decay;
this.VCA2.breakpoint = env2.breakpoint;
this.VCA2.decay2 = env2.decay2;
this.VCA2.decay_step = env2.decay_step;
this.VCA2.sustain = env2.sustain;
this.VCA2.release = env2.release;
this.VCA2.at_shape = env2.at_shape;
this.VCA2.dec1_shape = env2.dec1_shape;
this.VCA2.dec2_shape = env2.dec2_shape;
this.VCA2.dec1_coef = env2.dec1_coef;
this.VCA2.dec2_coef = env2.dec2_coef;
this.VCA2.at_coef = env2.at_coef;
this.VCA2.rel_shape = env2.rel_shape;
this.VCA2.rel_coef = env2.rel_coef;

this.VCF1.attack = env5.attack;
this.VCF1.attack_step = env5.attack_step;
this.VCF1.decay = env5.decay;
this.VCF1.breakpoint = env5.breakpoint;
this.VCF1.decay2 = env5.decay2;
this.VCF1.decay_step = env5.decay_step;
this.VCF1.sustain = env5.sustain;
this.VCF1.release = env5.release;
this.VCF1.at_shape = env5.at_shape;
this.VCF1.dec1_shape = env5.dec1_shape;
this.VCF1.dec2_shape = env5.dec2_shape;
this.VCF1.dec1_coef = env5.dec1_coef;
this.VCF1.dec2_coef = env5.dec2_coef;
this.VCF1.at_coef = env5.at_coef;
this.VCF1.rel_shape = env5.rel_shape;
this.VCF1.rel_coef = env5.rel_coef;

this.VCA3.attack = env3.attack;
this.VCA3.attack_step = env3.attack_step;
this.VCA3.decay = env3.decay;
this.VCA3.breakpoint = env3.breakpoint;
this.VCA3.decay2 = env3.decay2;
this.VCA3.decay_step = env3.decay_step;
this.VCA3.sustain = env3.sustain;
this.VCA3.release = env3.release;
this.VCA3.at_shape = env3.at_shape;
this.VCA3.dec1_shape = env3.dec1_shape;
this.VCA3.dec2_shape = env3.dec2_shape;
this.VCA3.dec1_coef = env3.dec1_coef;
this.VCA3.dec2_coef = env3.dec2_coef;
this.VCA3.at_coef = env3.at_coef;
this.VCA3.rel_shape = env3.rel_shape;
this.VCA3.rel_coef = env3.rel_coef;

this.VCA4.attack = env6.attack;
this.VCA4.attack_step = env6.attack_step;
this.VCA4.decay = env6.decay;
this.VCA4.breakpoint = env6.breakpoint;
this.VCA4.decay2 = env6.decay2;
this.VCA4.decay_step = env6.decay_step;
this.VCA4.sustain = env6.sustain;
this.VCA4.release = env6.release;
this.VCA4.at_shape = env6.at_shape;
this.VCA4.dec1_shape = env6.dec1_shape;
this.VCA4.dec2_shape = env6.dec2_shape;
this.VCA4.dec1_coef = env6.dec1_coef;
this.VCA4.dec2_coef = env6.dec2_coef;
this.VCA4.at_coef = env6.at_coef;
this.VCA4.rel_shape = env6.rel_shape;
this.VCA4.rel_coef = env6.rel_coef;
);





function modulationsmatrix(LFO, RANGE, MODRANGE) local(_controller _modamount _mode _LFO_Value _wantmod) (

LFO == 1 ? _wantmod = this.LFO_1.wantmod:
LFO == 2 ? _wantmod = this.LFO_2.wantmod:
LFO == 3 ? _wantmod = this.LFO_3.wantmod:
LFO == 4 ? _wantmod = this.LFO_4.wantmod;

_wantmod ? (
    LFO == 1 ? (
    _LFO_Value = LFO_1.abs_position.after_slew_rate;
    _modamount = this.LFO_1.modamount;
    _mode = this.LFO_1.mode;
    this.LFO_1.controller == 1 ? _controller = 1 :
    this.LFO_1.controller == 2 ? _controller = modwheel :
    this.LFO_1.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_1.controller == 4 ? _controller = CV_1 :
    this.LFO_1.controller == 5 ? _controller = CV_2 :
    this.LFO_1.controller == 6 ? _controller = CV_3 :
    this.LFO_1.controller == 7 ? _controller = CV_4 :
    this.LFO_1.controller == 8 ? _controller = CV_5 :
    this.LFO_1.controller == 9 ? _controller = CV_6 :
    this.LFO_1.controller == 10 ? _controller = CV_7 :
    this.LFO_1.controller == 11 ? _controller = CV_8 :
    this.LFO_1.controller == 12 ? _controller = CV_9 :
    this.LFO_1.controller == 13 ? _controller = CV_10;
    ):
    LFO == 2 ? (
    _LFO_Value = LFO_2.abs_position.after_slew_rate;
    _modamount = this.LFO_2.modamount;
    _mode = this.LFO_2.mode;
    this.LFO_2.controller == 1 ? _controller = 1 :
    this.LFO_2.controller == 2 ? _controller = modwheel :
    this.LFO_2.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_2.controller == 4 ? _controller = CV_1 :
    this.LFO_2.controller == 5 ? _controller = CV_2 :
    this.LFO_2.controller == 6 ? _controller = CV_3 :
    this.LFO_2.controller == 7 ? _controller = CV_4 :
    this.LFO_2.controller == 8 ? _controller = CV_5 :
    this.LFO_2.controller == 9 ? _controller = CV_6 :
    this.LFO_2.controller == 10 ? _controller = CV_7 :
    this.LFO_2.controller == 11 ? _controller = CV_8 :
    this.LFO_2.controller == 12 ? _controller = CV_9 :
    this.LFO_2.controller == 13 ? _controller = CV_10;
    ):
    LFO == 3 ? (
    _LFO_Value = LFO_3.abs_position.after_slew_rate;
    _modamount = this.LFO_3.modamount;
    _mode = this.LFO_3.mode;
    this.LFO_3.controller == 1 ? _controller = 1 :
    this.LFO_3.controller == 2 ? _controller = modwheel :
    this.LFO_3.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_3.controller == 4 ? _controller = CV_1 :
    this.LFO_3.controller == 5 ? _controller = CV_2 :
    this.LFO_3.controller == 6 ? _controller = CV_3 :
    this.LFO_3.controller == 7 ? _controller = CV_4 :
    this.LFO_3.controller == 8 ? _controller = CV_5 :
    this.LFO_3.controller == 9 ? _controller = CV_6 :
    this.LFO_3.controller == 10 ? _controller = CV_7 :
    this.LFO_3.controller == 11 ? _controller = CV_8 :
    this.LFO_3.controller == 12 ? _controller = CV_9 :
    this.LFO_3.controller == 13 ? _controller = CV_10;
    ):
    LFO == 4 ? (
    _LFO_Value = LFO_4.abs_position.after_slew_rate;
    _modamount = this.LFO_4.modamount;
    _mode = this.LFO_4.mode;
    this.LFO_4.controller == 1 ? _controller = 1 :
    this.LFO_4.controller == 2 ? _controller = modwheel :
    this.LFO_4.controller == 3 ? _controller = aftertouch/127 :
    this.LFO_4.controller == 4 ? _controller = CV_1 :
    this.LFO_4.controller == 5 ? _controller = CV_2 :
    this.LFO_4.controller == 6 ? _controller = CV_3 :
    this.LFO_4.controller == 7 ? _controller = CV_4 :
    this.LFO_4.controller == 8 ? _controller = CV_5 :
    this.LFO_4.controller == 9 ? _controller = CV_6 :
    this.LFO_4.controller == 10 ? _controller = CV_7 :
    this.LFO_4.controller == 11 ? _controller = CV_8 :
    this.LFO_4.controller == 12 ? _controller = CV_9 :
    this.LFO_4.controller == 13 ? _controller = CV_10;
    );
    
    
    
    
    
    _mode == 0 ? this.modresult += (_modamount/MODRANGE)*_LFO_Value*_controller*RANGE :
    _mode == 1 ? this.modresult += -0.5*range*_modamount/modrange + (0.5*_modamount/MODRANGE)*_LFO_Value*_controller*RANGE;
):(
    this.running = this;
);

);


function opvca(operator_) (
  
  operator_ == 1 ? (speed = this..op1.speed; EG1_s = operator1.EG1_s; EG2_s = operator1.EG2_s; EG3_s = operator1.EG3_s; EG4_s = operator1.EG4_s; EG1 = operator1.EG1; EG2 = operator1.EG2; EG3 = operator1.EG3; EG4 = operator1.EG4; Target1 = operator1.target1e; Target2 = operator1.target2e; Target3 = operator1.target3e);
  operator_ == 2 ? (speed = this..op2.speed; EG1_s = operator2.EG1_s; EG2_s = operator2.EG2_s; EG3_s = operator2.EG3_s; EG4_s = operator2.EG4_s; EG1 = operator2.EG1; EG2 = operator2.EG2; EG3 = operator2.EG3; EG4 = operator2.EG4; Target1 = operator2.target1e; Target2 = operator2.target2e; Target3 = operator2.target3e);
  operator_ == 3 ? (speed = this..op3.speed; EG1_s = operator3.EG1_s; EG2_s = operator3.EG2_s; EG3_s = operator3.EG3_s; EG4_s = operator3.EG4_s; EG1 = operator3.EG1; EG2 = operator3.EG2; EG3 = operator3.EG3; EG4 = operator3.EG4; Target1 = operator3.target1e; Target2 = operator3.target2e; Target3 = operator3.target3e);
  operator_ == 4 ? (speed = this..op4.speed; EG1_s = operator4.EG1_s; EG2_s = operator4.EG2_s; EG3_s = operator4.EG3_s; EG4_s = operator4.EG4_s; EG1 = operator4.EG1; EG2 = operator4.EG2; EG3 = operator4.EG3; EG4 = operator4.EG4; Target1 = operator4.target1e; Target2 = operator4.target2e; Target3 = operator4.target3e);
  operator_ == 5 ? (speed = this..op5.speed; EG1_s = operator5.EG1_s; EG2_s = operator5.EG2_s; EG3_s = operator5.EG3_s; EG4_s = operator5.EG4_s; EG1 = operator5.EG1; EG2 = operator5.EG2; EG3 = operator5.EG3; EG4 = operator5.EG4; Target1 = operator5.target1e; Target2 = operator5.target2e; Target3 = operator5.target3e);
  operator_ == 6 ? (speed = this..op6.speed; EG1_s = operator6.EG1_s; EG2_s = operator6.EG2_s; EG3_s = operator6.EG3_s; EG4_s = operator6.EG4_s; EG1 = operator6.EG1; EG2 = operator6.EG2; EG3 = operator6.EG3; EG4 = operator6.EG4; Target1 = operator6.target1e; Target2 = operator6.target2e; Target3 = operator6.target3e);
  
  this.stage == 1 ? (
      this.follower += 1;
      this.level += EG1 * speed;
      this.level > Target1 ? (this.Stage = 2; this.level = target1; this.follower = 0);
      this.follower >= EG1_s/speed ? (this.level = Target1; this.Stage = 2; this.follower = 0);
  );

  this.stage == 2 ? (
      this.follower += 1;
      this.level += EG2  * speed ;
      this.follower >= EG2_s/speed ? (this.level = Target2; this.Stage = 3; this.follower = 0);
  );
  
  this.stage == 3 ? (
      this.follower += 1;
      this.level += EG3 * speed;
      this.follower >= EG3_s/speed ? (this.level = Target3; this.Stage = 4; this.follower = 0);
  );
  
  this.stage == 4 ? (
      this.level = Target3;
  );
  
  this.stage == 5 ? (
      this.level += EG4 * speed;
      this.level <= 0 || EG4_s == 0 ? (this.level = 0; this.Stage = 0; this.follower = 0; this.envelope_stop = 1);
  );
  
  
);


algofbk = 1.27 * 2;

function set_algo() (
fm11 = fm21 = fm31 = fm41 = fm51 = fm61 =
fm12 = fm22 = fm32 = fm42 = fm52 = fm62 =
fm13 = fm23 = fm33 = fm43 = fm53 = fm63 =
fm14 = fm24 = fm34 = fm44 = fm54 = fm64 =
fm15 = fm25 = fm35 = fm45 = fm55 = fm65 =
fm16 = fm26 = fm36 = fm46 = fm56 = fm66 = 0;
fmalgo == 1 ? fm21 = fm65 = fm54 = fm43 = algofbk;
fmalgo == 2 ? fm21 = fm65 = fm54 = fm43 = algofbk;
fmalgo == 3 ? fm32 = fm21 = fm65 = fm54 = algofbk;
fmalgo == 4 ? fm32 = fm21 = fm65 = fm54 = algofbk;
fmalgo == 5 ? fm21 = fm43 = fm65 = algofbk;
fmalgo == 6 ? fm21 = fm43 = fm65 = algofbk;
fmalgo == 7 ? fm21 = fm43 = fm65 = fm53 = algofbk;
fmalgo == 8 ? fm21 = fm43 = fm65 = fm53 = algofbk;
fmalgo == 9 ? fm21 = fm43 = fm65 = fm53 = algofbk;
fmalgo == 10 ? fm54 = fm64 = fm32 = fm21 = algofbk;
fmalgo == 11 ? fm54 = fm64 = fm32 = fm21 = algofbk;
fmalgo == 12 ? fm43 = fm53 = fm63 = fm21 = algofbk;
fmalgo == 13 ? fm43 = fm53 = fm63 = fm21 = algofbk;
fmalgo == 14 ? fm54 = fm64 = fm43 = fm21 = algofbk;
fmalgo == 15 ? fm54 = fm64 = fm43 = fm21 = algofbk;
fmalgo == 16 ? fm21 = fm43 = fm31 = fm65 = fm51 = algofbk;
fmalgo == 17 ? fm21 = fm43 = fm31 = fm65 = fm51 = algofbk;
fmalgo == 18 ? fm21 = fm31 = fm65 = fm54 = fm41 = algofbk;
fmalgo == 19 ? fm32 = fm21 = fm64 = fm65 = algofbk;
fmalgo == 20 ? fm31 = fm32 = fm54 = fm64 = algofbk;
fmalgo == 21 ? fm31 = fm32 = fm64 = fm65 = algofbk;
fmalgo == 22 ? fm21 = fm63 = fm64 = fm65 = algofbk;
fmalgo == 23 ? fm32 = fm64 = fm65 = algofbk;
fmalgo == 24 ? fm63 = fm64 = fm65 = algofbk;
fmalgo == 25 ? fm64 = fm65 = algofbk;
fmalgo == 26 ? fm32 = fm54 = fm64 = algofbk;
fmalgo == 27 ? fm32 = fm54 = fm64 = algofbk;
fmalgo == 28 ? fm21 = fm54 = fm43 = algofbk;
fmalgo == 29 ? fm43 = fm65 = algofbk;
fmalgo == 30 ? fm54 = fm43 = algofbk;
fmalgo == 31 ? fm65 = algofbk;
fm11 == 0 && fm12 == 0 && fm13 == 0 && fm14 == 0 && fm15 == 0 && fm16 == 0 ? op1out = 1 : op1out = 0;
fm21 == 0 && fm22 == 0 && fm23 == 0 && fm24 == 0 && fm25 == 0 && fm26 == 0 ? op2out = 1 : op2out = 0;
fm31 == 0 && fm32 == 0 && fm33 == 0 && fm34 == 0 && fm35 == 0 && fm36 == 0 ? op3out = 1 : op3out = 0;
fm41 == 0 && fm42 == 0 && fm43 == 0 && fm44 == 0 && fm45 == 0 && fm46 == 0 ? op4out = 1 : op4out = 0;
fm51 == 0 && fm52 == 0 && fm53 == 0 && fm54 == 0 && fm55 == 0 && fm56 == 0 ? op5out = 1 : op5out = 0;
fm61 == 0 && fm62 == 0 && fm63 == 0 && fm64 == 0 && fm65 == 0 && fm66 == 0 ? op6out = 1 : op6out = 0;
);




function play_synth_subosc () (
this.start_trigger == 1 ? (
this.nvelocity = (explog(this.velocity/127, 3)-0.5)/100;
  this.subosc_number == 1 ?  (osc1.subosc_1.wave_sync(0);  osc2.subosc_1.wave_sync(0);  osc3.subosc_1.wave_sync(0);  osc4.subosc_1.wave_sync(0)):
  this.subosc_number == 2 ?  (osc1.subosc_2.wave_sync(0);  osc2.subosc_2.wave_sync(0);  osc3.subosc_2.wave_sync(0);  osc4.subosc_2.wave_sync(0)):
  this.subosc_number == 3 ?  (osc1.subosc_3.wave_sync(0);  osc2.subosc_3.wave_sync(0);  osc3.subosc_3.wave_sync(0);  osc4.subosc_3.wave_sync(0)):
  this.subosc_number == 4 ?  (osc1.subosc_4.wave_sync(0);  osc2.subosc_4.wave_sync(0);  osc3.subosc_4.wave_sync(0);  osc4.subosc_4.wave_sync(0)):
  this.subosc_number == 5 ?  (osc1.subosc_5.wave_sync(0);  osc2.subosc_5.wave_sync(0);  osc3.subosc_5.wave_sync(0);  osc4.subosc_5.wave_sync(0)):
  this.subosc_number == 6 ?  (osc1.subosc_6.wave_sync(0);  osc2.subosc_6.wave_sync(0);  osc3.subosc_6.wave_sync(0);  osc4.subosc_6.wave_sync(0)):
  this.subosc_number == 7 ?  (osc1.subosc_7.wave_sync(0);  osc2.subosc_7.wave_sync(0);  osc3.subosc_7.wave_sync(0);  osc4.subosc_7.wave_sync(0)):
  this.subosc_number == 8 ?  (osc1.subosc_8.wave_sync(0);  osc2.subosc_8.wave_sync(0);  osc3.subosc_8.wave_sync(0);  osc4.subosc_8.wave_sync(0)):
  this.subosc_number == 9 ?  (osc1.subosc_9.wave_sync(0);  osc2.subosc_9.wave_sync(0);  osc3.subosc_9.wave_sync(0);  osc4.subosc_9.wave_sync(0)):
  this.subosc_number == 10 ? (osc1.subosc_10.wave_sync(0); osc2.subosc_10.wave_sync(0); osc3.subosc_10.wave_sync(0); osc4.subosc_10.wave_sync(0)):
  this.subosc_number == 11 ? (osc1.subosc_11.wave_sync(0); osc2.subosc_11.wave_sync(0); osc3.subosc_11.wave_sync(0); osc4.subosc_11.wave_sync(0)):
  this.subosc_number == 12 ? (osc1.subosc_12.wave_sync(0); osc2.subosc_12.wave_sync(0); osc3.subosc_12.wave_sync(0); osc4.subosc_12.wave_sync(0));
this.VCF_Trigger = 1;
this.VCA1.stage = 1; this.VCA1.follower = 0; this.VCA1.level = 0;
this.VCA2.stage = 1; this.VCA2.follower = 0; this.VCA2.level = 0;
this.VCA3.stage = 1; this.VCA3.follower = 0; this.VCA3.level = 0;
this.VCA4.stage = 1; this.VCA4.follower = 0; this.VCA4.level = 0;
this.VCF1.stage = 1; this.VCF1.follower = 0; this.VCF1.level = 0; this.VCF1.real_level = 0;
this.start_trigger = 0;
this.op1vca.stage = 1;
this.op2vca.stage = 1;
this.op3vca.stage = 1;
this.op4vca.stage = 1;
this.op5vca.stage = 1;
this.op6vca.stage = 1;
reset_env ? (
this.op1vca.level = 0;
this.op2vca.level = 0;
this.op3vca.level = 0;
this.op4vca.level = 0;
this.op5vca.level = 0;
this.op6vca.level = 0;
);
this.op1vca.envelope_stop = 0;
this.op2vca.envelope_stop = 0;
this.op3vca.envelope_stop = 0;
this.op4vca.envelope_stop = 0;
this.op5vca.envelope_stop = 0;
this.op6vca.envelope_stop = 0;
this.op1vca.follower = 0;
this.op2vca.follower = 0;
this.op3vca.follower = 0;
this.op4vca.follower = 0;
this.op5vca.follower = 0;
this.op6vca.follower = 0;

//   (operator1.ldep < 0 && operator1.lcur ? sign(operator1.ldep) : 1) *   max(-1,min(1,((operator1.breakpoint-this.note) * operator1.LDEP/12)))^ (operator1.lcur == 1 ? 2 : 1)
//   (operator1.Rdep < 0 && operator1.Rcur ? sign(operator1.Rdep) : 1) *   max(-1,min(1,((this.note-operator1.breakpoint) * operator1.RDEP/12)))^ (operator1.Rcur == 1 ? 2 : 1)

//   (operator2.ldep < 0 && operator2.lcur ? sign(operator2.ldep) : 1) *   max(-1,min(1,((operator2.breakpoint-this.note) * operator2.LDEP/12)))^ (operator2.lcur == 1 ? 2 : 1)
//   (operator2.Rdep < 0 && operator2.Rcur ? sign(operator2.Rdep) : 1) *   max(-1,min(1,((this.note-operator2.breakpoint) * operator2.RDEP/12)))^ (operator2.Rcur == 1 ? 2 : 1)

//(operator3.ldep < 0 && operator3.lcur ? sign(operator3.ldep) : 1) *   max(-1,min(1,((operator3.breakpoint-this.note) * operator3.LDEP/12)))^ (operator3.lcur == 1 ? 2 : 1)
//(operator3.Rdep < 0 && operator3.Rcur ? sign(operator3.Rdep) : 1) *   max(-1,min(1,((this.note-operator3.breakpoint) * operator3.RDEP/12)))^ (operator3.Rcur == 1 ? 2 : 1)

//(operator4.ldep < 0 && operator4.lcur ? sign(operator4.ldep) : 1) *   max(-1,min(1,((operator4.breakpoint-this.note) * operator4.LDEP/12)))^ (operator4.lcur == 1 ? 2 : 1)
//(operator4.Rdep < 0 && operator4.Rcur ? sign(operator4.Rdep) : 1) *   max(-1,min(1,((this.note-operator4.breakpoint) * operator4.RDEP/12)))^ (operator4.Rcur == 1 ? 2 : 1)

//(operator5.ldep < 0 && operator5.lcur ? sign(operator5.ldep) : 1) *   max(-1,min(1,((operator5.breakpoint-this.note) * operator5.LDEP/12)))^ (operator5.lcur == 1 ? 2 : 1)
//(operator5.Rdep < 0 && operator5.Rcur ? sign(operator5.Rdep) : 1) *   max(-1,min(1,((this.note-operator5.breakpoint) * operator5.RDEP/12)))^ (operator5.Rcur == 1 ? 2 : 1)

//(operator6.ldep < 0 && operator6.lcur ? sign(operator6.ldep) : 1) *   max(-1,min(1,((operator6.breakpoint-this.note) * operator6.LDEP/12)))^ (operator6.lcur == 1 ? 2 : 1)
//(operator6.Rdep < 0 && operator6.Rcur ? sign(operator6.Rdep) : 1) *   max(-1,min(1,((this.note-operator6.breakpoint) * operator6.RDEP/12)))^ (operator6.Rcur == 1 ? 2 : 1)

this.note < operator1.breakpoint ? (
this.op1.curval = 1+(operator1.ldep < 0 && operator1.lcur ? sign(operator1.ldep) : 1) *   max(-1,min(1,((operator1.breakpoint-this.note) * operator1.LDEP/12)))^ (operator1.lcur == 1 ? 2 : 1);//explog(0.5*max(0,min(2, 1+ (operator1.breakpoint - this.note) * operator1.Ldep/12)), operator1.Lcur ? 2 : 1)*2;
):this.note > operator1.breakpoint ? (
this.op1.curval = 1+(operator1.Rdep < 0 && operator1.Rcur ? sign(operator1.Rdep) : 1) *   max(-1,min(1,((this.note-operator1.breakpoint) * operator1.RDEP/12)))^ (operator1.Rcur == 1 ? 2 : 1);//explog(0.5*max(0,min(2, 1+ (this.note -operator1.breakpoint) * operator1.Rdep/12)), operator1.Rcur ? 2 : 1)*2;;
):(this.op1.curval = 1);

this.note < operator2.breakpoint ? (
this.op2.curval = 1+(operator2.ldep < 0 && operator2.lcur ? sign(operator2.ldep) : 1) *   max(-1,min(1,((operator2.breakpoint-this.note) * operator2.LDEP/12)))^ (operator2.lcur == 1 ? 2 : 1);
):this.note > operator2.breakpoint ? (
this.op2.curval = 1+(operator2.Rdep < 0 && operator2.Rcur ? sign(operator2.Rdep) : 1) *   max(-1,min(1,((this.note-operator2.breakpoint) * operator2.RDEP/12)))^ (operator2.Rcur == 1 ? 2 : 1);
):(this.op2.curval = 1);

this.note < operator3.breakpoint ? (
this.op3.curval = 1+(operator3.ldep < 0 && operator3.lcur ? sign(operator3.ldep) : 1) *   max(-1,min(1,((operator3.breakpoint-this.note) * operator3.LDEP/12)))^ (operator3.lcur == 1 ? 2 : 1);
):this.note > operator3.breakpoint ? (
this.op3.curval = 1+(operator3.Rdep < 0 && operator3.Rcur ? sign(operator3.Rdep) : 1) *   max(-1,min(1,((this.note-operator3.breakpoint) * operator3.RDEP/12)))^ (operator3.Rcur == 1 ? 2 : 1);
):(this.op3.curval = 1);

this.note < operator4.breakpoint ? (
this.op4.curval = 1+(operator4.ldep < 0 && operator4.lcur ? sign(operator4.ldep) : 1) *   max(-1,min(1,((operator4.breakpoint-this.note) * operator4.LDEP/12)))^ (operator4.lcur == 1 ? 2 : 1);
):this.note > operator4.breakpoint ? (
this.op4.curval = 1+(operator4.Rdep < 0 && operator4.Rcur ? sign(operator4.Rdep) : 1) *   max(-1,min(1,((this.note-operator4.breakpoint) * operator4.RDEP/12)))^ (operator4.Rcur == 1 ? 2 : 1);
):(this.op4.curval = 1);

this.note < operator5.breakpoint ? (
this.op5.curval = 1+(operator5.ldep < 0 && operator5.lcur ? sign(operator5.ldep) : 1) *   max(-1,min(1,((operator5.breakpoint-this.note) * operator5.LDEP/12)))^ (operator5.lcur == 1 ? 2 : 1);
):this.note > operator5.breakpoint ? (
this.op5.curval = 1+(operator5.Rdep < 0 && operator5.Rcur ? sign(operator5.Rdep) : 1) *   max(-1,min(1,((this.note-operator5.breakpoint) * operator5.RDEP/12)))^ (operator5.Rcur == 1 ? 2 : 1);
):(this.op5.curval = 1);

this.note < operator6.breakpoint ? (
this.op6.curval = 1+(operator6.ldep < 0 && operator6.lcur ? sign(operator6.ldep) : 1) *   max(-1,min(1,((operator6.breakpoint-this.note) * operator6.LDEP/12)))^ (operator6.lcur == 1 ? 2 : 1);
):this.note > operator6.breakpoint ? (
this.op6.curval = 1+(operator6.Rdep < 0 && operator6.Rcur ? sign(operator6.Rdep) : 1) *   max(-1,min(1,((this.note-operator6.breakpoint) * operator6.RDEP/12)))^ (operator6.Rcur == 1 ? 2 : 1);
):(this.op6.curval = 1);

operator1.Env_Shape == 1 ? (
  this.op1.curval > 1 ? (this.op1.speed = 1 + (this.op1.curval-1)*9) :
  this.op1.curval < 1 ? (this.op1.speed = max(0.05, this.op1.curval)) :
  this.op1.speed = 1;
):(this.op1.speed = 1);
operator2.Env_Shape == 1 ? (
  this.op2.curval > 1 ? (this.op2.speed = 1 + (this.op2.curval-1)*9) :
  this.op2.curval < 1 ? (this.op2.speed = max(0.05, this.op2.curval)) :
  this.op2.speed = 1;
):(this.op2.speed = 1);
operator3.Env_Shape == 1 ? (
  this.op3.curval > 1 ? (this.op3.speed = 1 + (this.op3.curval-1)*9) :
  this.op3.curval < 1 ? (this.op3.speed = max(0.05, this.op3.curval)) :
  this.op3.speed = 1;
):(this.op3.speed = 1);
operator4.Env_Shape == 1 ? (
  this.op4.curval > 1 ? (this.op4.speed = 1 + (this.op4.curval-1)*9) :
  this.op4.curval < 1 ? (this.op4.speed = max(0.05, this.op4.curval)) :
  this.op4.speed = 1;
):(this.op4.speed = 1);
operator5.Env_Shape == 1 ? (
  this.op5.curval > 1 ? (this.op5.speed = 1 + (this.op5.curval-1)*9) :
  this.op5.curval < 1 ? (this.op5.speed = max(0.05, this.op5.curval)) :
  this.op5.speed = 1;
):(this.op5.speed = 1);
operator6.Env_Shape == 1 ? (
  this.op6.curval > 1 ? (this.op6.speed = 1 + (this.op6.curval-1)*9) :
  this.op6.curval < 1 ? (this.op6.speed = max(0.05, this.op6.curval)) :
  this.op6.speed = 1;
):(this.op6.speed = 1);

operator1.Level_shape == 0 ? this.op1.curval = 1;
operator2.Level_shape == 0 ? this.op2.curval = 1;
operator3.Level_shape == 0 ? this.op3.curval = 1;
operator4.Level_shape == 0 ? this.op4.curval = 1;
operator5.Level_shape == 0 ? this.op5.curval = 1;
operator6.Level_shape == 0 ? this.op6.curval = 1;


);
this.release_trigger && !pedal_on == 1 ? (
    this.VCA1.stage = 5; this.VCA1.follower = 0; this.VCA2.stage = 5; this.VCA2.follower = 0; this.VCA3.stage = 5; this.VCA3.follower = 0; 
    this.VCF1.stage = 5; this.VCF1.follower = 0; this.VCA4.stage = 5; this.VCA4.follower = 0; 
    this.op1vca.stage = 5;    
    this.op2vca.stage = 5;    
    this.op3vca.stage = 5;    
    this.op4vca.stage = 5;    
    this.op5vca.stage = 5;    
    this.op6vca.stage = 5;    
    this.release_trigger = 0;
);


this.VCA1.new_ADSR();
this.VCA2.new_ADSR();
this.VCA3.new_ADSR();
this.VCA4.new_ADSR();

VCF_ON ? this.VCF1.new_ADSR();
//&& this..VCF_ENV 

envelope_real_level[this.subosc_number-1] = this.VCA1.real_level;
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level;
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level;
envelope_real_level[36+this.subosc_number-1] = this.VCA4.real_level;

envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level;
//envelope_real_level[60+this.subosc_number-1] = this.VCF2.real_level;


this.all_env_stop = 0;


!synth_mode ? (
this.VCA1.envelope_stop ? (
envelope_real_level[this.subosc_number-1] = this.VCA1.real_level = this.VCA1.level = 0;this.VCA1.follower = 0;
):(synth.VCA1.is_output ? this.all_env_stop = 1);

this.VCA2.envelope_stop ? (
envelope_real_level[12+this.subosc_number-1] = this.VCA2.real_level = this.VCA2.level = 0;this.VCA2.follower = 0;
):(synth.VCA2.is_output ? this.all_env_stop = 1);

this.VCA3.envelope_stop ? (
envelope_real_level[24+this.subosc_number-1] = this.VCA3.real_level = this.VCA3.level = 0;this.VCA3.follower = 0;
):(synth.VCA3.is_output ? this.all_env_stop = 1);

this.VCA4.envelope_stop ? (
envelope_real_level[36+this.subosc_number-1] = this.VCA4.real_level = this.VCA4.level = 0;this.VCA4.follower = 0;
):(synth.VCA4.is_output ? this.all_env_stop = 1);

):( // Synth_mode

this.op1vca.opvca(1);
this.op2vca.opvca(2);
this.op3vca.opvca(3);
this.op4vca.opvca(4);
this.op5vca.opvca(5);
this.op6vca.opvca(6);

Operator1.is_output && this.op1vca.envelope_stop == 0 ? this.all_env_stop = 1;
Operator2.is_output && this.op2vca.envelope_stop == 0 ? this.all_env_stop = 1;
Operator3.is_output && this.op3vca.envelope_stop == 0 ? this.all_env_stop = 1;
Operator4.is_output && this.op4vca.envelope_stop == 0 ? this.all_env_stop = 1;
Operator5.is_output && this.op5vca.envelope_stop == 0 ? this.all_env_stop = 1;
Operator6.is_output && this.op6vca.envelope_stop == 0 ? this.all_env_stop = 1;

);//Synth_mode



this.VCF1.envelope_stop ? (
envelope_real_level[48+this.subosc_number-1] = this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
);


this.all_env_stop == 0 ? (
this.on = 0; this.note = this.note_running = 0;
this.VCF1.real_level = this.VCF1.level = 0;this.VCF1.follower = 0;
this.op1vca.level = 0;
this.op2vca.level = 0;
this.op3vca.level = 0;
this.op4vca.level = 0;
this.op5vca.level = 0;
this.op6vca.level = 0;
//
//
);


!Synth_mode ? (

this.subosc_number == 1 ? this.outputL = osc1.subosc_1.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 2 ? this.outputL = osc1.subosc_2.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 3 ? this.outputL = osc1.subosc_3.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 4 ? this.outputL = osc1.subosc_4.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 5 ? this.outputL = osc1.subosc_5.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 6 ? this.outputL = osc1.subosc_6.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 7 ? this.outputL = osc1.subosc_7.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 8 ? this.outputL = osc1.subosc_8.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 9 ? this.outputL = osc1.subosc_9.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 10 ? this.outputL = osc1.subosc_10.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 11 ? this.outputL = osc1.subosc_11.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 12 ? this.outputL = osc1.subosc_12.output * osc1.level.running * sin((1-(1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin((1-(1+osc2.pan.running)/2)*$pi/2);


this.subosc_number == 1 ? this.outputR = osc1.subosc_1.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_1.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 2 ? this.outputR = osc1.subosc_2.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_2.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 3 ? this.outputR = osc1.subosc_3.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_3.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 4 ? this.outputR = osc1.subosc_4.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_4.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 5 ? this.outputR = osc1.subosc_5.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_5.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 6 ? this.outputR = osc1.subosc_6.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_6.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 7 ? this.outputR = osc1.subosc_7.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_7.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 8 ? this.outputR = osc1.subosc_8.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_8.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 9 ? this.outputR = osc1.subosc_9.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_9.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 10 ? this.outputR = osc1.subosc_10.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_10.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 11 ? this.outputR = osc1.subosc_11.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_11.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2):
this.subosc_number == 12 ? this.outputR = osc1.subosc_12.output * osc1.level.running * sin(((1+osc1.pan.running)/2)*$pi/2) + osc2.subosc_12.output * osc2.level.running * sin(((1+osc2.pan.running)/2)*$pi/2);


this.subosc_number == 1 ? this.outputL += osc3.subosc_1.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_1.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 2 ? this.outputL += osc3.subosc_2.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_2.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 3 ? this.outputL += osc3.subosc_3.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_3.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 4 ? this.outputL += osc3.subosc_4.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_4.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 5 ? this.outputL += osc3.subosc_5.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_5.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 6 ? this.outputL += osc3.subosc_6.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_6.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 7 ? this.outputL += osc3.subosc_7.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_7.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 8 ? this.outputL += osc3.subosc_8.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_8.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 9 ? this.outputL += osc3.subosc_9.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_9.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 10 ? this.outputL += osc3.subosc_10.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_10.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 11 ? this.outputL += osc3.subosc_11.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_11.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 12 ? this.outputL += osc3.subosc_12.output * osc3.level.running * sin((1-(1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_12.output * osc4.level.running * sin((1-(1+osc4.pan.running)/2)*$pi/2);


this.subosc_number == 1 ? this.outputR += osc3.subosc_1.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_1.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 2 ? this.outputR += osc3.subosc_2.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_2.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 3 ? this.outputR += osc3.subosc_3.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_3.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 4 ? this.outputR += osc3.subosc_4.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_4.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 5 ? this.outputR += osc3.subosc_5.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_5.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 6 ? this.outputR += osc3.subosc_6.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_6.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 7 ? this.outputR += osc3.subosc_7.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_7.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 8 ? this.outputR += osc3.subosc_8.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_8.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 9 ? this.outputR += osc3.subosc_9.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_9.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 10 ? this.outputR += osc3.subosc_10.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_10.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 11 ? this.outputR += osc3.subosc_11.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_11.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2):
this.subosc_number == 12 ? this.outputR += osc3.subosc_12.output * osc3.level.running * sin(((1+osc3.pan.running)/2)*$pi/2) + osc4.subosc_12.output * osc4.level.running * sin(((1+osc4.pan.running)/2)*$pi/2);

):( // !Synth_mode



  ph1 = FM_Phase[6*(this.subosc_number-1)+0];
  ph2 = FM_Phase[6*(this.subosc_number-1)+1];
  ph3 = FM_Phase[6*(this.subosc_number-1)+2];
  ph4 = FM_Phase[6*(this.subosc_number-1)+3];
  ph5 = FM_Phase[6*(this.subosc_number-1)+4];
  ph6 = FM_Phase[6*(this.subosc_number-1)+5];
  s1 = FM_Out[6*(this.subosc_number-1)+0];
  s2 = FM_Out[6*(this.subosc_number-1)+1];
  s3 = FM_Out[6*(this.subosc_number-1)+2];
  s4 = FM_Out[6*(this.subosc_number-1)+3];
  s5 = FM_Out[6*(this.subosc_number-1)+4];
  s6 = FM_Out[6*(this.subosc_number-1)+5];

  operator1.am.modulate_parameter();
  operator2.am.modulate_parameter();
  operator3.am.modulate_parameter();
  operator4.am.modulate_parameter();
  operator5.am.modulate_parameter();
  operator6.am.modulate_parameter();
  FM.pitch.modulate_parameter();



  operator1.on ? (
  operator1.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator1.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq1 = freq * operator1.coarse * operator1.fine;
  ):(
    freq1 = operator1.fixcoarse * operator1.fixfine;
  );
  osc1.subosc_1.wave_sync(ph1 + s1 * fm11 + s2 * fm21 + s3 * fm31 + s4 * fm41 + s5 * fm51 + s6 * fm61);
  osc1.subosc_1.wave_setf(freq1);
  s1n = osc1.subosc_1.wave_spline3() * this.op1vca.level * (operator1.level + operator1.AM.modresult) * (0.5 + this.nvelocity*operator1.kvel) * this.op1.curval;// * env_o1[];
  ph1 += osc1.subosc_1.dt;
  ph1 > 1 ? ph1 -= 1;
  ):(s1n = 0);
  
  operator2.on ? (
  operator2.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator2.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq2 = freq * operator2.coarse * operator2.fine;
  ):(
    freq2 = operator2.fixcoarse * operator2.fixfine;
  );
  osc1.subosc_2.wave_sync(ph2 + s1 * fm12 + s2 * fm22 + s3 * fm32 + s4 * fm42 + s5 * fm52 + s6 * fm62);
  osc1.subosc_2.wave_setf(freq2);
  s2n = osc1.subosc_2.wave_spline3() * this.op2vca.level * (operator2.level + operator2.AM.modresult) * (0.5 + this.nvelocity*operator2.kvel) * this.op2.curval;// * env_o2[];
  ph2 += osc1.subosc_2.dt;
  ph2 > 1 ? ph2 -= 1;
  ):(s2n = 0);
   
  operator3.on ? (
  operator3.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator3.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq3 = freq * operator3.coarse * operator3.fine;
  ):(
    freq3 = operator3.fixcoarse * operator3.fixfine;
  );
  osc1.subosc_3.wave_sync(ph3 + s1 * fm13 + s2 * fm23 + s3 * fm33 + s4 * fm43 + s5 * fm53 + s6 * fm63);
  osc1.subosc_3.wave_setf(freq3);
  s3n = osc1.subosc_3.wave_spline3() * this.op3vca.level * (operator3.level + operator3.AM.modresult) * (0.5 + this.nvelocity*operator3.kvel) * this.op3.curval;// * env_o3[];
  ph3 += osc1.subosc_3.dt;
  ph3 > 1 ? ph3 -= 1;
  ):(s3n = 0);
  
  operator4.on ? (
  operator4.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator4.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq4 = freq * operator4.coarse * operator4.fine;
  ):(
    freq4 = operator4.fixcoarse * operator4.fixfine;
  );
  osc1.subosc_4.wave_sync(ph4 + s1 * fm14 + s2 * fm24 + s3 * fm34 + s4 * fm44 + s5 * fm54 + s6 * fm64);
  osc1.subosc_4.wave_setf(freq4);
  s4n = osc1.subosc_4.wave_spline3() * this.op4vca.level * (operator4.level + operator4.AM.modresult) * (0.5 + this.nvelocity*operator4.kvel) * this.op4.curval;// * env_o4[];
  ph4 += osc1.subosc_4.dt;
  ph4 > 1 ? ph4 -= 1;
  ):(s4n = 0);
  
  operator5.on ? (
  operator5.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator5.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq5 = freq * operator5.coarse * operator5.fine;
  ):(
    freq5 = operator5.fixcoarse * operator5.fixfine;
  );
  osc1.subosc_5.wave_sync(ph5 + s1 * fm15 + s2 * fm25 + s3 * fm35 + s4 * fm45  + s5 * fm55 + s6 * fm65);
  osc1.subosc_5.wave_setf(freq5);
  s5n = osc1.subosc_5.wave_spline3() * this.op5vca.level * (operator5.level + operator5.AM.modresult) * (0.5 + this.nvelocity*operator5.kvel) * this.op5.curval;// * env_o4[];
  ph5 += osc1.subosc_5.dt;
  ph5 > 1 ? ph5 -= 1;
  ):(s5n = 0);
  
  operator6.on ? (
  operator6.fixed ? (
    freq = main_tuning*(osc_a0^(this.note_running +FM.transpose - 48 + (operator6.detune/100) + FM.pitchamount *norm_pitchwheel +FM.pitch.modresult));//ptr[1];
    freq6 = freq * operator6.coarse * operator6.fine;
  ):(
    freq6 = operator6.fixcoarse * operator6.fixfine;
  );
  osc1.subosc_6.wave_sync(ph6 + s1 * fm16 + s2 * fm26 + s3 * fm36 + s4 * fm46  + s5 * fm56 + s6 * fm66);
  osc1.subosc_6.wave_setf(freq6);
  s6n = osc1.subosc_6.wave_spline3() * this.op6vca.level * (operator6.level + operator6.AM.modresult) * (0.5 + this.nvelocity*operator6.kvel) * this.op6.curval;// * env_o4[];
  ph6 += osc1.subosc_6.dt;
  ph6 > 1 ? ph6 -= 1;
  ):(s6n = 0);
  
  
  
  
  FM_Phase[6*(this.subosc_number-1)+0] = ph1;
  FM_Phase[6*(this.subosc_number-1)+1] = ph2;
  FM_Phase[6*(this.subosc_number-1)+2] = ph3;
  FM_Phase[6*(this.subosc_number-1)+3] = ph4;
  FM_Phase[6*(this.subosc_number-1)+4] = ph5;
  FM_Phase[6*(this.subosc_number-1)+5] = ph6;
  FM_Out[6*(this.subosc_number-1)+0] = s1n;
  FM_Out[6*(this.subosc_number-1)+1] = s2n;
  FM_Out[6*(this.subosc_number-1)+2] = s3n;
  FM_Out[6*(this.subosc_number-1)+3] = s4n;
  FM_Out[6*(this.subosc_number-1)+4] = s5n;
  FM_Out[6*(this.subosc_number-1)+5] = s6n;

  this.outputL = this.outputR = op1out*s1 + op2out*s2 + op3out*s3 + op4out*s4 + op5out*s5 + op6out*s6;

);


this.VCF.real_level = this.VCF1.real_level;

VCF_ON ? this.VCF();

VCF_ON == 1 ? (
      ssl = this.outputL*0.1;// * preamp;
      ssr = this.outputR*0.1;// * preamp;
      this.skf.processSample(filter_type);
      this.outputL = ssl;
      this.OutputR = ssr;
):(
this.outputL *= 0.1;
this.outputR *= 0.1;
);
  
);




function play_synth_generals () (


this.subosc_1.on ? this.subosc_1.play_synth_subosc();
this.subosc_2.on ? this.subosc_2.play_synth_subosc();
this.subosc_3.on ? this.subosc_3.play_synth_subosc();
this.subosc_4.on ? this.subosc_4.play_synth_subosc();
this.subosc_5.on ? this.subosc_5.play_synth_subosc();
this.subosc_6.on ? this.subosc_6.play_synth_subosc();
this.subosc_7.on ? this.subosc_7.play_synth_subosc();
this.subosc_8.on ? this.subosc_8.play_synth_subosc();
this.subosc_9.on ? this.subosc_9.play_synth_subosc();
this.subosc_10.on ? this.subosc_10.play_synth_subosc();
this.subosc_11.on ? this.subosc_11.play_synth_subosc();
this.subosc_12.on ? this.subosc_12.play_synth_subosc();


VCF_ON == 2 ? (
      ssl = this.subosc_1.outputL*0.1;// * preamp;
      ssr = this.subosc_1.outputR*0.1;// * preamp;
      this.subosc_1.skf.processSample(filter_type);
      this.subosc_1.outputL = ssl;
      this.subosc_1.outputR = ssr;
);

this.outputL =
this.subosc_1.outputL +
this.subosc_2.outputL +
this.subosc_3.outputL +
this.subosc_4.outputL +
this.subosc_5.outputL +
this.subosc_6.outputL +
this.subosc_7.outputL +
this.subosc_8.outputL +
this.subosc_9.outputL +
this.subosc_10.outputL +
this.subosc_11.outputL +
this.subosc_12.outputL;

this.outputR =
this.subosc_1.outputR +
this.subosc_2.outputR +
this.subosc_3.outputR +
this.subosc_4.outputR +
this.subosc_5.outputR +
this.subosc_6.outputR +
this.subosc_7.outputR +
this.subosc_8.outputR +
this.subosc_9.outputR +
this.subosc_10.outputR +
this.subosc_11.outputR +
this.subosc_12.outputR;

);





/*
Opp layout 100 Slots

  0 on
  1 Note / Fixed
  2 Coarse
  3 Fine
  4 Coarse Fix
  5 Fine
  6 detune
  7 Level
  8 Breakpoint
9 Lowcurve
10 Highcurve
11 Lowscale
12 Highscale
13 Key Velocity
  14 MOD AM Source
  15 MOD AM Amount
  16 AM Wheel / Aftertouch
  17 Env 1 Level
  18 Env 1 Time
  19 Env 2 Level
  20 Env 2 Time
  21 Env 3 Level
  22 Env 3 Time
  23 Env 4 Time
  24 Env Scaling
  25 + / +-
  26 EnvShape
  27 Level Shape
  
  this.mod = source
  this.mod.amt = amount
  this.mod.wheel = bool
  this.mod.centered = bool
  -> this.Modresult 0-1
  
*/
function opp_config(array_position_, default_, min_, max_, integer_) 
instance (array_position, default, minVal, maxVal, integer) (
array_position = array_position_; default = default_; minVal = min_; maxVal = max_; integer = integer_;
this.array_position[0] = default;
);


function op_parameters_update () (
this.on = this.opp[0];
this.coarse = this.coarse.array_position[0]|0; this.coarse == 0 ? this.coarse = 0.5;
this.fine =   ((100*this.fine.array_position[0])|0)/100;

this.AM.mod = this.opp[14];
this.AM.mod.wheel = this.opp[16];
this.AM.mod.amt = explog(this.opp[15]/100,3);
this.AM.mod.centered = this.opp[25];

this.kvel =   this.kvel.array_position[0];
this.breakpoint =   this.breakpoint.array_position[0]|0;
this.lowscale = this.Ldep.array_position[0];
this.ldep = this.Ldep.array_position[0]/100;
this.highscale = this.Rdep.array_position[0];
this.Rdep = this.Rdep.array_position[0]/100;
this.Lcur = this.lowcurve = this.Lcur.array_position[0];
this.Rcur = this.highcurve = this.Rcur.array_position[0];
this.fixcoarse = 10^(this.fixcoarse.array_position[0]|0);
this.fixfine = ((100*this.fixfine.array_position[0])|0)/100;

this.detune = ((100*this.detune.array_position[0])|0)/100;

this.time1 = this.time1.array_position[0]|0;
this.time2 = this.time2.array_position[0]|0;
this.time3 = this.time3.array_position[0]|0;
this.time4 = this.time4.array_position[0]|0;
this.target1 = this.target1.array_position[0]|0;
this.target2 = this.target2.array_position[0]|0;
this.target3 = this.target3.array_position[0]|0;

this.target1e = explog(0.01*this.target1, 3);
this.target2e = explog(0.01*this.target2, 3);
this.target3e = explog(0.01*this.target3, 3);
this.envscale = this.envscale.array_position[0] <= 1 ? this.envscale.array_position[0] : (this.envscale.array_position[0]-1)*10;
this.EG1 = this.target1e / (this.time1 * this.envscale * (srate/1000));
this.EG2 = -(this.target1e - this.target2e) / (this.time2 * this.envscale * (srate/1000));
this.EG3 = -(this.target2e - this.target3e) / (this.time3 * this.envscale * (srate/1000));
this.EG4 = -1 / (this.time4 * this.envscale * (srate/1000));

this.EG1_s = (this.time1 * this.envscale * (srate/1000));
this.EG2_s = (this.time2 * this.envscale * (srate/1000));
this.EG3_s = (this.time3 * this.envscale * (srate/1000));
this.EG4_s = (this.time4 * this.envscale * (srate/1000));
this.Env_Shape = (this.Env_shape.array_position[0]|0);
this.Level_Shape = (this.Level_shape.array_position[0]|0);

this.level = explog(slider(operator_startslider + (this-1))/100  ,  3)*1.7;

this.fixed = this.opp[1];

   operator1.on && !(fm12 + fm13 + fm14 + fm15 + fm16) ? operator1.is_output = 1 : operator1.is_output = 0;
   operator2.on && !(fm21 + fm23 + fm24 + fm25 + fm26) ? operator2.is_output = 1 : operator2.is_output = 0;
   operator3.on && !(fm31 + fm32 + fm34 + fm35 + fm36) ? operator3.is_output = 1 : operator3.is_output = 0;
   operator4.on && !(fm41 + fm42 + fm43 + fm45 + fm46) ? operator4.is_output = 1 : operator4.is_output = 0;
   operator5.on && !(fm51 + fm52 + fm53 + fm54 + fm56) ? operator5.is_output = 1 : operator5.is_output = 0;
   operator6.on && !(fm61 + fm62 + fm63 + fm64 + fm65) ? operator6.is_output = 1 : operator6.is_output = 0;
   
   
opcaller = 0;
);


function op_setup () (
this.coarse.opp_config    (this.opp + 2,  1,  0,  32,  1);
this.fine.opp_config      (this.opp + 3,  1,  0,   2,  0);
this.fixcoarse.opp_config (this.opp + 4,  1,  0,   3,  1);
this.fixfine.opp_config   (this.opp + 5,  1,  0,  10,  0);
this.detune.opp_config    (this.opp + 6,  0, -7,   7,  0);
this.time1.opp_config     (this.opp + 18, 1,  0,1000,  1);
this.time2.opp_config     (this.opp + 20, 0,  0,1000,  1);
this.time3.opp_config     (this.opp + 22, 0,  0,1000,  1);
this.time4.opp_config     (this.opp + 23, 1,  0,1000,  1);
this.target1.opp_config   (this.opp + 17, 100,  0, 100,  1);
this.target2.opp_config   (this.opp + 19, 100,  0, 100,  1);
this.target3.opp_config   (this.opp + 21, 100,  0, 100,  1);
this.envscale.opp_config  (this.opp + 24,   1,  0.01,   2,  1);
this.kvel.opp_config      (this.opp + 13,   0,  0,   100,  1);
this.Lcur.opp_config      (this.opp + 9,    0,  0,   1,  1);
this.Ldep.opp_config      (this.opp + 11,   0, -100,   100,  1);
this.Rcur.opp_config      (this.opp + 10,   0,  0,   1,  1);
this.Rdep.opp_config      (this.opp + 12,   0, -100,   100,  1);
this.Breakpoint.opp_config(this.opp + 8,   63, 27,   111,  1);
this.Env_Shape.opp_config (this.opp + 26,     0,  0,   1,  1);
this.Level_Shape.opp_config(this.opp + 27,  1,  0,   1,  1);
this.AM_Mod_amt.opp_config(this.opp + 15,   0, 0,   100,  1);

//slider(operator_startslider + (this-1)) = 100;
this.opp[0] = 1; // On
this.opp[1] = 1; // Ratio
/*
this.coarse.array_position[0] = ;
this.fine.array_position[0] = ;
this.fixcoarse.array_position[0] = ;
this.fixfine.array_position[0] = ;
this.detune.array_position[0] = ;
this.time1.array_position[0] = ;
this.time2.array_position[0] = ;
this.time3.array_position[0] = ;
this.time4.array_position[0] = ;
this.target1.array_position[0] = ;
this.target2.array_position[0] = ;
this.target3.array_position[0] = ;
this.envscale.array_position[0] = ;
this.kvel.array_position[0] = ;
this.Lcur.array_position[0] = ;
this.Ldep.array_position[0] = ;
this.RCur.array_position[0] = ;
this.Rdep.array_position[0] = ;
this.Breakpoint.array_position[0] = ;
*/
);

///// inititalIZE

mp_old = memory_point;
memory_point = 0;

       chorusL.chorus(2, .2, 1); //CHORUS NEU
       chorusR.chorus(2, .2, 1);
       chorusL.lfo1.sine(.254 * (rand(.1) + 0.95), 0);
       chorusL.lfo2.sine(.465 * (rand(.1) + 0.95), 0);
       chorusL.lfo3.sine(.657 * (rand(.1) + 0.95), 0);
       chorusL.lfo4.sine(.879 * (rand(.1) + 0.95), 0);
       chorusL.lfo5.sine(1.23 * (rand(.1) + 0.95), 0);
       chorusL.lfo6.sine(1.342 * (rand(.1) + 0.95), 0);
       chorusL.lfo7.sine(1.654 * (rand(.1) + 0.95), 0);
       chorusL.lfo8.sine(1.879 * (rand(.1) + 0.95), 0);
       
       chorusR.lfo1.sine(.254 * (rand(.1) + 0.95), 0);
       chorusR.lfo2.sine(.465 * (rand(.1) + 0.95), 0);
       chorusR.lfo3.sine(.657 * (rand(.1) + 0.95), 0);
       chorusR.lfo4.sine(.879 * (rand(.1) + 0.95), 0);
       chorusR.lfo5.sine(1.23 * (rand(.1) + 0.95), 0);
       chorusR.lfo6.sine(1.342 * (rand(.1) + 0.95), 0);
       chorusR.lfo7.sine(1.654 * (rand(.1) + 0.95), 0);
       chorusR.lfo8.sine(1.879 * (rand(.1) + 0.95), 0);
       chorus_Stereo = 1; //CHORUS NEU
       
       chorus_depth = .4;
       chorusL.chorus_set_depth(chorus_depth);
       chorusR.chorus_set_depth(chorus_depth);
       
       chorus_Mix = 0.24;
       chorusL.chorus_set_bal(chorus_Mix);
       chorusR.chorus_set_bal(chorus_Mix);
       
       chorus_feed = 0.2;
       chorusL.chorus_set_feed(chorus_feed);
       chorusR.chorus_set_feed(chorus_feed);   
       
    memory_point = chorusr.lfo8.buf.buf + chorus.lfo8.buf.size; // ChorusR.lfo8.size+ChorusR.d1.buf.buf;
    memory_point += 2048;
    
    
synth.make_filters();
SMOOTHING_TIME_MS = .5;

itm1=itm2=otm1=otm2=0;

ext_noinit = 1;
gfx_ext_retina = 1;
osc_a0 = (2)^(1/12);
mouse_sensivity();

//memory_point = 0;
envelope_real_level = memory_point;
memory_point += 96;
manipulation_buffer = memory_point;
memory_point += 2048;
osc1.make_osc();
osc1.osc_number = 1;

osc2.make_osc();
osc2.osc_number = 2;

osc3.make_osc();
osc3.osc_number = 3;


osc4.make_osc();
osc4.osc_number = 4;

synth.subosc_1.subosc_number = 1;
synth.subosc_2.subosc_number = 2;
synth.subosc_3.subosc_number = 3;
synth.subosc_4.subosc_number = 4;
synth.subosc_5.subosc_number = 5;
synth.subosc_6.subosc_number = 6;
synth.subosc_7.subosc_number = 7;
synth.subosc_8.subosc_number = 8;
synth.subosc_9.subosc_number = 9;
synth.subosc_10.subosc_number = 10;
synth.subosc_11.subosc_number = 11;
synth.subosc_12.subosc_number = 12;

FM_Out = 999400;
FM_Phase = 999500;

slider_old = 999600; 
CVSlider_old = 999900;
CVSlider = 999950;

Env1.startslider = 150;
Env2.startslider = 155;
Env3.startslider = 160;
Env6.startslider = 165;
Env5.startslider = 170;
synth.filter.startslider = 125;
osc1.startslider = 4;
osc2.startslider = 34;
osc3.startslider = 64;
osc4.startslider = 94;
LFO_1.startslider = 140;

slew_rate = 1 / (1 * srate * 0.001);


LFO_1.free_run = 0;
LFO_2.free_run = 0;
LFO_3.free_run = 0;
LFO_4.free_run = 0;

    //SOFTCLIPPER
    clipper_a = 1.017;
    clipper_b = -0.025;
    amp_dB = 8.6562;
    threshold_db = -8;
    
    disL.disto((slider125-0.5)/5, 20000);
    disR.disto((slider125-0.5)/5, 20000);


HPF.band_init();


operator1.opp = 1015000;
operator2.opp = 1015100;
operator3.opp = 1015200;
operator4.opp = 1015300;
operator5.opp = 1015400;
operator6.opp = 1015500;
FM.opp = 1015600;
operator1 = 1;
operator2 = 2;
operator3 = 3;
operator4 = 4;
operator5 = 5;
operator6 = 6;
operator_startslider = 179;

operator1.op_setup();
operator2.op_setup();
operator3.op_setup();
operator4.op_setup();
operator5.op_setup();
operator6.op_setup();
operator1.op_parameters_update();
operator2.op_parameters_update();
operator3.op_parameters_update();
operator4.op_parameters_update();
operator5.op_parameters_update();
operator6.op_parameters_update();

FM.pitch.mod.opp_config    (FM.opp + 0,  0,  -36,  36,  0);
FM.pitch.mod.amt.opp_config    (FM.opp + 1,  0,  -36,  36,  0);
FM.pitch.mod.centered.opp_config    (FM.opp + 2,  0,  -36,  36,  0);
FM.pitch.mod.wheel.opp_config    (FM.opp + 3,  0,  -36,  36,  0);

gax = 1005700;
gay = gax + 33;
gaw = gay + 33;

        gah = 200;
        gax[1] = 40;  gay[1] = 10;  gaw[1] = 140;
        gax[2] = 195;  gay[2] = 10;  gaw[2] = 140;
        gax[3] = 365;  gay[3] = 10;  gaw[3] = 140;
        gax[4] = 520;  gay[4] = 10;  gaw[4] = 140;
        gax[5] = 683;  gay[5] = 10;  gaw[5] = 205;
        gax[6] = 900;  gay[6] = 10;  gaw[6] = 205;
        gax[7] = 1120;  gay[7] = 10;  gaw[7] = 205;
        gax[8] = 1338;  gay[8] = 10;  gaw[8] = 205;
        gax[9] = 32;  gay[9] = 242;  gaw[9] = 202;
        gax[10] = 257; gay[10] = 242; gaw[10] = 202;
        gax[11] = 475; gay[11] = 242; gaw[11] = 194;
        gax[12] = 685; gay[12] = 242; gaw[12] = 274;
        gax[13] = 975; gay[13] = 242; gaw[13] = 267;
        gax[14] = 1265; gay[14] = 242; gaw[14] = 140;
        gax[15] = 1429; gay[15] = 242; gaw[15] = 140;
        gax[16] = 10; gay[16] = 498; gaw[16] = 203;
        gax[17] = 227; gay[17] = 498; gaw[17] = 197;
        gax[18] = 437; gay[18] = 498; gaw[18] = 197;
        gax[19] = 645; gay[19] = 498; gaw[19] = 197;
        gax[20] = 853; gay[20] = 498; gaw[20] = 197;
        gax[21] = 1063; gay[21] = 498; gaw[21] = 258;
        gax[22] = 1335; gay[22] = 498; gaw[22] = 258;
        gax[23] = 20; gay[23] = 688; gaw[23] = 258;
        gax[24] = 292; gay[24] = 688; gaw[24] = 320;
        gax[25] = 630; gay[25] = 688; gaw[25] = 317;
        gax[26] = 965; gay[26] = 688; gaw[26] = 266;
        gax[27] = 1245; gay[27] = 688; gaw[27] = 259;
        gax[28] = 30; gay[28] = 898; gaw[28] = 194;
        gax[29] = 240; gay[29] = 898; gaw[29] = 265;
        gax[30] = 520; gay[30] = 898; gaw[30] = 258;
        gax[31] = 793; gay[31] = 898; gaw[31] = 332;
        gax[32] = 1130; gay[32] = 898; gaw[32] = 392;
//////////// //





function LFO_sliders () (
   this.form = slider(this.startslider);
   this.syncslider_old != slider(this.startslider+2) ? this.sync_on = 1;
   this.tempo_hz != 0.3+explog(slider(this.startslider+4),3.45)*29.7 ? (this.sync_on = 0; slider(this.startslider+2) = 9; );
   this.syncslider_old = slider(this.startslider+2);
   slider(this.startslider+2) == 0 ? this.time_sync = 0.125;
   slider(this.startslider+2) == 1 ? this.time_sync = 0.25;
   slider(this.startslider+2) == 2 ? this.time_sync = 0.5;
   slider(this.startslider+2) == 3 ? this.time_sync = 1;
   slider(this.startslider+2) == 4 ? this.time_sync = 2;
   slider(this.startslider+2) == 5 ? this.time_sync = 4;
   slider(this.startslider+2) == 6 ? this.time_sync = 8;
   slider(this.startslider+2) == 7 ? this.time_sync = 16;
   slider(this.startslider+2) == 8 ? this.time_sync = 32;
   slider(this.startslider+2) == 9 ? this.sync_on = 0;
   this.time_sync_2 = slider(this.startslider+3);
   this.tempo_hz = 0.3+explog(slider(this.startslider+4),3.45)*29.7;
   slider(this.startslider+5) == 0 ? this.multiplier = 1 : this.multiplier = 10;
   this.phase_shift = slider(this.startslider+1);
   this.sync_on == 0 ? this.time_sync = 0;
);

function killall_osc () (
Synth.subosc_1.note_distance = 0;
Synth.subosc_1.note_running = 0;
Synth.subosc_1.note_target = 0;
synth.mono_note_1_old = 0;
synth.mono_note_last = 0;
synth.mono_note_last_old = 0;
synth.mono_note_1 = synth.mono_note_2 = synth.mono_note_3 = synth.mono_note_4 = synth.mono_note_5 = synth.mono_note_6 = 
synth.mono_note_7 = synth.mono_note_8 = synth.mono_note_9 = synth.mono_note_10 = synth.mono_note_11 = synth.mono_note_12 = 0;
synth.subosc_1.note = 0;
synth.subosc_2.note = 0;
synth.subosc_3.note = 0;
synth.subosc_4.note = 0;
synth.subosc_5.note = 0;
synth.subosc_6.note = 0;
synth.subosc_7.note = 0;
synth.subosc_8.note = 0;
synth.subosc_9.note = 0;
synth.subosc_10.note = 0;
synth.subosc_11.note = 0;
synth.subosc_12.note = 0;
synth.subosc_1.note_running = 0;
synth.subosc_2.note_running = 0;
synth.subosc_3.note_running = 0;
synth.subosc_4.note_running = 0;
synth.subosc_5.note_running = 0;
synth.subosc_6.note_running = 0;
synth.subosc_7.note_running = 0;
synth.subosc_8.note_running = 0;
synth.subosc_9.note_running = 0;
synth.subosc_10.note_running = 0;
synth.subosc_11.note_running = 0;
synth.subosc_12.note_running = 0;
synth.subosc_1.on = 0;
synth.subosc_2.on = 0;
synth.subosc_3.on = 0;
synth.subosc_4.on = 0;
synth.subosc_5.on = 0;
synth.subosc_6.on = 0;
synth.subosc_7.on = 0;
synth.subosc_8.on = 0;
synth.subosc_9.on = 0;
synth.subosc_10.on = 0;
synth.subosc_11.on = 0;
synth.subosc_12.on = 0;
osc1.subosc_1.note = 0;
osc1.subosc_2.note = 0;
osc1.subosc_3.note = 0;
osc1.subosc_4.note = 0;
osc1.subosc_5.note = 0;
osc1.subosc_6.note = 0;
osc1.subosc_7.note = 0;
osc1.subosc_8.note = 0;
osc1.subosc_9.note = 0;
osc1.subosc_10.note = 0;
osc1.subosc_11.note = 0;
osc1.subosc_12.note = 0;
osc1.subosc_1.note_running = 0;
osc1.subosc_2.note_running = 0;
osc1.subosc_3.note_running = 0;
osc1.subosc_4.note_running = 0;
osc1.subosc_5.note_running = 0;
osc1.subosc_6.note_running = 0;
osc1.subosc_7.note_running = 0;
osc1.subosc_8.note_running = 0;
osc1.subosc_9.note_running = 0;
osc1.subosc_10.note_running = 0;
osc1.subosc_11.note_running = 0;
osc1.subosc_12.note_running = 0;
osc1.subosc_1.on = 0;
osc1.subosc_2.on = 0;
osc1.subosc_3.on = 0;
osc1.subosc_4.on = 0;
osc1.subosc_5.on = 0;
osc1.subosc_6.on = 0;
osc1.subosc_7.on = 0;
osc1.subosc_8.on = 0;
osc1.subosc_9.on = 0;
osc1.subosc_10.on = 0;
osc1.subosc_11.on = 0;
osc1.subosc_12.on = 0;
osc2.subosc_1.note = 0;
osc2.subosc_2.note = 0;
osc2.subosc_3.note = 0;
osc2.subosc_4.note = 0;
osc2.subosc_5.note = 0;
osc2.subosc_6.note = 0;
osc2.subosc_7.note = 0;
osc2.subosc_8.note = 0;
osc2.subosc_9.note = 0;
osc2.subosc_10.note = 0;
osc2.subosc_11.note = 0;
osc2.subosc_12.note = 0;
osc2.subosc_1.note_running = 0;
osc2.subosc_2.note_running = 0;
osc2.subosc_3.note_running = 0;
osc2.subosc_4.note_running = 0;
osc2.subosc_5.note_running = 0;
osc2.subosc_6.note_running = 0;
osc2.subosc_7.note_running = 0;
osc2.subosc_8.note_running = 0;
osc2.subosc_9.note_running = 0;
osc2.subosc_10.note_running = 0;
osc2.subosc_11.note_running = 0;
osc2.subosc_12.note_running = 0;
osc2.subosc_1.on = 0;
osc2.subosc_2.on = 0;
osc2.subosc_3.on = 0;
osc2.subosc_4.on = 0;
osc2.subosc_5.on = 0;
osc2.subosc_6.on = 0;
osc2.subosc_7.on = 0;
osc2.subosc_8.on = 0;
osc2.subosc_9.on = 0;
osc2.subosc_10.on = 0;
osc2.subosc_11.on = 0;
osc2.subosc_12.on = 0;
osc3.subosc_1.note = 0;
osc3.subosc_2.note = 0;
osc3.subosc_3.note = 0;
osc3.subosc_4.note = 0;
osc3.subosc_5.note = 0;
osc3.subosc_6.note = 0;
osc3.subosc_7.note = 0;
osc3.subosc_8.note = 0;
osc3.subosc_9.note = 0;
osc3.subosc_10.note = 0;
osc3.subosc_11.note = 0;
osc3.subosc_12.note = 0;
osc3.subosc_1.note_running = 0;
osc3.subosc_2.note_running = 0;
osc3.subosc_3.note_running = 0;
osc3.subosc_4.note_running = 0;
osc3.subosc_5.note_running = 0;
osc3.subosc_6.note_running = 0;
osc3.subosc_7.note_running = 0;
osc3.subosc_8.note_running = 0;
osc3.subosc_9.note_running = 0;
osc3.subosc_10.note_running = 0;
osc3.subosc_11.note_running = 0;
osc3.subosc_12.note_running = 0;
osc3.subosc_1.on = 0;
osc3.subosc_2.on = 0;
osc3.subosc_3.on = 0;
osc3.subosc_4.on = 0;
osc3.subosc_5.on = 0;
osc3.subosc_6.on = 0;
osc3.subosc_7.on = 0;
osc3.subosc_8.on = 0;
osc3.subosc_9.on = 0;
osc3.subosc_10.on = 0;
osc3.subosc_11.on = 0;
osc3.subosc_12.on = 0;
osc4.subosc_1.note = 0;
osc4.subosc_2.note = 0;
osc4.subosc_3.note = 0;
osc4.subosc_4.note = 0;
osc4.subosc_5.note = 0;
osc4.subosc_6.note = 0;
osc4.subosc_7.note = 0;
osc4.subosc_8.note = 0;
osc4.subosc_9.note = 0;
osc4.subosc_10.note = 0;
osc4.subosc_11.note = 0;
osc4.subosc_12.note = 0;
osc4.subosc_1.note_running = 0;
osc4.subosc_2.note_running = 0;
osc4.subosc_3.note_running = 0;
osc4.subosc_4.note_running = 0;
osc4.subosc_5.note_running = 0;
osc4.subosc_6.note_running = 0;
osc4.subosc_7.note_running = 0;
osc4.subosc_8.note_running = 0;
osc4.subosc_9.note_running = 0;
osc4.subosc_10.note_running = 0;
osc4.subosc_11.note_running = 0;
osc4.subosc_12.note_running = 0;
osc4.subosc_1.on = 0;
osc4.subosc_2.on = 0;
osc4.subosc_3.on = 0;
osc4.subosc_4.on = 0;
osc4.subosc_5.on = 0;
osc4.subosc_6.on = 0;
osc4.subosc_7.on = 0;
osc4.subosc_8.on = 0;
osc4.subosc_9.on = 0;
osc4.subosc_10.on = 0;
osc4.subosc_11.on = 0;
osc4.subosc_12.on = 0;
);


function parameters_update() (


parameters_update_on = 1;

synth_mode = slider178;
//synth_mode ? osc1.waveform = 2; 
fmalgo = slider186;
set_algo();
feedback = slider185/100;
reset_env = slider187;

synth_mode ? (
FM.pitch.mod = FM.opp[0];
FM.pitch.mod.amt = ((100*FM.opp[1])|0)/100;
FM.pitch.mod.centered = FM.opp[2];
FM.pitch.mod.wheel = FM.opp[3];

FM.pitchamount = slider(operator_startslider + 9)|0;
FM.Transpose =   slider(operator_startslider + 10)|0;

operator1.op_parameters_update();
operator2.op_parameters_update();
operator3.op_parameters_update();
operator4.op_parameters_update();
operator5.op_parameters_update();
operator6.op_parameters_update();

);


fmalgo == 1 ? fm66 = feedback :
fmalgo == 2 ? fm22 = feedback :
fmalgo == 3 ? fm66 = feedback :
fmalgo == 4 ? fm46 = feedback :
fmalgo == 5 ? fm66 = feedback :
fmalgo == 6 ? fm66 = feedback :
fmalgo == 7 ? fm66 = feedback :
fmalgo == 8 ? fm44 = feedback :
fmalgo == 9 ? fm22 = feedback :
fmalgo == 10 ? fm33 = feedback :
fmalgo == 11 ? fm66 = feedback :
fmalgo == 12 ? fm22 = feedback :
fmalgo == 13 ? fm66 = feedback :
fmalgo == 14 ? fm66 = feedback :
fmalgo == 15 ? fm22 = feedback :
fmalgo == 16 ? fm66 = feedback :
fmalgo == 17 ? fm22 = feedback :
fmalgo == 18 ? fm33 = feedback :
fmalgo == 19 ? fm66 = feedback :
fmalgo == 20 ? fm33 = feedback :
fmalgo == 21 ? fm33 = feedback :
fmalgo == 22 ? fm66 = feedback :
fmalgo == 23 ? fm66 = feedback :
fmalgo == 24 ? fm66 = feedback :
fmalgo == 25 ? fm66 = feedback :
fmalgo == 26 ? fm66 = feedback :
fmalgo == 27 ? fm33 = feedback :
fmalgo == 28 ? fm55 = feedback :
fmalgo == 29 ? fm66 = feedback :
fmalgo == 30 ? fm55 = feedback :
fmalgo == 31 ? fm66 = feedback :
fmalgo == 32 ? fm66 = feedback ;




master_volume = slider1;
dist_boost = db2ratio(slider177+8);

note_glide = explog(slider3,4)*5 *1000;;//slider2; //Global glide in ms
main_tuning = 110;//slider1 / 2;
MonoOrPoly = slider2; // 1 = Mono, 0 = Poly
monoOrPoly_old != MonoOrPoly ? (
killall_osc();
monoOrPoly_old = MonoOrPoly;
);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////// SKF      //////////////////
oversampling = _oversampling + 1;
sampling_ratio = 44100 / srate;
sampling_factor = oversampling / sampling_ratio;
isampling_factor = 1 / sampling_factor;
israte = 1.0 / srate;
israte_radian = 2.0*$pi*israte;
current_safety_moog = (1.0 - log(safety_limit_moog * oversampling) / log(20/22050));

// change morph based on filter_mode
lfilter_mode != filter_mode ? (
  morph = filter_mode / 4;
  lmorph = morph;
  lfilter_mode = filter_mode;
);

// change filter_mode based on morph
lmorph != morph ? (
  filter_mode = floor(morph * 4);
  lfilter_mode = filter_mode;
  lmorph = morph;
);








osc1.waveform = slider(Osc1.startslider + 1);
osc1.startslider = 4;
slider_loop = osc1.startslider;
slider_caught = 0;
loop(10,
slider_old[slider_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slider5_hit = 10;//slider_old[1];

slider_caught ? (
osc1.level = slider(osc1.startslider)/5;
osc1.pan = osc1.pan.running = slider(osc1.startslider + 2)/100;
osc1.transpose = osc1.transpose_running = slider(osc1.startslider + 3);
osc1.finetune = osc1.finetune_running = slider(osc1.startslider + 4);
osc1.pitchamount = slider(osc1.startslider + 5);
osc1.VCA_ENV = slider(Osc1.startslider + 6)+1;
osc1.on = slider(Osc1.startslider + 7);
osc1.pwm = 2*slider(Osc1.startslider + 8)/10;
osc1.Sync_to = slider(Osc1.startslider + 9);
);

slider_loop = osc1.startslider+11;
slider_caught = 0;
loop(20,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
osc1.level.mod = slider(osc1.startslider+11);
osc1.level.mod.amt = slider(osc1.startslider+10)/5;
osc1.level.mod.centered = slider(osc1.startslider+12);
osc1.pan.mod = slider(osc1.startslider+14);
osc1.pan.mod.amt = slider(osc1.startslider+13)/100;
osc1.pan.mod.centered = slider(osc1.startslider+15);
osc1.transpose.mod = slider(osc1.startslider+17);
osc1.transpose.mod.amt = slider(osc1.startslider+16);
osc1.transpose.mod.centered = slider(osc1.startslider+18);
osc1.finetune.mod = slider(osc1.startslider+20);
osc1.finetune.mod.amt = slider(osc1.startslider+19);
osc1.finetune.mod.centered = slider(osc1.startslider+21);
osc1.pwm.mod = slider(osc1.startslider+23);
osc1.pwm.mod.amt = slider(osc1.startslider+22)/5;
osc1.pwm.mod.centered = slider(osc1.startslider+24);
osc1.level.mod.wheel = slider(osc1.startslider+25);
osc1.pan.mod.wheel = slider(osc1.startslider+26);
osc1.transpose.mod.wheel = slider(osc1.startslider+27);
osc1.finetune.mod.wheel = slider(osc1.startslider+28);
osc1.pwm.mod.wheel = slider(osc1.startslider+29);
);


osc1.waveform_old != osc1.waveform || synth_mode != synth_mode_old ? (
synth_mode_old = synth_mode;
synth_mode ? osc1.waveform = 2;
osc1.GFXosc.render_waveform();
osc1.subosc_1.render_waveform();//want_render_waveform = 1;
osc1.subosc_2.render_waveform();//want_render_waveform = 1;
osc1.subosc_3.render_waveform();//want_render_waveform = 1;
osc1.subosc_4.render_waveform();//want_render_waveform = 1;
osc1.subosc_5.render_waveform();//want_render_waveform = 1;
osc1.subosc_6.render_waveform();//want_render_waveform = 1;
osc1.subosc_7.render_waveform();//want_render_waveform = 1;
osc1.subosc_8.render_waveform();//want_render_waveform = 1;
osc1.subosc_9.render_waveform();//want_render_waveform = 1;
osc1.subosc_10.render_waveform();//want_render_waveform = 1;
osc1.subosc_11.render_waveform();//want_render_waveform = 1;
osc1.subosc_12.render_waveform();//want_render_waveform = 1;
!synth_mode ? osc1.waveform_old = osc1.waveform;
);

osc2.startslider = 34;
slider_loop = osc2.startslider;
slider_caught = 0;
loop(10,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);

slider_caught ? (
osc2.level = slider(osc2.startslider)/5;
osc2.waveform = slider(osc2.startslider + 1);
osc2.pan = osc2.pan.running = slider(osc2.startslider + 2)/100;
osc2.transpose = osc2.transpose_running = slider(osc2.startslider + 3);
osc2.finetune = osc2.finetune_running = slider(osc2.startslider + 4);
osc2.pitchamount = slider(osc2.startslider + 5);
osc2.VCA_ENV = slider(osc2.startslider + 6)+1;
osc2.on = slider(osc2.startslider + 7);
osc2.pwm = 2*slider(osc2.startslider + 8)/10;
osc2.Sync_to = slider(osc2.startslider + 9);
);
slider_loop = osc2.startslider+11;
slider_caught = 0;
loop(20,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
osc2.level.mod = slider(osc2.startslider+11);
osc2.level.mod.amt = slider(osc2.startslider+10)/5;
osc2.level.mod.centered = slider(osc2.startslider+12);
osc2.pan.mod = slider(osc2.startslider+14);
osc2.pan.mod.amt = slider(osc2.startslider+13)/100;
osc2.pan.mod.centered = slider(osc2.startslider+15);
osc2.transpose.mod = slider(osc2.startslider+17);
osc2.transpose.mod.amt = slider(osc2.startslider+16);
osc2.transpose.mod.centered = slider(osc2.startslider+18);
osc2.finetune.mod = slider(osc2.startslider+20);
osc2.finetune.mod.amt = slider(osc2.startslider+19);
osc2.finetune.mod.centered = slider(osc2.startslider+21);
osc2.pwm.mod = slider(osc2.startslider+23);
osc2.pwm.mod.amt = slider(osc2.startslider+22)/5;
osc2.pwm.mod.centered = slider(osc2.startslider+24);
osc2.level.mod.wheel = slider(osc2.startslider+25);
osc2.pan.mod.wheel = slider(osc2.startslider+26);
osc2.transpose.mod.wheel = slider(osc2.startslider+27);
osc2.finetune.mod.wheel = slider(osc2.startslider+28);
osc2.pwm.mod.wheel = slider(osc2.startslider+29);
);

osc2.waveform_old != osc2.waveform ? (
osc2.GFXosc.render_waveform();
osc2.subosc_1.render_waveform();//want_render_waveform = 1;
osc2.subosc_2.render_waveform();//want_render_waveform = 1;
osc2.subosc_3.render_waveform();//want_render_waveform = 1;
osc2.subosc_4.render_waveform();//want_render_waveform = 1;
osc2.subosc_5.render_waveform();//want_render_waveform = 1;
osc2.subosc_6.render_waveform();//want_render_waveform = 1;
osc2.subosc_7.render_waveform();//want_render_waveform = 1;
osc2.subosc_8.render_waveform();//want_render_waveform = 1;
osc2.subosc_9.render_waveform();//want_render_waveform = 1;
osc2.subosc_10.render_waveform();//want_render_waveform = 1;
osc2.subosc_11.render_waveform();//want_render_waveform = 1;
osc2.subosc_12.render_waveform();//want_render_waveform = 1;
);
osc2.waveform_old = osc2.waveform;


osc3.startslider = 64;
slider_loop = osc3.startslider;
slider_caught = 0;
loop(10,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);

slider_caught ? (
osc3.level = slider(osc3.startslider)/5;
osc3.waveform = slider(osc3.startslider + 1);
osc3.pan = osc3.pan.running = slider(osc3.startslider + 2)/100;
osc3.transpose = osc3.transpose_running = slider(osc3.startslider + 3);
osc3.finetune = osc3.finetune_running = slider(osc3.startslider + 4);
osc3.pitchamount = slider(osc3.startslider + 5);
osc3.VCA_ENV = slider(osc3.startslider + 6)+1;
osc3.on = slider(osc3.startslider + 7);
osc3.pwm = 2*slider(osc3.startslider + 8)/10;
osc3.Sync_to = slider(osc3.startslider + 9);
);

slider_loop = osc3.startslider+11;
slider_caught = 0;
loop(20,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
osc3.level.mod = slider(osc3.startslider+11);
osc3.level.mod.amt = slider(osc3.startslider+10)/5;
osc3.level.mod.centered = slider(osc3.startslider+12);
osc3.pan.mod = slider(osc3.startslider+14);
osc3.pan.mod.amt = slider(osc3.startslider+13)/100;
osc3.pan.mod.centered = slider(osc3.startslider+15);
osc3.transpose.mod = slider(osc3.startslider+17);
osc3.transpose.mod.amt = slider(osc3.startslider+16);
osc3.transpose.mod.centered = slider(osc3.startslider+18);
osc3.finetune.mod = slider(osc3.startslider+20);
osc3.finetune.mod.amt = slider(osc3.startslider+19);
osc3.finetune.mod.centered = slider(osc3.startslider+21);
osc3.pwm.mod = slider(osc3.startslider+23);
osc3.pwm.mod.amt = slider(osc3.startslider+22)/5;
osc3.pwm.mod.centered = slider(osc3.startslider+24);
osc3.level.mod.wheel = slider(osc3.startslider+25);
osc3.pan.mod.wheel = slider(osc3.startslider+26);
osc3.transpose.mod.wheel = slider(osc3.startslider+27);
osc3.finetune.mod.wheel = slider(osc3.startslider+28);
osc3.pwm.mod.wheel = slider(osc3.startslider+29);
);

osc3.waveform_old != osc3.waveform ? (
osc3.GFXosc.render_waveform();
osc3.subosc_1.render_waveform();//want_render_waveform = 1;
osc3.subosc_2.render_waveform();//want_render_waveform = 1;
osc3.subosc_3.render_waveform();//want_render_waveform = 1;
osc3.subosc_4.render_waveform();//want_render_waveform = 1;
osc3.subosc_5.render_waveform();//want_render_waveform = 1;
osc3.subosc_6.render_waveform();//want_render_waveform = 1;
osc3.subosc_7.render_waveform();//want_render_waveform = 1;
osc3.subosc_8.render_waveform();//want_render_waveform = 1;
osc3.subosc_9.render_waveform();//want_render_waveform = 1;
osc3.subosc_10.render_waveform();//want_render_waveform = 1;
osc3.subosc_11.render_waveform();//want_render_waveform = 1;
osc3.subosc_12.render_waveform();//want_render_waveform = 1;
);
osc3.waveform_old = osc3.waveform;


osc4.startslider = 94;
slider_loop = osc4.startslider;
slider_caught = 0;
loop(10,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);

slider_caught ? (
osc4.level = slider(osc4.startslider)/5;
osc4.waveform = slider(osc4.startslider + 1);
osc4.pan = osc4.pan.running = slider(osc4.startslider + 2)/100;
osc4.transpose = osc4.transpose_running = slider(osc4.startslider + 3);
osc4.finetune = osc4.finetune_running = slider(osc4.startslider + 4);
osc4.pitchamount = slider(osc4.startslider + 5);
osc4.VCA_ENV = slider(osc4.startslider + 6)+1;
osc4.on = slider(osc4.startslider + 7);
osc4.pwm = 2*slider(osc4.startslider + 8)/10;
osc4.Sync_to = slider(osc4.startslider + 9);
);

slider_loop = osc4.startslider+11;
slider_caught = 0;
loop(20,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
osc4.level.mod = slider(osc4.startslider+11);
osc4.level.mod.amt = slider(osc4.startslider+10)/5;
osc4.level.mod.centered = slider(osc4.startslider+12);
osc4.pan.mod = slider(osc4.startslider+14);
osc4.pan.mod.amt = slider(osc4.startslider+13)/100;
osc4.pan.mod.centered = slider(osc4.startslider+15);
osc4.transpose.mod = slider(osc4.startslider+17);
osc4.transpose.mod.amt = slider(osc4.startslider+16);
osc4.transpose.mod.centered = slider(osc4.startslider+18);
osc4.finetune.mod = slider(osc4.startslider+20);
osc4.finetune.mod.amt = slider(osc4.startslider+19);
osc4.finetune.mod.centered = slider(osc4.startslider+21);
osc4.pwm.mod = slider(osc4.startslider+23);
osc4.pwm.mod.amt = slider(osc4.startslider+22)/5;
osc4.pwm.mod.centered = slider(osc4.startslider+24);
osc4.level.mod.wheel = slider(osc4.startslider+25);
osc4.pan.mod.wheel = slider(osc4.startslider+26);
osc4.transpose.mod.wheel = slider(osc4.startslider+27);
osc4.finetune.mod.wheel = slider(osc4.startslider+28);
osc4.pwm.mod.wheel = slider(osc4.startslider+29);
);

osc4.waveform_old != osc4.waveform ? (
osc4.GFXosc.render_waveform();
osc4.subosc_1.render_waveform();//want_render_waveform = 1;
osc4.subosc_2.render_waveform();//want_render_waveform = 1;
osc4.subosc_3.render_waveform();//want_render_waveform = 1;
osc4.subosc_4.render_waveform();//want_render_waveform = 1;
osc4.subosc_5.render_waveform();//want_render_waveform = 1;
osc4.subosc_6.render_waveform();//want_render_waveform = 1;
osc4.subosc_7.render_waveform();//want_render_waveform = 1;
osc4.subosc_8.render_waveform();//want_render_waveform = 1;
osc4.subosc_9.render_waveform();//want_render_waveform = 1;
osc4.subosc_10.render_waveform();//want_render_waveform = 1;
osc4.subosc_11.render_waveform();//want_render_waveform = 1;
osc4.subosc_12.render_waveform();//want_render_waveform = 1;
);
osc4.waveform_old = osc4.waveform;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////

slider_loop = 150;
slider_caught = 0;
loop(25,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
Env1.startslider = 150;
env1.long = slider(Env1.startslider+4) ? 10 : 1;
env1.attack = env1.long* slider(Env1.startslider) * srate/1000;
env1.attack_step = 1/env1.attack;
env1.decay2 = env1.long * slider(Env1.startslider+1) * srate/1000;
env1.sustain = slider(Env1.startslider+2) / 10;
env1.decay_step = -(1-env1.sustain)/env1.decay2;
env1.release = env1.long * slider(Env1.startslider+3) * srate/1000;

Env2.startslider = 155;
Env2.long = slider(Env2.startslider+4) ? 10 : 1;
Env2.attack = Env2.long* slider(Env2.startslider) * srate/1000;
Env2.attack_step = 1/Env2.attack;
Env2.decay2 = Env2.long * slider(Env2.startslider+1) * srate/1000;
Env2.sustain = slider(Env2.startslider+2) / 10;
Env2.decay_step = -(1-Env2.sustain)/Env2.decay2;
Env2.release = Env2.long * slider(Env2.startslider+3) * srate/1000;

Env3.startslider = 160;
Env3.long = slider(Env3.startslider+4) ? 10 : 1;
Env3.attack = Env3.long* slider(Env3.startslider) * srate/1000;
Env3.attack_step = 1/Env3.attack;
Env3.decay2 = Env3.long * slider(Env3.startslider+1) * srate/1000;
Env3.sustain = slider(Env3.startslider+2) / 10;
Env3.decay_step = -(1-Env3.sustain)/Env3.decay2;
Env3.release = Env3.long * slider(Env3.startslider+3) * srate/1000;

Env6.startslider = 165;
Env6.long = slider(Env6.startslider+4) ? 10 : 1;
Env6.attack = Env6.long* slider(Env6.startslider) * srate/1000;
Env6.attack_step = 1/Env6.attack;
Env6.decay2 = Env6.long * slider(Env6.startslider+1) * srate/1000;
Env6.sustain = slider(Env6.startslider+2) / 10;
Env6.decay_step = -(1-Env6.sustain)/Env6.decay2;
Env6.release = Env6.long * slider(Env6.startslider+3) * srate/1000;

Env5.startslider = 170;
Env5.long = slider(Env5.startslider+4) ? 10 : 1;
Env5.attack = Env5.long* slider(Env5.startslider) * srate/1000;
Env5.attack_step = 1/Env5.attack;
Env5.decay2 = Env5.long * slider(Env5.startslider+1) * srate/1000;
Env5.sustain = slider(Env5.startslider+2) / 10;
Env5.decay_step = -(1-Env5.sustain)/Env5.decay2;
Env5.release = Env5.long * slider(Env5.startslider+3) * srate/1000;
);


synth.filter.startslider = 125;
slider_loop = synth.filter.startslider;
slider_caught = 0;
loop(15,
slider_old[slideR_loop] != slider(slider_loop) ? slider_caught = 1;
slider_loop += 1;
);
slideR_caught ? (
synth.filter_f = synth.filter_f.running = slider(synth.filter.startslider);
synth.filter_q = synth.filter_q.running = 0.707 + explog(slider(synth.filter.startslider+1)/10, 3)*10;
slider(synth.filter.startslider+2) == 0 ? synth.filter_slope = 1:
slider(synth.filter.startslider+2) == 1 ? synth.filter_slope = 3:
slider(synth.filter.startslider+2) == 2 ? synth.filter_slope = 6;
slider(synth.filter.startslider+3) == 0 ? filter_type = 0;
slider(synth.filter.startslider+3) == 1 ? filter_type = 2;
slider(synth.filter.startslider+3) == 2 ? filter_type = 3;
slider(synth.filter.startslider+3) == 3 ? filter_type = 4;
slider(synth.filter.startslider+3) == 4 ? filter_type = 5;
slider(synth.filter.startslider+3) == 5 ? filter_type = 1;
slider(synth.filter.startslider+3) == 6 ? filter_type = 6;
slider(synth.filter.startslider+3) == 7 ? filter_type = 15;
slider(synth.filter.startslider+3) == 8 ? filter_type = 16;


synth.keyfollow = slider(synth.filter.startslider+4);
synth.pitchamount = synth.pitchamount.running = osc1.pitchamount;

//gfx_filter.band_set_filter(synth.filter_type, per_to_freq(min(synth.filter_f,100),100), 0, synth.filter_q.running, synth.filter_slope);
//gfx_filter.filter.svf_set_to_target();

synth.VCF_ENV = slider(synth.filter.startslider+6);
VCF_ON = slider(synth.filter.startslider+5);

synth.filter.mod.amt = slider(synth.filter.startslider+7);
synth.filter.mod = slider(synth.filter.startslider+8);
synth.filter.mod.centered = slider(synth.filter.startslider+9); /// warum hatte ich "mode" statt "centered"?
synth.filter.mod.wheel = slider(synth.filter.startslider+10);

synth.filterq.mod.amt = slider(synth.filter.startslider+11);
synth.filterq.mod = slider(synth.filter.startslider+12);
synth.filterq.mod.centered = slider(synth.filter.startslider+13); /// warum hatte ich "mode" statt "centered"?
synth.filterq.mod.wheel = slider(synth.filter.startslider+14);

);



   LFO_1.startslider = 140;
   LFO_1.delay_sams = slider(LFO_1.startslider+2) * srate/1000;
   LFO_1.attack_sams = slider(LFO_1.startslider+3) * srate/1000;
   LFO_1.form = slider(LFO_1.startslider);
   LFO_1.tempo_hz = 0.3+explog(slider(LFO_1.startslider+1),3.45)*29.7;

   
   synth.subosc_1.fill_subosc();
   synth.subosc_2.fill_subosc();
   synth.subosc_3.fill_subosc();
   synth.subosc_4.fill_subosc();
   synth.subosc_5.fill_subosc();
   synth.subosc_6.fill_subosc();
   synth.subosc_7.fill_subosc();
   synth.subosc_8.fill_subosc();
   synth.subosc_9.fill_subosc();
   synth.subosc_10.fill_subosc();
   synth.subosc_11.fill_subosc();
   synth.subosc_12.fill_subosc();
   
   
   
   //function dist_update () (
   dist_on = slider124;
   
   dist_scaler = slider125/5;
   dist_output_factor = 1;//db2ratio(slider39);
   //dist_type = slider38;
   //dist_cutoff = per_to_freq(slider37*3.9 + 50.8,100);
   //slider38 == 0 ? (
   disL.disto_set_drive((slider125-0.5)/5);
   disR.disto_set_drive((slider125-0.5)/5);
   //dist_clip = 1;
   //):(
   //disL.disto_set_drive(0);
   //disR.disto_set_drive(0);
   //dist_clip = 1-(slider36-0.3)/10;
   //);
   //disL.disto_set_cutoff(dist_cutoff);
   //disR.disto_set_cutoff(dist_cutoff);
   //);
   
   
   velo_thresh = slider144; velo_ratio = slider145; velo_offset = slider146; velo_boost = slider147;
   
   
   
   
   slider175 != slider_old[175] ? (
   chorus_on = slider175;
   chorus_on ? clear_chorus_buffer();
   fat_chorus = slider175 == 2;
   fat_chorus ? (
          chorus_depth = .65;
          chorusL.chorus_set_depth(chorus_depth);
          chorusR.chorus_set_depth(chorus_depth);
          
          chorus_Mix = 0.5;
          chorusL.chorus_set_bal(chorus_Mix);
          chorusR.chorus_set_bal(chorus_Mix);
          
          chorus_feed = 0.24;
          chorusL.chorus_set_feed(chorus_feed);
          chorusR.chorus_set_feed(chorus_feed); 
   ):(
          chorus_depth = .5; //.4
          chorusL.chorus_set_depth(chorus_depth);
          chorusR.chorus_set_depth(chorus_depth);
          
          chorus_Mix = 0.34; //.24
          chorusL.chorus_set_bal(chorus_Mix);
          chorusR.chorus_set_bal(chorus_Mix);
          
          chorus_feed = 0.23; // .2
          chorusL.chorus_set_feed(chorus_feed);
          chorusR.chorus_set_feed(chorus_feed); 
   );
   );
   
   
   HPF.band_set_filter(1, per_to_freq(max(0,min(slider176,100)),100), 0, 1.14, 1);
   
   
   slider_loop = 1;
   loop(256,
   slider_old[slider_loop] = slider(slider_loop);
   slider_loop += 1;
   );
   
   
   osc1.on ? osc1.is_output = 1 : osc1.is_output = 0;
   osc2.on ? osc2.is_output = 1 : osc2.is_output = 0;
   osc3.on ? osc3.is_output = 1 : osc3.is_output = 0;
   osc4.on ? osc4.is_output = 1 : osc4.is_output = 0;
   operator1.on && !(fm12 + fm13 + fm14 + fm15 + fm16) ? operator1.is_output = 1 : operator1.is_output = 0;
   operator2.on && !(fm21 + fm23 + fm24 + fm25 + fm26) ? operator2.is_output = 1 : operator2.is_output = 0;
   operator3.on && !(fm31 + fm32 + fm34 + fm35 + fm36) ? operator3.is_output = 1 : operator3.is_output = 0;
   operator4.on && !(fm41 + fm42 + fm43 + fm45 + fm46) ? operator4.is_output = 1 : operator4.is_output = 0;
   operator5.on && !(fm51 + fm52 + fm53 + fm54 + fm56) ? operator5.is_output = 1 : operator5.is_output = 0;
   operator6.on && !(fm61 + fm62 + fm63 + fm64 + fm65) ? operator6.is_output = 1 : operator6.is_output = 0;
   
   synth.VCA1.is_output = (osc1.is_output && osc1.VCA_ENV == 1) || (osc2.is_output && osc2.VCA_ENV == 1) || (osc3.is_output && osc3.VCA_ENV == 1) || (osc4.is_output && osc4.VCA_ENV == 1) ? 1 : 0;
   synth.VCA2.is_output = (osc1.is_output && osc1.VCA_ENV == 2) || (osc2.is_output && osc2.VCA_ENV == 2) || (osc3.is_output && osc3.VCA_ENV == 2) || (osc4.is_output && osc4.VCA_ENV == 2) ? 1 : 0;
   synth.VCA3.is_output = (osc1.is_output && osc1.VCA_ENV == 3) || (osc2.is_output && osc2.VCA_ENV == 3) || (osc3.is_output && osc3.VCA_ENV == 3) || (osc4.is_output && osc4.VCA_ENV == 3) ? 1 : 0;
   synth.VCA4.is_output = (osc1.is_output && osc1.VCA_ENV == 4) || (osc2.is_output && osc2.VCA_ENV == 4) || (osc3.is_output && osc3.VCA_ENV == 4) || (osc4.is_output && osc4.VCA_ENV == 4) ? 1 : 0;
   
   callkatze += 1;
   callER = 0;
   parameters_update_on = 0;
   
   
  
);


function CVSlider_update () (
CV_Loop = 0;
  Loop(24,
    CVSlider_old[CV_loop] != slider(232+CV_loop) ? (
        CVSlider[CV_Loop] = slider(232+CV_loop);
        CVSlider_old[CV_loop] = slider(232+CV_loop);
    ): CVSlider[CV_loop] != gmem[1000000 + current_track*100 + CV_loop] ? (
        CVSlider[CV_Loop] = gmem[1000000 + current_track*100 + CV_loop];
    );
    CV_Loop += 1;
  );
);


@slider

caller = 1;

@serialize

file_mem(0,operator1.opp,1000);

file_var(0, osc1.gfx_seconds);
file_var(0, osc1.scroll);
file_var(0, osc1.at_shape);
file_var(0, osc1.at_coef);
file_var(0, osc1.dec1_shape);
file_var(0, osc1.dec1_coef);
file_var(0, osc1.dec2_shape);
file_var(0, osc1.dec2_coef);
file_var(0, osc1.rel_shape);
file_var(0, osc1.rel_coef);

file_var(0, osc2.gfx_seconds);
file_var(0, osc2.scroll);
file_var(0, osc2.at_shape);
file_var(0, osc2.at_coef);
file_var(0, osc2.dec1_shape);
file_var(0, osc2.dec1_coef);
file_var(0, osc2.dec2_shape);
file_var(0, osc2.dec2_coef);
file_var(0, osc2.rel_shape);
file_var(0, osc2.rel_coef);

file_var(0, osc1.unison);
file_var(0, osc2.unison);



file_var(0, LFO_1.delay);
file_var(0, LFO_1.attack);

file_var(0, LFO_2.delay);
file_var(0, LFO_2.attack);

file_var(0, LFO_3.delay);
file_var(0, LFO_3.attack);

file_var(0, LFO_4.delay);
file_var(0, LFO_4.attack);


file_var(0, synth.filter.gfx_seconds);
file_var(0, synth.filter.scroll);
file_var(0, synth.filter.at_shape);
file_var(0, synth.filter.at_coef);
file_var(0, synth.filter.dec1_shape);
file_var(0, synth.filter.dec1_coef);
file_var(0, synth.filter.dec2_shape);
file_var(0, synth.filter.dec2_coef);
file_var(0, synth.filter.rel_shape);
file_var(0, synth.filter.rel_coef);

file_var(0, osc1.level.LFO_1.mode);
file_var(0, osc1.pan.LFO_1.mode);
file_var(0, osc1.transpose.LFO_1.mode);
file_var(0, osc1.finetune.LFO_1.mode);
file_var(0, osc1.PWM.LFO_1.mode);
file_var(0, osc1.level.LFO_1.modamount);
file_var(0, osc1.pan.LFO_1.modamount);
file_var(0, osc1.transpose.LFO_1.modamount);
file_var(0, osc1.finetune.LFO_1.modamount);
file_var(0, osc1.PWM.LFO_1.modamount);
file_var(0, osc1.level.LFO_1.controller);
file_var(0, osc1.pan.LFO_1.controller);
file_var(0, osc1.transpose.LFO_1.controller);
file_var(0, osc1.finetune.LFO_1.controller);
file_var(0, osc1.PWM.LFO_1.controller);

file_var(0, osc2.level.LFO_1.mode);
file_var(0, osc2.pan.LFO_1.mode);
file_var(0, osc2.transpose.LFO_1.mode);
file_var(0, osc2.finetune.LFO_1.mode);
file_var(0, osc2.PWM.LFO_1.mode);
file_var(0, osc2.level.LFO_1.modamount);
file_var(0, osc2.pan.LFO_1.modamount);
file_var(0, osc2.transpose.LFO_1.modamount);
file_var(0, osc2.finetune.LFO_1.modamount);
file_var(0, osc2.PWM.LFO_1.modamount);
file_var(0, osc2.level.LFO_1.controller);
file_var(0, osc2.pan.LFO_1.controller);
file_var(0, osc2.transpose.LFO_1.controller);
file_var(0, osc2.finetune.LFO_1.controller);
file_var(0, osc2.PWM.LFO_1.controller);

file_var(0, NG.level.LFO_1.mode);
file_var(0, NG.pan.LFO_1.mode);
file_var(0, NG.filter_f.LFO_1.mode);
file_var(0, synth.filter_f.LFO_1.mode);
file_var(0, NG.level.LFO_1.modamount);
file_var(0, NG.pan.LFO_1.modamount);
file_var(0, NG.filter_f.LFO_1.modamount);
file_var(0, synth.filter_f.LFO_1.modamount);
file_var(0, NG.level.LFO_1.controller);
file_var(0, NG.pan.LFO_1.controller);
file_var(0, NG.filter_f.LFO_1.controller);
file_var(0, synth.filter_f.LFO_1.controller);


file_var(0, osc1.level.LFO_2.mode);
file_var(0, osc1.pan.LFO_2.mode);
file_var(0, osc1.transpose.LFO_2.mode);
file_var(0, osc1.finetune.LFO_2.mode);
file_var(0, osc1.PWM.LFO_2.mode);
file_var(0, osc1.level.LFO_2.modamount);
file_var(0, osc1.pan.LFO_2.modamount);
file_var(0, osc1.transpose.LFO_2.modamount);
file_var(0, osc1.finetune.LFO_2.modamount);
file_var(0, osc1.PWM.LFO_2.modamount);
file_var(0, osc1.level.LFO_2.controller);
file_var(0, osc1.pan.LFO_2.controller);
file_var(0, osc1.transpose.LFO_2.controller);
file_var(0, osc1.finetune.LFO_2.controller);
file_var(0, osc1.PWM.LFO_2.controller);

file_var(0, osc2.level.LFO_2.mode);
file_var(0, osc2.pan.LFO_2.mode);
file_var(0, osc2.transpose.LFO_2.mode);
file_var(0, osc2.finetune.LFO_2.mode);
file_var(0, osc2.PWM.LFO_2.mode);
file_var(0, osc2.level.LFO_2.modamount);
file_var(0, osc2.pan.LFO_2.modamount);
file_var(0, osc2.transpose.LFO_2.modamount);
file_var(0, osc2.finetune.LFO_2.modamount);
file_var(0, osc2.PWM.LFO_2.modamount);
file_var(0, osc2.level.LFO_2.controller);
file_var(0, osc2.pan.LFO_2.controller);
file_var(0, osc2.transpose.LFO_2.controller);
file_var(0, osc2.finetune.LFO_2.controller);
file_var(0, osc2.PWM.LFO_2.controller);

file_var(0, NG.level.LFO_2.mode);
file_var(0, NG.pan.LFO_2.mode);
file_var(0, NG.filter_f.LFO_2.mode);
file_var(0, synth.filter_f.LFO_2.mode);
file_var(0, NG.level.LFO_2.modamount);
file_var(0, NG.pan.LFO_2.modamount);
file_var(0, NG.filter_f.LFO_2.modamount);
file_var(0, synth.filter_f.LFO_2.modamount);
file_var(0, NG.level.LFO_2.controller);
file_var(0, NG.pan.LFO_2.controller);
file_var(0, NG.filter_f.LFO_2.controller);
file_var(0, synth.filter_f.LFO_2.controller);

file_var(0, osc1.level.LFO_3.mode);
file_var(0, osc1.pan.LFO_3.mode);
file_var(0, osc1.transpose.LFO_3.mode);
file_var(0, osc1.finetune.LFO_3.mode);
file_var(0, osc1.PWM.LFO_3.mode);
file_var(0, osc1.level.LFO_3.modamount);
file_var(0, osc1.pan.LFO_3.modamount);
file_var(0, osc1.transpose.LFO_3.modamount);
file_var(0, osc1.finetune.LFO_3.modamount);
file_var(0, osc1.PWM.LFO_3.modamount);
file_var(0, osc1.level.LFO_3.controller);
file_var(0, osc1.pan.LFO_3.controller);
file_var(0, osc1.transpose.LFO_3.controller);
file_var(0, osc1.finetune.LFO_3.controller);
file_var(0, osc1.PWM.LFO_3.controller);

file_var(0, osc2.level.LFO_3.mode);
file_var(0, osc2.pan.LFO_3.mode);
file_var(0, osc2.transpose.LFO_3.mode);
file_var(0, osc2.finetune.LFO_3.mode);
file_var(0, osc2.PWM.LFO_3.mode);
file_var(0, osc2.level.LFO_3.modamount);
file_var(0, osc2.pan.LFO_3.modamount);
file_var(0, osc2.transpose.LFO_3.modamount);
file_var(0, osc2.finetune.LFO_3.modamount);
file_var(0, osc2.PWM.LFO_3.modamount);
file_var(0, osc2.level.LFO_3.controller);
file_var(0, osc2.pan.LFO_3.controller);
file_var(0, osc2.transpose.LFO_3.controller);
file_var(0, osc2.finetune.LFO_3.controller);
file_var(0, osc2.PWM.LFO_3.controller);

file_var(0, NG.level.LFO_3.mode);
file_var(0, NG.pan.LFO_3.mode);
file_var(0, NG.filter_f.LFO_3.mode);
file_var(0, synth.filter_f.LFO_3.mode);
file_var(0, NG.level.LFO_3.modamount);
file_var(0, NG.pan.LFO_3.modamount);
file_var(0, NG.filter_f.LFO_3.modamount);
file_var(0, synth.filter_f.LFO_3.modamount);
file_var(0, NG.level.LFO_3.controller);
file_var(0, NG.pan.LFO_3.controller);
file_var(0, NG.filter_f.LFO_3.controller);
file_var(0, synth.filter_f.LFO_3.controller);

file_var(0, osc1.level.LFO_4.mode);
file_var(0, osc1.pan.LFO_4.mode);
file_var(0, osc1.transpose.LFO_4.mode);
file_var(0, osc1.finetune.LFO_4.mode);
file_var(0, osc1.PWM.LFO_4.mode);
file_var(0, osc1.level.LFO_4.modamount);
file_var(0, osc1.pan.LFO_4.modamount);
file_var(0, osc1.transpose.LFO_4.modamount);
file_var(0, osc1.finetune.LFO_4.modamount);
file_var(0, osc1.PWM.LFO_4.modamount);
file_var(0, osc1.level.LFO_4.controller);
file_var(0, osc1.pan.LFO_4.controller);
file_var(0, osc1.transpose.LFO_4.controller);
file_var(0, osc1.finetune.LFO_4.controller);
file_var(0, osc1.PWM.LFO_4.controller);

file_var(0, osc2.level.LFO_4.mode);
file_var(0, osc2.pan.LFO_4.mode);
file_var(0, osc2.transpose.LFO_4.mode);
file_var(0, osc2.finetune.LFO_4.mode);
file_var(0, osc2.PWM.LFO_4.mode);
file_var(0, osc2.level.LFO_4.modamount);
file_var(0, osc2.pan.LFO_4.modamount);
file_var(0, osc2.transpose.LFO_4.modamount);
file_var(0, osc2.finetune.LFO_4.modamount);
file_var(0, osc2.PWM.LFO_4.modamount);
file_var(0, osc2.level.LFO_4.controller);
file_var(0, osc2.pan.LFO_4.controller);
file_var(0, osc2.transpose.LFO_4.controller);
file_var(0, osc2.finetune.LFO_4.controller);
file_var(0, osc2.PWM.LFO_4.controller);

file_var(0, NG.level.LFO_4.mode);
file_var(0, NG.pan.LFO_4.mode);
file_var(0, NG.filter_f.LFO_4.mode);
file_var(0, synth.filter_f.LFO_4.mode);
file_var(0, NG.level.LFO_4.modamount);
file_var(0, NG.pan.LFO_4.modamount);
file_var(0, NG.filter_f.LFO_4.modamount);
file_var(0, synth.filter_f.LFO_4.modamount);
file_var(0, NG.level.LFO_4.controller);
file_var(0, NG.pan.LFO_4.controller);
file_var(0, NG.filter_f.LFO_4.controller);
file_var(0, synth.filter_f.LFO_4.controller);

file_var(0, NG.gfx_seconds);
file_var(0, NG.scroll);
file_var(0, NG.at_shape);
file_var(0, NG.at_coef);
file_var(0, NG.dec1_shape);
file_var(0, NG.dec1_coef);
file_var(0, NG.dec2_shape);
file_var(0, NG.dec2_coef);
file_var(0, NG.rel_shape);
file_var(0, NG.rel_coef);


file_var(0, NG.filter.gfx_seconds);
file_var(0, NG.filter.scroll);
file_var(0, NG.filter.at_shape);
file_var(0, NG.filter.at_coef);
file_var(0, NG.filter.dec1_shape);
file_var(0, NG.filter.dec1_coef);
file_var(0, NG.filter.dec2_shape);
file_var(0, NG.filter.dec2_coef);
file_var(0, NG.filter.rel_shape);
file_var(0, NG.filter.rel_coef);



file_var(0, LFO_1.CV_Select);
file_var(0, LFO_2.CV_Select);
file_var(0, LFO_3.CV_Select);
file_var(0, LFO_4.CV_Select);

file_var(0, LFO_1.free_run); 
file_var(0, LFO_2.free_run); 
file_var(0, LFO_3.free_run); 
file_var(0, LFO_4.free_run); 
file_var(0, WTFM_Version); 

caller = 1;

@block

current_track = get_host_placement(placement,plfags);

/*
   LFO_1.delay == -1 ? (LFO_1.delay_sams = (240/tempo) * srate):
   LFO_1.delay == -2 ? (LFO_1.delay_sams = (240/tempo) * srate/2):
   LFO_1.delay == -3 ? (LFO_1.delay_sams = (240/tempo) * srate/4):
   LFO_1.delay == -4 ? (LFO_1.delay_sams = (240/tempo) * srate/8):
   LFO_1.delay == -5 ? (LFO_1.delay_sams = (240/tempo) * srate/16);
 
   LFO_2.delay == -1 ? (LFO_2.delay_sams = (240/tempo) * srate):
   LFO_2.delay == -2 ? (LFO_2.delay_sams = (240/tempo) * srate/2):
   LFO_2.delay == -3 ? (LFO_2.delay_sams = (240/tempo) * srate/4):
   LFO_2.delay == -4 ? (LFO_2.delay_sams = (240/tempo) * srate/8):
   LFO_2.delay == -5 ? (LFO_2.delay_sams = (240/tempo) * srate/16);
   
    LFO_1.attack == -1 ? (LFO_1.attack_sams = (240/tempo) * srate):
    LFO_1.attack == -2 ? (LFO_1.attack_sams = (240/tempo) * srate/2):
    LFO_1.attack == -3 ? (LFO_1.attack_sams = (240/tempo) * srate/4):
    LFO_1.attack == -4 ? (LFO_1.attack_sams = (240/tempo) * srate/8):
    LFO_1.attack == -5 ? (LFO_1.attack_sams = (240/tempo) * srate/16);
     
    LFO_2.attack == -1 ? (LFO_2.attack_sams = (240/tempo) * srate):
    LFO_2.attack == -2 ? (LFO_2.attack_sams = (240/tempo) * srate/2):
    LFO_2.attack == -3 ? (LFO_2.attack_sams = (240/tempo) * srate/4):
    LFO_2.attack == -4 ? (LFO_2.attack_sams = (240/tempo) * srate/8):
    LFO_2.attack == -5 ? (LFO_2.attack_sams = (240/tempo) * srate/16); 
   
   LFO_3.delay == -1 ? (LFO_3.delay_sams = (240/tempo) * srate):
   LFO_3.delay == -2 ? (LFO_3.delay_sams = (240/tempo) * srate/2):
   LFO_3.delay == -3 ? (LFO_3.delay_sams = (240/tempo) * srate/4):
   LFO_3.delay == -4 ? (LFO_3.delay_sams = (240/tempo) * srate/8):
   LFO_3.delay == -5 ? (LFO_3.delay_sams = (240/tempo) * srate/16);
   
   LFO_4.delay == -1 ? (LFO_4.delay_sams = (240/tempo) * srate):
   LFO_4.delay == -2 ? (LFO_4.delay_sams = (240/tempo) * srate/2):
   LFO_4.delay == -3 ? (LFO_4.delay_sams = (240/tempo) * srate/4):
   LFO_4.delay == -4 ? (LFO_4.delay_sams = (240/tempo) * srate/8):
   LFO_4.delay == -5 ? (LFO_4.delay_sams = (240/tempo) * srate/16);
   
    LFO_3.attack == -1 ? (LFO_3.attack_sams = (240/tempo) * srate):
    LFO_3.attack == -2 ? (LFO_3.attack_sams = (240/tempo) * srate/2):
    LFO_3.attack == -3 ? (LFO_3.attack_sams = (240/tempo) * srate/4):
    LFO_3.attack == -4 ? (LFO_3.attack_sams = (240/tempo) * srate/8):
    LFO_3.attack == -5 ? (LFO_3.attack_sams = (240/tempo) * srate/16);
     
    LFO_4.attack == -1 ? (LFO_4.attack_sams = (240/tempo) * srate):
    LFO_4.attack == -2 ? (LFO_4.attack_sams = (240/tempo) * srate/2):
    LFO_4.attack == -3 ? (LFO_4.attack_sams = (240/tempo) * srate/4):
    LFO_4.attack == -4 ? (LFO_4.attack_sams = (240/tempo) * srate/8):
    LFO_4.attack == -5 ? (LFO_4.attack_sams = (240/tempo) * srate/16); 
 */  
   
   block_play_position = play_position; // LFO to Project
   pos_add = 0;                         // LFO to Project
 
   
   play_state != play_state_old ? (
   killall_osc();
   play_state_old = play_state;
   );
   
   
    //pos_add += 1; // LFO to Project
   pitchwheel_old = pitchwheel;
   while (midirecv(offset,msg1,msg2,msg3)) ( // REAPER 4.59+ syntax while()
      
      msg1 == $xB0 && msg2 == 64 && msg3 ? Pedal_on = 1;
      msg1 == $xB0 && msg2 == 64 && !msg3 ? Pedal_on = 0;
      
      msg1==$x80 ? (msg1=$x90; msg3 = 0); // Noteoff to NoteOn Value 0
      
      msg1==$x90 ? ( //&& msg3!=0 ? (
        msg3 == 0 ? noteon_cnt-=1 : noteon_cnt+=1; // count note-ons
        noteon_cnt = max(0,noteon_cnt);
        msg2 += 3;
        Synth.midi_in();
        
      ) : msg1==$xD0 ? (
      aftertouch = msg2;
      ) : msg1==$xE0 ? (
      Pitchwheel = msg3-64 + msg2 / 127;
      norm_pitchwheel = pitchwheel > 0 ? pitchwheel / 64 : pitchwheel < 0 ? pitchwheel / 64 : 0;
      ) : msg1==$xB0 && msg2 == 1 ? (
      modwheel = msg3 / 127;
      ):(
        midisend(offset,msg1,msg2,msg3); // passthrough other events
      );
      //midisend(offset,msg1,msg2,msg3);
   );
   
   
   //Global Start- stop- and Retriggers
   noteon_cnt_old == 0 && noteon_cnt ? starttrigger = 1 : starttrigger = 0;
   noteon_cnt_old && noteon_cnt == 0 ? (
   synth.subosc_1.on || synth.subosc_2.on || synth.subosc_3.on || synth.subosc_4.on || synth.subosc_5.on || synth.subosc_6.on || synth.subosc_7.on || synth.subosc_8.on || synth.subosc_9.on || synth.subosc_10.on || synth.subosc_11.on || synth.subosc_12.on ? (
   stoptrigger = 0;
   ):(
   stoptrigger = 1;
   );
   ):(
   stoptrigger = 0;
   );
   /////////////////////////////////////
   
   
   
   
   
@sample

CVSlider_update();
caller == 1 ? (
    parameters_update_on == 0 ? (
        parameters_update();  
    );
);

   
   noteon_cnt_old < noteon_cnt ? retrigger = 1 : retrigger = 0;
   noteon_cnt_old = noteon_cnt;
   starttrigger ? (gen_follower = 0;);
   gen_follower += 1;
   stoptrigger ? (gen_follower = 0;);
   
    
    
    
    LFO_1.form ? (
    
    //LFO_1.form == 1 ? LFO_1.abs_position = (1+sin(LFO_1.chase_position * 2 * $pi))/2;
    //LFO_1.form == 2 ? LFO_1.abs_position = floor(LFO_1.chase_position+0.5);
    //LFO_1.form == 3 ? (LFO_1.abs_position = LFO_1.chase_Position+0.5; LFO_1.abs_position > 1 ? LFO_1.abs_position -=1);
    //LFO_1.form == 4 ? (LFO_1.abs_position = 1-(LFO_1.chase_Position+0.5); LFO_1.abs_position <0 ? LFO_1.abs_position +=1);
    //LFO_1.form == 5 ? (
    //  LFO_1.chase_position <= 0.25 ? (
    //    LFO_1.abs_position = 0.5 + (LFO_1.chase_position) * 2; 
    //   ):LFO_1.chase_position <= 0.75 ? ( 
    //    LFO_1.abs_position = 1 - (LFO_1.chase_position-0.25) * 2;
    //    ):(
    //    LFO_1.abs_position = (LFO_1.chase_position - 0.75)*2;
    //    );
    //);
    
    
    gen_follower < LFO_1.delay_sams ? (
    LFO_1.chase_position = 0;
    LFO_1.cheap_LFO_generator();
    LFO_1.real_level = LFO_1.abs_position;
    LFO_1.real_levelc = LFO_1.abs_position2;
    ):gen_follower >= LFO_1.delay_sams && gen_follower < LFO_1.delay_sams + LFO_1.attack_sams ? (
    LFO_1.cheap_LFO_generator();
    LFO_1.real_level = LFO_1.abs_position * (gen_follower-LFO_1.delay_sams)/LFO_1.attack_sams;
    LFO_1.real_levelc = 0.5+(LFO_1.abs_position2-0.5) * (gen_follower-LFO_1.delay_sams)/LFO_1.attack_sams;
    //LFO_1.chase_position += (LFO_1.tempo_Hz) / srate;
    //LFO_1.chase_position >= 1 ? LFO_1.chase_position -= 1;
    ):(
    LFO_1.cheap_LFO_generator();
    LFO_1.real_level = LFO_1.abs_position;
    LFO_1.real_levelc = LFO_1.abs_position2;
    //LFO_1.chase_position += (LFO_1.tempo_Hz) / srate;
    //LFO_1.chase_position >= 1 ? LFO_1.chase_position -= 1;
    //LFO_1.real_levelc = 0.5+(LFO_1.real_level-0.5);
    );
    
    ):(
    LFO_1.real_level = 0;
    LFO_1.real_levelc = 0.5;
    );
    /*
    CV_1 = slider247;
    CV_2 = slider248;
    CV_3 = slider249;
    CV_4 = slider250;
    CV_5 = slider251;
    CV_6 = slider252;
    CV_7 = slider253;
    CV_8 = slider254;
    CV_9 = slider255;
    CV_10 = slider256;
    */
    /*
    //LFO_1.free_run = 1; 
    LFO_1.run_on_stop = 1;
    LFO_1.LFO_Generator(CV);
    gen_follower < LFO_1.delay_sams ? LFO_1.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_1.delay_sams && gen_follower < LFO_1.delay_sams + LFO_1.attack_sams ? LFO_1.abs_position.after_slew_rate *= (gen_follower-LFO_1.delay_sams)/LFO_1.attack_sams;
    //osc1.finetune_running = osc1.finetune + osc1.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    //osc2.finetune_running = osc2.finetune + osc2.finetune.LFO_1.modamount * LFO_1.abs_position.after_slew_rate;
    
    //LFO_2.free_run = 1; 
    LFO_2.run_on_stop = 1;
    LFO_2.LFO_Generator(CV);
    gen_follower < LFO_2.delay_sams ? LFO_2.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_2.delay_sams && gen_follower < LFO_2.delay_sams + LFO_2.attack_sams ? LFO_2.abs_position.after_slew_rate *= (gen_follower-LFO_2.delay_sams)/LFO_2.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_2.modamount * LFO_2.abs_position.after_slew_rate;
    
    //LFO_3.free_run = 1; 
    LFO_3.run_on_stop = 1;
    LFO_3.LFO_Generator(CV);
    gen_follower < LFO_3.delay_sams ? LFO_3.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_3.delay_sams && gen_follower < LFO_3.delay_sams + LFO_3.attack_sams ? LFO_3.abs_position.after_slew_rate *= (gen_follower-LFO_3.delay_sams)/LFO_3.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_3.modamount * LFO_3.abs_position.after_slew_rate;
    
    //LFO_4.free_run = 1; 
    LFO_4.run_on_stop = 1;
    LFO_4.LFO_Generator(CV);
    gen_follower < LFO_4.delay_sams ? LFO_4.abs_position.after_slew_rate = 0;
    gen_follower >= LFO_4.delay_sams && gen_follower < LFO_4.delay_sams + LFO_4.attack_sams ? LFO_4.abs_position.after_slew_rate *= (gen_follower-LFO_4.delay_sams)/LFO_4.attack_sams;
    //synth.filter_f.running = synth.filter_f + synth.filter_f.LFO_4.modamount * LFO_4.abs_position.after_slew_rate;
    */
    
    
    !synth_mode ? (
    osc1.on ? (
    osc1.modulate_osc();
    osc1.play_oscillator();
    );
    osc2.on ? (
    osc2.modulate_osc();
    osc2.play_oscillator();
    );
    osc3.on ? (
    osc3.modulate_osc();
    osc3.play_oscillator();
    );
    osc4.on ? (
    osc4.modulate_osc();
    osc4.play_oscillator();
    );
    
    );
    
    
    synth.play_synth_generals();
    
    MonoOrPoly ? Synth.Subosc_1.Mono_glide();
    
    
    spl0 = synth.outputL;// * 0.1;// + osc2.output * 0.1;
    spl1 = synth.outputR;// * 0.1;
    
    
    chorus_on ? (
    spl0 = db2ratio(chorus_mix*3)*chorusL.chorus_do_korg(spl0);
    spl1 = db2ratio(chorus_mix*3)*chorusR.chorus_do_korg(spl1);
    );
    
    
    spl0.dcblocker();
    spl1.dcblocker();
    
    HPF.filter.svf_tick();
    spl0 = HPF.filter.svf_svf0(spl0);
    spl1 = HPF.filter.svf_svf1(spl1);
    
    //dist_on ? (
    //distamp = scale(dist_scaler, 0, 1, 1, 0.9, 2);
    //spl1 = db2ratio(20)*disR.disto_do(db2ratio(-20)*spl1) * distamp*dist_output_factor;
    //spl0 = db2ratio(20)*disL.disto_do(db2ratio(-20)*spl0) * distamp*dist_output_factor;
    //);
    
    
    in0=spl0*dist_boost;
    in1=spl1*dist_boost;
    distratio = 20;
    spl0=in0/pow(1+pow(abs(in0),distratio),1/distratio);
    spl1=in1/pow(1+pow(abs(in1),distratio),1/distratio);
    
    protect = max(max(abs(in0)-abs(spl0),abs(in1)-abs(spl1)),protect*0.9999);
    
    //spl0 = spl1 = spl0 - spl1;
    
    spl0 *= master_volume/10;
    spl1 *= master_volume/10;
    
    /*
    softclip_on ? (
    //Softclip
    dB0 = amp_dB * log(abs(spl0))+0.0000001;// + boost_dB;
    dB1 = amp_dB * log(abs(spl1))+0.0000001;// + boost_dB;
    (dB0 > threshold_dB) ? (
      over_dB = dB0 - threshold_dB;
      over_db_L = over_db;
      over_dB = clipper_a * over_dB + clipper_b * over_dB * over_dB;
      //dB0 = min(threshold_dB + over_dB, limit_dB);
      dB0 = threshold_dB + over_dB;
    ):(over_db_L = 0);
    
    (dB1 > threshold_dB) ? (
      over_dB = dB1 - threshold_dB;
      over_db_r = over_db;
      over_dB = clipper_a * over_dB + clipper_b * over_dB * over_dB;
      //dB1 = min(threshold_dB + over_dB, limit_dB);
      dB1 = threshold_dB + over_dB;
    ):(over_db_R = 0);
    spl0 = exp(dB0 / amp_dB) * sign(spl0);
    spl1 = exp(dB1 / amp_dB) * sign(spl1);
    );




@gfx 1445 803

#waveshapes = "White Noise|Pink Noise|Sine|Triangle|Sawtooth|Square|Square 2|Bass Saw|Cheap Saw|Unharmonix|5th|Add Overtones|Nasty Bell|VocOow|Upright Bass|Cello|Sad Strings|Strings|Clarinet|Clarinet 2|English Horn|Organish|Organish 2|Organish 3|Organish 4|Pipe Organish|Wheel Organish|Positiv Organish|Piano|Piano 2|E-Piano|Hard E-Piano|FM Piano 1|FM Piano 2|Suitcase Piano|Wurly Piano|Digital Piano|Real Clav|Fat Clav|Industrial Clav|Wah Clav|Harpsi|Banjo|Mellow|Harsh" ;
s2_zoom_X = gfx_w / 1445;
s2_zoom_y = gfx_h / 803;
zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
zoom_off == 1 ? zoom = gfx_ext_retina;

//zoom = 1;

 mouseHold = mouse_cap & 1;
 mouseHold_r = mouse_cap & 2;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 mouseClick_r = mouseHold_r - lastCap_r;
 lastCap = mouseHold;
 lastCap_r = mouseHold_r;

 gfx_a = 1;
 gfx_x = gfx_y = 0;
 gfx_blit(0,zoom*1.2,0);
 
black(); gfx_a = 0.2;
gfx_rect(0,0,gfx_w,gfx_h);


gfx_setfont(1,"Arial",11*zoom,'b');
gfx_setfont(2,"Arial",16*zoom,'b');
gfx_setfont(3,"Arial",11*zoom,'b');
gfx_setfont(4,"Arial",16*zoom,'b');

sliderh = 100*zoom;


      function adsr_dragStart (_slider, _default)
                   (
                          yOld = mouse_y;xOld = mouse_x;
                           ctrl ? (
                              slider(_slider) = _default;caller = 1;
                           ):(
                           h_dragging = _slider;
                           gendragging = 1;
                           valold = slider(_slider);
                           );
                   );        
                           
                           

      function adsr_potDrag(_sliderh, _slidermax)
            local      (nachkomma)
                       (
                         //mstep = _slidermax/_sliderh;
                        Shift ? mstep = 0.1*_slidermax/_sliderh : mstep = _slidermax/_sliderh;
                        val = valOld + (yOld - mouse_y) * mstep;
                        val = min(max(val, 0), _slidermax);
                        slider(h_dragging) = val;
                        slider_automate(slider(h_dragging));
                        caller = 1;
                );



function Mod_readout (Modder) (
modder == 0 ? #readout = "OFF" :
modder == 1 ? #readout = "LFO" :
modder == 2 ? #readout = "ENV 1" :
modder == 3 ? #readout = "ENV 2" :
modder == 4 ? #readout = "ENV 3" :
modder == 5 ? #readout = "ENV 4" :
modder == 6 ? #readout = "FILT.ENV" :
modder == 7 ? #readout = "CV 1" :
modder == 8 ? #readout = "CV 2" :
modder == 9 ? #readout = "CV 3" :
modder == 10 ? #readout = "CV 4" :
modder == 11 ? #readout = "CV 5" :
modder == 12 ? #readout = "CV 6" :
modder == 13 ? #readout = "CV 7" :
modder == 14 ? #readout = "CV 8" :
modder == 15 ? #readout = "CV 9" :
modder == 16 ? #readout = "CV 10" :
modder == 17 ? #readout = "CV 11" :
modder == 18 ? #readout = "CV 12" :
modder == 19 ? #readout = "CV 13" :
modder == 20 ? #readout = "CV 14" :
modder == 21 ? #readout = "CV 15" :
modder == 22 ? #readout = "CV 16" :
modder == 23 ? #readout = "CV 17" :
modder == 24 ? #readout = "CV 18" :
modder == 25 ? #readout = "CV 19" :
modder == 26 ? #readout = "CV 20" :
modder == 27 ? #readout = "CV 21" :
modder == 28 ? #readout = "CV 22" :
modder == 29 ? #readout = "CV 23" :
modder == 30 ? #readout = "CV 24";
);





#allmods = "OFF|LFO|ENV 1|ENV 2|ENV 3|ENV 4|FILT.ENV|CV 1|CV 2|CV 3|CV 4|CV 5|CV 6|CV 7|CV 8|CV 9|CV 10|CV 11|CV 12|CV 13|CV 14|CV 15|CV 16|CV 17|CV 18|CV 19|CV 20|CV 21|CV 22|CV 23|CV 24";
#allmodsbutenv = "OFF|LFO|#ENV 1|#ENV 2|#ENV 3|#ENV 4|#FILT.ENV|CV 1|CV 2|CV 3|CV 4|CV 5|CV 6|CV 7|CV 8|CV 9|CV 10|CV 11|CV 12|CV 13|CV 14|CV 15|CV 16|CV 17|CV 18|CV 19|CV 20|CV 21|CV 22|CV 23|CV 24";
function mod_select (all) (
all ? last_clicked_item = gfx_showmenu(#allmods) : last_clicked_item = gfx_showmenu(#allmodsbutenv);
sel_mod = last_clicked_item - 1;
);



function ADSRSlider (_sliderx, _slidery, _sliderh, _slider, _slidermax, _default) local (_sliderpos) (
_sliderpos = _slidery - _sliderh* (slider(_slider)/_slidermax);
black(); gfx_a = 1;
gfx_rect(_sliderx+zoom, _slidery - _sliderh, 35*zoom, _sliderh + 17*zoom);
rgb(50,50,50);
gfx_rect(_sliderx+zoom, _slidery - _sliderh, 35*zoom, _sliderh + 17*zoom,0);
rgb(80,255,80);
gfx_x = _sliderx+16*zoom; gfx_y = _slidery + 17*zoom;
gfx_rectto(gfx_x+3*zoom, _sliderpos);
gfx_x = _sliderx; gfx_y = _sliderpos;
gfx_blit(1,zoom*0.5,0);
lightgrey();

mouseClick == 1 ? (
g_collision(gfx_x, gfx_y, 35*zoom, 17*zoom) ? adsr_dragstart(_slider, _default);
);

mouseclick == -1 ? (
h_dragging = 0;
);

h_dragging == _slider ? adsr_potdrag(_sliderh, _slidermax);


);

function draw_adsr(_startslider) (
myslider = _startslider;
ADSRSlider (sliderx, slidery, sliderh, myslider, 1000, 0);
lightgrey();
gfx_x = sliderx; gfx_y = slidery - sliderh - 20*zoom; gfx_setfont(2);
gfx_drawstr("A", 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);
gfx_x = sliderx; gfx_y = slidery + 20*zoom;
gfx_setfont(1);
sprintf(#readout, "%.0f", slider(myslider));
gfx_drawstr(#readout, 0x01, gfx_x + 35*zoom, gfx_y + gfx_texth);

sliderx += 40*zoom;
myslider = _startslider+1;
ADSRSlider (sliderx, slidery, sliderh, myslider, 2000, 0);
lightgrey();
gfx_x = sliderx; gfx_y = slidery - sliderh - 20*zoom; gfx_setfont(2);
gfx_drawstr("D", 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);
gfx_x = sliderx; gfx_y = slidery + 20*zoom;
gfx_setfont(1);
sprintf(#readout, "%.0f", slider(myslider));
gfx_drawstr(#readout, 0x01, gfx_x + 35*zoom, gfx_y + gfx_texth);

sliderx += 40*zoom;
myslider = _startslider+2;
ADSRSlider (sliderx, slidery, sliderh, myslider, 10, 7);
lightgrey();
gfx_x = sliderx; gfx_y = slidery - sliderh - 20*zoom; gfx_setfont(2);
gfx_drawstr("S", 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);
gfx_x = sliderx; gfx_y = slidery + 20*zoom;
gfx_setfont(1);
sprintf(#readout, "%.2f", slider(myslider));
gfx_drawstr(#readout, 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);

sliderx += 40*zoom;
myslider = _startslider+3;
ADSRSlider (sliderx, slidery, sliderh, myslider, 4000, 0);
lightgrey();
gfx_x = sliderx; gfx_y = slidery - sliderh - 20*zoom; gfx_setfont(2);
gfx_drawstr("R", 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);
gfx_x = sliderx; gfx_y = slidery + 20*zoom;
gfx_setfont(1);
sprintf(#readout, "%.0f", slider(myslider));
gfx_drawstr(#readout, 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);

 slidery += 5*zoom;
 myslider = _startslider+4;
 switchon = slider(myslider);
 gfx_x = sliderx + 70*zoom;
 gfx_y = slidery - sliderh + 12*zoom;
 ledon = switchon;
 gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
 gfx_y = slidery - 33*zoom;
 ledon = !switchon;
 gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
 gfx_x = sliderx + 40*zoom;
 gfx_y = slidery - sliderh + 30*zoom;
 gfx_blit(45,zoom*0.5,0,0,switchon*120,96,120);
 g_collision(gfx_x+15*zoom,gfx_y+4*zoom,20*zoom, 50*zoom) && mouseClick == 1 ? (slider(myslider) == 0 ? slider(myslider) = 1 : slideR(myslider) = 0; caller = 1);
 gfx_setfont(1); gfx_x += 7*zoom; gfx_y -= 26*zoom; 
 gfx_drawstr("LONG");
 slidery -= 5;
 );
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 !synth_mode ? (
 
 sliderx = 40*zoom;
 slidery = 160*zoom;
 lightgrey(); gfx_a = 1;
 gfx_roundrect(sliderx - 10*zoom, slidery - sliderh - 30*zoom, 233*zoom, 200*zoom, 7*zoom);
 gfx_y = slidery+47*zoom; gfx_x = sliderx + 4*zoom; gfx_setfont(2);
 gfx_drawstr("Envelope 1");
 draw_adsr(Env1.startslider);
 
 sliderx = 273*zoom;
 slidery = 160*zoom;
 lightgrey(); gfx_a = 1;
 gfx_roundrect(sliderx - 10*zoom, slidery - sliderh - 30*zoom, 233*zoom, 200*zoom, 7*zoom);
 gfx_y = slidery+47*zoom; gfx_x = sliderx + 4*zoom; gfx_setfont(2);
 gfx_drawstr("Envelope 2");
 draw_adsr(Env2.startslider);
 
 sliderx = 506*zoom;
 slidery = 160*zoom;
 lightgrey(); gfx_a = 1;
 gfx_roundrect(sliderx - 10*zoom, slidery - sliderh - 30*zoom, 233*zoom, 200*zoom, 7*zoom);
 gfx_y = slidery+47*zoom; gfx_x = sliderx + 4*zoom; gfx_setfont(2);
 gfx_drawstr("Envelope 3");
 draw_adsr(Env3.startslider);
 
 sliderx = 739*zoom;
 slidery = 160*zoom;
 lightgrey(); gfx_a = 1;
 gfx_roundrect(sliderx - 10*zoom, slidery - sliderh - 30*zoom, 233*zoom, 200*zoom, 7*zoom);
 gfx_y = slidery+47*zoom; gfx_x = sliderx + 4*zoom; gfx_setfont(2);
 gfx_drawstr("Envelope 4");
 draw_adsr(Env6.startslider);
 
  );// !Synth mode
  
 lightgrey(); gfx_a = 1;
 sliderx = 972*zoom;
 slidery = 160*zoom;
 gfx_setfont(2);
  gfx_roundrect(sliderx - 10*zoom, slidery - sliderh - 30*zoom, 450*zoom, 200*zoom, 7*zoom);
 /*
 lightgrey(); gfx_a = 1;
 gfx_y = 40*zoom; gfx_x = sliderx + 240*zoom; gfx_setfont(2);
 gfx_drawstr("FILTER");
 */
  gfx_y = filter_but_y = slidery+45*zoom;
 gfx_x = filter_but_bp = sliderx + 4*zoom; lightgrey();
 gfx_drawstR("FILTER:"); 
 
 
   gfx_x += 9*zoom; gfx_y *= 1; gfx_setfont(5,"Arial",12*zoom,'b');
   black();
   gfx_rect(filter_select_x = gfx_x, filter_select_y = gfx_y, 130*zoom, 20*zoom);
   lightgrey();
   gfx_rect(gfx_x-zoom, gfx_y, 90*zoom, 20*zoom,0);
   gfx_x -= 44*zoom;
   gfx_triangle(gfx_x + 118*zoom, gfx_y + 8*zoom,    gfx_x + 126*zoom, gfx_y + 8*zoom,     gfx_x + 122*zoom, gfx_y + 13*zoom); 
   gfx_x += 44*zoom;
   
slideR(synth.filter.startslider + 3)== 0 ? #readout = "Linear" :
slideR(synth.filter.startslider + 3)== 1 ? #readout = "Lin Xtreme" :
slideR(synth.filter.startslider + 3)== 2 ? #readout = "Ladder 1" :
slideR(synth.filter.startslider + 3)== 3 ? #readout = "Ladder 2" :
slideR(synth.filter.startslider + 3) == 4 ? #readout = "303" :
slideR(synth.filter.startslider + 3)== 5 ? #readout = "MS2 1" :
slideR(synth.filter.startslider + 3)== 6 ? #readout = "MS2 2" :
slideR(synth.filter.startslider + 3)== 7 ? #readout = "Steiner" :
slideR(synth.filter.startslider + 3) == 8 ? #readout = "Steiner A";



   gfx_a = 1;
   gfx_x += 3*zoom; gfx_y += 4*zoom; rgb(50,190,50);
   gfx_drawstr(#readout);
   
   
 /*
 gfx_x = filter_but_12 = sliderx + 34*zoom; slideR(synth.filter.startslider + 3) == 1 && slideR(synth.filter.startslider + 2) == 0 ? rgb(70,190,70) : rgb(100,100,100);
 gfx_drawstR("LP12");
 gfx_x = filter_but_24 = sliderx + 84*zoom; slideR(synth.filter.startslider + 3) == 1 && slideR(synth.filter.startslider + 2) == 1 ? rgb(70,190,70) : rgb(100,100,100);
 gfx_drawstR("LP24");
 gfx_x = filter_but_48 = sliderx + 134*zoom; slideR(synth.filter.startslider + 3) == 1 && slideR(synth.filter.startslider + 2) == 2 ? rgb(70,190,70) : rgb(100,100,100);
 gfx_drawstR("LP48");
 */
 
 draw_adsr(Env5.startslider);
 
 
 
 function Draw_Osc () (
  lightgrey();
  gfx_roundrect(oscx, oscy, 1000*zoom, 140*zoom,7*zoom);
  
  this.pwm.parameter_config       (this.startslider+8,       2.5,        0,    5,   (oscx/zoom)+180,  (oscy/zoom) + 37,  120, 101,    1,       4);
  this.transpose.parameter_config (this.startslider+3,         0,      -36,    36,  (oscx/zoom)+295,  (oscy/zoom) + 37,  120, 101,    1,       4);
  this.pitchamount.parameter_config (this.startslider+5,       12,     -36,    36,  (oscx/zoom)+525,  (oscy/zoom) + 37,  120, 101,    1,       4);
  this.finetune.parameter_config  (this.startslider+4,         0,      -100, 100,  (oscx/zoom)+410,  (oscy/zoom) + 37,  120, 101,    1,       4);
  this.pan.parameter_config       (this.startslider+2,         0,      -100, 100,  (oscx/zoom)+760,  (oscy/zoom) + 37,  120, 101,    1,       4);
  this.Level.parameter_config       (this.startslider,         7,      0, 10,  (oscx/zoom)+890,  (oscy/zoom) + 30,  150, 101,    1,       3);
  
  
  
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.pitchamount.knob();
  lightgrey();
  #klabel = "PITCH WH."; gfx_measurestr(#klabel, klw, klh); this.pitchamount.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "-36"; gfx_measurestr(#klabel, klw, klh); this.pitchamount.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "-18"; gfx_measurestr(#klabel, klw, klh); this.pitchamount.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.pitchamount.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "18"; gfx_measurestr(#klabel, klw, klh); this.pitchamount.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "36"; gfx_measurestr(#klabel, klw, klh); this.pitchamount.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.pitchamount.XIn * zoom; gfx_y = this.pitchamount.yIn * zoom + this.pitchamount.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%i", slideR(this.pitchamount.slideR)), 0x01, gfx_x + this.pitchamount.Size*zoom/2, gfx_y + gfx_texth);
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  modmode == 1 ? (
  
  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  this.waveform == 5 ? (
  this.GFXosc.render_waveform();
  black();
  gfx_rect(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*0.5);
   gfx_setfont(7,"Arial",12*zoom,'b');
    gfx_x = this.pwm.xIn*zoom - 10*zoom;
    //#klabel = "pwm"; gfx_measurestr(#klabel, klw, klh); this.pwm.knoblabelposition(klw);
    gfx_x = this.pwm.xIn*zoom - 10*zoom; gfx_y = oscy + 24*zoom;
    lightgreY();
    gfx_drawstr("AMOUNT");
    
    slidervalue = slider(this.startslider+22);
    rgb(40,100,220);
    gfx_x = this.pwm.xIn*zoom - 10*zoom + 42.5*zoom; gfx_y = this.pwm.yIn*zoom;
    gfx_rectto(gfx_x +  (slidervalue/5) * 42.5*zoom, gfx_y + this.pwm.size*zoom*(1/6));
    gfx_x = this.pwm.xIn*zoom - 10*zoom; gfx_y = oscy + 38*zoom;
    slidervalue ? white() : lightgreY();// gfx_a = 0.55;
    gfx_drawstr(sprintf(#,"%.2f", slidervalue*20), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    lightgrey(); 
    gfx_roundrect(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*(1/6) ,0);
    
    slidervalue = slider(this.startslider+23);
    gfx_x = this.pwm.xIn*zoom - 10*zoom; gfx_y = this.pwm.yIn*zoom + 20*zoom;
    Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
    gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    
    slidervalue = slider(this.startslider+29);
    slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();
    gfx_x = this.pwm.xIn*zoom - 10*zoom;
    gfx_y = this.pwm.yIn*zoom + 40*zoom;
    gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
    slidervalue ? black() : rgb(120,120,120);
    gfx_drawstr(slidervalue == 2 ? "AFT" : "WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    slidervalue = slider(this.startslider+24);
    rgb(40,230,40);
    gfx_x = this.pwm.xIn*zoom + 32.5*zoom;
    gfx_y = this.pwm.yIn*zoom + 40*zoom;
    !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    
    lightgrey(); 
    gfx_roundrect(this.pwm.xIn*zoom - 10*zoom, 20*zoom+this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*(1/6) ,0);
    gfx_roundrect(this.pwm.xIn*zoom - 10*zoom, 40*zoom+this.pwm.yIn*zoom, 42.5*zoom, this.pwm.size*zoom*(1/6) ,0);
  
    lightgrey(); 
    gfx_roundrect(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*0.5 ,0);
    gfx_x = this.pwm.xIn*zoom - 10*zoom; gfx_y = oscy + 102*zoom;
    gfx_drawstr("PWM");
    );
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  black();
  gfx_rect(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*0.5);
   gfx_setfont(7,"Arial",12*zoom,'b');
    gfx_x = this.transpose.xIn*zoom - 10*zoom;
    //#klabel = "TRANSPOSE"; gfx_measurestr(#klabel, klw, klh); this.transpose.knoblabelposition(klw);
    gfx_x = this.transpose.xIn*zoom - 10*zoom; gfx_y = oscy + 24*zoom;
    lightgreY();
    gfx_drawstr("AMOUNT");
    
    slidervalue = slider(this.startslider+16);
    rgb(40,100,220);
    gfx_x = this.transpose.xIn*zoom - 10*zoom + 42.5*zoom; gfx_y = this.transpose.yIn*zoom;
    gfx_rectto(gfx_x +  (slidervalue/36) * 42.5*zoom, gfx_y + this.transpose.size*zoom*(1/6));
    gfx_x = this.transpose.xIn*zoom - 10*zoom; gfx_y = oscy + 38*zoom;
    slidervalue ? white() : lightgreY();// gfx_a = 0.55;
    gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    lightgrey(); 
    gfx_roundrect(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*(1/6) ,0);
    
    slidervalue = slider(this.startslider+17);
    gfx_x = this.transpose.xIn*zoom - 10*zoom; gfx_y = this.transpose.yIn*zoom + 20*zoom;
    Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
    gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    
    slidervalue = slider(this.startslider+27);
    slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();  
    gfx_x = this.transpose.xIn*zoom - 10*zoom;
    gfx_y = this.transpose.yIn*zoom + 40*zoom;
    gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
    slidervalue ? black() : rgb(120,120,120);
    gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    slidervalue = slider(this.startslider+18);
    rgb(40,230,40);
    gfx_x = this.transpose.xIn*zoom + 32.5*zoom;
    gfx_y = this.transpose.yIn*zoom + 40*zoom;
    !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    
    lightgrey(); 
    gfx_roundrect(this.transpose.xIn*zoom - 10*zoom, 20*zoom+this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*(1/6) ,0);
    gfx_roundrect(this.transpose.xIn*zoom - 10*zoom, 40*zoom+this.transpose.yIn*zoom, 42.5*zoom, this.transpose.size*zoom*(1/6) ,0);
  
    lightgrey(); 
    gfx_roundrect(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*0.5 ,0);
    gfx_x = this.transpose.xIn*zoom - 10*zoom; gfx_y = oscy + 102*zoom;
    gfx_drawstr("TRANSPOSE");
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    black();
    gfx_rect(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*0.5);
     gfx_setfont(7,"Arial",12*zoom,'b');
      gfx_x = this.finetune.xIn*zoom - 10*zoom;
      //#klabel = "finetune"; gfx_measurestr(#klabel, klw, klh); this.finetune.knoblabelposition(klw);
      gfx_x = this.finetune.xIn*zoom - 10*zoom; gfx_y = oscy + 24*zoom;
      lightgreY();
      gfx_drawstr("AMOUNT");
      
      slidervalue = slider(this.startslider+19);
      rgb(40,100,220);
      gfx_x = this.finetune.xIn*zoom - 10*zoom + 42.5*zoom; gfx_y = this.finetune.yIn*zoom;
      gfx_rectto(gfx_x +  (slidervalue/100) * 42.5*zoom, gfx_y + this.finetune.size*zoom*(1/6));
      gfx_x = this.finetune.xIn*zoom - 10*zoom; gfx_y = oscy + 38*zoom;
      slidervalue ? white() : lightgreY();// gfx_a = 0.55;
      gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
      lightgrey(); 
      gfx_roundrect(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*(1/6) ,0);
      
      slidervalue = slider(this.startslider+20);
      gfx_x = this.finetune.xIn*zoom - 10*zoom; gfx_y = this.finetune.yIn*zoom + 20*zoom;
      Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
      gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
      
      slidervalue = slider(this.startslider+28);
      slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();
      gfx_x = this.finetune.xIn*zoom - 10*zoom;
      gfx_y = this.finetune.yIn*zoom + 40*zoom;
      gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
      slidervalue ? black() : rgb(120,120,120);
      gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
      
      slidervalue = slider(this.startslider+21);
      rgb(40,230,40);
      gfx_x = this.finetune.xIn*zoom + 32.5*zoom;
      gfx_y = this.finetune.yIn*zoom + 40*zoom;
      !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
      
      
      lightgrey(); 
      gfx_roundrect(this.finetune.xIn*zoom - 10*zoom, 20*zoom+this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*(1/6) ,0);
      gfx_roundrect(this.finetune.xIn*zoom - 10*zoom, 40*zoom+this.finetune.yIn*zoom, 42.5*zoom, this.finetune.size*zoom*(1/6) ,0);
    
      lightgrey(); 
      gfx_roundrect(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*0.5 ,0);
      gfx_x = this.finetune.xIn*zoom - 10*zoom; gfx_y = oscy + 102*zoom;
      gfx_drawstr("CENTS");
      
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
      
      /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      black();
      gfx_rect(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*0.5);
       gfx_setfont(7,"Arial",12*zoom,'b');
        gfx_x = this.pan.xIn*zoom - 10*zoom;
        //#klabel = "pan"; gfx_measurestr(#klabel, klw, klh); this.pan.knoblabelposition(klw);
        gfx_x = this.pan.xIn*zoom - 10*zoom; gfx_y = oscy + 24*zoom;
        lightgreY();
        gfx_drawstr("AMOUNT");
        
        slidervalue = slider(this.startslider+13);
        rgb(40,100,220);
        gfx_x = this.pan.xIn*zoom - 10*zoom + 42.5*zoom; gfx_y = this.pan.yIn*zoom;
        gfx_rectto(gfx_x +  (slidervalue/100) * 42.5*zoom, gfx_y + this.pan.size*zoom*(1/6));
        gfx_x = this.pan.xIn*zoom - 10*zoom; gfx_y = oscy + 38*zoom;
        slidervalue ? white() : lightgreY();// gfx_a = 0.55;
        gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
        lightgrey(); 
        gfx_roundrect(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*(1/6) ,0);
        
        slidervalue = slider(this.startslider+14);
        gfx_x = this.pan.xIn*zoom - 10*zoom; gfx_y = this.pan.yIn*zoom + 20*zoom;
        Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
        gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
        
        slidervalue = slider(this.startslider+26);
        slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();
        gfx_x = this.pan.xIn*zoom - 10*zoom;
        gfx_y = this.pan.yIn*zoom + 40*zoom;
        gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
        slidervalue ? black() : rgb(120,120,120);
        gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
        
        slidervalue = slider(this.startslider+15);
        rgb(40,230,40);
        gfx_x = this.pan.xIn*zoom + 32.5*zoom;
        gfx_y = this.pan.yIn*zoom + 40*zoom;
        !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
        
        
        lightgrey(); 
        gfx_roundrect(this.pan.xIn*zoom - 10*zoom, 20*zoom+this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*(1/6) ,0);
        gfx_roundrect(this.pan.xIn*zoom - 10*zoom, 40*zoom+this.pan.yIn*zoom, 42.5*zoom, this.pan.size*zoom*(1/6) ,0);
      
        lightgrey(); 
        gfx_roundrect(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*0.5 ,0);
        gfx_x = this.pan.xIn*zoom - 10*zoom; gfx_y = oscy + 102*zoom;
        gfx_drawstr("PANORAMA");
        
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      
      
          this.Level.parameter_config       (this.startslider,         7,      0, 10,  (oscx/zoom)+890,  (oscy/zoom) + 37,  120, 101,    1,       3);
          
          /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
          black();
          gfx_rect(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom, 85*zoom, this.level.size*zoom*0.5);
           gfx_setfont(7,"Arial",12*zoom,'b');
            gfx_x = this.level.xIn*zoom - 10*zoom;
            //#klabel = "level"; gfx_measurestr(#klabel, klw, klh); this.level.knoblabelposition(klw);
            gfx_x = this.level.xIn*zoom - 10*zoom; gfx_y = oscy + 24*zoom;
            lightgreY();
            gfx_drawstr("AMOUNT");
            
            slidervalue = slider(this.startslider+10);
            rgb(40,100,220);
            gfx_x = this.level.xIn*zoom - 10*zoom; gfx_y = this.level.yIn*zoom;
            gfx_rectto(gfx_x +  (slidervalue/10) * 85*zoom, gfx_y + this.level.size*zoom*(1/6));
            gfx_x = this.level.xIn*zoom - 10*zoom; gfx_y = oscy + 38*zoom;
            slidervalue ? white() : lightgreY();// gfx_a = 0.55;
            gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
            lightgrey(); 
            gfx_roundrect(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom, 85*zoom, this.level.size*zoom*(1/6) ,0);
            
            slidervalue = slider(this.startslider+11);
            gfx_x = this.level.xIn*zoom - 10*zoom; gfx_y = this.level.yIn*zoom + 20*zoom;
            Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
            gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
            
            slidervalue = slider(this.startslider+25);
            slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();
            gfx_x = this.level.xIn*zoom - 10*zoom;
            gfx_y = this.level.yIn*zoom + 40*zoom;
            gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
            slidervalue ? black() : rgb(120,120,120);
            gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
            
            slidervalue = slider(this.startslider+12);
            rgb(40,230,40);
            gfx_x = this.level.xIn*zoom + 32.5*zoom;
            gfx_y = this.level.yIn*zoom + 40*zoom;
            !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
            
            
            lightgrey(); 
            gfx_roundrect(this.level.xIn*zoom - 10*zoom, 20*zoom+this.level.yIn*zoom, 85*zoom, this.level.size*zoom*(1/6) ,0);
            gfx_roundrect(this.level.xIn*zoom - 10*zoom, 40*zoom+this.level.yIn*zoom, 42.5*zoom, this.level.size*zoom*(1/6) ,0);
          
            lightgrey(); 
            gfx_roundrect(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom, 85*zoom, this.level.size*zoom*0.5 ,0);
            gfx_x = this.level.xIn*zoom - 10*zoom; gfx_y = oscy + 102*zoom;
            gfx_drawstr("LEVEL");
            
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            
            
            Mouseclick == 1 ? (
            
            this.Level_mod.parameter_config     (this.startslider+10,         0,      0, 10,  0, 0, 0, 0, 0, 0); // Med +11 Mode + 12  Whl +26
            this.PWM_mod.parameter_config       (this.startslider+22,      0,     -5,  5,  0, 0, 0, 0, 0, 0); // Med +23 Mode + 24  Whl +29
            this.Transpose_mod.parameter_config (this.startslider+16,      0,    -36, 36,  0, 0, 0, 0, 0, 0); // Med +17 Mode + 18  Whl +27
            this.Finetune_mod.parameter_config  (this.startslider+19,      0,   -100,100,  0, 0, 0, 0, 0, 0); // Med +20 Mode + 21  Whl +28
            this.Pan_mod.parameter_config  (this.startslider+13,      0,   -100,100,  0, 0, 0, 0, 0, 0); // Med +14 Mode + 15  Whl +26
            
            
            g_collision(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom, 85*zoom, this.level.size*zoom*(1/6)) ? this.level_mod.dragstart();
            g_collision(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom+40*zoom, 42.5*zoom, this.level.size*zoom*(1/6)) ? (slider(this.startslider+25) = slider(this.startslider+25) == 2 ? 0 : slider(this.startslider+25) + 1; caller = 1);
            g_collision(this.level.xIn*zoom + 32.5*zoom, this.level.yIn*zoom+40*zoom, 42.5*zoom, this.level.size*zoom*(1/6)) ? (slider(this.startslider+12) = slider(this.startslider+12) == 0 ? 1 : 0; caller = 1);
            g_collision(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom + 20*zoom, 85*zoom, this.level.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(0); sel_mod > -1 ? slider(this.startslider+11) = sel_mod;caller = 1);
            
            g_collision(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*(1/6)) ? this.pan_mod.dragstart();
            g_collision(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom+40*zoom, 42.5*zoom, this.pan.size*zoom*(1/6)) ? (slider(this.startslider+26) = slider(this.startslider+26)  == 2 ? 0 : slider(this.startslider+26) + 1; caller = 1);
            g_collision(this.pan.xIn*zoom + 32.5*zoom, this.pan.yIn*zoom+40*zoom, 42.5*zoom, this.pan.size*zoom*(1/6)) ? (slider(this.startslider+15) = slider(this.startslider+15) == 0 ? 1 : 0; caller = 1);
            g_collision(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom+20*zoom, 85*zoom, this.pan.size*zoom*(1/6)) ?  (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(0); sel_mod > -1 ? slider(this.startslider+14) = sel_mod;caller = 1);
            
            g_collision(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*(1/6)) ? this.finetune_mod.dragstart();
            g_collision(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom+40*zoom, 42.5*zoom, this.finetune.size*zoom*(1/6)) ? (slider(this.startslider+28) = slider(this.startslider+28)  == 2 ? 0 : slider(this.startslider+28) + 1; caller = 1);
            g_collision(this.finetune.xIn*zoom + 32.5*zoom, this.finetune.yIn*zoom+40*zoom, 42.5*zoom, this.finetune.size*zoom*(1/6)) ? (slider(this.startslider+21) = slider(this.startslider+21) == 0 ? 1 : 0; caller = 1);
            g_collision(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom+20*zoom, 85*zoom, this.finetune.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(1); sel_mod > -1 ? slider(this.startslider+20) = sel_mod;caller = 1);
            
            g_collision(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*(1/6)) ? this.transpose_mod.dragstart();
            g_collision(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom+40*zoom, 42.5*zoom, this.transpose.size*zoom*(1/6)) ? (slider(this.startslider+27) = slider(this.startslider+27)  == 2 ? 0 : slider(this.startslider+27) + 1; caller = 1);
            g_collision(this.transpose.xIn*zoom + 32.4*zoom, this.transpose.yIn*zoom+40*zoom, 42.5*zoom, this.transpose.size*zoom*(1/6)) ? (slider(this.startslider+18) = slider(this.startslider+18) == 0 ? 1 : 0; caller = 1);
            g_collision(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom+20*zoom, 85*zoom, this.transpose.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(1); sel_mod > -1 ? slider(this.startslider+17) = sel_mod;caller = 1);
            
            this.waveform == 5 ? g_collision(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*(1/6)) ? this.pwm_mod.dragstart();
            this.waveform == 5 ? g_collision(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom+40*zoom, 42.5*zoom, this.pwm.size*zoom*(1/6)) ? (slider(this.startslider+29) = slider(this.startslider+29)  == 2 ? 0 : slider(this.startslider+29) + 1; caller = 1);
            this.waveform == 5 ? g_collision(this.pwm.xIn*zoom + 32.5*zoom, this.pwm.yIn*zoom+40*zoom, 42.5*zoom, this.pwm.size*zoom*(1/6)) ? (slider(this.startslider+24) = slider(this.startslider+24) == 0 ? 1 : 0; caller = 1);
            this.waveform == 5 ? g_collision(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom+20 * zoom, 85*zoom, this.pwm.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(1); sel_mod > -1 ? slider(this.startslider+23) = sel_mod;caller = 1);
            
            );
            
            
            mouseclick == -1 ? (
            
            this.level_mod.dragstop();
            this.pan_mod.dragstop();
            this.finetune_mod.dragstop();
            this.transpose_mod.dragstop();
            this.pwm_mod.dragstop();
            
            );
            
            this.level_mod.dragging ? (this.level_mod.potdrag(); caller = 1);
            this.pan_mod.dragging ? (this.pan_mod.potdrag(); caller = 1);
            this.finetune_mod.dragging ? (this.finetune_mod.potdrag(); caller = 1);
            this.transpose_mod.dragging ? (this.transpose_mod.potdrag(); caller = 1);
            this.pwm_mod.dragging ? (this.pwm_mod.potdrag(); caller = 1);
            
            
            mouse_wheel ? (
            
            g_collision(this.level.xIn*zoom - 10*zoom, this.level.yIn*zoom, 85*zoom, this.level.size*zoom*0.5) ? this.level_mod.potwheel();
            g_collision(this.pan.xIn*zoom - 10*zoom, this.pan.yIn*zoom, 85*zoom, this.pan.size*zoom*0.5) ? this.pan_mod.potwheel();
            g_collision(this.finetune.xIn*zoom - 10*zoom, this.finetune.yIn*zoom, 85*zoom, this.finetune.size*zoom*0.5) ? this.finetune_mod.potwheel();
            g_collision(this.transpose.xIn*zoom - 10*zoom, this.transpose.yIn*zoom, 85*zoom, this.transpose.size*zoom*0.5) ? this.transpose_mod.potwheel();
            this.waveform == 5 ? g_collision(this.pwm.xIn*zoom - 10*zoom, this.pwm.yIn*zoom, 85*zoom, this.pwm.size*zoom*0.5) ? this.pwm_mod.potwheel();
            
            caller = 1;
            );
  ); // Modmode == 1
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  modmode == 0 ? (
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.waveform == 5 ? (
  this.GFXosc.render_waveform();
  this.pwm.knob();
  lightgrey();
  #klabel = "WIDTH"; gfx_measurestr(#klabel, klw, klh); this.pwm.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.pwm.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "25"; gfx_measurestr(#klabel, klw, klh); this.pwm.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "50"; gfx_measurestr(#klabel, klw, klh); this.pwm.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "75"; gfx_measurestr(#klabel, klw, klh); this.pwm.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "100"; gfx_measurestr(#klabel, klw, klh); this.pwm.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.pwm.XIn * zoom; gfx_y = this.pwm.yIn * zoom + this.pwm.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%i", slideR(this.pwm.slideR)*20), 0x01, gfx_x + this.pwm.Size*zoom/2, gfx_y + gfx_texth);
  slider(this.startslider+22) && (slider(this.startslider+23)||slider(this.startslider+29)) ? (
  rgb(80,180,80);
  gfx_arc(this.pwm.xIn*zoom + this.pwm.size*zoom/4, this.pwm.yin*zoom+this.pwm.size*zoom/4,this.pwm.size*zoom/4 + 2*zoom, -2.2,2.2);
  gfx_arc(this.pwm.xIn*zoom + this.pwm.size*zoom/4, this.pwm.yin*zoom+this.pwm.size*zoom/4,this.pwm.size*zoom/4 + 1.5*zoom, -2.2,2.2);
  gfx_arc(this.pwm.xIn*zoom + this.pwm.size*zoom/4, this.pwm.yin*zoom+this.pwm.size*zoom/4,this.pwm.size*zoom/4 + 1*zoom, -2.2,2.2);
  rgb(220,20,20); #klabel = "WIDTH"; gfx_measurestr(#klabel, klw, klh); this.pwm.knoblabelposition(klw);gfx_drawstr(#klabel);
  );
  );
  
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.transpose.knob();
  lightgrey();
  #klabel = "TRANSPOSE"; gfx_measurestr(#klabel, klw, klh); this.transpose.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "-36"; gfx_measurestr(#klabel, klw, klh); this.transpose.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "-18"; gfx_measurestr(#klabel, klw, klh); this.transpose.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.transpose.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "18"; gfx_measurestr(#klabel, klw, klh); this.transpose.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "36"; gfx_measurestr(#klabel, klw, klh); this.transpose.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.transpose.XIn * zoom; gfx_y = this.transpose.yIn * zoom + this.transpose.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%i", slideR(this.transpose.slideR)), 0x01, gfx_x + this.transpose.Size*zoom/2, gfx_y + gfx_texth);
  slider(this.startslider+16) && (slider(this.startslider+17)||slider(this.startslider+27)) ? (
  rgb(80,180,80);
    gfx_arc(this.transpose.xIn*zoom + this.transpose.size*zoom/4, this.transpose.yin*zoom+this.transpose.size*zoom/4,this.transpose.size*zoom/4 + 2*zoom, -2.2,2.2);
    gfx_arc(this.transpose.xIn*zoom + this.transpose.size*zoom/4, this.transpose.yin*zoom+this.transpose.size*zoom/4,this.transpose.size*zoom/4 + 1.5*zoom, -2.2,2.2);
    gfx_arc(this.transpose.xIn*zoom + this.transpose.size*zoom/4, this.transpose.yin*zoom+this.transpose.size*zoom/4,this.transpose.size*zoom/4 + 1*zoom, -2.2,2.2);
    rgb(220,20,20); #klabel = "TRANSPOSE"; gfx_measurestr(#klabel, klw, klh); this.transpose.knoblabelposition(klw);gfx_drawstr(#klabel);
  );
  
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.finetune.knob();
  lightgrey();
  #klabel = "CENTS"; gfx_measurestr(#klabel, klw, klh); this.finetune.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "-100"; gfx_measurestr(#klabel, klw, klh); this.finetune.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "-50"; gfx_measurestr(#klabel, klw, klh); this.finetune.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.finetune.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "50"; gfx_measurestr(#klabel, klw, klh); this.finetune.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "100"; gfx_measurestr(#klabel, klw, klh); this.finetune.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.finetune.XIn * zoom; gfx_y = this.finetune.yIn * zoom + this.finetune.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%i", slideR(this.finetune.slideR)), 0x01, gfx_x + this.finetune.Size*zoom/2, gfx_y + gfx_texth);
  slider(this.startslider+19) && (slider(this.startslider+20)||slider(this.startslider+28)) ? (
  rgb(80,180,80);
  gfx_arc(this.finetune.xIn*zoom + this.finetune.size*zoom/4, this.finetune.yin*zoom+this.finetune.size*zoom/4,this.finetune.size*zoom/4 + 2*zoom, -2.2,2.2);
  gfx_arc(this.finetune.xIn*zoom + this.finetune.size*zoom/4, this.finetune.yin*zoom+this.finetune.size*zoom/4,this.finetune.size*zoom/4 + 1.5*zoom, -2.2,2.2);
  gfx_arc(this.finetune.xIn*zoom + this.finetune.size*zoom/4, this.finetune.yin*zoom+this.finetune.size*zoom/4,this.finetune.size*zoom/4 + 1*zoom, -2.2,2.2);
  rgb(220,20,20); #klabel = "CENTS"; gfx_measurestr(#klabel, klw, klh); this.finetune.knoblabelposition(klw);gfx_drawstr(#klabel);
  );
  
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.pan.knob();
  lightgrey();
  #klabel = "PAN"; gfx_measurestr(#klabel, klw, klh); this.pan.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "L100"; gfx_measurestr(#klabel, klw, klh); this.pan.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "L50"; gfx_measurestr(#klabel, klw, klh); this.pan.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.pan.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "R50"; gfx_measurestr(#klabel, klw, klh); this.pan.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "R100"; gfx_measurestr(#klabel, klw, klh); this.pan.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.pan.XIn * zoom; gfx_y = this.pan.yIn * zoom + this.pan.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%i", slideR(this.pan.slideR)), 0x01, gfx_x + this.pan.Size*zoom/2, gfx_y + gfx_texth);
  slider(this.startslider+13) && (slider(this.startslider+14)||slider(this.startslider+26)) ? (
  rgb(80,180,80);
  gfx_arc(this.pan.xIn*zoom + this.pan.size*zoom/4, this.pan.yin*zoom+this.pan.size*zoom/4,this.pan.size*zoom/4 + 2*zoom, -2.2,2.2);
  gfx_arc(this.pan.xIn*zoom + this.pan.size*zoom/4, this.pan.yin*zoom+this.pan.size*zoom/4,this.pan.size*zoom/4 + 1.5*zoom, -2.2,2.2);
  gfx_arc(this.pan.xIn*zoom + this.pan.size*zoom/4, this.pan.yin*zoom+this.pan.size*zoom/4,this.pan.size*zoom/4 + 1*zoom, -2.2,2.2);
  rgb(220,20,20); #klabel = "PAN"; gfx_measurestr(#klabel, klw, klh); this.pan.knoblabelposition(klw);gfx_drawstr(#klabel);
  );
  
  gfx_setfont(2,"Arial",10*zoom,'b');
  this.Level.knob();
  lightgrey();
  #klabel = "LEVEL"; gfx_measurestr(#klabel, klw, klh); this.Level.knoblabelposition(klw);gfx_drawstr(#klabel);
  gfx_setfont(2,"Arial",10*zoom,'b');
  #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.Level.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "2.5"; gfx_measurestr(#klabel, klw, klh); this.Level.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
  #klabel = "5"; gfx_measurestr(#klabel, klw, klh); this.Level.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
  #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); this.Level.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
  #klabel = "10"; gfx_measurestr(#klabel, klw, klh); this.Level.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
  rgb(30,185,30); gfx_x = this.Level.XIn * zoom; gfx_y = this.Level.yIn * zoom + this.Level.Size*zoom/2 - 10*zoom;
  gfx_drawstr(sprintf(#, "%.1f", slideR(this.Level.slideR)), 0x01, gfx_x + this.Level.Size*zoom/2, gfx_y + gfx_texth);
  slider(this.startslider+10) && (slider(this.startslider+11)||slider(this.startslider+25)) ? (
  rgb(90,180,80);
  gfx_arc(this.level.xIn*zoom + this.level.size*zoom/4, this.level.yin*zoom+this.level.size*zoom/4,this.level.size*zoom/4 + 2*zoom, -2.2,2.2);
  gfx_arc(this.level.xIn*zoom + this.level.size*zoom/4, this.level.yin*zoom+this.level.size*zoom/4,this.level.size*zoom/4 + 1.5*zoom, -2.2,2.2);
  gfx_arc(this.level.xIn*zoom + this.level.size*zoom/4, this.level.yin*zoom+this.level.size*zoom/4,this.level.size*zoom/4 + 1*zoom, -2.2,2.2);
  rgb(220,20,20); #klabel = "LEVEL"; gfx_measurestr(#klabel, klw, klh); this.level.knoblabelposition(klw);gfx_drawstr(#klabel);
  );
    ); // ModMode
    
    
  gfx_setfonT(1);
  black();
  gfx_rect(oscx+20*zoom, oscy + 20*zoom, 130*zoom, 80*zoom);
  lightgrey();
  gfx_rect(oscx+19*zoom, oscy + 20*zoom, 132*zoom, 80*zoom,0);
  this.waveform == 0 ? (
    lightgrey(); gfx_x = oscx + 20*zoom; gfx_y = oscy + 20*zoom;
    this.on ? gfx_a = 1 : gfx_a = 0.6;
    gfx_drawstr("WHITE NOISE", 0x05, gfx_x + 130*zoom, gfx_y + 80*zoom);
  ): this.waveform == 1 ? (
    rgb(220,0,220);this.on ? gfx_a = 1 : gfx_a = 0.6;
    gfx_x = oscx + 20*zoom; gfx_y = oscy + 20*zoom;
    gfx_drawstr("PINK NOISE", 0x05, gfx_x + 130*zoom, gfx_y + 80*zoom);
  ): this.waveform > 1 ? (
  gfx_x = oscx + 20*zoom; gfx_y = oscy + 60*zoom;
  //rgb(80,190,80);
  this.on ? rgb(50,190,50) : rgb(100,100,100);
  tmploop = 0;
  loop(130*zoom,
    gfx_lineto(oscx +20*zoom+tmploop, oscy + 60*zoom - 38*zoom*this.GFXosc.buf[(tmploop/(130*zoom)) * 2048]);
    gfx_lineto(oscx +20*zoom+tmploop, oscy + 61*zoom - 38*zoom*this.GFXosc.buf[(tmploop/(130*zoom)) * 2048]);
  tmploop += 1;
  );
  );
  
  gfx_a = 1;
  gfx_x = waveshapex = oscx + 20*zoom; gfx_y = waveshapey = oscy + 110*zoom; gfx_setfonT(1);
  black();
  gfx_rect(gfx_x, gfx_y, 130*zoom, 20*zoom);
  lightgrey();
  gfx_rect(gfx_x-zoom, gfx_y, 132*zoom, 20*zoom,0);
  gfx_triangle(gfx_x + 118*zoom, gfx_y + 8*zoom,    gfx_x + 126*zoom, gfx_y + 8*zoom,     gfx_x + 122*zoom, gfx_y + 13*zoom); 
  
This.waveform == 0 ? #readout = "White Noise" :
This.waveform == 1 ? #readout = "Pink Noise" :
This.waveform == 2 ? #readout = "Sine" :
This.waveform == 3 ? #readout = "Triangle" :
This.waveform == 4 ? #readout = "Sawtooth" :
This.waveform == 5 ? #readout = "Square" :
This.waveform == 6 ? #readout = "Square 2" :
This.waveform == 7 ? #readout = "Bass Saw" :
This.waveform == 8 ? #readout = "Cheap Saw" :
This.waveform == 9 ? #readout = "Unharmonix" :
This.waveform == 10 ? #readout = "5th" :
This.waveform == 11 ? #readout = "Add Overtones" :
This.waveform == 12 ? #readout = "Nasty Bell" :
This.waveform == 13 ? #readout = "VocOow" :
This.waveform == 14 ? #readout = "Upright Bass" :
This.waveform == 15 ? #readout = "Cello" :
This.waveform == 16 ? #readout = "Sad Strings" :
This.waveform == 17 ? #readout = "Strings" :
This.waveform == 18 ? #readout = "Clarinet" :
This.waveform == 19 ? #readout = "Clarinet 2" :
This.waveform == 20 ? #readout = "English Horn" :
This.waveform == 21 ? #readout = "Organish" :
This.waveform == 22 ? #readout = "Organish 2" :
This.waveform == 23 ? #readout = "Organish 3" :
This.waveform == 24 ? #readout = "Organish 4" :
This.waveform == 25 ? #readout = "Pipe Organish" :
This.waveform == 26 ? #readout = "Wheel Organish" :
This.waveform == 27 ? #readout = "Positiv Organish" :
This.waveform == 28 ? #readout = "Piano" :
This.waveform == 29 ? #readout = "Piano 2" :
This.waveform == 30 ? #readout = "E-Piano" :
This.waveform == 31 ? #readout = "Hard E-Piano" :
This.waveform == 32 ? #readout = "FM Piano 1" :
This.waveform == 33 ? #readout = "FM Piano 2" :
This.waveform == 34 ? #readout = "Suitcase Piano" :
This.waveform == 35 ? #readout = "Wurly Piano" :
This.waveform == 36 ? #readout = "Digital Piano" :
This.waveform == 37 ? #readout = "Real Clav" :
This.waveform == 38 ? #readout = "Fat Clav" :
This.waveform == 39 ? #readout = "Industrial Clav" :
This.waveform == 40 ? #readout = "Wah Clav" :
This.waveform == 41 ? #readout = "Harpsi" :
This.waveform == 42 ? #readout = "Banjo" :
This.waveform == 43 ? #readout = "Mellow" :
This.waveform == 44 ? #readout = "Harsh" ;
  
  
  gfx_a = 1;
  gfx_x += 3*zoom; gfx_y += 4*zoom; this.on ? rgb(50,190,50) : rgb(100,100,100);
  gfx_drawstr(#readout);
  
  
  
  lightgrey();
  gfx_x = env_select = oscx + 620*zoom; gfx_y = oscy + 25*zoom;
   this.vca_env == 1 ? ledon = 1 : ledon = 0;
   gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
   gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("1"); gfx_y += 5*zoom;
   gfx_x = env_select + 20*zoom; this.vca_env == 2 ? ledon = 1 : ledon = 0;
    gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
    gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("2"); gfx_y += 5*zoom;
    gfx_x = env_select+40*zoom; this.vca_env == 3 ? ledon = 1 : ledon = 0;
     gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
     gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("3"); gfx_y += 5*zoom;
     gfx_x = env_select + 60*zoom; this.vca_env == 4 ? ledon = 1 : ledon = 0;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("4"); gfx_y += 5*zoom;
  gfx_x = env_select = oscx + 620*zoom; gfx_y = oscy + 55*zoom;
  gfx_drawstr("VCA ENVELOPE");  
  
  
  lightgrey();
  gfx_x = env_select; gfx_y = oscy + 85*zoom;
   this.sync_to == 1 ? ledon = 1 : ledon = 0;
   gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
   gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("1"); gfx_y += 5*zoom;
   gfx_x = env_select + 20*zoom; this.sync_to == 2 ? ledon = 1 : ledon = 0;
    gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
    gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("2"); gfx_y += 5*zoom;
    gfx_x = env_select+40*zoom; this.sync_to == 3 ? ledon = 1 : ledon = 0;
     gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
     gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("3"); gfx_y += 5*zoom;
     gfx_x = env_select + 60*zoom; this.sync_to == 4 ? ledon = 1 : ledon = 0;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y -= 5*zoom; gfx_x += 12*zoom; gfx_drawstr("4"); gfx_y += 5*zoom;
  gfx_x = env_select = oscx + 635*zoom; gfx_y = oscy + 115*zoom;
  gfx_drawstr("OSC SYNC");  
  
  gfx_x = oscx+970*zoom; gfx_y = oscy+5*zoom;
  pwron = !slider(this.startslider+7);
  gfx_blit(48,zoom*0.7,0,0,40*pwron,40,40);
  
  
  
  mouseClick == 1 ? (
      
      g_collision(oscx+970*zoom, oscy+5*zoom, 28*zoom, 28*zoom) ? (slider(this.startslider+7) == 0 ? slider(this.startslider+7) = 1 : slider(this.startslider+7) = 0; Caller = 1);
      
      
      g_collision(waveshapex, waveshapey, 130*zoom, 20*zoom) ? (
      gfx_x = waveshapex; gfx_y = waveshapey;
      last_clicked_item = gfx_showmenu(#waveshapes);
      last_clicked_item ? (slider(this.startslider+1) = last_clicked_item - 1; slider_automatE(slider(this.startslider+1)); caller = 1);
      );
      
      this.pitchamount.k_collision() ? this.pitchamount.dragstart(); 
      
      modmode == 0 ? (
      this.pwm.k_collision() ? this.pwm.dragstart(); 
      this.pan.k_collision() ? this.pan.dragstart(); 
      this.level.k_collision() ? this.level.dragstart(); 
      this.transpose.k_collision() ?  this.transpose.dragstart(); 
      this.finetune.k_collision() ?  this.finetune.dragstart(); 
      );
      
      g_collision(env_select-7*zoom, oscy +20*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+6) = 0; caller = 1);
      g_collision(env_select-7*zoom + 20*zoom, oscy +20*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+6) = 1; caller = 1);
      g_collision(env_select-7*zoom + 40*zoom, oscy +20*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+6) = 2; caller = 1);
      g_collision(env_select-7*zoom + 60*zoom, oscy +20*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+6) = 3; caller = 1);
      
      g_collision(env_select-7*zoom, oscy +80*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+9) = 1; caller = 1);
      g_collision(env_select-7*zoom + 20*zoom, oscy +80*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+9) = 2; caller = 1);
      g_collision(env_select-7*zoom + 40*zoom, oscy +80*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+9) = 3; caller = 1);
      g_collision(env_select-7*zoom + 60*zoom, oscy +80*zoom, 15*zoom, 30*zoom) ? (slider(this.startslider+9) = 4; caller = 1);
  
  );
  
  mouseClick == -1 ? (
    this.pwm.dragstop();
    this.pitchamount.dragstop();
    this.pan.dragstop();
    this.level.dragstop();
    this.finetune.dragstop();
    this.transpose.dragstop();
  );
  
  this.pwm.dragging ? (this.pwm.potdrag(); caller = 1);
  this.pitchamount.dragging ? (this.pitchamount.potdrag_integer(); caller = 1);
  this.pan.dragging ? (this.pan.potdrag(); caller = 1);
  this.level.dragging ? (this.level.potdrag(); caller = 1);
  this.transpose.dragging ? (this.transpose.potdrag_integer(); caller = 1);
  this.finetune.dragging ? (this.finetune.potdrag_integer(); caller = 1);
  
  
  mouse_wheel ? (
  this.pitchamount.k_collision() ? this.pitchamount.potwheel(); 
  modmode == 0 ? (
    this.pwm.k_collision() ? this.pwm.potwheel(); 
     this.pan.k_collision() ? this.pan.potwheel(); 
    this.level.k_collision() ? this.level.potwheel(); 
    this.transpose.k_collision() ?  this.transpose.potwheel(); 
    this.finetune.k_collision() ?  this.finetune.potwheel(); 
  );
  );
  
 );
 
 
 
 
 
 


function op_dragStart ()
        instance          (dragging yOld default array_position valold)
                          (
                           !ctrl ? (
                              yOld = mouse_y;xOld = mouse_x;link_yOld = mouse_y;
                              dragging = 1;
                              valold = array_position[0]; 
                          ) : (
                           array_position[0] = default;opcaller = 1;
                           valold = array_position[0];
                          );
        gen_dragging = 1;
        knob_dragging = 1;
);

function op_dragStop()
        instance        (dragging val valOld array_position)
                        (
                         dragging = 0;
                         valOld = val;
        This.val = array_position[0];
      gen_dragging = 0;
      knob_dragging = 0;
);


function op_potDrag()
            local      (val nachkomma)
              instance   (valOld minVal maxVal yOld mstep array_position)
                       (
                        mstep = 2*(this.maxval - this.minval)/(S2_Mouse_Sensivity*gfx_ext_retina);
                        Shift ? mstep = (this.maxval - this.minval)/(S2_Mouse_Sensivity*S2_Mouse_Finetune*gfx_ext_retina);
                   val = valOld + (yOld - mouse_y) * mstep;
                        val = min(max(val, minVal), maxVal);
                        array_position[0] = val;
                        opcaller = 1;
);



function Draw_Operator () (


       this.level.parameter_config     (operator_startslider+(this-1),     100,        0,     100,   oscx/ zoom +910,  oscy/zoom + 22,  120, 101,    1,       5);
       
       
       
gfx_setfont(2,"Arial",14*zoom,'b');


  lightgrey();
  gfx_roundrect(oscx, oscy, 1000*zoom, 93*zoom,7*zoom);


  switchon = this.opp[1];
  gfx_x = oscx + 30*zoom;
  gfx_y = oscy + 5*zoom;
  ledon = switchon;
  gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
  gfx_y = oscy + 60*zoom;
  ledon = !switchon;
  gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
  gfx_x = oscx + 0*zoom;
  gfx_y = oscy + 23*zoom;
  gfx_blit(45,zoom*0.5,0,0,switchon*120,96,120);
  g_collision(gfx_x+15*zoom,gfx_y+4*zoom,20*zoom, 50*zoom) && mouseClick == 1 ? (this.opp[1] == 0 ? this.opp[1] = 1 : this.opp[1] = 0; opcaller = 1);
  gfx_setfont(1); gfx_x += 60*zoom; gfx_y -= 8*zoom; 
  gfx_drawstr("RATIO");
  gfx_x = oscx + 60*zoom; gfx_y += 55*zoom; 
  gfx_drawstr("FIXED");

  
  gfx_setfont(1,"Arial",10*zoom,'b');
  
  
  this.fixed ? (
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = coarsex = oscx+110*zoom; gfx_y = coarsey = oscy+20*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  this.coarse >= 1 ? gfx_drawstr(sprintf(#, "%i", this.coarse), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth) : gfx_drawstr("0.5", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+110*zoom; gfx_y += 18*zoom;
  gfx_drawstR("COARSE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = finex = oscx+110*zoom; gfx_y = finey = oscy+58*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%.2f", this.fine), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+110*zoom; gfx_y += 18*zoom;
  gfx_drawstR("FINE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ):(
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = coarsex = oscx+110*zoom; gfx_y = coarsey = oscy+20*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.fixcoarse), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+110*zoom; gfx_y += 18*zoom;
  gfx_drawstR("FREQ", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = finex = oscx+110*zoom; gfx_y = finey = oscy+58*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%.2f", this.fixfine), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+110*zoom; gfx_y += 18*zoom;
  gfx_drawstR("FACTOR", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  );
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = detunex = oscx+175*zoom; gfx_y = detuney = oscy+40*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%.2f", this.detune), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+175*zoom; gfx_y += 18*zoom;
  gfx_drawstR("DETUNE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  
  
  
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = time1x = oscx+250*zoom; gfx_y = time1y = oscy+50*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.time1), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+250*zoom; gfx_y += 18*zoom;
  gfx_drawstR("ATTACK", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = time2x = oscx+300*zoom; gfx_y = time2y = oscy+50*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.time2), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+300*zoom; gfx_y += 18*zoom;
  gfx_drawstR("EG 2", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = time3x = oscx+350*zoom; gfx_y = time3y = oscy+50*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.time3), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+350*zoom; gfx_y += 18*zoom;
  gfx_drawstR("EG 3", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = time4x = oscx+400*zoom; gfx_y = time4y = oscy+50*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.time4), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+400*zoom; gfx_y += 18*zoom;
  gfx_drawstR("RELEASE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = target1x = oscx+275*zoom; gfx_y = target1y = oscy+30*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.target1), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+275*zoom; gfx_y -= 14*zoom;
  gfx_drawstR("LEVEL", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = target2x = oscx+325*zoom; gfx_y = target2y = oscy+30*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.target2), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+325*zoom; gfx_y -= 14*zoom;
  gfx_drawstR("LEVEL", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = target3x = oscx+375*zoom; gfx_y = target3y = oscy+30*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%i", this.target3), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+375*zoom; gfx_y -= 14*zoom;
  gfx_drawstR("SUSTAIN", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  gfx_setfont(2,"Arial",14*zoom,'b');
  gfx_x = envscalex = oscx+460*zoom; gfx_y = envscaley = oscy+40*zoom;
  lightgrey();
  gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
  rgb(70,190,70);
  gfx_drawstr(sprintf(#, "%.2f", this.envscale), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
  lightgrey(); gfx_setfont(1);
  gfx_x = oscx+460*zoom; gfx_y += 18*zoom;
  gfx_drawstR("SCALE", 0x101, gfx_x + 50*zoom, gfx_y + gfx_texth);
  ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  AM_MODx = oscx + 545*zoom; AM_MODy = oscy + 20*zoom;
  black();
  gfx_rect(AM_MODx - 10*zoom, AM_MODy, 85*zoom, 120*0.5);
   gfx_setfont(1);
    gfx_x = AM_MODx - 10*zoom; gfx_y = AM_MODy - 13*zoom;
    lightgreY();
    gfx_drawstr("AM MOD.");
    gfx_setfont(7,"Arial",12*zoom,'b');
    slidervalue = this.AM_Mod_amt.array_position[0];
    rgb(40,100,220);
    gfx_x = AM_MODx-10*zoom; gfx_y = AM_MODy;
    gfx_rectto(gfx_x +  (slidervalue/100) * 85*zoom, gfx_y + 120*zoom*(1/6));
    gfx_x = AM_MODx - 10*zoom; gfx_y = AM_MODy + zoom;
    slidervalue ? white() : lightgreY();// gfx_a = 0.55;
    gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    lightgrey(); 
    //gfx_roundrect(AM_MODx - 10*zoom, AM_MODy*zoom, 85*zoom, 120*zoom*(1/6) ,0);
    
    gfx_x = AM_MODx - 10*zoom; gfx_y = AM_MODy + 20*zoom;
    Mod_readout(this.opp[14]); this.opp[14] ? rgb(50,240,50);
    gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
    
    slidervalue = this.opp[16];
    slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();
    gfx_x = AM_MODx - 10*zoom;
    gfx_y = AM_MODy + 40*zoom;
    gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
    slidervalue ? black() : rgb(120,120,120);
    gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    slidervalue = this.opp[25];
    rgb(40,230,40);
    gfx_x = AM_MODx + 32.5*zoom;
    gfx_y = AM_MODy + 40*zoom;
    !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
    
    lightgrey(); 
    gfx_roundrect(AM_MODx - 10*zoom, 20*zoom+AM_MODy, 85*zoom, 120*zoom*(1/6) ,0);
    gfx_roundrect(AM_MODx - 10*zoom, 40*zoom+AM_MODy, 42.5*zoom, 120*zoom*(1/6) ,0);
    gfx_roundrect(AM_MODx - 10*zoom, AM_MODy, 85*zoom, 120*zoom*0.5 ,0);
  
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
    this.level.knob();
    lightgrey(); gfx_setfont(1);
    //#klabel = "RESO Q"; gfx_measurestr(#klabel, klw, klh); this.level.knoblabelposition(klw);gfx_drawstr(#klabel);
    gfx_setfont(2,"Arial",10*zoom,'b');
    #klabel = "0"; gfx_measurestr(#klabel, klw, klh); this.level.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
    #klabel = "20"; gfx_measurestr(#klabel, klw, klh); this.level.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
    #klabel = "50"; gfx_measurestr(#klabel, klw, klh); this.level.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
    #klabel = "82"; gfx_measurestr(#klabel, klw, klh); this.level.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
    #klabel = "100"; gfx_measurestr(#klabel, klw, klh); this.level.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
    rgb(30,185,30); gfx_x = this.level.XIn * zoom; gfx_y = this.level.yIn * zoom + this.level.Size*zoom/2 - 10*zoom;
    gfx_drawstr(sprintf(#, "%i", slideR(this.level.slideR)), 0x01, gfx_x + this.level.Size*zoom/2, gfx_y + gfx_texth);
    /*
    slider(synth.filter.startslider+11) && (slider(synth.filter.startslider+12)||slider(synth.filter.startslider+14)) ? (
    rgb(80,180,80);
    gfx_arc(this.level.xIn + this.level.size/4, this.level.yin+this.level.size/4,this.level.size/4 + 2*zoom, -2.2,2.2);
    gfx_arc(this.level.xIn + this.level.size/4, this.level.yin+this.level.size/4,this.level.size/4 + 1.5*zoom, -2.2,2.2);
    gfx_arc(this.level.xIn + this.level.size/4, this.level.yin+this.level.size/4,this.level.size/4 + 1*zoom, -2.2,2.2);
    gfx_setfont(1);
    rgb(220,20,20); #klabel = "RESO Q"; gfx_measurestr(#klabel, klw, klh); this.level.knoblabelposition(klw);gfx_drawstr(#klabel);
    );
    */
    gfx_x = pwrx = oscx+973*zoom; gfx_y = pwry = oscy+2*zoom;
    pwron = !this.on;
    gfx_blit(48,zoom*0.7,0,0,40*pwron,40,40);

    
    
    
    
    (this.breakpoint-3)%12 == 0 ? #readouts = "C";
    (this.breakpoint-3)%12 == 1 ? #readouts = "C#";
    (this.breakpoint-3)%12 == 2 ? #readouts = "D";
    (this.breakpoint-3)%12 == 3 ? #readouts = "D#";
    (this.breakpoint-3)%12 == 4 ? #readouts = "E";
    (this.breakpoint-3)%12 == 5 ? #readouts = "F";
    (this.breakpoint-3)%12 == 6 ? #readouts = "F#";
    (this.breakpoint-3)%12 == 7 ? #readouts = "G";
    (this.breakpoint-3)%12 == 8 ? #readouts = "G#";
    (this.breakpoint-3)%12 == 9 ? #readouts = "A";
    (this.breakpoint-3)%12 == 10 ? #readouts = "Bb";
    (this.breakpoint-3)%12 == 11 ? #readouts = "B";
    sprintf(#readoutsoctave, "%i", (abs(this.breakpoint)-27)/12   ); #readouts += #readoutsoctave;
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = breakpointx = oscx+700*zoom; gfx_y = breakpointy = oscy+50*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(#readouts, 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+700*zoom; gfx_y += 18*zoom;
    gfx_drawstR("BREAKP.", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    gfx_x = scalechooserx = oscx+700*zoom; gfx_y = scalechoosery = oscy+30*zoom;
    
    this.Env_Shape ? (
      rgb(70,190,70); gfx_rect(gfx_x,gfx_y,25*zoom, 15*zoom);
      black(); gfx_drawstr("EG", 0x05, gfx_x + 25*zoom, gfx_y + 15*zoom);
    ):(
     lightgrey(); gfx_a = 0.8;
     gfx_drawstr("EG", 0x05, gfx_x + 25*zoom, gfx_y + 15 * zoom);
     gfx_a = 1;
    );
    gfx_x = scalechooserx + 25*zoom; gfx_y = scalechoosery;
    this.Level_Shape ? (
      rgb(70,190,70); gfx_rect(gfx_x,gfx_y,25*zoom, 15*zoom);
      black(); gfx_drawstr("LV", 0x05, gfx_x + 25*zoom, gfx_y + 15*zoom);
    ):(
     lightgrey(); gfx_a = 0.8;
     gfx_drawstr("LV", 0x05, gfx_x + 25*zoom, gfx_y + 15 * zoom);
     gfx_a = 1;
    );
    gfx_x = scalechooserx; gfx_y = scalechoosery;
    
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    gfx_roundrect(gfx_x, gfx_y, 25*zoom, 15*zoom,0);
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = LowCurvex = oscx+640*zoom; gfx_y = LowCurvey = oscy+50*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(this.lowCurve == 0 ? "LIN" : "EXP", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+640*zoom; gfx_y += 18*zoom;
    gfx_drawstR("SHAPE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = lowscalex = oscx+640*zoom; gfx_y = lowscaley = oscy+30*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(sprintf(#, "%i", this.LowScale), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+640*zoom; gfx_y -= 14*zoom;
    gfx_drawstR("DEPTH", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = HighCurvex = oscx+760*zoom; gfx_y = HighCurvey = oscy+50*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(this.HighCurve == 0 ? "LIN" : "EXP", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+760*zoom; gfx_y += 18*zoom;
    gfx_drawstR("SHAPE", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = highscalex = oscx+760*zoom; gfx_y = highscaley = oscy+30*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(sprintf(#, "%i", this.HighScale), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+760*zoom; gfx_y -= 14*zoom;
    gfx_drawstR("DEPTH", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    gfx_setfont(2,"Arial",14*zoom,'b');
    gfx_x = kvelx = oscx+830*zoom; gfx_y = kvely = oscy+40*zoom;
    lightgrey();
    gfx_roundrect(gfx_x, gfx_y, 50*zoom, 15*zoom,0);
    rgb(70,190,70);
    gfx_drawstr(sprintf(#, "%i", this.kvel), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    lightgrey(); gfx_setfont(1);
    gfx_x = oscx+830*zoom; gfx_y += 18*zoom;
    gfx_drawstR("KEY VEL", 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  
  
  (!gen_dragging || this.curve_dragging) && (g_collision(lowscalex, lowscaley, 180*zoom, 43*zoom) || this.curve_dragging) ? (
  black();
  gfx_rect(35*zoom, 35*zoom, 922*zoom, 190*zoom);
  rgb(80,230,80);
  // f#3 = 70  c3 = 64  LOWC 40
   my_bp = 35*zoom + 15*zoom * (this.breakpoint -40);
   
   tmploop = my_bp; gfx_x = tmploop; gfx_y = 130*zoom;
   my_note = this.breakpoint;
   while(
   my_curval = zoom*95*  (this.ldep < 0 && this.lcur ? sign(this.ldep) : 1) *   max(-1,min(1,((this.breakpoint-my_note) * this.LDEP/12)))^ (this.lcur == 1 ? 2 : 1);
    
   gfx_lineto(tmploop, 130*zoom - my_curval);
   my_note -= 1;
   tmploop -= 15*zoom;
   tmploop > 35*zoom
   );
   
   
   tmploop = my_bp; gfx_x = tmploop; gfx_y = 130*zoom;
   my_note = this.breakpoint;
   while(
   my_curval = zoom*95*  (this.Rdep < 0 && this.Rcur ? sign(this.Rdep) : 1) *   max(-1,min(1,((my_note-this.breakpoint) * this.RDEP/12)))^ (this.Rcur == 1 ? 2 : 1);
    
   gfx_lineto(tmploop, 130*zoom - my_curval);
   my_note += 1;
   tmploop += 15*zoom;
   tmploop < 957*zoom
   );
   
   
        orange(); gfx_x = 36*zoom;
        while(
          eg_ende = gfx_x + 10 * zoom;
          gfx_a == 1 ? gfx_a = 0 : gfx_a = 1;
          gfx_line(gfx_x, 130*zoom, eg_ende, 130*zoom);
          gfx_x = eg_ende;
        eg_ende < 947 * zoom
        );
  
  lightgrey();
  gfx_roundrect(35*zoom, 35*zoom, 922*zoom, 190*zoom, 7*zoom);
  );
  
  
  //gfx_roundrect(30*zoom, 30*zoom, 932*zoom, 200*zoom, 7*zoom);
  (!gen_dragging || this.EG_dragging) && (g_collision(time1x, target1y, 200*zoom, 33*zoom) || this.EG_dragging) ? (
    black();
    gfx_rect(35*zoom, 35*zoom, 922*zoom, 190*zoom);
    rgb(80,230,80);
    gfx_triangle(37*zoom, 224*zoom, next_egx = 37*zoom+ zoom*230*this.time1/1000, next_egy = 224*zoom - 180*this.target1*zoom/100, 37*zoom+ zoom*230*this.time1/1000, 224*zoom);
    gfx_triangle(next_egx, next_egy, next_egx, 224*zoom, next_egx + zoom*230*this.time2/1000, 224*zoom,
                 next_egx + zoom*230*this.time2/1000, 224*zoom - 180*this.target2*zoom/100);
    next_egx = next_egx + zoom*230*this.time2/1000;
    next_egy = 224*zoom - 180*this.target2*zoom/100;
    gfx_triangle(next_egx, next_egy, next_egx, 224*zoom, next_egx + zoom*230*this.time3/1000, 224*zoom,
                 next_egx + zoom*230*this.time3/1000, 224*zoom - 180*this.target3*zoom/100);
    
    next_egx = next_egx + zoom*230*this.time3/1000;
    next_egy = 224*zoom - 180*this.target3*zoom/100;
        gfx_circle(next_egx, next_egy, 10*zoom);
        gfx_circle(next_egx, next_egy, 9*zoom);
        gfx_circle(next_egx, next_egy, 6*zoom);
        gfx_circle(next_egx, next_egy, 4*zoom);
        orange(); gfx_x = next_egx;
        while(
          eg_ende = gfx_x + 10 * zoom;
          gfx_a == 1 ? gfx_a = 0 : gfx_a = 1;
          gfx_line(gfx_x, next_egy, eg_ende, next_egy);
          gfx_x = eg_ende;
        eg_ende < 947 * zoom
        );
        
        gfx_a = 1; gfx_setfont(7);
        gfx_x = 800*zoom; gfx_y = next_egy + 4*zoom; gfx_y > 164 ? gfx_y -= 22*zoom;
        gfx_drawstr("SUSTAIN LEVEL");
        
        rgb(80,230,80); 
    gfx_triangle(next_egx, next_egy, next_egx, 224*zoom, next_egx + zoom*230*this.time4/1000, 224*zoom);//,
                 //next_egx + zoom*230*this.time4/1000, 224*zoom - 180*this.target3/100);
                 
    gfx_y = 44*zoom;
    tmploop = 0; black();
    loop(180*zoom,
      gfx_a = 0.7*(tmploop/(180*zoom));
      gfx_rect(35*zoom, gfx_y + tmploop, 922*zoom, zoom);
    tmploop += 1;
    );
    
    gfx_a = 1;
    lightgrey();
    gfx_roundrect(35*zoom, 35*zoom, 922*zoom, 190*zoom, 7*zoom);
  );
  
  mouseClick == 1 ? (
    
    g_collision(AM_Modx, AM_Mody+120*zoom*(1/6), 85*zoom, 120*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(0); sel_mod > -1 ? this.opp[14] = sel_mod;opcaller = 1);
    g_collision(AM_Modx, AM_Mody, 85*zoom, 120*zoom*(1/6)) ? this.AM_Mod_amt.op_dragstart();
    g_collision(AM_Modx, AM_Mody+240*zoom*(1/6), 42.5*zoom, 120*zoom*(1/6)) ? (this.opp[16] == 2 ? this.opp[16] = 0 : this.opp[16] += 1; opcaller = 1);
    g_collision(AM_Modx+42.5*zoom, AM_Mody+240*zoom*(1/6), 42.5*zoom, 120*zoom*(1/6)) ? (this.opp[25] == 0 ? this.opp[25] = 1 : this.opp[25] = 0; opcaller = 1);
    
    g_collision(scalechooserx, scalechoosery, 25*zoom, 15*zoom) ? (this.Env_Shape ? this.env_shape.array_position[0] = 0 : this.env_shape.array_position[0] = 1; opcaller = 1);
    g_collision(scalechooserx+25*zoom, scalechoosery, 25*zoom, 15*zoom) ? (this.Level_Shape ? this.Level_shape.array_position[0] = 0 : this.Level_shape.array_position[0] = 1; opcaller = 1);
    
    this.fixed ?  g_collision(coarsex, coarsey, 50*zoom, 15*zoom) ? this.coarse.op_dragstart();
    !this.fixed ?  g_collision(coarsex, coarsey, 50*zoom, 15*zoom) ? this.fixcoarse.op_dragstart();
    this.fixed ?  g_collision(finex, finey, 50*zoom, 15*zoom) ? this.fine.op_dragstart();
    !this.fixed ?  g_collision(finex, finey, 50*zoom, 15*zoom) ? this.fixfine.op_dragstart();
    g_collision(detunex, detuney, 50*zoom, 15*zoom) ? this.detune.op_dragstart();
    g_collision(time1x, time1y, 50*zoom, 15*zoom) ? this.time1.op_dragstart();
    g_collision(time2x, time2y, 50*zoom, 15*zoom) ? this.time2.op_dragstart();
    g_collision(time3x, time3y, 50*zoom, 15*zoom) ? this.time3.op_dragstart();
    g_collision(time4x, time4y, 50*zoom, 15*zoom) ? this.time4.op_dragstart();
    g_collision(target1x, target1y, 50*zoom, 15*zoom) ? this.target1.op_dragstart();
    g_collision(target2x, target2y, 50*zoom, 15*zoom) ? this.target2.op_dragstart();
    g_collision(target3x, target3y, 50*zoom, 15*zoom) ? this.target3.op_dragstart();
    g_collision(envscalex, envscaley, 50*zoom, 15*zoom) ? this.envscale.op_dragstart();
    g_collision(kvelx, kvely, 50*zoom, 15*zoom) ? this.kvel.op_dragstart();
    g_collision(lowscalex, lowscaley, 50*zoom, 15*zoom) ? this.Ldep.op_dragstart();
    g_collision(highscalex, highscaley, 50*zoom, 15*zoom) ? this.Rdep.op_dragstart();
    g_collision(lowcurvex, lowcurvey, 50*zoom, 15*zoom) ? (this.Lcur.array_position[0] == 0 ? this.Lcur.array_position[0] = 1: this.Lcur.array_position[0] = 0; opcaller = 1);
    g_collision(highcurvex, highcurvey, 50*zoom, 15*zoom) ? (this.Rcur.array_position[0] == 0 ? this.Rcur.array_position[0] = 1 : this.Rcur.array_position[0] = 0; opcaller = 1);
    g_collision(breakpointx, breakpointy, 50*zoom, 15*zoom) ? this.breakpoint.op_dragstart();
    
    g_collision(pwrx+4*zoom,pwry+4*zoom,20*zoom,20*zoom) ? (this.opp[0] == 0 ? this.opp[0] = 1 : this.opp[0] = 0; opcaller = 1);
    this.level.k_collision() ? this.level.dragstart();
  );
  
  
  mouseClick == -1 ? (
    this.coarse.op_dragstop();
    this.fixcoarse.op_dragstop();
    this.fine.op_dragstop();
    this.kvel.op_dragstop();
    this.ldep.op_dragstop();
    this.Rdep.op_dragstop();
    this.AM_Mod_amt.op_dragstop();
    this.breakpoint.op_dragstop();
    this.fixfine.op_dragstop();
    this.detune.op_dragstop();
    this.time1.op_dragstop();
    this.time2.op_dragstop();
    this.time3.op_dragstop();
    this.time4.op_dragstop();
    this.target1.op_dragstop();
    this.target2.op_dragstop();
    this.target3.op_dragstop();
    this.envscale.op_dragstop();
    this.level.dragstop();
     this.EG_dragging = 0;
     this.curve_dragging = 0;
    
  );
  
  this.coarse.dragging ? this.coarse.op_potdrag();
  this.fixcoarse.dragging ? this.fixcoarse.op_potdrag();
  this.fine.dragging ? this.fine.op_potdrag();
  this.kvel.dragging ? this.kvel.op_potdrag();
  this.Ldep.dragging ? (this.Ldep.op_potdrag(); this.curve_dragging = 1);
  this.Rdep.dragging ? (this.Rdep.op_potdrag(); this.curve_dragging = 1);
  this.AM_Mod_amt.dragging ? this.AM_Mod_amt.op_potdrag();
  this.breakpoint.dragging ? (this.breakpoint.op_potdrag(); this.curve_dragging = 1);
  this.fixfine.dragging ? this.fixfine.op_potdrag();
  this.detune.dragging ? this.detune.op_potdrag();
  this.time1.dragging ? (this.time1.op_potdrag(); this.EG_dragging = 1);
  this.time2.dragging ? (this.time2.op_potdrag(); this.EG_dragging = 1);
  this.time3.dragging ? (this.time3.op_potdrag(); this.EG_dragging = 1);
  this.time4.dragging ? (this.time4.op_potdrag(); this.EG_dragging = 1);
  this.target1.dragging ? (this.target1.op_potdrag(); this.EG_dragging = 1);
  this.target2.dragging ? (this.target2.op_potdrag(); this.EG_dragging = 1);
  this.target3.dragging ? (this.target3.op_potdrag(); this.EG_dragging = 1);
  this.envscale.dragging ? (this.envscale.op_potdrag(); this.EG_dragging = 1);
  this.level.dragging ? (this.level.potdrag(); opcaller = 1;);
  
  
  
opcaller == 1 ? this.op_parameters_update();
);
 
 
 
 
 
 
 
 
 
 
 
 
 sliderx = 40*zoom;
 slidery = 160*zoom;
 oscx = sliderx - 10*zoom;
 oscy = slidery + 70*zoom;
 
 !synth_mode ? (
 
 osc1.draw_osc();
 gfx_x = oscx + 833*zoom; gfx_y = oscy + 115*zoom;
 gfx_setfont(4); lightgrey();
 gfx_drawstr("OSC 1");
 oscy += 140*zoom;
 osc2.draw_osc();
 gfx_x = oscx + 833*zoom; gfx_y = oscy + 115*zoom;
 gfx_setfont(4); lightgrey();
 gfx_drawstr("OSC 2");
 oscy += 140*zoom;
 osc3.draw_osc();
 gfx_x = oscx + 833*zoom; gfx_y = oscy + 115*zoom;
 gfx_setfont(4); lightgrey();
 gfx_drawstr("OSC 3");
 oscy += 140*zoom;
 osc4.draw_osc();
 gfx_x = oscx + 833*zoom; gfx_y = oscy + 115*zoom;
 gfx_setfont(4); lightgrey();
 gfx_drawstr("OSC 4");

 ):( // !Synth Mode

 
FEEDBACK.parameter_config     (185,     0,        0,     100,   870,  150,  120, 101,    1,       5);
FM.Transpose.parameter_config     (operator_startslider+10,    0,      -36,      36,   190,  150,  120, 101,    1,       5);
FM.Pitchamount.parameter_config   (operator_startslider+9,    12,      -36,      36,   310,  150,  120, 101,    1,       5);
 
 FEEDBACK.knob();
 lightgrey(); gfx_setfont(1);
 #klabel = "FEEDBACK"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.knoblabelposition(klw);gfx_drawstr(#klabel);
 gfx_setfont(2,"Arial",10*zoom,'b');
 #klabel = "0"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "20"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "50"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
 #klabel = "82"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
 #klabel = "100"; gfx_measurestr(#klabel, klw, klh); FEEDBACK.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
 rgb(30,185,30); gfx_x = FEEDBACK.XIn * zoom; gfx_y = FEEDBACK.yIn * zoom + FEEDBACK.Size*zoom/2 - 10*zoom;
 gfx_drawstr(sprintf(#, "%i", slideR(FEEDBACK.slideR)), 0x01, gfx_x + FEEDBACK.Size*zoom/2, gfx_y + gfx_texth);
 
 FM.Transpose.knob();
 lightgrey(); gfx_setfont(1);
 #klabel = "TRANSPOSE"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.knoblabelposition(klw);gfx_drawstr(#klabel);
 gfx_setfont(2,"Arial",10*zoom,'b');
 #klabel = "-36"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "-18"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "0"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
 #klabel = "18"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
 #klabel = "36"; gfx_measurestr(#klabel, klw, klh); FM.Transpose.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
 rgb(30,185,30); gfx_x = FM.Transpose.XIn * zoom; gfx_y = FM.Transpose.yIn * zoom + FM.Transpose.Size*zoom/2 - 10*zoom;
 gfx_drawstr(sprintf(#, "%i", slideR(FM.Transpose.slideR)), 0x01, gfx_x + FM.Transpose.Size*zoom/2, gfx_y + gfx_texth);
 
 FM.Pitchamount.knob();
 lightgrey(); gfx_setfont(1);
 #klabel = "PITCH WH."; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.knoblabelposition(klw);gfx_drawstr(#klabel);
 gfx_setfont(2,"Arial",10*zoom,'b');
 #klabel = "-36"; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "-18"; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
 #klabel = "0"; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
 #klabel = "18"; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
 #klabel = "36"; gfx_measurestr(#klabel, klw, klh); FM.Pitchamount.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
 rgb(30,185,30); gfx_x = FM.Pitchamount.XIn * zoom; gfx_y = FM.Pitchamount.yIn * zoom + FM.Pitchamount.Size*zoom/2 - 10*zoom;
 gfx_drawstr(sprintf(#, "%i", slideR(FM.Pitchamount.slideR)), 0x01, gfx_x + FM.Pitchamount.Size*zoom/2, gfx_y + gfx_texth);
 
 
 FM_PM_X = 60*zoom;
 FM_PM_y = 150*zoom;
 
 black();
 gfx_rect(FM_PM_x - 10*zoom, FM_PM_y, 85*zoom, 120*zoom*0.5);
  gfx_setfont(7,"Arial",12*zoom,'b');
   gfx_x = FM_PM_x - 10*zoom;
   //#klabel = "TRANSPOSE"; gfx_measurestr(#klabel, klw, klh); this.transpose.knoblabelposition(klw);
   gfx_x = FM_PM_x - 10*zoom; gfx_y = FM_PM_y - 14*zoom;
   lightgreY();
   gfx_drawstr("AMOUNT");
   gfx_x = FM_PM_x - 10*zoom; gfx_y = FM_PM_y + 64*zoom;
   gfx_drawstr("PITCH MOD");
   
   slidervalue = klo = FM.opp[1];
   rgb(40,100,220);
   gfx_x = FM_PM_x - 10*zoom + 42.5*zoom; gfx_y = FM_PM_y;
   gfx_rectto(gfx_x +  (slidervalue/36) * 42.5*zoom, gfx_y + 120*zoom*(1/6));
   gfx_x = FM_PM_x - 10*zoom; gfx_y = FM_PM_y + 0*zoom;
   slidervalue ? white() : lightgreY();// gfx_a = 0.55;
   gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
   lightgrey(); 
   gfx_roundrect(FM_PM_x - 10*zoom, FM_PM_y, 85*zoom, 120*zoom*(1/6) ,0);
   
   slidervalue = FM.opp[0];
   gfx_x = FM_PM_x - 10*zoom; gfx_y = FM_PM_y + 20*zoom;
   Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
   gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
   
   slidervalue = FM.opp[3];
   slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();  
   gfx_x = FM_PM_x - 10*zoom;
   gfx_y = FM_PM_y + 40*zoom;
   gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
   slidervalue ? black() : rgb(120,120,120);
   gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
   
   slidervalue = FM.opp[2];
   rgb(40,230,40);
   gfx_x = FM_PM_x + 32.5*zoom;
   gfx_y = FM_PM_y + 40*zoom;
   !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
   
   lightgrey(); 
   gfx_roundrect(FM_PM_x - 10*zoom, 20*zoom+FM_PM_y, 85*zoom, 120*zoom*(1/6) ,0);
   gfx_roundrect(FM_PM_x - 10*zoom, 40*zoom+FM_PM_y, 42.5*zoom, 120*zoom*(1/6) ,0);
   gfx_roundrect(FM_PM_x - 10*zoom, FM_PM_y, 85*zoom, 120*zoom*0.5 ,0);
   
   
   
   lightgrey();gfx_setfont(1);
   slider(operator_startslider+8) == 1 ? ledon = 1 : ledon = 0;
   gfx_x = 50*zoom;gfx_y = 90*zoom;
   gfx_blit(49,0.5*zoom, 0, 0, ledon*70,70,70);
   gfx_x += 60*zoom; gfx_y += 11*zoom;
   gfx_drawstr("START ATTACK AT 0");
   gfx_x = 80*zoom; gfx_y = 91*zoom;
   gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
   
   
   
   gfx_x = 700*zoom - gaw[fmalgo]*zoom*0.5*0.75; gfx_y = 70*zoom; gfx_a = 1;
   
   fmalgo > 22 ? gfx_y += 18*zoom;
   mgax = gax[fmalgo]; mgay = gay[fmalgo]; mgaw = gaw[fmalgo];
   gfx_blit(50,0.75*zoom,0,mgax,fmalgo < 23 ? mgay : mgay + 25 , mgaw, fmalgo < 23 ? gah : gah - 25);
   /*
   orange();
   gfx_rect(40,10,140,200,0);
   gfx_rect(195,10,140,200,0);
   gfx_rect(365,10,140,200,0);
   gfx_rect(520,10,140,200,0);
   gfx_rect(683,10,205,200,0);
   gfx_rect(900,10,205,200,0);
   gfx_rect(1120,10,205,200,0);
   gfx_rect(1338,10,205,200,0);
   gfx_rect(32,242,202,200,0);
   gfx_rect(257,242,202,200,0);
   gfx_rect(475,242,194,200,0);
   gfx_rect(685,242,274,200,0);
   gfx_rect(975,242,267,200,0);
   gfx_rect(1265,242,140,200,0);
   gfx_rect(1429,242,140,200,0);
   gfx_rect(10,498,203,200,0);
   gfx_rect(227,498,197,200,0);
   gfx_rect(437,498,197,200,0);
   gfx_rect(645,498,197,200,0);
   gfx_rect(853,498,197,200,0);
   gfx_rect(1063,498,258,200,0);
   gfx_rect(1335,498,258,200,0);
   gfx_rect(20,688,258,200,0);
   gfx_rect(292,688,320,200,0);
   gfx_rect(630,688,317,200,0);
   gfx_rect(965,688,266,200,0);
   gfx_rect(1245,688,259,200,0);
   gfx_rect(30,898,194,200,0);
   gfx_rect(240,898,265,200,0);
   gfx_rect(520,898,258,200,0);
   gfx_rect(793,898,332,200,0);
   gfx_rect(1130,898,392,200,0);
           */
   gfx_setfont(1);
   tmploop = 1; hoveralgo = 0;
   loop(32,
   gfx_x = 70*zoom  + tmploop * 25 *zoom; gfx_y = 40*zoom;
   
   !hoveralgo ? (
   g_collision(gfx_x, 40*zoom, 22*zoom, 22*zoom) ? hoveralgo = tmploop;
   hoveralgo ? (
   mouseclick == 1 ? (slider186 = tmploop; caller = 1);
   gfx_x -= gaw[tmploop]*zoom*0.5; gfx_y += 24*zoom;
   rgb(0,0,100);
   gfx_rect(gfx_x, gfx_y, gaw[tmploop] * zoom * 0.75, gah*zoom*0.75);
   lightgrey();
   gfx_rect(gfx_x, gfx_y, gaw[tmploop] * zoom * 0.75, gah*zoom*0.75,0);
   tmploop > 22 ? gfx_y += 18*zoom;
   gfx_blit(50,0.75*zoom,0,gax[tmploop],tmploop < 23 ? gay[tmploop] : gay[tmploop] + 25 ,gaw[tmploop], tmploop < 23 ? gah : gah - 25);
   gfx_x = 70*zoom  + tmploop * 25 *zoom; gfx_y = 40*zoom;
   );
   );
   
   
   fmalgo == tmploop ? rgb(80,250,80) : lightgrey();
     gfx_rect(gfx_x, gfx_y, 22*zoom, 22*zoom,0);
     gfx_drawstr(sprintf(#, "%i", tmploop), 0x05, gfx_x + 22*zoom, gfx_y + 22*zoom);
   
     
     tmploop += 1;
   );
   
   
   lightgrey();
   gfx_x = 100*zoom; gfx_y = 68*zoom;
   gfx_setfont(4);
   gfx_drawstr("OPERATOR ALGORITHM");
   
    gfx_roundrect(30*zoom, 30*zoom, 932*zoom, 200*zoom, 7*zoom);
   
   
   
   
   
   
   
   operator1.draw_operator();
   oscy += 93*zoom;
   operator2.draw_operator();
   oscy += 93*zoom;
   operator3.draw_operator();
   oscy += 93*zoom;
   operator4.draw_operator();
   oscy += 93*zoom;
   operator5.draw_operator();
   oscy += 93*zoom;
   operator6.draw_operator();
   oscy += 93*zoom;
   
   
   
 );
 
 //Parameter_config                (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ s3aling_ file_)      
       FilterF.parameter_config     (synth.filter.startslider,       100,        0,    100,   1310,  45,  150, 101,    1,       3);
       FilterQ.parameter_config     (synth.filter.startslider+1,       0,        0,     10,   1318,  151,  120, 101,    1,       5);
       FilterAmt.parameter_config   (synth.filter.startslider+6,       0,     -100,    100,   1218,  101,  120, 101,    1,       4);
       LFO.parameter_config         (LFO_1.startslider+1,     0.5,     0,     1,   1310,  650 + 30,  150, 101,    1,       3);
       LFO_delay.parameter_config   (LFO_1.startslider+2,       0,     0,  4000,   1317,  650 - 180,  120, 101,    1,       5);
       LFO_Attack.parameter_config  (LFO_1.startslider+3,       0,     0,  4000,   1317,  650 -  80,  120, 101,    1,       5);
       Main_Out.parameter_config    (1,     5,     0,     10,   1115,  345,  150, 101,    1,       3);
       dist_boost.parameter_config  (177,   0,   -30,     30,   1115,  470,  150, 101,    1,       2);
       Glide.parameter_config       (3,     0,     0,      1,   1122, 647,  120, 101,    1,       5);
       Velo_Thresh.parameter_config (144,  64,     0,    127,   1070, 580,  120, 101,    1,       5);
       Velo_ratio.parameter_config  (145,   1,     1,     10,   1175, 580,  120, 101,    1,       5);
       Velo_off.parameter_config    (146,   0,  -127,    127,   1070, 675,  120, 101,    1,       4);
       Velo_Boost.parameter_config  (147,   1,     0,      5,   1175, 676,  120, 101,    1,       5);
       HPF.parameter_config         (176,   0,     0,     80,   1175, 676,  120, 101,    1,       5);
             
            
       modmode == 0 ? (      
       FilterF.knob();
       gfx_setfont(1,"Arial",11*zoom,'b'); FilterF.size = 150;
       #klabel = "CUTOFF"; gfx_measurestr(#klabel, klw, klh); FilterF.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "10"; gfx_measurestr(#klabel, klw, klh); FilterF.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "45"; gfx_measurestr(#klabel, klw, klh); FilterF.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "470"; gfx_measurestr(#klabel, klw, klh); FilterF.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "5.5k"; gfx_measurestr(#klabel, klw, klh); FilterF.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "20k"; gfx_measurestr(#klabel, klw, klh); FilterF.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = FilterF.XIn * zoom; gfx_y = FilterF.yIn * zoom + FilterF.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%i", per_to_freq(slideR(FilterF.slideR),100)), 0x01, gfx_x + FilterF.Size*zoom/2, gfx_y + gfx_texth);
       slider(synth.filter.startslider+7) && (slider(synth.filter.startslider+8)||slider(synth.filter.startslider+10)) ? (
       rgb(80,180,80);
       gfx_arc(filterF.xIn*zoom + filterF.size*zoom/4, filterF.yin*zoom+filterF.size*zoom/4,filterF.size*zoom/4 + 2*zoom, -2.2,2.2);
       gfx_arc(filterF.xIn*zoom + filterF.size*zoom/4, filterF.yin*zoom+filterF.size*zoom/4,filterF.size*zoom/4 + 1.5*zoom, -2.2,2.2);
       gfx_arc(filterF.xIn*zoom + filterF.size*zoom/4, filterF.yin*zoom+filterF.size*zoom/4,filterF.size*zoom/4 + 1*zoom, -2.2,2.2);
       gfx_setfont(1,"Arial",11*zoom,'b');
       rgb(220,20,20); #klabel = "CUTOFF"; gfx_measurestr(#klabel, klw, klh); filterF.knoblabelposition(klw);gfx_drawstr(#klabel);
       );
       
       FilterQ.knob();
       lightgrey(); gfx_setfont(1);
       #klabel = "RESO Q"; gfx_measurestr(#klabel, klw, klh); FilterQ.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); FilterQ.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "2"; gfx_measurestr(#klabel, klw, klh); FilterQ.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "5"; gfx_measurestr(#klabel, klw, klh); FilterQ.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "8"; gfx_measurestr(#klabel, klw, klh); FilterQ.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "10"; gfx_measurestr(#klabel, klw, klh); FilterQ.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = FilterQ.XIn * zoom; gfx_y = FilterQ.yIn * zoom + FilterQ.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.2f", slideR(FilterQ.slideR)), 0x01, gfx_x + FilterQ.Size*zoom/2, gfx_y + gfx_texth);
       slider(synth.filter.startslider+11) && (slider(synth.filter.startslider+12)||slider(synth.filter.startslider+14)) ? (
       rgb(80,180,80);
       gfx_arc(filterQ.xIn*zoom + filterQ.size*zoom/4, filterQ.yin*zoom+filterQ.size*zoom/4,filterQ.size*zoom/4 + 2*zoom, -2.2,2.2);
       gfx_arc(filterQ.xIn*zoom + filterQ.size*zoom/4, filterQ.yin*zoom+filterQ.size*zoom/4,filterQ.size*zoom/4 + 1.5*zoom, -2.2,2.2);
       gfx_arc(filterQ.xIn*zoom + filterQ.size*zoom/4, filterQ.yin*zoom+filterQ.size*zoom/4,filterQ.size*zoom/4 + 1*zoom, -2.2,2.2);
       gfx_setfont(1);
       rgb(220,20,20); #klabel = "RESO Q"; gfx_measurestr(#klabel, klw, klh); filterQ.knoblabelposition(klw);gfx_drawstr(#klabel);
       );
       
       ):(
       
       
       FilterF.parameter_config       (synth.filter.startslider,       100,        0,    100,   1310,  52,  120, 101,    1,       3);
       
       /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       black();
       gfx_rect(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*0.5);
        gfx_setfont(7,"Arial",12*zoom,'b');
         gfx_x = FilterF.xIn*zoom - 10*zoom;
         //#klabel = "FilterF"; gfx_measurestr(#klabel, klw, klh); FilterF.knoblabelposition(klw);
         gfx_x = FilterF.xIn*zoom - 10*zoom; gfx_y = FilterF.yIn*zoom - 13*zoom;
         lightgreY();
         gfx_drawstr("AMOUNT");
         
         slidervalue = slider(synth.filter.startslider+7);
         rgb(40,100,220);
         gfx_x = FilterF.xIn*zoom + 32.5*zoom; gfx_y = FilterF.yIn*zoom;
         gfx_rectto(gfx_x +  (slidervalue/100) * 42.5*zoom, gfx_y + FilterF.size*zoom*(1/6));
         gfx_x = FilterF.xIn*zoom - 10*zoom; gfx_y = FilterF.yIn*zoom + zoom;
         slidervalue ? white() : lightgreY();// gfx_a = 0.55;
         gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
         lightgrey(); 
         gfx_roundrect(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*(1/6) ,0);
         
         slidervalue = slider(synth.filter.startslider+8);
         gfx_x = FilterF.xIn*zoom - 10*zoom; gfx_y = FilterF.yIn*zoom + 20*zoom;
         Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
         gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
         
         slidervalue = slider(synth.filter.startslider+10);
         slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black(); 
         gfx_x = FilterF.xIn*zoom - 10*zoom;
         gfx_y = FilterF.yIn*zoom + 40*zoom;
         gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
         slidervalue ? black() : rgb(120,120,120);
         gfx_drawstr(slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
         
         slidervalue = slider(synth.filter.startslider+9);
         rgb(40,230,40);
         gfx_x = FilterF.xIn*zoom + 32.5*zoom;
         gfx_y = FilterF.yIn*zoom + 40*zoom;
         !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
         
         
         lightgrey(); 
         gfx_roundrect(FilterF.xIn*zoom - 10*zoom, 20*zoom+FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*(1/6) ,0);
         gfx_roundrect(FilterF.xIn*zoom - 10*zoom, 40*zoom+FilterF.yIn*zoom, 42.5*zoom, FilterF.size*zoom*(1/6) ,0);
       
         lightgrey(); 
         gfx_roundrect(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*0.5 ,0);
         gfx_x = FilterF.xIn*zoom - 10*zoom; gfx_y = FilterF.yIn*zoom+65*zoom;
         gfx_drawstr("CUTOFF");
         
         /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       
       
       /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
       black();
       gfx_rect(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom, 85*zoom, FilterQ.size*zoom*0.5);
        gfx_setfont(7,"Arial",12*zoom,'b');
         gfx_x = FilterQ.xIn*zoom - 10*zoom;
         //#klabel = "FilterQ"; gfx_measurestr(#klabel, klw, klh); FilterQ.knoblabelposition(klw);
         gfx_x = FilterQ.xIn*zoom - 10*zoom; gfx_y = FilterQ.yIn*zoom - 13*zoom;
         lightgreY();
         gfx_drawstr("AMOUNT");
         
         slidervalue = slider(synth.filter.startslider+11);
         rgb(40,100,220);
         gfx_x = FilterQ.xIn*zoom + 32.5*zoom; gfx_y = FilterQ.yIn*zoom;
         gfx_rectto(gfx_x +  (slidervalue/10) * 42.5*zoom, gfx_y + FilterQ.size*zoom*(1/6));
         gfx_x = FilterQ.xIn*zoom - 10*zoom; gfx_y = FilterQ.yIn*zoom + zoom;
         slidervalue ? white() : lightgreY();// gfx_a = 0.55;
         gfx_drawstr(sprintf(#,"%.2f", slidervalue), 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
         lightgrey(); 
         gfx_roundrect(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom, 85*zoom, FilterQ.size*zoom*(1/6) ,0);
         
         slidervalue = slider(synth.filter.startslider+12);
         gfx_x = FilterQ.xIn*zoom - 10*zoom; gfx_y = FilterQ.yIn*zoom + 20*zoom;
         Mod_readout(slidervalue); slidervalue ? rgb(50,240,50);
         gfx_drawstr(#readout, 0x05, gfx_x + 85*zoom, gfx_y + 22*zoom);
         
         slidervalue = slider(synth.filter.startslider+14);
         slidervalue == 1 ? rgb(40,230,40) : slidervalue == 2 ? rgb(230,230,80) : black();  
         gfx_x = FilterQ.xIn*zoom - 10*zoom;
         gfx_y = FilterQ.yIn*zoom + 40*zoom;
         gfx_rect(gfx_x,gfx_y, 42.5*zoom, 20*zoom);
         slidervalue ? black() : rgb(120,120,120);
         gfx_drawstr( slidervalue == 2 ? "AFT" :"WHL", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
         
         slidervalue = slider(synth.filter.startslider+13);
         rgb(40,230,40);
         gfx_x = FilterQ.xIn*zoom + 32.5*zoom;
         gfx_y = FilterQ.yIn*zoom + 40*zoom;
         !slidervalue ? gfx_drawstr("+ amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom) : gfx_drawstr("+/- amt", 0x05, gfx_x + 42.5*zoom, gfx_y + 22*zoom);
         
         
         lightgrey(); 
         gfx_roundrect(FilterQ.xIn*zoom - 10*zoom, 20*zoom+FilterQ.yIn*zoom, 85*zoom, FilterQ.size*zoom*(1/6) ,0);
         gfx_roundrect(FilterQ.xIn*zoom - 10*zoom, 40*zoom+FilterQ.yIn*zoom, 42.5*zoom, FilterQ.size*zoom*(1/6) ,0);
       
         lightgrey(); 
         gfx_roundrect(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom, 85*zoom, FilterQ.size*zoom*0.5 ,0);
         gfx_x = FilterQ.xIn*zoom - 10*zoom; gfx_y = FilterQ.yIn*zoom+65*zoom;
         gfx_drawstr("RESO Q");
         
         /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
         
         
        gfx_setfont(2);
       ); // Modmode
       
       
       
       
       
       
       
       FilterAmt.knob();
       lightgrey(); gfx_setfont(1);
       #klabel = "ENV AMT"; gfx_measurestr(#klabel, klw, klh); FilterAmt.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "-100"; gfx_measurestr(#klabel, klw, klh); FilterAmt.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "-50"; gfx_measurestr(#klabel, klw, klh); FilterAmt.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); FilterAmt.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "50"; gfx_measurestr(#klabel, klw, klh); FilterAmt.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "100"; gfx_measurestr(#klabel, klw, klh); FilterAmt.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = FilterAmt.XIn * zoom; gfx_y = FilterAmt.yIn * zoom + FilterAmt.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%i", slideR(FilterAmt.slideR)), 0x01, gfx_x + FilterAmt.Size*zoom/2, gfx_y + gfx_texth);
       
       gfx_x = 1385*zoom; gfx_y = 32*zoom;
       pwron = !slider(synth.filter.startslider+5);
       gfx_blit(48,zoom*0.7,0,0,40*pwron,40,40);

       gfx_setfont(1); lightgrey();
       gfx_x = 1195*zoom; gfx_y = 197*zoom;
       gfx_drawstR("KEY FOLLOW");
       gfx_x = follow_off = 1195*zoom; gfx_y = follow_y = 213*zoom; slideR(synth.filter.startslider + 4) == 0 ? rgb(70,190,70) : rgb(100,100,100);
       gfx_drawstr("OFF");
       gfx_x = follow_half = 1221*zoom; gfx_y = 213*zoom; slideR(synth.filter.startslider + 4) == 0.5 ? rgb(70,190,70) : rgb(100,100,100);
       gfx_drawstr("HALF");
       gfx_x = Follow_full = 1257*zoom; gfx_y = 213*zoom; slideR(synth.filter.startslider + 4) == 1 ? rgb(70,190,70) : rgb(100,100,100);
       gfx_drawstr("ON");
       
       //lightgrey();
       //gfx_x = 1195*zoom; gfx_y = 47*zoom;
       //gfx_drawstR("HPF");
       
       //gfx_roundrect(1223*zoom, 46*zoom, 53*zoom, 15*zoom,0);
       
       //gfx_x = 1225*zoom;
       //rgb(70,190,70);
       //gfx_drawstr(strcat(sprintf(#, "%i", per_to_freq(slider176,100)), " Hz"), 0x01, gfx_x + 50*zoom, gfx_y + gfx_texth);
       
       
       lightgrey();
       LFO.knob();
       gfx_setfont(1);
       #klabel = "RATE"; gfx_measurestr(#klabel, klw, klh); LFO.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0.3"; gfx_measurestr(#klabel, klw, klh); LFO.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "0.4"; gfx_measurestr(#klabel, klw, klh); LFO.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "3Hz"; gfx_measurestr(#klabel, klw, klh); LFO.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "15"; gfx_measurestr(#klabel, klw, klh); LFO.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "30"; gfx_measurestr(#klabel, klw, klh); LFO.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = LFO.XIn * zoom; gfx_y = LFO.yIn * zoom + LFO.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.2f", LFO_1.tempo_hz), 0x01, gfx_x + LFO.Size*zoom/2, gfx_y + gfx_texth);
       
       lightgrey();
       LFO_delay.knob();
       gfx_setfont(1);
       #klabel = "DELAY"; gfx_measurestr(#klabel, klw, klh); LFO_delay.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0ms"; gfx_measurestr(#klabel, klw, klh); LFO_delay.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "800"; gfx_measurestr(#klabel, klw, klh); LFO_delay.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "2k"; gfx_measurestr(#klabel, klw, klh); LFO_delay.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "3.2k"; gfx_measurestr(#klabel, klw, klh); LFO_delay.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "4k"; gfx_measurestr(#klabel, klw, klh); LFO_delay.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = LFO_delay.XIn * zoom; gfx_y = LFO_delay.yIn * zoom + LFO_delay.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%i", slider(LFO_delay.slideR)), 0x01, gfx_x + LFO_delay.Size*zoom/2, gfx_y + gfx_texth);
       
       lightgrey();
       LFO_attack.knob();
       gfx_setfont(1);
       #klabel = "ATTACK"; gfx_measurestr(#klabel, klw, klh); LFO_attack.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0ms"; gfx_measurestr(#klabel, klw, klh); LFO_attack.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "800"; gfx_measurestr(#klabel, klw, klh); LFO_attack.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "2k"; gfx_measurestr(#klabel, klw, klh); LFO_attack.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "3.2k"; gfx_measurestr(#klabel, klw, klh); LFO_attack.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "4k"; gfx_measurestr(#klabel, klw, klh); LFO_attack.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = LFO_attack.XIn * zoom; gfx_y = LFO_attack.yIn * zoom + LFO_attack.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%i", slideR(LFO_attack.slider)), 0x01, gfx_x + LFO_attack.Size*zoom/2, gfx_y + gfx_texth);
       
       
       
       
       
       
       
       
       
       
       lightgrey(); gfx_setfont(1);
       gfx_x = lfo_select = oscx + 1265*zoom; gfx_y = 315*zoom;
        LFO_1.form == 0 ? ledon = 1 : ledon = 0;
        gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
        gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("OFF"); gfx_y -= 10*zoom;
        
        gfx_y += 20*zoom; gfx_x = lfo_select;
        LFO_1.form == 1 ? ledon = 1 : ledon = 0;
        gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
        gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("SINE"); gfx_y -= 10*zoom;
       gfx_y += 20*zoom; gfx_x = lfo_select;
       LFO_1.form == 2 ? ledon = 1 : ledon = 0;
       gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
       gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("SQUARE"); gfx_y -= 10*zoom;
       gfx_y += 20*zoom; gfx_x = lfo_select;
       LFO_1.form == 3 ? ledon = 1 : ledon = 0;
       gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
       gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("SAW UP"); gfx_y -= 10*zoom;
       gfx_y += 20*zoom; gfx_x = lfo_select;
       LFO_1.form == 4 ? ledon = 1 : ledon = 0;
       gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
       gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("SAW DOWN"); gfx_y -= 10*zoom;
       gfx_y += 20*zoom; gfx_x = lfo_select;
       LFO_1.form == 5 ? ledon = 1 : ledon = 0;
       gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
       gfx_y += 10*zoom; gfx_x += 28*zoom; gfx_drawstr("TRIANGLE"); gfx_y -= 10*zoom;
       //1270
       gfx_roundrect(1280*zoom, 280*zoom, 132*zoom, 510*zoom,7*zoom);
       gfx_setfont(4); gfx_x = 1330*zoom; gfx_y = 290*zoom;
       gfx_drawstr("LFO");
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
       
      
      
      
      
      
      
      
      
      
      
      lightgrey();
      Main_Out.knob();
      gfx_setfont(1);
      #klabel = "OUTPUT"; gfx_measurestr(#klabel, klw, klh); Main_Out.knoblabelposition(klw);gfx_drawstr(#klabel);
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); Main_Out.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "2.5"; gfx_measurestr(#klabel, klw, klh); Main_Out.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "5"; gfx_measurestr(#klabel, klw, klh); Main_Out.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); Main_Out.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
      #klabel = "10"; gfx_measurestr(#klabel, klw, klh); Main_Out.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
      rgb(30,185,30); gfx_x = Main_Out.XIn * zoom; gfx_y = Main_Out.yIn * zoom + Main_Out.Size*zoom/2 - 10*zoom;
      gfx_drawstr(sprintf(#, "%.2f", Master_Volume), 0x01, gfx_x + Main_Out.Size*zoom/2, gfx_y + gfx_texth);
      
      
      
      lightgrey();
      gfx_setfont(1);
      gfx_x = 590*zoom; gfx_y = 10*zoom;
      
      gfx_drawstr("TUKAN STUDIOS  -   WTFM SYNTHESIZER");
      
      gfx_x = 1190*zoom; gfx_y = 10*zoom;
      gfx_drawstr("(right clickt: toggle modulation view)");
      
      gfx_x = 1188*zoom; gfx_y = 400*zoom;
      gfx_a = 0.8;
      gfx_blit(51,0.7*zoom,0);
      gfx_a = 1;
      
      gfx_x = 40*zoom; gfx_y = 10*zoom;
      
      gfx_drawstr("GENERAL SYNTH MODE: ");
      synth_mode ? rgb(130,130,130) : rgb (80,220,80);
      wt_x = gfx_x; gfx_drawstr(" WT ");
      !synth_mode ? rgb(130,130,130) : rgb (80,220,80);
      fm_x = gfx_x; gfx_drawstr(" FM");
      
      
      
      
      
      
      
      
      
      
      modmode == 0 ? (
      
      lightgrey();
      dist_boost.knob();
      gfx_setfont(1);
      #klabel = "CLIPPER GAIN"; gfx_measurestr(#klabel, klw, klh); dist_boost.knoblabelposition(klw);gfx_drawstr(#klabel);
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-30"; gfx_measurestr(#klabel, klw, klh); dist_boost.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "-15"; gfx_measurestr(#klabel, klw, klh); dist_boost.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "0dB"; gfx_measurestr(#klabel, klw, klh); dist_boost.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "15"; gfx_measurestr(#klabel, klw, klh); dist_boost.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
      #klabel = "30"; gfx_measurestr(#klabel, klw, klh); dist_boost.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
      rgb(30,185,30); gfx_x = dist_boost.XIn * zoom; gfx_y = dist_boost.yIn * zoom + dist_boost.Size*zoom/2 - 10*zoom;
      gfx_drawstr(sprintf(#, "%.2f", slider177), 0x01, gfx_x + dist_boost.Size*zoom/2, gfx_y + gfx_texth);
      
       gfx_setfont(1); lightgrey();
       gfx_x = 1200*zoom; gfx_y = 562*zoom;
        protect > .01 ? ledon = 1 : ledon = 0;
        gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
        gfx_y += 25*zoom; gfx_x += 8*zoom; gfx_drawstr("ON"); gfx_y -= 25*zoom;
       gfx_x -= 53*zoom;
       ratio2db(protect) > 3 ? ledon = 1 : ledon = 0;
       gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
       gfx_y += 25*zoom; gfx_x += 12*zoom; gfx_drawstr("3"); gfx_y -= 25*zoom;
      gfx_x -= 45*zoom;
      ratio2db(protect) > 6 ? ledon = 1 : ledon = 0;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 25*zoom; gfx_x += 12*zoom; gfx_drawstr("6"); gfx_y -= 25*zoom;
      gfx_x -= 45*zoom;
      ratio2db(protect) > 10 ? ledon = 1 : ledon = 0;
      gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 25*zoom; gfx_x += 9*zoom; gfx_drawstr("10"); gfx_y -= 25*zoom;
      gfx_x -= 48*zoom;
      ratio2db(protect) > 15 ? ledon = 1 : ledon = 0;
      gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 25*zoom; gfx_x += 9*zoom; gfx_drawstr("15"); gfx_y -= 25*zoom;
      gfx_x -= 48*zoom;
      ratio2db(protect) > 20 ? ledon = 1 : ledon = 0;
      gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 25*zoom; gfx_x += 9*zoom; gfx_drawstr("20"); gfx_y -= 25*zoom;
      gfx_setfont(3,"Arial",12*zoom,'b');
      //gfx_x += 104*zoom; gfx_y +=26*zoom;
      //gfx_drawstR("CLIP");
      
      
      
      lightgrey();
      Glide.knob();
      gfx_setfont(1);
      #klabel = "GLIDE"; gfx_measurestr(#klabel, klw, klh); Glide.knoblabelposition(klw);gfx_drawstr(#klabel);
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); Glide.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "10"; gfx_measurestr(#klabel, klw, klh); Glide.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
      #klabel = "300"; gfx_measurestr(#klabel, klw, klh); Glide.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "3s"; gfx_measurestr(#klabel, klw, klh); Glide.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
      #klabel = "5s"; gfx_measurestr(#klabel, klw, klh); Glide.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
      rgb(30,185,30); gfx_x = Glide.XIn * zoom; gfx_y = Glide.yIn * zoom + Glide.Size*zoom/2 - 10*zoom;
      note_glide < 1000 ? gfx_drawstr(sprintf(#, "%.0f", note_glide), 0x01, gfx_x + Glide.Size*zoom/2, gfx_y + gfx_texth);
      note_glide >= 1000 ? gfx_drawstr(sprintf(#, "%.2f", note_glide/1000), 0x01, gfx_x + Glide.Size*zoom/2, gfx_y + gfx_texth);
      
      myslider = 2;
      switchon = slider(myslider);
      gfx_x = 1130*zoom;
      gfx_y = 720*zoom;
      gfx_blit(45,zoom*0.5,0,0,switchon*120,96,120);
            g_collision(gfx_x+15*zoom,gfx_y+4*zoom,20*zoom, 50*zoom) && mouseClick == 1 ? (slider(myslider) == 0 ? slider(myslider) = 1 : slideR(myslider) = 0; caller = 1);
      gfx_x += 35*zoom;
      gfx_y -= 18*zoom;
      ledon = switchon;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 55*zoom;
      ledon = !switchon;
      gfx_blit(46,zoom*0.25,0,0,128*ledon,128,128);
      lightgrey();
      
      
      
      sliderx = 1050*zoom; slidery = 750*zoom; myslider= 176;
      ADSRSlider (sliderx, slidery, sliderh, myslider, 80, 0);
      lightgrey();
      gfx_x = sliderx; gfx_y = slidery - sliderh - 20*zoom; gfx_setfont(4);
      gfx_drawstr("HPF", 0x01, gfx_x + 36*zoom, gfx_y + gfx_texth);
      gfx_x = sliderx; gfx_y = slidery + 20*zoom;
      gfx_setfont(1);
      sprintf(#readout, "%.0f", per_to_freq(slider(myslider),100));
      gfx_drawstr(#readout, 0x01, gfx_x + 35*zoom, gfx_y + gfx_texth);
      
      
      
      
      
      
      
      /*
      
      
      chorus_on == 2 ? ledon = 1 : ledon = 0;
      gfx_x = 1063*zoom; gfx_y = 295*zoom;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 23*zoom; gfx_x += 13*zoom; gfx_drawstr("II");
      
      
      chorus_on == 1 ? ledon = 1 : ledon = 0;
      gfx_x = 1043*zoom; gfx_y = 295*zoom;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      gfx_y += 23*zoom; gfx_x += 14*zoom; gfx_drawstr("I");
      
      gfx_x = 1043*zoom; gfx_y = 289*zoom;
      gfx_drawstr("CHORUS");
      
      
      */
      
      
      chorus_on == 1 ? ledon = 1 : ledon = 0;
      gfx_x = 1220*zoom;gfx_y = 650*zoom;
      gfx_blit(49,0.5*zoom, 0, 0, ledon*70,70,70);
      gfx_x -= 7*zoom; gfx_y -= 10*zoom;
      gfx_drawstr("CHORUS I");
      gfx_x = 1250*zoom; gfx_y = 651*zoom;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      
      chorus_on == 2 ? ledon = 1 : ledon = 0;
      gfx_x = 1220*zoom;gfx_y = 710*zoom;
      gfx_blit(49,0.5*zoom, 0, 0, ledon*70,70,70);
      gfx_x -= 7*zoom; gfx_y -= 10*zoom;
      gfx_drawstr("CHORUS II");
      gfx_x = 1250*zoom; gfx_y = 711*zoom;
      gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
      
      ); //modmode == 0
      
      lightgrey();
      gfx_roundrect(1030*zoom, 280*zoom, 250*zoom, 510*zoom,7*zoom);
      gfx_setfont(4); gfx_x = 1070*zoom; gfx_y = 290*zoom;
      gfx_drawstr("MASTER CONTROLS");
      
      
       
       
       
       
       
       
       
       
       
       
       modmode == 1 ? (
       
       
       gfx_x = 1031*zoom; gfx_y = 450*zoom;
       gfx_a = 1; gfx_blit(0,zoom*1.2,0,1030,450,250/1.2,340/1.2);
       black(); gfx_a = 0.2;
       gfx_rect(1030*zoom, 450*zoom, 250*zoom, 340*zoom);
       gfx_a = 1;
       
       lightgrey();
       Velo_Thresh.knob();
       gfx_setfont(1);
       #klabel = "THRESH."; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "27"; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "64"; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "104"; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "127"; gfx_measurestr(#klabel, klw, klh); Velo_Thresh.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = Velo_Thresh.XIn * zoom; gfx_y = Velo_Thresh.yIn * zoom + Velo_Thresh.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.i", slider(Velo_Thresh.slider)), 0x01, gfx_x + Velo_Thresh.Size*zoom/2, gfx_y + gfx_texth);
       
       lightgrey();
       Velo_Ratio.knob();
       gfx_setfont(1);
       #klabel = "RATIO"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "1"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "3"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "5.5"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "8.5"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "10"; gfx_measurestr(#klabel, klw, klh); Velo_Ratio.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = Velo_Ratio.XIn * zoom; gfx_y = Velo_Ratio.yIn * zoom + Velo_Ratio.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.2f", slider(Velo_Ratio.slider)), 0x01, gfx_x + Velo_Ratio.Size*zoom/2, gfx_y + gfx_texth);
       
       lightgrey();
       Velo_Off.knob();
       gfx_setfont(1);
       #klabel = "OFFSET"; gfx_measurestr(#klabel, klw, klh); Velo_Off.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "-127"; gfx_measurestr(#klabel, klw, klh); Velo_Off.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "-77"; gfx_measurestr(#klabel, klw, klh); Velo_Off.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); Velo_Off.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "77"; gfx_measurestr(#klabel, klw, klh); Velo_Off.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "127"; gfx_measurestr(#klabel, klw, klh); Velo_Off.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = Velo_Off.XIn * zoom; gfx_y = Velo_Off.yIn * zoom + Velo_Off.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.i", slider(Velo_off.slider)), 0x01, gfx_x + Velo_Off.Size*zoom/2, gfx_y + gfx_texth);
       
       lightgrey();
       Velo_Boost.knob();
       gfx_setfont(1);
       #klabel = "FACTOR"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.knoblabelposition(klw);gfx_drawstr(#klabel);
       gfx_setfont(2,"Arial",10*zoom,'b');
       #klabel = "0"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.labelposition(0.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "1"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.labelposition(2.5,klw, klh); gfx_drawstr(#klabel);
       #klabel = "2.5"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.labelposition(5,klw, klh); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
       #klabel = "4"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.labelposition(7.5,klw, klh); gfx_drawstr(#klabel); 
       #klabel = "5"; gfx_measurestr(#klabel, klw, klh); Velo_Boost.labelposition(9.5,klw, klh); gfx_drawstr(#klabel);
       rgb(30,185,30); gfx_x = Velo_Boost.XIn * zoom; gfx_y = Velo_Boost.yIn * zoom + Velo_Boost.Size*zoom/2 - 10*zoom;
       gfx_drawstr(sprintf(#, "%.2f", slider(Velo_boost.slider)), 0x01, gfx_x + Velo_Boost.Size*zoom/2, gfx_y + gfx_texth);
       
       black();
       gfx_recT(1103*zoom,460*zoom,100*zoom,100*zoom);
       
       gfx_x = 1103*zoom; gfx_y = 560*zoom;
       tmploop = 0;
       rgb(50,160,50);
       loop(100,
       gfx_velo = tmploop*127/100;
       gfx_lineto(1103*zoom + tmploop*zoom, 560*zoom - (100*velo_compressor(gfx_velo)/127)*zoom);
       gfx_lineto(1103*zoom + tmploop*zoom, 561*zoom - (100*velo_compressor(gfx_velo)/127)*zoom);
       tmploop += 1;
       );

       lightgrey();
       gfx_roundrecT(1103*zoom,460*zoom,100*zoom,100*zoom,0);
       //velo_compressor (velo_in)
       //black(); gfx_rect(0,0,1000,1000);
       lightgrey(); gfx_a = 1;
       gfx_roundrect(1030*zoom, 450*zoom, 250*zoom, 340*zoom,7*zoom);
       gfx_setfont(4); gfx_x = 1068*zoom; gfx_y = 765*zoom;
       gfx_setfont(4); gfx_x = 1065*zoom; gfx_y = 765*zoom;
       gfx_drawstr("VELOCITY CONTROLS");
       
       ); // VELO Modmode
       
       mouseclick_r == 2 ? ModMode == 0 ? ModMode = 1 : ModMode = 0;
       
       mouseClick == 1 ? (
       
       g_collision(wt_x, 10*zoom, 23*zoom, 16*zoom) ? (slider178 = 0; caller = 1);
       g_collision(fm_x, 10*zoom, 23*zoom, 16*zoom) ? (slider178 = 1; caller = 1);
       
       
       synth_mode ? (
       FEEDBACK.K_Collision() ? FEEDBACK.dragstart();
       FM.Transpose.K_Collision() ? FM.Transpose.dragstart();
       FM.Pitchamount.K_Collision() ? FM.Pitchamount.dragstart();
       
       g_collision(FM_PM_x, FM_PM_y+120*zoom*(1/6), 85*zoom, 120*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(0); sel_mod > -1 ? FM.opp[0] = sel_mod;caller = 1);
       g_collision(FM_PM_x, FM_PM_y, 85*zoom, 120*zoom*(1/6)) ? (FM.pitch.mod.amt.op_dragstart();caller = 1);
       g_collision(FM_PM_x, FM_PM_y+240*zoom*(1/6), 42.5*zoom, 120*zoom*(1/6)) ? (FM.opp[3] == 2 ? FM.opp[3] = 0 : FM.opp[3] += 1; caller = 1);
       g_collision(FM_PM_x+42.5*zoom, FM_PM_y+240*zoom*(1/6), 42.5*zoom, 120*zoom*(1/6)) ? (FM.opp[2] == 0 ? FM.opp[2] = 1 : FM.opp[2] = 0; caller = 1);
       
       g_collision(50*zoom, 100*zoom, 34*zoom,18*zoom) ? (slider(operator_startslider+8) == 1 ? slider(operator_startslider+8) = 0 : slider(operator_startslider+8) = 1; caller = 1);
       
       
       );
       
       modmode == 0 ? (
          FilterF.K_Collision() ? FilterF.dragstart();
          FilterQ.K_Collision() ? FilterQ.dragstart();
          
          dist_boost.K_Collision() ? dist_boost.dragstart();
          Glide.K_Collision() ? Glide.dragstart();
          

          g_collision(1220*zoom, 660*zoom, 34*zoom,18*zoom) ? (chorus_on == 1 ? slider175 = 0 : slider175 = 1; caller = 1);
          g_collision(1220*zoom, 720*zoom, 34*zoom,18*zoom) ? (chorus_on == 2 ? slider175 = 0 : slider175 = 2; caller = 1);
          
          
                  
      ):(
        FilterF_mod.parameter_config     (synth.filter.startslider+7,         0,    -100, 100,  0, 0, 0, 0, 0, 0); // Med +11 Mode + 12  Whl +26
        Filterq_mod.parameter_config     (synth.filter.startslider+11,         0,    -10, 10,  0, 0, 0, 0, 0, 0); // Med +11 Mode + 12  Whl +26
        
                    
                    g_collision(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*(1/6)) ? FilterF_mod.dragstart();
                    g_collision(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom+40*zoom, 42.5*zoom, FilterF.size*zoom*(1/6)) ? (slider(synth.filter.startslider+10) = slider(synth.filter.startslider+10) == 2 ? 0 : slider(synth.filter.startslider+10) + 1; caller = 1);
                    g_collision(FilterF.xIn*zoom + 32.5*zoom, FilterF.yIn*zoom+40*zoom, 42.5*zoom, FilterF.size*zoom*(1/6)) ? (slider(synth.filter.startslider+9) = slider(synth.filter.startslider+9) == 0 ? 1 : 0; caller = 1);
                    g_collision(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom + 20*zoom, 85*zoom, FilterF.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(0); sel_mod > -1 ? slider(synth.filter.startslider+8) = sel_mod;caller = 1);
                    
                    g_collision(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom, 85*zoom, FilterQ.size*zoom*(1/6)) ? FilterQ_mod.dragstart();
                    g_collision(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom+40*zoom, 42.5*zoom, FilterQ.size*zoom*(1/6)) ? (slider(synth.filter.startslider+14) = slider(synth.filter.startslider+14)  == 2 ? 0 : slider(synth.filter.startslider+14) + 1; caller = 1);
                    g_collision(FilterQ.xIn*zoom + 32.5*zoom, FilterQ.yIn*zoom+40*zoom, 42.5*zoom, FilterQ.size*zoom*(1/6)) ? (slider(synth.filter.startslider+13) = slider(synth.filter.startslider+13) == 0 ? 1 : 0; caller = 1);
                    g_collision(FilterQ.xIn*zoom - 10*zoom, FilterQ.yIn*zoom + 20*zoom, 85*zoom, FilterQ.size*zoom*(1/6)) ? (gfx_x = mouse_x; gfx_y = mouse_y; mod_select(1); sel_mod > -1 ? slider(synth.filter.startslider+12) = sel_mod;caller = 1);
                    
                    Velo_thresh.K_Collision() ? Velo_thresh.dragstart();
                    Velo_ratio.K_Collision() ? Velo_ratio.dragstart();
                    Velo_off.K_Collision() ? Velo_off.dragstart();
                    Velo_boost.K_Collision() ? Velo_boost.dragstart();
     );   
      
      

      g_collision(filter_select_x, filter_select_y, 130*zoom, 20*zoom) ? (
      gfx_x = filter_select_x; gfx_y = filter_select_y;
          last_clicked_item = gfx_showmenu("Linear|Lin Xtreme|Ladder 1|Ladder 2|303|MS2 1|MS2 2|Steiner|Steiner A|");
          last_clicked_item ? slideR(synth.filter.startslider + 3) = last_clicked_item - 1;
          caller = 1;
      );
      
      
          LFO.K_Collision() ? LFO.dragstart();
          Main_out.K_Collision() ? Main_out.dragstart();
          
          LFO_delay.K_Collision() ? LFO_delay.dragstart();
          LFO_attack.K_Collision() ? LFO_attack.dragstart();
          
          FilterAmt.K_Collision() ? FilterAmt.dragstart();
          g_collision(1385*zoom, 32*zoom, 28*zoom, 28*zoom) ? (slider(synth.filter.startslider+5) == 1 ? slider(synth.filter.startslider+5) = 0 : slider(synth.filter.startslider+5) = 1; Caller = 1);
          
          /*
          g_collision(filter_but_bp, filter_but_y, 23*zoom,18*zoom) ? (slider(synth.filter.startslider+3) = 0; Caller = 1);
          g_collision(filter_but_12, filter_but_y, 40*zoom,18*zoom) ? (slider(synth.filter.startslider+3) = 1; slideR(synth.filter.startslider + 2) = 0; caller = 1);
          g_collision(filter_but_24, filter_but_y, 40*zoom,18*zoom) ? (slider(synth.filter.startslider+3) = 1; slideR(synth.filter.startslider + 2) = 1; caller = 1);
          g_collision(filter_but_48, filter_but_y, 40*zoom,18*zoom) ? (slider(synth.filter.startslider+3) = 1; slideR(synth.filter.startslider + 2) = 2; caller = 1);
          */
          g_collision(follow_off, follow_y, 25*zoom,13*zoom) ? (slider(synth.filter.startslider+4) = 0; Caller = 1);
          g_collision(follow_half, follow_y, 35*zoom,13*zoom) ? (slider(synth.filter.startslider+4) = 0.5; Caller = 1);
          g_collision(follow_full, follow_y, 25*zoom,13*zoom) ? (slider(synth.filter.startslider+4) = 1; Caller = 1);
          
          g_collision(lfo_select+6*zoom, 322*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 0; caller = 1);
          g_collision(lfo_select+6*zoom, 322*zoom+20*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 1; caller = 1);
          g_collision(lfo_select+6*zoom, 322*zoom+40*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 2; caller = 1);
          g_collision(lfo_select+6*zoom, 322*zoom+60*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 3; caller = 1);
          g_collision(lfo_select+6*zoom, 322*zoom+80*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 4; caller = 1);
          g_collision(lfo_select+6*zoom, 322*zoom+100*zoom, 90*zoom, 18*zoom) ? (slider(LFO_1.startslider) = 5; caller = 1);
          
          
          //g_collision(1223*zoom, 46*zoom, 53*zoom, 15*zoom) ? hpf.dragstart();
          
          
       );
       
       
       MouseClick == - 1 ? (
          FilterF.dragstop();
          FilterF_mod.dragstop();
          FilterQ_mod.dragstop();
          LFO.dragstop();
          Velo_Thresh.dragstop();
          Velo_Ratio.dragstop();
          Velo_Off.dragstop();
          Velo_Boost.dragstop();
          Main_out.dragstop();
          dist_boost.dragstop();
          Glide.dragstop();
          LFO_delay.dragstop();
          LFO_attack.dragstop();
          FilterQ.dragstop();
          FilterAmt.dragstop();
          HPF.dragstop();
          FM.pitch.mod.amt.op_dragstop();
          FEEDBACK.dragstop();
          FM.Transpose.dragstop();
          FM.Pitchamount.dragstop();
       );
       
       FilterF.dragging ? (FilterF.Potdrag();Caller = 1;);
       FilterF_mod.dragging ? (FilterF_mod.potdrag(); caller = 1);
       FilterQ_mod.dragging ? (FilterQ_mod.potdrag(); caller = 1);
       LFO.dragging ? (LFO.Potdrag();Caller = 1;);
       Velo_thresh.dragging ? (Velo_Thresh.Potdrag();Caller = 1;);
       Velo_ratio.dragging ? (Velo_ratio.Potdrag();Caller = 1;);
       Velo_off.dragging ? (Velo_off.Potdrag();Caller = 1;);
       Velo_boost.dragging ? (Velo_boost.Potdrag();Caller = 1;);
       Main_Out.dragging ? (Main_out.Potdrag();Caller = 1;);
       dist_boost.dragging ? (dist_boost.Potdrag();Caller = 1;);
       Glide.dragging ? (Glide.Potdrag();Caller = 1;);
       LFO_delay.dragging ? (LFO_delay.Potdrag();Caller = 1;);
       LFO_attack.dragging ? (LFO_attack.Potdrag();Caller = 1;);
       FilterQ.dragging ? (FilterQ.Potdrag();Caller = 1;);
       FilterAmt.dragging ? (FilterAmt.Potdrag();Caller = 1;);
       HPF.dragging ? (HPF.Potdrag();Caller = 1;);
       FEEDBACK.dragging ? (FEEDBACK.Potdrag();Caller = 1;);
       FM.Transpose.dragging ? (FM.Transpose.Potdrag();Caller = 1;);
       FM.Pitchamount.dragging ? (FM.Pitchamount.Potdrag();Caller = 1;);
       FM.pitch.mod.amt.dragging ? (FM.pitch.mod.amt.op_potdrag(); caller = 1);
       
       
       mouse_wheel ? (
         modmode == 0 ? FilterF.K_Collision() ? FilterF.potwheel();
         modmode ? g_collision(FilterF.xIn*zoom - 10*zoom, FilterF.yIn*zoom, 85*zoom, FilterF.size*zoom*0.5) ? FilterF_mod.potwheel();
         modmode ? g_collision(Filterq.xIn*zoom - 10*zoom, Filterq.yIn*zoom, 85*zoom, Filterq.size*zoom*0.5) ? Filterq_mod.potwheel();
         LFO.K_Collision() ? LFO.potwheel();
         Velo_thresh.K_Collision() ? Velo_thresh.potwheel();
         Velo_ratio.K_Collision() ? Velo_ratio.potwheel();
         Velo_off.K_Collision() ? Velo_off.potwheel();
         Velo_boost.K_Collision() ? Velo_boost.potwheel();
         Main_out.K_Collision() ? Main_out.potwheel();
         modmode == 0 ? dist_boost.K_Collision() ? dist_boost.potwheel();
         modmode == 0 ? Glide.K_Collision() ? glide.potwheel();
         LFO_delay.K_Collision() ? LFO_delay.potwheel();
         LFO_attack.K_Collision() ? LFO_attack.potwheel();
         modmode == 0 ? FilterQ.K_Collision() ? FilterQ.potwheel();
         FilterAmt.K_Collision() ? FilterAmt.potwheel();
         Synth_mode ? FEEDBACK.K_Collision() ? FEEDBACK.potwheel();
         Synth_mode ? FM.Transpose.K_Collision() ? FM.Transpose.potwheel();
         Synth_mode ? FM.Pitchamount.K_Collision() ? FM.Pitchamount.potwheel();
         caller = 1;
         //g_collision(1223*zoom, 46*zoom, 53*zoom, 15*zoom) ? hpf.potwheel();
       );
       
        mouse_wheel = 0;
        
        
        
        led_distance = 15*zoom;
        lightgrey(); gfx_setfont(2);
        tmploop = 0;
        loop(24,
        gfx_x = tmploop*led_distance+1033*zoom; gfx_y = 247*zoom;
        CVslider[tmploop] != CVslider[tmploop+24] ? ledon = 1 : ledon = 0;
        gfx_blit(47,zoom*0.25,0,0,128*ledon,128,128);
                mouse_Cap == 1 && g_collision(gfx_x+9*zoom,gfx_y-4*zoom, 14*zoom, 30*zoom) ? (
                slider_automate(slider(tmploop+232));
                gfx_blit(46,zoom*0.25,0,0,128,128,128);
                notify_CV = 80;
                notify_CV_NR = tmploop + 1;
                );
        gfx_y -= 4*zoom; gfx_x += 12*zoom; gfx_drawstr(sprintf(#,"%i", tmploop+1));
        tmploop += 1;
        );

        GFXCV_Loop = 0;
        Loop(24,
        CVSlider[GFXCV_Loop+24] = CVslider[GFXCV_loop];
        GFXCV_Loop += 1;
        );
        
        gfx_roundrect(1030*zoom, 230*zoom, 382*zoom, 50*zoom,7*zoom);
        
        Notify_CV > 0 ? (
        Notify_CV -= 1;
        rgb(250,80,80);
        gfx_x = 40*zoom; gfx_y = 10*zoom; gfx_setfont(1);
        gfx_drawstr("CV-Slider #"); gfx_drawnumber(Notify_CV_NR,0); gfx_drawstr(" can now be automated :)");
        );
        
        
        
//        orange(); gfx_x=gfx_y = 10; gfx_setfont(4);
//        gfx_drawnumber(Synth.subosc_1.on,0);
        
        
