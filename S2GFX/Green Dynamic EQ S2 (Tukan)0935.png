desc: Green Dynamic EQ S2 (Tukan)
tags filters
version: 1.2.0  //<--- Make sure you change VERSION below if this changes!!
author: Justin Johnson
license: MIT


slider1:Node1_Enabled=2<0,2,1{Off,Disabled,Enabled}>-LS ON
slider2:Node1_Gain=0<-24.0,24.0,0.01>-LS Gain
slider3:Node1_Frequency=29.91<9,92.2,0.01>-LS Frequency
slider4:Node1_Q=30.5<21,40.0,0.01>-LS Q
//slider24:Node1_Slope=0<0,15,1>Filter1 Slope
slider5:Node2_Enabled=2<0,2,1{Off,Disabled,Enabled}>-P1 ON
slider6:Node2_Gain=0<-24.0,24.0,0.01>-P1 Gain
slider7:Node2_Frequency=36.456<9,92.2,0.01>-P1 Frequency
slider8:Node2_Q=32.647<0,100.0,0.01>-P1 Q
//slider24:Node1_Slope=0<0,15,1>Filter1 Slope
slider9:Node3_Enabled=2<0,2,1{Off,Disabled,Enabled}>-P2 ON
slider10:Node3_Gain=0<-24.0,24.0,0.01>-P2 Gain
slider11:Node3_Frequency=50.81<9,92.2,0.01>-P2 Frequency
slider12:Node3_Q=32.647<0,100.0,0.01>-P2 Q
//slider24:Node1_Slope=0<0,15,1>Filter1 Slope
slider13:Node4_Enabled=2<0,2,1{Off,Disabled,Enabled}>-P3 ON
slider14:Node4_Gain=0<-24.0,24.0,0.01>-P3 Gain
slider15:Node4_Frequency=65.298<9,92.2,0.01>-P3 Frequency
slider16:Node4_Q=32.647<0,100.0,0.01>-P3 Q
//slider24:Node1_Slope=0<0,15,1>Filter1 Slope
slider17:Node5_Enabled=2<0,2,1{Off,Disabled,Enabled}>-HS ON
slider18:Node5_Gain=0<-24.0,24.0,0.01>-HS Gain
slider19:Node5_Frequency=89.981<9,92.2,0.01>-HS Frequency
slider20:Node5_Q=30.563<21,40.0,0.01>-HS Q
//slider24:Node1_Slope=0<0,15,1>Filter1 Slope
slider21:Node6_Enabled=0<0,2,1{Off,Disabled,Enabled}>-HP ON
slider22:Node6_Frequency=27.026<9,92.2,0.01>-HP Frequency
slider23:Node6_Slope=2<0,15,1>-HP Slope

slider24:Gain=0<-24,24,0.01>-Trim

slider25:0<0,1,1>-Bypass

slider26:SC_Listen=0<0,5,1>-SC_Listen

slider27:SC1_Thresh=-20<-60,0,0.1>  -Band1 Thresh
slider28:SC1_Sensivity=5<0,10,0.01> -Band1 Sensivity
slider29:SC1_Attack=10<0.1,100,0.1> -Band1 Attack
slider30:SC1_Release=50<10,400,1>   -Band1 Release
slider31:<-24,24,.1>    -Band1 Range
slider32:SC1_On=1<0,1,1{Off, On}>   -Band1 On

slider33:SC2_Thresh=-20<-60,0,0.1>  -Band2 Thresh
slider34:SC2_Sensivity=5<0,10,0.01>   -Band2 Sensivity
slider35:SC2_Attack=10<0.1,100,0.1> -Band2 Attack
slider36:SC2_Release=50<10,400,1>   -Band2 Release
slider37:<-24,24,.1>    -Band2 Range
slider38:SC2_On=1<0,1,1{Off, On}>   -Band2 On

slider39:SC3_Thresh=-20<-60,0,0.1>  -Band3 Thresh
slider40:SC3_Sensivity=5<0,10,0.01>   -Band3 Sensivity
slider41:SC3_Attack=10<0.1,100,0.1> -Band3 Attack
slider42:SC3_Release=50<10,400,1>   -Band3 Release
slider43:<-24,24,.1>    -Band3 Range
slider44:SC3_On=1<0,1,1{Off, On}>   -Band3 On

slider45:SC4_Thresh=-20<-60,0,0.1>  -Band4 Thresh
slider46:SC4_Sensivity=5<0,10,0.01>   -Band4 Sensivity
slider47:SC4_Attack=10<0.1,100,0.1> -Band4 Attack
slider48:SC4_Release=50<10,400,1>   -Band4 Release
slider49:<-24,24,.1>    -Band4 Range
slider50:SC4_On=1<0,1,1{Off, On}>   -Band4 On

slider51:SC5_Thresh=-20<-60,0,0.1>  -Band5 Thresh
slider52:SC5_Sensivity=5<0,10,0.01>   -Band5 Sensivity
slider53:SC5_Attack=10<0.1,100,0.1> -Band5 Attack
slider54:SC5_Release=50<10,400,1>   -Band5 Release
slider55:<-24,24,.1>    -Band5 Range
slider56:SC5_On=1<0,1,1{Off, On}>   -Band5 On

slider57:SC1_Input=0<0,5,1{Internal, SC1, SC2, SC3, SC4, SC5}>- Input 1
slider58:SC2_Input=0<0,5,1{Internal, SC1, SC2, SC3, SC4, SC5}>- Input 2
slider59:SC3_Input=0<0,5,1{Internal, SC1, SC2, SC3, SC4, SC5}>- Input 3
slider60:SC4_Input=0<0,5,1{Internal, SC1, SC2, SC3, SC4, SC5}>- Input 4
slider61:SC5_Input=0<0,5,1{Internal, SC1, SC2, SC3, SC4, SC5}>- Input 5


import S2GFX/spectrum.jsfx-inc
import S2GFX/svf_filter.jsfx-inc
import S2GFX/firhalfband.jsfx-inc
import S2GFX/tk_lib.jsfx-inc

in_pin:left input
in_pin:right input
in_pin:sc1 input left
in_pin:sc1 input right
in_pin:sc2 input left
in_pin:sc2 input right
in_pin:sc3 input left
in_pin:sc3 input right
in_pin:sc4 input left
in_pin:sc4 input right
in_pin:sc5 input left
in_pin:sc5 input right
out_pin:left output
out_pin:right output

filename:0,S2GFX/HD_Back.png
filename:1,S2GFX/BlueKnob.png
filename:2,S2GFX/RedKnob.png
filename:3,S2GFX/SmallKnob.png
filename:4,S2GFX/button.png
filename:5,S2GFX/switch.png
filename:6,S2GFX/gled.png
filename:7,S2GFX/rled.png
filename:8,S2GFX/yled.png
filename:9,S2GFX/oled.png
filename:10,S2GFX/bled.png
filename:11,S2GFX/menu.png
filename:12,S2GFX/S2_logo.png

options:No_meter
options:gfx_hz=60
options:gmem=TukanGreenEQS2
options:gfx_idle


@init
GEQ_VERSION = 0.935;
//0935 Removed filters_to_sliders() ind @serialize
//093 Sensitivity!! +SC support, fixed threshold zoom issue
//09 added auto bypass support
/*
0.8 keine changes
changes 0.6:
Changed TCP/MCP graphics
degub: Lowshelf in MCP/TCP now dragging
*/
Stereo_Mode=1; //<0,1,1{Mid/Side,Left/Right}>-Stereo Mode
Quality=0; //<0,1,1{Eco,HQ}>-Quality
MLGain=0;//<-136,30,0.01>-Mid/Left Gain
SRGain=0;//<-136,30,0.01>-Side/Right Gain
Scale=100;//<0,200,0.01>-Scale

Spectrum_Mode=0;//<0,5,1{Full,Mid,Side,Mid / Side,Left,Right,Left / Right}>-Spectrum
//Display_Mode=0;//<0,2,1{Fill,Line,None}>-Display
//Ceiling_Value=0;//<0,2,1{0dB,20dB,40dB}>-Ceiling
//Floor_Value=0;//<0,2,1{-90dB,-140dB,-200dB}>-Floor
//Tilt_Value=3;//<0,5,1{0dB/oct,1.5dB/oct,3dB/oct,4.5dB/oct,6dB/oct}>-Tilt
//Type_Value=1;//<0,3,1{Hamming,Blackman-Harris,Blackman,Rectangular}>-Type
//Block_Value=3;//<0,3,1{2048,4096,8192,16384}>-Block Size
Show_Piano=0;//<0,1,1{Off,On}>-Show Piano
Show_Peaks=0;//<0,1,1{Off,On}>-Show Peaks
Show_PreEQ=0;//<0,1,1{Off,On}>-Show Pre-EQ
Db_Range=3;//<0,4,1{6dB,12dB,18dB,24dB,30dB}>-dB Range
MidPolarity=0;//<0,1,1>-Mid Polarity
SidePolarity=0;//<0,1,1>-Side Polarity
LimitOutput=0;//<0,1,1>-Limit Output
AGCEnabled=0;//<0,1,1>-AGC Enabled
PanelEnabled=0;//<0,1,1>-Panel Enabled

Node1_Group=0;//<0,2,1{Stereo,Mid,Side,Left,gfx_blitRight}>Filter1 Group
Node1_Type=3;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node2_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node2_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node3_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node3_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node4_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node4_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node5_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node5_Type=4;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node6_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node6_Type=2;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

// This should be the same as in the comment header
#VERSION = "1.2.0";


ext_tail_size = 64;
ext_nodenorm    = 1;
gfx_ext_retina = 1;
gfx_clear=0;
ext_noinit=1;
lastCap=1;
mouse_wheel=1;
is_recording = 0; is_playing = 0; is_stopped = 1;
while_playing = 1; while_recording = 1; while_stopped = 1;
Number_input = 0;
number_input_raw = 0;
number_input_use = 0;
komma = 0;
in_key = 0;
number_input_x = 0;
number_input_y=0;
number_input_slider = 0;
number_input_min=0;
number_input_max=0;
number_input_invalid = 0;
number_input_sign=1;


s2_numbers_of_sliders = 61;
s2_numbers_of_generics = 8;
group_generics =1057910; // fuer group_generics[bis zu 200]
sliders_old = group_generics + 16*200;
generics_old = sliders_old + 16*64;

//link_group = 0;
//link_group_master = 0;

 blueknob = 1;
 redknob = 2;
 smallknob = 3;
 button = 4;
 switch = 5;
 gled = 6; rled = 7; yled = 8; oled = 9; bled = 10;
 menu = 11;  
 logo = 12;
 
 
 
 
 
 
 Mouse_Sensivity ();
 
 
 
 //Q = 76.87 = 10Q
 OEQ_knobs_y = 270;
 OEQ_knobs_x = 60;
 OEQ_knobs_step = 160;
 OEQ_knobs_x_plus = 110;
 //Parameter_config                (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)
       N1_on.button_config(1, OEQ_knobs_x + 15, 530);
       N1_Gain.parameter_config     (2,       0,        -24,    24,   OEQ_knobs_x,  230,  150, 200,    1,       blueknob);
       N1_Freq.parameter_config     (3,       29.91,      9,   92.2,   OEQ_knobs_x+7,  350,  120, 200,    1,       smallknob);
       N1_Q.parameter_config        (4,       30.5,     21,   40,   OEQ_knobs_x+7,  OEQ_knobs_y + 180, 120, 200,    1,       smallknob);     
       N2_on.button_config(5, 60+OEQ_knobs_x_plus+OEQ_knobs_x,  OEQ_knobs_y + 180);
       N2_Gain.parameter_config     (6,       0,        -24,    24,   OEQ_knobs_x_plus+OEQ_knobs_x+35,  OEQ_knobs_y,  150, 200,    1,       blueknob);
       N2_Freq.parameter_config     (7,       36.456,      9,   92.2,   OEQ_knobs_x_plus+OEQ_knobs_x,  OEQ_knobs_y + 100,  120, 200,    1,       smallknob);
       N2_Q.parameter_config        (8,       32.647,     0,   100,   OEQ_knobs_x_plus+OEQ_knobs_x+80,  OEQ_knobs_y + 100, 120, 200,    1,       smallknob);
       N3_on.button_config(9, 60+OEQ_knobs_x_plus+OEQ_knobs_x+OEQ_knobs_step,  OEQ_knobs_y + 180);
       N3_Gain.parameter_config     (10,       0,        -24,    24,   OEQ_knobs_x_plus+OEQ_knobs_step+OEQ_knobs_x+35,  OEQ_knobs_y,  150, 200,    1,       blueknob);
       N3_Freq.parameter_config     (11,       50.81,      9,   92.2,   OEQ_knobs_x_plus+OEQ_knobs_step+OEQ_knobs_x,  OEQ_knobs_y + 100,  120, 200,    1,       smallknob);
       N3_Q.parameter_config        (12,       32.647,     0,   100,   OEQ_knobs_x_plus+OEQ_knobs_step+OEQ_knobs_x+80,  OEQ_knobs_y + 100, 120, 200,    1,       smallknob);
       N4_on.button_config(13, 60+OEQ_knobs_x_plus+OEQ_knobs_x+OEQ_knobs_step*2,  OEQ_knobs_y + 180);
       N4_Gain.parameter_config     (14,       0,        -24,    24,   OEQ_knobs_x_plus+2*OEQ_knobs_step+OEQ_knobs_x+35,  OEQ_knobs_y,  150, 200,    1,       blueknob);
       N4_Freq.parameter_config     (15,       65.298,      9,   92.2,   OEQ_knobs_x_plus+2*OEQ_knobs_step+OEQ_knobs_x,  OEQ_knobs_y + 100,  120, 200,    1,       smallknob);
       N4_Q.parameter_config        (16,       32.647,     0,   100,   OEQ_knobs_x_plus+2*OEQ_knobs_step+OEQ_knobs_x+80,  OEQ_knobs_y + 100, 120, 200,    1,       smallknob);
       N5_Gain.parameter_config     (18,       0,        -24,    24,   2*OEQ_knobs_x_plus+2*OEQ_knobs_step+2*OEQ_knobs_x+3, 230,  150, 200,    1,       blueknob);
       N5_Freq.parameter_config     (19,       89.981,      9,   92.2,   7+2*OEQ_knobs_x_plus+2*OEQ_knobs_step+2*OEQ_knobs_x+3,  350,  120, 200,    1,       smallknob);
       N5_Q.parameter_config        (20,       30.563,     21,   40,   7+2*OEQ_knobs_x_plus+2*OEQ_knobs_step+2*OEQ_knobs_x+3,  OEQ_knobs_y + 180, 120, 200,    1,       smallknob);
       N5_on.button_config(17, 2*OEQ_knobs_x_plus+2*OEQ_knobs_step+2*OEQ_knobs_x + 18, 530);
 
 
      //N6_Gain.parameter_config     (22,       0,        -24,    24,   2*OEQ_knobs_x_plus+2*OEQ_knobs_step+2*OEQ_knobs_x+3, 230,  150, 200,    1,       blueknob);
      N6_Freq.parameter_config     (22,       27.026,      9,   92.2,   OEQ_knobs_x_plus+OEQ_knobs_x+12,  OEQ_knobs_y + 260,  120, 200,    1,       smallknob);
      N6_Q.parameter_config        (23,       2,     0,   6,   OEQ_knobs_x_plus+OEQ_knobs_x+92,  OEQ_knobs_y + 260, 120, 200,    1,       smallknob);
      N6_on.button_config(21, OEQ_knobs_x_plus+OEQ_knobs_x+220,  OEQ_knobs_y + 273);
 
      OutGain.parameter_config     (24,       0,      -24,   24,   OEQ_knobs_x_plus+OEQ_knobs_x+360,  OEQ_knobs_y + 260,  120, 200,    1,       smallknob);
      BBypass.button_config(25,740,0);
 
 
 
 
 /*
 slider27:SC1_Thresh=-20<-60,0,0.1>  SC1 Thresh
 slider28:SC1_Ratio=4<0.1,10,0.01>   SC1 Ratio
 slider29:SC1_Attack=10<0.1,100,0.1> SC1 Attack
 slider30:SC1_Release=50<10,400,1>   SC1 Release
 slider31:SC1_Target=0<-24,24,.1>    SC1 Target
 slider32:SC1_On=1<0,1,1{Off, On}>   SC1 On
 */
 SC1_Threshold.parameter_config     (27,       -20,        -60,    0,    290,  335,  150, 200,    1,       blueknob);
 SC1_Sensivity.parameter_config     (28,       5,        0,    10,    290,  335,  150, 200,    1,       blueknob);
 SC1_Attack.parameter_config        (29,       10,     0.1,   100,    320,  445, 120, 200,    1,       smallknob);
 SC1_Release.parameter_config       (30,       50,     10,   400,     420, 445, 120, 200,    1,       smallknob);
 SC1_Range.parameter_config         (31,       0,        -24,    24,  290 + 140,  335,  150, 200,    1,       blueknob);
 Sc1_On.button_config               (32, 570, 490);

 SC2_Threshold.parameter_config     (33,       -20,        -60,    0,    290,  335,  150, 200,    1,       blueknob);
 SC2_Sensivity.parameter_config     (34,       5,        0,    10,    290,  335,  150, 200,    1,       blueknob);
 SC2_Attack.parameter_config        (35,       10,     0.1,   100,    320,  445, 120, 200,    1,       smallknob);
 SC2_Release.parameter_config       (36,       50,     10,   400,     420, 445, 120, 200,    1,       smallknob);
 SC2_Range.parameter_config         (37,       0,        -24,    24,  290 + 140,  335,  150, 200,    1,       blueknob);
 Sc2_On.button_config               (38, 570, 490);
 
 SC3_Threshold.parameter_config     (39,       -20,        -60,    0,    290,  335,  150, 200,    1,       blueknob);
 SC3_Sensivity.parameter_config     (40,       5,        0,    10,    290,  335,  150, 200,    1,       blueknob);
 SC3_Attack.parameter_config        (41,       10,     0.1,   100,    320,  445, 120, 200,    1,       smallknob);
 SC3_Release.parameter_config       (42,       50,     10,   400,     420, 445, 120, 200,    1,       smallknob);
 SC3_Range.parameter_config         (43,       0,        -24,    24,  290 + 140,  335,  150, 200,    1,       blueknob);
 Sc3_On.button_config               (44, 570, 490);
 
 SC4_Threshold.parameter_config     (45,       -20,        -60,    0,    290,  335,  150, 200,    1,       blueknob);
 SC4_Sensivity.parameter_config     (46,       5,        0,    10,    290,  335,  150, 200,    1,       blueknob);
 SC4_Attack.parameter_config        (47,       10,     0.1,   100,    320,  445, 120, 200,    1,       smallknob);
 SC4_Release.parameter_config       (48,       50,     10,   400,     420, 445, 120, 200,    1,       smallknob);
 SC4_Range.parameter_config         (49,       0,        -24,    24,  290 + 140,  335,  150, 200,    1,       blueknob);
 Sc4_On.button_config               (50, 570, 490);
 
 SC5_Threshold.parameter_config     (51,       -20,        -60,    0,    290,  335,  150, 200,    1,       blueknob);
 SC5_Sensivity.parameter_config     (52,       5,        0,    10,    290,  335,  150, 200,    1,       blueknob);
 SC5_Attack.parameter_config        (53,       10,     0.1,   100,    320,  445, 120, 200,    1,       smallknob);
 SC5_Release.parameter_config       (54,       50,     10,   400,     420, 445, 120, 200,    1,       smallknob);
 SC5_Range.parameter_config         (55,       0,        -24,    24,  290 + 140,  335,  150, 200,    1,       blueknob);
 Sc5_On.button_config               (56, 570, 490);
 
 Sc1_Input.button_config            (57, 570, 490);
 Sc2_Input.button_config            (58, 570, 490);
 Sc3_Input.button_config            (59, 570, 490);
 Sc4_Input.button_config            (60, 570, 490);
 Sc5_Input.button_config            (61, 570, 490);
 
 function computeGainReduction(x)
 (
 (x < this.Tlo) ? x = 0 :
 (x > this.Thi) ? x = this.slope * (x - this.Threshold) :
 (this.delta = x - this.Tlo;
 x = this.delta * this.delta * this.knee_factor;);
 
 this.eps = 0.0000000001;
 this.yR = min(x, this.aplhaER * this.yR + (1 - this.aplhaER) * x + this.eps - this.eps);
 this.yA = this.aplhaA * this.yA + (1 - this.aplhaA) * this.yR + this.eps - this.eps;
 x = this.yA;
 );
 
 function compressor_sliders(threshold_ ratio_ attack_ release_ knee_ ) (
 this.Threshold = threshold_;
 //this.knee_width = abs(threshold_*2*knee_*0.01);
 this.Knee = knee_; 
 this.ratio = ratio_;
 this.slope = ((1 - this.ratio) / this.ratio);
 
 this.attack = attack_/1000;
 this.release = release_/1000;
 this.aplhaA = this.attack>0 ? exp(-1 / (this.attack * srate)) : 0;
 this.aplhaER = this.release>0 ? exp(-1 / (this.release * srate)) : 0;
 
 this.Tlo = (this.Threshold - this.knee_width / 2);
 this.Thi = (this.Threshold + this.knee_width / 2);
 this.knee_factor = (this.slope / (this.knee_width * 2));
 );
 
 
 
 
 
 
 
 
last_gfx_ext_retina = -1;

/*
 * Initialise memory allocator
 */
function init_memory() instance(index) ( 
  index = 0;
);

/*
 * Allocate memory
 */
function alloc_memory(amount) instance(index) local(i) ( 
  i = index;
  index += amount;
  i;
);

/*
 * Round number up or down
 */
function round(in) (
  floor(in + 0.5 * sign(in));
);

/*
 * Standard log2
 */
function log2(x) ( 
  log(x) / log(2);
);

/*
 * Return string of integer
 */
function int2str(intIn) local (outStr) (
  strcpy(outStr=#,"");
  sprintf(outStr,"%d",intIn);
  outStr;
);

/*
 * Get note from frequency
 */
function freq2note(f) (
  round(12*(log(f/440)/log(2))+69);
);

/*
 * Get gain (for filters) from dB
 */
function db_to_gain(db) ( 
    10^(db / 40);
);

function RMS_init(buffer_index, buffer_size)
    instance(rms_sum, rms_buffer, rms_bufIdx, rms_prev_val, rms_max_count)
( 
    rms_sum = 0;
    rms_buffer = buffer_index;
    rms_bufIdx = 0;
    rms_prev_val = 0;
    rms_max_count = buffer_size;
    memset(rms_buffer , 0, rms_max_count);
);

function RMS_reset()
    instance(rms_sum, rms_buffer, rms_bufIdx, rms_prev_val, rms_max_count)
( 
    rms_sum = 0;
    rms_bufIdx = 0;
    rms_prev_val = 0;
    memset(rms_buffer , 0, rms_max_count);
);

function RMS_process(s0, s1)
    instance(rms_sum, rms_buffer, rms_bufIdx, rms_prev_val, rms_max_count)
    local(rms_ampL, rms_ampR, rms_amp)
( 
    rms_ampL = abs(s0);
    rms_ampR = abs(s1);

    // Epsilon clamp required
    rms_ampL < 0.0000001 ? rms_ampL = 0.0000001;
    rms_ampR < 0.0000001 ? rms_ampR = 0.0000001;

    rms_amp = (rms_ampL * rms_ampL + rms_ampR * rms_ampR) * 0.5;

    rms_sum += rms_amp;
    rms_prev_val = rms_buffer[rms_bufIdx];
    rms_buffer[rms_bufIdx] = rms_amp;

    rms_bufIdx += 1;

    rms_bufIdx == rms_max_count ? (
        rms_bufIdx = 0;
    );

    rms_sum  -= rms_prev_val;
    rms_sum < 0 ? rms_sum = 0.0;
);

function RMS_getDB()
    instance(rms_sum, rms_max_count)
    local(rms_delta, rms_db)
( 
    rms_delta = rms_sum / rms_max_count;
    rms_db = 20 * log10(sqrt(rms_delta));
    rms_db;
);

/*
 * Color object
 */
function create_color(r, g, b)
  instance(red, green, blue) (
  red = r / 255;
  green = g / 255;
  blue = b / 255;
);

/*
 * Set oversampling rate including PDC
 */
function set_oversample(os) (
  // We'll only switch to oversampling if the sample rate
  // is low enough to benefit.
  srate < 88200 && os ? (
    DO_OVERSAMPLE = 1;
    SAMPLE_RATE = srate * 2;
    ONE_OVER_SAMPLE_RATE = 1.0 / SAMPLE_RATE;

    // Choose right FIR window for sample rate
    srate == 44100 ? (
      firL.init_FIR_filter_44100();
      firR.init_FIR_filter_44100();
      SC1_firL.init_FIR_filter_44100();
      SC1_firR.init_FIR_filter_44100();
      SC2_firL.init_FIR_filter_44100();
      SC2_firR.init_FIR_filter_44100();
      SC3_firL.init_FIR_filter_44100();
      SC3_firR.init_FIR_filter_44100();
      SC4_firL.init_FIR_filter_44100();
      SC4_firR.init_FIR_filter_44100();
      SC5_firL.init_FIR_filter_44100();
      SC5_firR.init_FIR_filter_44100();
    ) : srate == 48000 ? ( 
      firL.init_FIR_filter_48000();
      firR.init_FIR_filter_48000();
      SC1_firL.init_FIR_filter_48000();
      SC1_firR.init_FIR_filter_48000();
      SC2_firL.init_FIR_filter_48000();
      SC2_firR.init_FIR_filter_48000();
      SC3_firL.init_FIR_filter_48000();
      SC3_firR.init_FIR_filter_48000();
      SC4_firL.init_FIR_filter_48000();
      SC4_firR.init_FIR_filter_48000();
      SC5_firL.init_FIR_filter_48000();
      SC5_firR.init_FIR_filter_48000();
    );

    pdc_delay = get_FIR_pdc();
    pdc_bot_ch = 0;
    pdc_top_ch = 2; 
  ) : ( 
    DO_OVERSAMPLE = 0;
    SAMPLE_RATE = srate;
    ONE_OVER_SAMPLE_RATE = 1.0 / srate;
    pdc_delay = 0;
    pdc_bot_ch = 0;
    pdc_top_ch = 2;
  );
);

/*
 * Update the state of any changes
 */
function update_state() local (blocks, fade, fill_r, fill_g, fill_b, fill_a, line_r, line_g, line_b, line_a) (

  spectrum.ceiling = Ceiling_Value == 0 ? 0 : Ceiling_Value == 1 ? 20 : Ceiling_Value == 2 ? 40;
  spectrum.noise_floor = Floor_Value == 0 ? -90 : Floor_Value == 1 ? -140 : Floor_Value == 2 ? -200;
  spectrum.noise_floor = Floor_Value == 0 ? -90 : Floor_Value == 1 ? -140 : Floor_Value == 2 ? -200;
  spectrum.tilt = Tilt_Value == 0 ? 0 : Tilt_Value == 1 ? 1.5 : Tilt_Value == 2 ? 3 : Tilt_Value == 3 ? 4.5 :
                  Tilt_Value == 4 ? 6;

  spectrum.windowtype != Type_Value+1 ? spectrum.set_type(Type_Value+1);

  blocks = (2 ^ (Block_Value+1)) * 1024;

  spectrum.windowsize != blocks ? spectrum.set_block_size(blocks);

  fade = do_listen ? 0.5 : 1.0;

  // Listen spectrum colours
  listline_r = (240 / 255) * 0.80;
  listline_g = (101 / 255) * 0.80;
  listline_b = (76 / 255) * 0.80;

  Display_Mode == 0 ? (
    fill_r = 46 / 255;
    fill_g = 71 / 255;
    fill_b = 83 / 255;
    fill_a = 1.0;
    spectrum.set_fill(0, 1);
    spectrum.set_color(0, fill_r*fade, fill_g*fade, fill_b*fade, fill_a);

    spectrum.set_fill(2, 0);
    spectrum.set_color(2, 0.5, 0.5, 0.5, 1);

    fill_r = 96 / 255;
    fill_g = 223 / 255;
    fill_b = 255 / 255;
    fill_a = 0.5;
    spectrum.set_fill(1, 1); 
    spectrum.set_color(1, fill_r*fade, fill_g*fade, fill_b*fade, fill_a);

    spectrum.set_fill(3, 0);
    spectrum.set_color(3, 0.5, 0.5, 0.5, 1);

    spectrum.set_fill(4, 0);
    spectrum.set_color(4, listline_r, listline_g, listline_b, 1);

    spectrum.set_fill(5, 0);
    spectrum.set_color(5, listline_r*0.80, listline_g*0.80, listline_b*0.80, 1);

  ) : Display_Mode == 1 ? (
    line_a=1.0;
    line_r = 114 / 255; line_g = 215 / 255; line_b = 253 / 255;;
    spectrum.set_fill(0, 0);
    spectrum.set_color(0, line_r*fade, line_g*fade, line_b*fade, line_a);
    
    spectrum.set_fill(2, 0);
    spectrum.set_color(2, 0.5, 0.5, 0.5, 1);

    line_r = 253 / 255; line_g = 185 / 255; line_b = 21 / 255;;
    spectrum.set_fill(1, 0);
    spectrum.set_color(1, line_r*fade, line_g*fade, line_b*fade, line_a);

    spectrum.set_fill(3, 0);
    spectrum.set_color(3, 0.5, 0.5, 0.5, 1);

    spectrum.set_fill(4, 0);
    spectrum.set_color(4, listline_r, listline_g, listline_b, 1);

    spectrum.set_fill(5, 0);
    spectrum.set_color(5, listline_r*0.80, listline_g*0.80, listline_b*0.80, 1);
  );

  Db_Range == 0 ? (DB_EQ_RANGE = 6; DB_EQ_RANGE_STEPS = 1;) : 
    Db_Range == 1 ? (DB_EQ_RANGE = 12; DB_EQ_RANGE_STEPS = 3;) :
      Db_Range == 2 ? (DB_EQ_RANGE = 18; DB_EQ_RANGE_STEPS = 6;) :
        Db_Range == 3 ? (DB_EQ_RANGE = 24; DB_EQ_RANGE_STEPS = 8;) :
          Db_Range == 4 ? (DB_EQ_RANGE = 30; DB_EQ_RANGE_STEPS = 10;);

  // spectrum.reset_buffers();
);

/*
 * Notify Reaper that frequency has been touched
 */
function notify_touched_frequency(node) (
  // Notify Reaper that a parameter change has happened
  node == 0 ? slider_automate(Node1_Frequency) :
    node == 1 ? slider_automate(Node2_Frequency) :
      node == 2 ? slider_automate(Node3_Frequency) :
        node == 3 ? slider_automate(Node4_Frequency) :
          node == 4 ? slider_automate(Node5_Frequency);
          node == 5 ? slider_automate(Node6_Frequency);
);

/*
 * Notify Reaper that gain has been touched
 */
function notify_touched_gain(node) (
  // Notify Reaper that a parameter change has happened
  node == 0 ? slider_automate(Node1_Gain) :
    node == 1 ? slider_automate(Node2_Gain) :
      node == 2 ? slider_automate(Node3_Gain) :
        node == 3 ? slider_automate(Node4_Gain) :
          node == 4 ? slider_automate(Node5_Gain);
          node == 5 ? slider_automate(Node6_Gain);
);

/*
 * Notify Reaper that Q has been touched
 */
function notify_touched_Q(node) (
  // Notify Reaper that a parameter change has happened
  node == 0 ? slider_automate(Node1_Q) :
    node == 1 ? slider_automate(Node2_Q) :
      node == 2 ? slider_automate(Node3_Q) :
        node == 3 ? slider_automate(Node4_Q) :
          node == 4 ? slider_automate(Node5_Q);
          node == 5 ? slider_automate(Node6_Q);
);

function band_init()
  instance (enabled, type, frequency, gain, q, filter, color) ( 
  filter.svf_set_sample_rate(SAMPLE_RATE);
  filter.svf_bypass();
  color.create_color(0,0,0);

  filter.a1 = filter.t_a1;
  filter.a2 = filter.t_a2;
  filter.a3 = filter.t_a3;

  filter.m0 = filter.t_m0;
  filter.m1 = filter.t_m1;
  filter.m2 = filter.t_m2;
  filter.iter_t = 1.0;
);
  
/*
 * Set enabled state for a band
 */
function band_set_enabled(e)
  instance (enabled, type, frequency, gain, q, filter, color) ( 
  enabled = e;
);

/*
 * Set the filter
 */
function band_set_filter(t, f, g, qval, slope)
  instance (enabled, type, frequency, gain, q, filter, color) (
  type = t; frequency = f; gain = g; q = qval;
  type == 0 ? filter.svf_eq(frequency, q, db_to_gain(gain)) :
    type == 1 ? filter.svf_hp(frequency, q, slope) :
      type == 2 ? filter.svf_hpb(frequency, slope) :
        type == 3 ? filter.svf_ls(frequency, q, db_to_gain(gain)) :
          type == 4 ? filter.svf_hs(frequency, q, db_to_gain(gain)) :
            type == 5 ? filter.svf_lp(frequency, q, slope) :
              type == 6 ? filter.svf_lpb(frequency, slope) :
                type == 7 ? filter.svf_bs(frequency, q) :
                  type == 8 ? filter.svf_bp2(frequency, q) :
                    type == 9 ? filter.svf_st(frequency, q, gain) :
                      type == 10 ? filter.svf_pultecls(frequency, q, gain) :
                        type == 11 ? filter.svf_ap(frequency, q) :
                          type == 12 ? filter.svf_analog_lowcut(frequency, q, gain) :
                            type == 13 ? filter.svf_analog_highcut(frequency, q, gain);
);

/*
 * Convert slider % to frequency
 */
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);

/*
 * Convert frequency to slider %
 */
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);


function per_to_q(x, range) (
  MIN_Q * exp(Q_LOG_MAX * x / range);
);

/*
 * Convert frequency to slider %
 */
function q_to_per(q, range) (
  range * log(q / MIN_Q) / Q_LOG_MAX;
);


/*
 * Update sliders with filter data
 */
function filters_to_sliders() (
caller = 1;

  mouse_cap | mouse_wheel ? (
  Node1_Enabled = Band_Enabled[0];
  Node1_Group = Band_Group[0];
  Node1_Type = Band_Type[0];
  Node1_Frequency = freq_to_per(Band_Frequency[0], 100);
  Node1_Gain = Band_Gain[0] - SC1_GR;
  Node1_Q = q_to_per(Band_Q[0], 100);
  Node1_Slope = Band_Slope[0];

  Node2_Enabled = Band_Enabled[1];
  Node2_Group = Band_Group[1];
  Node2_Type = Band_Type[1];
  Node2_Frequency = freq_to_per(Band_Frequency[1], 100);
  Node2_Gain = Band_Gain[1] - SC2_GR;
  Node2_Q = q_to_per(Band_Q[1], 100);
  Node2_Slope = Band_Slope[1];

  Node3_Enabled = Band_Enabled[2];
  Node3_Group = Band_Group[2];
  Node3_Type = Band_Type[2];
  Node3_Frequency = freq_to_per(Band_Frequency[2], 100);
  Node3_Gain = Band_Gain[2] - SC3_GR;
  Node3_Q = q_to_per(Band_Q[2], 100);
  Node3_Slope = Band_Slope[2];

  Node4_Enabled = Band_Enabled[3];
  Node4_Group = Band_Group[3];
  Node4_Type = Band_Type[3];
  Node4_Frequency = freq_to_per(Band_Frequency[3], 100);
  Node4_Gain = Band_Gain[3] - SC4_GR;
  Node4_Q = q_to_per(Band_Q[3], 100);
  Node4_Slope = Band_Slope[3];

  Node5_Enabled = Band_Enabled[4];
  Node5_Group = Band_Group[4];
  Node5_Type = Band_Type[4];
  Node5_Frequency = freq_to_per(Band_Frequency[4], 100);
  Node5_Gain = Band_Gain[4] - SC5_GR;
  Node5_Q = q_to_per(Band_Q[4], 100);
  Node5_Slope = Band_Slope[4];
  
  Node6_Enabled = Band_Enabled[5];
  Node6_Group = Band_Group[5];
  Node6_Type = Band_Type[5];
  Node6_Frequency = freq_to_per(Band_Frequency[5], 100);
  Node6_Gain = Band_Gain[5];
  Node6_Q = q_to_per(Band_Q[5], 100);
  Node6_Slope = Band_Slope[5];
  );

);

/*
 * Update filter data with sliders
 */
function sliders_to_filters() ( 
  Band_Enabled[0] = Node1_Enabled;
  Band_Group[0] = Node1_Group;
  Band_Type[0] = Node1_Type;
  Band_Frequency[0] = per_to_freq(Node1_Frequency, 100);
  Band_Gain[0] = Node1_Gain;
  Band_Q[0] = per_to_q(Node1_Q, 100);
  Band_Slope[0] = Node1_Slope;

  Band_Enabled[1] = Node2_Enabled;
  Band_Group[1] = Node2_Group;
  Band_Type[1] = Node2_Type;
  Band_Frequency[1] = per_to_freq(Node2_Frequency, 100);
  Band_Gain[1] = Node2_Gain;
  Band_Q[1] = per_to_q(Node2_Q, 100);
  Band_Slope[1] = Node2_Slope;

  Band_Enabled[2] = Node3_Enabled;
  Band_Group[2] = Node3_Group;
  Band_Type[2] = Node3_Type;
  Band_Frequency[2] = per_to_freq(Node3_Frequency, 100);;
  Band_Gain[2] = Node3_Gain;
  Band_Q[2] = per_to_q(Node3_Q, 100);
  Band_Slope[2] = Node3_Slope;

  Band_Enabled[3] = Node4_Enabled;
  Band_Group[3] = Node4_Group;
  Band_Type[3] = Node4_Type;
  Band_Frequency[3] = per_to_freq(Node4_Frequency, 100);;
  Band_Gain[3] = Node4_Gain;
  Band_Q[3] = per_to_q(Node4_Q, 100);
  Band_Slope[3] = Node4_Slope;

  Band_Enabled[4] = Node5_Enabled;
  Band_Group[4] = Node5_Group;
  Band_Type[4] = Node5_Type;
  Band_Frequency[4] = per_to_freq(Node5_Frequency, 100);;
  Band_Gain[4] = Node5_Gain;
  Band_Q[4] = per_to_q(Node5_Q, 100);
  Band_Slope[4] = Node5_Slope;
  
  Band_Enabled[5] = Node6_Enabled;
  Band_Group[5] = Node6_Group;
  Band_Type[5] = Node6_Type;
  Band_Frequency[5] = per_to_freq(Node6_Frequency, 100);;
  Band_Gain[5] = Node6_Gain;
  Band_Q[5] = per_to_q(Node6_Q, 100);
  Band_Slope[5] = Node6_Slope;
);


/*
 * Flag filter to update for both audio and graphics
 */
function flag_filter_update(band) ( 
  Band_Update[band] = 1;
  Band_GfxUpdate[band] = 1;
 );

function flag_filter_update_all() ( 
  Band_Update[0] = 1; Band_GfxUpdate[0] = 1;
  Band_Update[1] = 1; Band_GfxUpdate[1] = 1;
  Band_Update[2] = 1; Band_GfxUpdate[2] = 1;
  Band_Update[3] = 1; Band_GfxUpdate[3] = 1;
  Band_Update[4] = 1; Band_GfxUpdate[4] = 1;
  Band_Update[5] = 1; Band_GfxUpdate[5] = 1;
  Band_Update[6] = 1; Band_GfxUpdate[6] = 1;
  Band_Update[7] = 1; Band_GfxUpdate[7] = 1;
  Band_Update[8] = 1; Band_GfxUpdate[8] = 1;
  Band_Update[9] = 1; Band_GfxUpdate[9] = 1;
  Band_Update[10] = 1; Band_GfxUpdate[10] = 1;
  Band_Update[11] = 1; Band_GfxUpdate[11] = 1;
  Band_Update[12] = 1; Band_GfxUpdate[12] = 1;
  Band_Update[13] = 1; Band_GfxUpdate[13] = 1;
  Band_Update[14] = 1; Band_GfxUpdate[14] = 1;
  Band_Update[15] = 1; Band_GfxUpdate[15] = 1;
 );

/*
 * Update the filter parameters
 */
function update_visual_filters() local (band_scalar) (
  band_scalar = Scale / 100.0;

  Band_GfxUpdate[0] ? (Band_GfxUpdate[0] = 0; gfx_band1.band_set_filter(Band_Type[0], Band_Frequency[0], Band_Gain[0] * band_scalar, Band_Q[0], Band_Slope[0]); gfx_band1.filter.svf_set_to_target(); );
  Band_GfxUpdate[1] ? (Band_GfxUpdate[1] = 0; gfx_band2.band_set_filter(Band_Type[1], Band_Frequency[1], Band_Gain[1] * band_scalar, Band_Q[1], Band_Slope[1]); gfx_band2.filter.svf_set_to_target(); );
  Band_GfxUpdate[2] ? (Band_GfxUpdate[2] = 0; gfx_band3.band_set_filter(Band_Type[2], Band_Frequency[2], Band_Gain[2] * band_scalar, Band_Q[2], Band_Slope[2]); gfx_band3.filter.svf_set_to_target(); );
  Band_GfxUpdate[3] ? (Band_GfxUpdate[3] = 0; gfx_band4.band_set_filter(Band_Type[3], Band_Frequency[3], Band_Gain[3] * band_scalar, Band_Q[3], Band_Slope[3]); gfx_band4.filter.svf_set_to_target(); );
  Band_GfxUpdate[4] ? (Band_GfxUpdate[4] = 0; gfx_band5.band_set_filter(Band_Type[4], Band_Frequency[4], Band_Gain[4] * band_scalar, Band_Q[4], Band_Slope[4]); gfx_band5.filter.svf_set_to_target(); );
  Band_GfxUpdate[5] ? (Band_GfxUpdate[5] = 0; gfx_band6.band_set_filter(Band_Type[5], Band_Frequency[5], Band_Gain[5] * band_scalar, Band_Q[5], Band_Slope[5]); gfx_band6.filter.svf_set_to_target(); );
  Band_GfxUpdate[6] ? (Band_GfxUpdate[6] = 0; gfx_band7.band_set_filter(Band_Type[0], Band_Frequency[0], Node1_Gain+SC1_Target * band_scalar, Band_Q[0], Band_Slope[0]); gfx_band7.filter.svf_set_to_target(); );
  Band_GfxUpdate[7] ? (Band_GfxUpdate[7] = 0; gfx_band8.band_set_filter(Band_Type[1], Band_Frequency[1], Node2_Gain+SC2_Target * band_scalar, Band_Q[1], Band_Slope[1]); gfx_band8.filter.svf_set_to_target(); );
  Band_GfxUpdate[8] ? (Band_GfxUpdate[8] = 0; gfx_band9.band_set_filter(Band_Type[2], Band_Frequency[2], Node3_Gain+SC3_Target * band_scalar, Band_Q[2], Band_Slope[2]); gfx_band9.filter.svf_set_to_target(); );
  Band_GfxUpdate[9] ? (Band_GfxUpdate[9] = 0; gfx_band10.band_set_filter(Band_Type[3], Band_Frequency[3], Node4_Gain+SC4_Target * band_scalar, Band_Q[3], Band_Slope[3]); gfx_band10.filter.svf_set_to_target(); );
  Band_GfxUpdate[10] ? (Band_GfxUpdate[10] = 0; gfx_band11.band_set_filter(Band_Type[4], Band_Frequency[4], Node5_Gain+SC5_Target * band_scalar, Band_Q[4], Band_Slope[4]); gfx_band11.filter.svf_set_to_target(); );
  Band_GfxUpdate[11] ? (Band_GfxUpdate[11] = 0; gfx_band12.band_set_filter(Band_Type[11], Band_Frequency[11], Band_Gain[11] * band_scalar, Band_Q[11], Band_Slope[11]); gfx_band12.filter.svf_set_to_target(); );
  Band_GfxUpdate[12] ? (Band_GfxUpdate[12] = 0; gfx_band13.band_set_filter(Band_Type[12], Band_Frequency[12], Band_Gain[12] * band_scalar, Band_Q[12], Band_Slope[12]); gfx_band13.filter.svf_set_to_target(); );
  Band_GfxUpdate[13] ? (Band_GfxUpdate[13] = 0; gfx_band14.band_set_filter(Band_Type[13], Band_Frequency[13], Band_Gain[13] * band_scalar, Band_Q[13], Band_Slope[13]); gfx_band14.filter.svf_set_to_target(); );
  Band_GfxUpdate[14] ? (Band_GfxUpdate[14] = 0; gfx_band15.band_set_filter(Band_Type[14], Band_Frequency[14], Band_Gain[14] * band_scalar, Band_Q[14], Band_Slope[14]); gfx_band15.filter.svf_set_to_target(); );
  Band_GfxUpdate[15] ? (Band_GfxUpdate[15] = 0; gfx_band16.band_set_filter(Band_Type[15], Band_Frequency[15], Band_Gain[15] * band_scalar, Band_Q[15], Band_Slope[15]); gfx_band16.filter.svf_set_to_target(); );
);

function update_audio_filters() local (band_scalar) (
  band_scalar = Scale / 100.0;

  SC_Listen == 1 ? (Band_Enabled[6] = BAND_STATE_ENABLED; Band_update[6]=1);
  SC_Listen == 2 ? (Band_Enabled[7] = BAND_STATE_ENABLED; Band_update[7]=1);
  SC_Listen == 3 ? (Band_Enabled[8] = BAND_STATE_ENABLED; Band_update[8]=1);
  SC_Listen == 4 ? (Band_Enabled[9] = BAND_STATE_ENABLED; Band_update[9]=1);
  SC_Listen == 5 ? (Band_Enabled[10] = BAND_STATE_ENABLED; Band_update[10]=1);
  
  Band_Update[0] ? (Band_Update[0] = 0; Band_Enabled[0] != BAND_STATE_ENABLED ? band1.filter.svf_bypass() : band1.band_set_filter(Band_Type[0], Band_Frequency[0], Band_Gain[0] * band_scalar, Band_Q[0], Band_Slope[0]); );
  Band_Update[1] ? (Band_Update[1] = 0; Band_Enabled[1] != BAND_STATE_ENABLED ? band2.filter.svf_bypass() : band2.band_set_filter(Band_Type[1], Band_Frequency[1], Band_Gain[1] * band_scalar, Band_Q[1], Band_Slope[1]); );
  Band_Update[2] ? (Band_Update[2] = 0; Band_Enabled[2] != BAND_STATE_ENABLED ? band3.filter.svf_bypass() : band3.band_set_filter(Band_Type[2], Band_Frequency[2], Band_Gain[2] * band_scalar, Band_Q[2], Band_Slope[2]); );
  Band_Update[3] ? (Band_Update[3] = 0; Band_Enabled[3] != BAND_STATE_ENABLED ? band4.filter.svf_bypass() : band4.band_set_filter(Band_Type[3], Band_Frequency[3], Band_Gain[3] * band_scalar, Band_Q[3], Band_Slope[3]); );
  Band_Update[4] ? (Band_Update[4] = 0; Band_Enabled[4] != BAND_STATE_ENABLED ? band5.filter.svf_bypass() : band5.band_set_filter(Band_Type[4], Band_Frequency[4], Band_Gain[4] * band_scalar, Band_Q[4], Band_Slope[4]); );
  Band_Update[5] ? (Band_Update[5] = 0; Band_Enabled[5] != BAND_STATE_ENABLED ? band6.filter.svf_bypass() : band6.band_set_filter(Band_Type[5], Band_Frequency[5], Band_Gain[5] * band_scalar, Band_Q[5], Band_Slope[5]); );
  Band_Update[6] ? (Band_Update[6] = 0; Band_Enabled[6] != BAND_STATE_ENABLED ? band7.filter.svf_bypass() : band7.band_set_filter(Band_Type[6], Band_Frequency[6], Band_Gain[6] * band_scalar, Band_Q[6], Band_Slope[6]); );
  Band_Update[7] ? (Band_Update[7] = 0; Band_Enabled[7] != BAND_STATE_ENABLED ? band8.filter.svf_bypass() : band8.band_set_filter(Band_Type[7], Band_Frequency[7], Band_Gain[7] * band_scalar, Band_Q[7], Band_Slope[7]); );
  Band_Update[8] ? (Band_Update[8] = 0; Band_Enabled[8] != BAND_STATE_ENABLED ? band9.filter.svf_bypass() : band9.band_set_filter(Band_Type[8], Band_Frequency[8], Band_Gain[8] * band_scalar, Band_Q[8], Band_Slope[8]); );
  Band_Update[9] ? (Band_Update[9] = 0; Band_Enabled[9] != BAND_STATE_ENABLED ? band10.filter.svf_bypass() : band10.band_set_filter(Band_Type[9], Band_Frequency[9], Band_Gain[9] * band_scalar, Band_Q[9], Band_Slope[9]); );
  Band_Update[10] ? (Band_Update[10] = 0; Band_Enabled[10] != BAND_STATE_ENABLED ? band11.filter.svf_bypass() : band11.band_set_filter(Band_Type[10], Band_Frequency[10], Band_Gain[10] * band_scalar, Band_Q[10], Band_Slope[10]); );
  Band_Update[11] ? (Band_Update[11] = 0; Band_Enabled[11] != BAND_STATE_ENABLED ? band12.filter.svf_bypass() : band12.band_set_filter(Band_Type[11], Band_Frequency[11], Band_Gain[11] * band_scalar, Band_Q[11], Band_Slope[11]); );
  Band_Update[12] ? (Band_Update[12] = 0; Band_Enabled[12] != BAND_STATE_ENABLED ? band13.filter.svf_bypass() : band13.band_set_filter(Band_Type[12], Band_Frequency[12], Band_Gain[12] * band_scalar, Band_Q[12], Band_Slope[12]); );
  Band_Update[13] ? (Band_Update[13] = 0; Band_Enabled[13] != BAND_STATE_ENABLED ? band14.filter.svf_bypass() : band14.band_set_filter(Band_Type[13], Band_Frequency[13], Band_Gain[13] * band_scalar, Band_Q[13], Band_Slope[13]); );
  Band_Update[14] ? (Band_Update[14] = 0; Band_Enabled[14] != BAND_STATE_ENABLED ? band15.filter.svf_bypass() : band15.band_set_filter(Band_Type[14], Band_Frequency[14], Band_Gain[14] * band_scalar, Band_Q[14], Band_Slope[14]); );
  Band_Update[15] ? (Band_Update[15] = 0; Band_Enabled[15] != BAND_STATE_ENABLED ? band16.filter.svf_bypass() : band16.band_set_filter(Band_Type[15], Band_Frequency[15], Band_Gain[15] * band_scalar, Band_Q[15], Band_Slope[15]); );






);

init_rate != srate ? (
  init_rate = srate;

  // Initialise everything

  MEMORY.init_memory();

  spectrum.init();

  MEMORY.index = spectrum.get_memory_index();

  BAND_STATE_OFF = 0;
  BAND_STATE_DISABLED = 1;
  BAND_STATE_ENABLED = 2;
  BAND_STATE_INFORM_DISABLE = 3;

  // Allocate and init filter bands
  NUM_BANDS = 16;

  Band_Update = MEMORY.alloc_memory(NUM_BANDS);
  Band_GfxUpdate = MEMORY.alloc_memory(NUM_BANDS);
  Band_Enabled = MEMORY.alloc_memory(NUM_BANDS);
  Band_Group = MEMORY.alloc_memory(NUM_BANDS);
  Band_Type = MEMORY.alloc_memory(NUM_BANDS);
  Band_Frequency = MEMORY.alloc_memory(NUM_BANDS);
  Band_Gain = MEMORY.alloc_memory(NUM_BANDS);
  Band_Q = MEMORY.alloc_memory(NUM_BANDS);
  Band_Slope = MEMORY.alloc_memory(NUM_BANDS);
  Band_Dynamic_Range = MEMORY.alloc_memory(NUM_BANDS);
  Band_Red = MEMORY.alloc_memory(NUM_BANDS);
  Band_Green = MEMORY.alloc_memory(NUM_BANDS);
  Band_Blue = MEMORY.alloc_memory(NUM_BANDS);

  Band_Selected = MEMORY.alloc_memory(NUM_BANDS);
  Band_Drag_OffsetX = MEMORY.alloc_memory(NUM_BANDS);
  Band_Drag_OffsetY = MEMORY.alloc_memory(NUM_BANDS);
  Band_Invert_dB = MEMORY.alloc_memory(NUM_BANDS);
  Band_Selected_States = MEMORY.alloc_memory(NUM_BANDS);
  band = 0;
  while (band < NUM_BANDS) (
    Band_Selected[band] = 0;
    Band_Drag_OffsetX[band] = 0;
    Band_Drag_OffsetY[band] = 0;
    Band_Invert_dB[band] = 0;
    Band_Selected_States[band] = 0;
    band += 1;
  );

  band_selected_circle_last_time = time_precise();
  band_selected_circle_phase = 0.0;
  band_selected_circle_alpha = 0.8;

sliders_to_filters();
  // Filters for @slider, @block and @sample
  band1.band_init();
  band2.band_init();
  band3.band_init();
  band4.band_init();
  band5.band_init();
  band6.band_init();
  band7.band_init();
  band8.band_init();
  band9.band_init();
  band10.band_init();
  band11.band_init();
  band12.band_init();
  band13.band_init();
  band14.band_init();
  band15.band_init();
  band16.band_init();

  // Filters for @gfx
  gfx_band1.band_init();
  gfx_band2.band_init();
  gfx_band3.band_init();
  gfx_band4.band_init();
  gfx_band5.band_init();
  gfx_band6.band_init();
  gfx_band7.band_init();
  gfx_band8.band_init();
  gfx_band9.band_init();
  gfx_band10.band_init();
  gfx_band11.band_init();
  gfx_band12.band_init();
  gfx_band13.band_init();
  gfx_band14.band_init();
  gfx_band15.band_init();
  gfx_band16.band_init();

  color_band0.create_color(231, 33, 75);
  color_band1.create_color(241, 111, 50);
  color_band2.create_color(253, 199, 50);
  color_band3.create_color(126, 188, 111);
  color_band4.create_color(20, 146, 104);
  color_band5.create_color(19, 124, 168);
  color_band6.create_color(48, 57, 142);
  color_band7.create_color(135, 45, 138);
  color_band8.create_color(231, 33, 75);
  color_band9.create_color(241, 111, 50);
  color_band10.create_color(253, 199, 50);
  color_band11.create_color(126, 188, 111);
  color_band12.create_color(20, 146, 104);
  color_band13.create_color(19, 124, 168);
  color_band14.create_color(48, 57, 142);
  color_band15.create_color(135, 45, 138);

  // Init FIR filter
  firL.init_FIR_filter_44100();
  firR.init_FIR_filter_44100();

  SC1_firL.init_FIR_filter_44100();
  SC1_firR.init_FIR_filter_44100();
  SC2_firL.init_FIR_filter_44100();
  SC2_firR.init_FIR_filter_44100();
  SC3_firL.init_FIR_filter_44100();
  SC3_firR.init_FIR_filter_44100();
  SC4_firL.init_FIR_filter_44100();
  SC4_firR.init_FIR_filter_44100();
  SC5_firL.init_FIR_filter_44100();
  SC5_firR.init_FIR_filter_44100();
  
  // Allocate and init RMS
  rms_time_constant_ms = 300;
  rms_alloc = (0.001 * rms_time_constant_ms * 192000)|0;
  rms_max_count = (0.001 * rms_time_constant_ms * srate)|0;

  RMSPreIndex = MEMORY.alloc_memory(rms_alloc);
  RMSPostIndex = MEMORY.alloc_memory(rms_alloc);

  RMSPre.RMS_init(RMSPreIndex, rms_max_count);
  RMSPost.RMS_init(RMSPostIndex, rms_max_count);

  RMSSCIndex = MEMORY.alloc_memory(rms_alloc);
  RMSSidechain.RMS_init(RMSSCIndex, rms_max_count);

  set_oversample(Quality);

  // Visible frequency limit
  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);

  MAX_Q = 40;
  MIN_Q = 0.10;
  Q_LOG_MAX = log(MAX_Q / MIN_Q);

  DB_EQ_RANGE = 18;
  DB_EQ_RANGE_STEPS = 6;

  OLD_WIDTH = 0;

  button_focus = -1;

  gfx_mode = 1;
  gfx_clear = 0;

  read_freq = 0;

  click_up = 0;
  click_time = 0;

  selected_node = -1;
  selected_node_group = 0;

  node_drag_mode = 0;
  node_drag = 0;
  node_drag_offx = 0;
  node_drag_offy = 0;
  node_drag_stablex = 0;
  node_drag_stabley = 0;
  node_drag_mouse_speed = 6;
  node_drag_lock = 0;

  gainDb = 1;
  gainML = 1;
  gainSR = 1;

  initialise_gfx = 0;

  do_listen = 0;
  listen_width = 0.10;
  listen_q = 0.7071;
  listen_group = 0;
  listen_gain = db_to_gain(0);
  listen_filter.svf_set_sample_rate(srate);
  listen_filter.svf_bypass();
  listen_node = -1;

  listen_filter.a1 = listen_filter.t_a1;
  listen_filter.a2 = listen_filter.t_a2;
  listen_filter.a3 = listen_filter.t_a3;

  listen_filter.m0 = listen_filter.t_m0;
  listen_filter.m1 = listen_filter.t_m1;
  listen_filter.m2 = listen_filter.t_m2;
  listen_filter.iter_t = 1.0;

  // Define filter index numbers
  FILTER_PEAK = 0;
  FILTER_LOW_CUT = 1;
  FILTER_LOW_CUT_BUTTERWORTH = 2;
  FILTER_LOW_SHELF = 3;
  FILTER_HIGH_SHELF = 4;
  FILTER_HIGH_CUT = 5;
  FILTER_HIGH_CUT_BUTTERWORTH = 6;
  FILTER_NOTCH = 7;
  FILTER_BAND_PASS = 8;
  FILTER_TILT_SHELF = 9;
  FILTER_PULTEC_LOW_SHELF = 10;
  FILTER_ALL_PASS = 11;
  FILTER_LOW_CUT_ANALOG = 12;
  FILTER_HIGH_CUT_ANALOG = 13;

  // Define filter display order
  FilterTypes = MEMORY.alloc_memory(14);
  FilterTypes[0] = "Peak";
  FilterTypes[1] = "Low Cut";
  FilterTypes[2] = "Low Cut (Butterworth)";
  FilterTypes[3] = "Low Channel (Analog)";
  FilterTypes[4] = "Low Shelf";
  FilterTypes[5] = "High Shelf";
  FilterTypes[6] = "High Cut";
  FilterTypes[7] = "High Cut (Butterworth)";
  FilterTypes[8] = "High Channel (Analog)";
  FilterTypes[9] = "Notch";
  FilterTypes[10] = "Band Pass";
  FilterTypes[11] = "Tilt Shelf";
  FilterTypes[12] = "Pultec Low Shelf";
  FilterTypes[13] = "All Pass";

  // Define mapping from display order to index
  FilterMappingTo = MEMORY.alloc_memory(14);
  FilterMappingTo[0] = 0;
  FilterMappingTo[1] = 1;
  FilterMappingTo[2] = 2;
  FilterMappingTo[3] = 12;
  FilterMappingTo[4] = 3;
  FilterMappingTo[5] = 4;
  FilterMappingTo[6] = 5;
  FilterMappingTo[7] = 6;
  FilterMappingTo[8] = 13;
  FilterMappingTo[9] = 7;
  FilterMappingTo[10] = 8;
  FilterMappingTo[11] = 9;
  FilterMappingTo[12] = 10;
  FilterMappingTo[13] = 11;

  // Define mapping from index to display order
  FilterMappingFrom = MEMORY.alloc_memory(14);
  FilterMappingFrom[0] = 0;
  FilterMappingFrom[1] = 1;
  FilterMappingFrom[2] = 2;
  FilterMappingFrom[3] = 4;
  FilterMappingFrom[4] = 5;
  FilterMappingFrom[5] = 6;
  FilterMappingFrom[6] = 7;
  FilterMappingFrom[7] = 9;
  FilterMappingFrom[8] = 10;
  FilterMappingFrom[9] = 11;
  FilterMappingFrom[10] = 12;
  FilterMappingFrom[11] = 13;
  FilterMappingFrom[12] = 3;
  FilterMappingFrom[13] = 8;

  NumFilterSlopes = 10;
  FilterSlopes = MEMORY.alloc_memory(10);
  FilterSlopes[0] = "6dB";
  FilterSlopes[1] = "12dB";
  FilterSlopes[2] = "18dB";
  FilterSlopes[3] = "24dB";
  FilterSlopes[4] = "30dB";
  FilterSlopes[5] = "36dB";
  FilterSlopes[6] = "48dB";
  FilterSlopes[7] = "72dB";
  FilterSlopes[8] = "96dB";
  FilterSlopes[9] = "120dB";

  StereoModes = MEMORY.alloc_memory(3);
  StereoModes[0] = "Stereo";
  StereoModes[1] = "Mid";
  StereoModes[2] = "Side";
  StereoModes[3] = "Left";
  StereoModes[4] = "Right";

  // Automatic Gain Control
  agcControl = 0;
  agcOverride = 0;

  compact_width = 0;
  compact_height = 0;
  very_compact_width = 0;
  very_compact_height = 0;

  ShowPanel = PanelEnabled;
);





function color_OEQ () (gfx_r=0.4; gfx_g = 1; gfx_b = 0); //(gfx_r=1; gfx_g = 0.5; gfx_b = 0);
function color_OEQ_dark () (gfx_r=7; gfx_g = 0.2; gfx_b = 0);


parameters_update_on = 0;              
function parameters_update () (
parameters_update_on = 1;
 //N1_on.Parameter_Boundaries();
 N1_Gain.Parameter_Boundaries();
 N1_Freq.Parameter_Boundaries();
 N1_Q.Parameter_Boundaries();
 //N2_on.Parameter_Boundaries();
 N2_Gain.Parameter_Boundaries();
 N2_Freq.Parameter_Boundaries();
 N2_Q.Parameter_Boundaries();
 //N3_on.Parameter_Boundaries();
 N3_Gain.Parameter_Boundaries();
 N3_Freq.Parameter_Boundaries();
 N3_Q.Parameter_Boundaries();
 //N4_on.Parameter_Boundaries();
 N4_Gain.Parameter_Boundaries();
 N4_Freq.Parameter_Boundaries();
 N4_Q.Parameter_Boundaries();
 //N5_on.Parameter_Boundaries();
 N5_Gain.Parameter_Boundaries();
 N5_Freq.Parameter_Boundaries();
 N5_Q.Parameter_Boundaries();
 //N6_on.Parameter_Boundaries();
 N6_Freq.Parameter_Boundaries();
 N6_Q.Parameter_Boundaries();
 Outgain.Parameter_Boundaries();








  group_generics[1] = Display_Mode;
  group_generics[2] = Show_PreEQ;
  group_generics[3] = Ceiling_Value;
  group_generics[4] = Floor_Value;
  group_generics[5] = Tilt_Value;
  group_generics[6] = Type_Value;
  group_generics[7] = Block_Value;
  group_generics[8] = Quality;

group_parameters();

  Display_Mode = group_generics[1];
  Show_PreEQ = group_generics[2];
  Ceiling_Value = group_generics[3];
  Floor_Value = group_generics[4];
  Tilt_Value = group_generics[5];
  Type_Value = group_generics[6];
  Block_Value = group_generics[7];
  Quality = group_generics[8];


Node1_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node1_Type=3;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node2_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node2_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node3_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node3_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node4_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node4_Type=0;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node5_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node5_Type=4;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

Node6_Group=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Node6_Type=2;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type

/*
S2_band = 0;
loop(5,
//slider(1+band*4) == 0 ? Band_Selected[band] = 0;
S2_band += 1;
);
*/

set_oversample(Quality);

button_oversample.select = Quality;
button_stereo_mode.select = Stereo_Mode;

gainDb = 2 ^ (Gain/6);
gainML = 2 ^ (MLGain/6);
gainSR = 2 ^ (SRGain/6);

SC_Node = 0;
loop(6,
Band_Frequency[SC_Node+6] = Band_Frequency[SC_Node];
SC_Node+=1;
);


Band_Enabled[6] = Node1_Enabled;
Band_Enabled[7] = Node2_Enabled;
Band_Enabled[8] = Node3_Enabled;
Band_Enabled[9] = Node4_Enabled;
Band_Enabled[10] = Node5_Enabled;

Band_Group[6]=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Band_Type[6]=6;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type
Band_Slope[6] = 3;
flag_filter_update(6);

Band_Group[7]=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Band_Type[7]=8;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type
Band_Q[7] = Band_Q[1];
flag_filter_update(7);

Band_Group[8]=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Band_Type[8]=8;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type
Band_Q[8] = Band_Q[2];
flag_filter_update(8);

Band_Group[9]=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Band_Type[9]=8;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type
Band_Q[9] = Band_Q[3];
flag_filter_update(9);

Band_Group[10]=0;//<0,2,1{Stereo,Mid,Side,Left,Right}>Filter1 Group
Band_Type[10]=2;//<0,10,1{Peak,Low Cut,Low Cut (Butterworth),Low Shelf,High Shelf,High Cut,High Cut (Butterworth),Notch,Band Pass,Tilt Shelf,Pultec Low Shelf,All Pass,Low Cut Analog,High Cut Analog}>Filter1 Type
Band_Slope[10] = 3;
flag_filter_update(10);

// Mark filters for update if sliders have changed
Band_Enabled[0] != Node1_Enabled || Band_Type[0] != Node1_Type || Band_Gain[0] != Node1_Gain || Band_Frequency[0] != per_to_freq(Node1_Frequency,100) || Band_Q[0] != Node1_Q || Band_Slope[0] != Node1_Slope ? flag_filter_update(0);
Band_Enabled[1] != Node2_Enabled || Band_Type[1] != Node2_Type || Band_Gain[1] != Node2_Gain || Band_Frequency[1] != per_to_freq(Node2_Frequency,100) || Band_Q[1] != Node2_Q || Band_Slope[1] != Node2_Slope ? flag_filter_update(1);
Band_Enabled[2] != Node3_Enabled || Band_Type[2] != Node3_Type || Band_Gain[2] != Node3_Gain || Band_Frequency[2] != per_to_freq(Node3_Frequency,100) || Band_Q[2] != Node3_Q || Band_Slope[2] != Node3_Slope ? flag_filter_update(2);
Band_Enabled[3] != Node4_Enabled || Band_Type[3] != Node4_Type || Band_Gain[3] != Node4_Gain || Band_Frequency[3] != per_to_freq(Node4_Frequency,100) || Band_Q[3] != Node4_Q || Band_Slope[3] != Node4_Slope ? flag_filter_update(3);
Band_Enabled[4] != Node5_Enabled || Band_Type[4] != Node5_Type || Band_Gain[4] != Node5_Gain || Band_Frequency[4] != per_to_freq(Node5_Frequency,100) || Band_Q[4] != Node5_Q || Band_Slope[4] != Node5_Slope ? flag_filter_update(4);
Band_Enabled[5] != Node6_Enabled || Band_Type[5] != Node6_Type || Band_Gain[5] != Node6_Gain || Band_Frequency[5] != per_to_freq(Node6_Frequency,100) || Band_Q[5] != Node6_Q || Band_Slope[5] != Node6_Slope ? flag_filter_update(5);

    Node1_Gain_Set = Node1_Gain;
    Node2_Gain_Set = Node2_Gain;
    Node3_Gain_Set = Node3_Gain;
    Node4_Gain_Set = Node4_Gain;
    Node5_Gain_Set = Node5_Gain;
    
// Update any automation
sliders_to_filters();

bypass = slider(BBypass.slider);

SC1_ratio = SC1_sensivity +1;
SC2_ratio = SC2_sensivity +1;
SC3_ratio = SC3_sensivity +1;
SC4_ratio = SC4_sensivity +1;
SC5_ratio = SC5_sensivity +1;

//31 37 43 49 55
SC1_on == 1 ? SC1_Target = slider31 : SC1_Target = 0;
SC2_on == 1 ? SC2_Target = slider37 : SC2_Target = 0;
SC3_on == 1 ? SC3_Target = slider43 : SC3_Target = 0;
SC4_on == 1 ? SC4_Target = slider49 : SC4_Target = 0;
SC5_on == 1 ? SC5_Target = slider55 : SC5_Target = 0;

SC1.compressor_sliders(SC1_thresh, SC1_ratio, SC1_attack, SC1_release, 0);
SC2.compressor_sliders(SC2_thresh, SC2_ratio, SC2_attack, SC2_release, 0);
SC3.compressor_sliders(SC3_thresh, SC3_ratio, SC3_attack, SC3_release, 0);
SC4.compressor_sliders(SC4_thresh, SC4_ratio, SC4_attack, SC4_release, 0);
SC5.compressor_sliders(SC5_thresh, SC5_ratio, SC5_attack, SC5_release, 0);

gfxn = 0;
loop(15,
Band_GfxUpdate[gfxn] = 1;
gfxn+=1;
);

update_state();
update_audio_filters();
update_visual_filters();

longest_release = max(SC1_release, SC2_release);
longest_release = max(longest_release, SC3_release);
longest_release = max(longest_release, SC4_release);
longest_release = max(longest_release, SC5_release);
ext_tail_size = max(64,srate*longest_release/1000);

caller = 0;
parameters_update_on = 0; 
);
                  
        





@slider


   caller = 1;





















@serialize

file_var(0, while_playing);
file_var(0, while_recording);
file_var(0, while_stopped);
file_var(0, link_group);
file_var(0, GEQ_VERSION);
file_var(0, listen_node);
file_var(0, SC_Listen);

    Node1_Gain = Node1_Gain_Set;
    Node2_Gain = Node2_Gain_Set;
    Node3_Gain = Node3_Gain_Set;
    Node4_Gain = Node4_Gain_Set;
    Node5_Gain = Node5_Gain_Set;
    file_var(0, Node1_Gain);
    file_var(0, Node2_Gain);
    file_var(0, Node3_Gain);
    file_var(0, Node4_Gain);
    file_var(0, Node5_Gain);
    
//file_var(0, SC1_Input);
//file_var(0, SC2_Input);
//file_var(0, SC3_Input);
//file_var(0, SC4_Input);
//file_var(0, SC5_Input);

seriloop = 0;
loop(64*16 + 27 + 16,
file_var(0, gmem[seriloop]);
seriloop += 1;
);

seriloop = 0;
loop(200*16,
file_var(0, group_generics[seriloop]);
seriloop += 1;
);


file_avail(handle) >= 0 ? (
  // Read mode
  file_var(0, version);

  version >= 100 ? (
    file_var(0, numBands);
    file_mem(0, Band_Enabled, numBands);
    file_mem(0, Band_Group, numBands);
    file_mem(0, Band_Type, numBands);
    file_mem(0, Band_Frequency, numBands);
    file_mem(0, Band_Gain, numBands);
    file_mem(0, Band_Q, numBands);
    file_mem(0, Band_Slope, numBands);
    file_mem(0, Band_Dynamic_Range, numBands);
    file_mem(0, Band_Red, numBands);
    file_mem(0, Band_Green, numBands);
    file_mem(0, Band_Blue, numBands);
    
    
    
flag_filter_update_all();

//filters_to_sliders();

  ) : (
    // Old version that has no version number
    // We've already read the first value and it wasn't a version
    // number, it's the enabled status for band 0
    Band_Enabled[0] = version;
    file_mem(0, Band_Enabled+1, 7);
    file_mem(0, Band_Group, 8);
    file_mem(0, Band_Type, 8);
    file_mem(0, Band_Frequency, 8);
    file_mem(0, Band_Gain, 8);
    file_mem(0, Band_Q, 8);
    file_mem(0, Band_Slope, 8);
    file_mem(0, Band_Dynamic_Range, 8);
    file_mem(0, Band_Red, 8);
    file_mem(0, Band_Green, 8);
    file_mem(0, Band_Blue, 8);
  );

) : (
  // Write mode
  // The version number should reflect the ReEQ version when the file
  // format changed.
  version = 109;

  file_var(0, version);
  file_var(0, NUM_BANDS);
  file_mem(0, Band_Enabled, NUM_BANDS);
  file_mem(0, Band_Group, NUM_BANDS);
  file_mem(0, Band_Type, NUM_BANDS);
  file_mem(0, Band_Frequency, NUM_BANDS);
  file_mem(0, Band_Gain, NUM_BANDS);
  file_mem(0, Band_Q, NUM_BANDS);
  file_mem(0, Band_Slope, NUM_BANDS);
  file_mem(0, Band_Dynamic_Range, NUM_BANDS);
  file_mem(0, Band_Red, NUM_BANDS);
  file_mem(0, Band_Green, NUM_BANDS);
  file_mem(0, Band_Blue, NUM_BANDS);
);


@block

// Get array accessed variables per block to make access faster
// in @sample section

update_audio_filters();

Band_Process0 = Band_Enabled[0]; //(Band_Enabled[0] == BAND_STATE_ENABLED);// || !band1.filter.svf_is_resting();
Band_Process1 = Band_Enabled[1]; //(Band_Enabled[1] == BAND_STATE_ENABLED) || !band2.filter.svf_is_resting();
Band_Process2 = Band_Enabled[2]; //(Band_Enabled[2] == BAND_STATE_ENABLED) || !band3.filter.svf_is_resting();
Band_Process3 = Band_Enabled[3]; //(Band_Enabled[3] == BAND_STATE_ENABLED) || !band4.filter.svf_is_resting();
Band_Process4 = Band_Enabled[4]; //(Band_Enabled[4] == BAND_STATE_ENABLED) || !band5.filter.svf_is_resting();
Band_Process5 = (Band_Enabled[5] == BAND_STATE_ENABLED) || !band6.filter.svf_is_resting();
Band_Process6 = SC1_Target || SC_Listen == 1 || DYN_BOX == 1; //(Band_Enabled[6] == BAND_STATE_ENABLED) || !band7.filter.svf_is_resting();
Band_Process7 = SC2_Target || SC_Listen == 2 || DYN_BOX == 2; //(Band_Enabled[7] == BAND_STATE_ENABLED) || !band8.filter.svf_is_resting();
Band_Process8 = SC3_Target || SC_Listen == 3 || DYN_BOX == 3; //(Band_Enabled[8] == BAND_STATE_ENABLED) || !band9.filter.svf_is_resting();
Band_Process9 = SC4_Target || SC_Listen == 4 || DYN_BOX == 4; //(Band_Enabled[9] == BAND_STATE_ENABLED) || !band10.filter.svf_is_resting();
Band_Process10 = SC5_Target || SC_Listen == 5 || DYN_BOX == 5;//(Band_Enabled[10] == BAND_STATE_ENABLED) || !band11.filter.svf_is_resting();
Band_Process11 = 0;//(Band_Enabled[11] == BAND_STATE_ENABLED) || !band12.filter.svf_is_resting();
Band_Process12 = (Band_Enabled[12] == BAND_STATE_ENABLED) || !band13.filter.svf_is_resting();
Band_Process13 = (Band_Enabled[13] == BAND_STATE_ENABLED) || !band14.filter.svf_is_resting();
Band_Process14 = (Band_Enabled[14] == BAND_STATE_ENABLED) || !band15.filter.svf_is_resting();
Band_Process15 = (Band_Enabled[15] == BAND_STATE_ENABLED) || !band16.filter.svf_is_resting();


!Band_process0 ? Band_process6 = Band_Process0 || SC_Listen == 1;
!Band_process1 ? Band_process7 = Band_Process1 || SC_Listen == 2;
!Band_process2 ? Band_process8 = Band_Process2 || SC_Listen == 3;
!Band_process3 ? Band_process9 = Band_Process3 || SC_Listen == 4;
!Band_process4 ? Band_process10 = Band_Process4 || SC_Listen == 5;


Band_Group0 = Band_Group[0];
Band_Group1 = Band_Group[1];
Band_Group2 = Band_Group[2];
Band_Group3 = Band_Group[3];
Band_Group4 = Band_Group[4];
Band_Group5 = Band_Group[5];
Band_Group6 = Band_Group[6];
Band_Group7 = Band_Group[7];
Band_Group8 = Band_Group[8];
Band_Group9 = Band_Group[9];
Band_Group10 = Band_Group[10];
Band_Group11 = Band_Group[11];
Band_Group12 = Band_Group[12];
Band_Group13 = Band_Group[13];
Band_Group14 = Band_Group[14];
Band_Group15 = Band_Group[15];

Listen_Process = do_listen || listen_node != -1 || !listen_filter.svf_is_resting();

agcControl = AGCEnabled;

@sample




// : group_master_collision();
/*
 //N1_on.Parameter_Boundaries();
 N1_Gain.Parameter_Boundaries();
 N1_Freq.Parameter_Boundaries();
 N1_Q.Parameter_Boundaries();
 //N2_on.Parameter_Boundaries();
 N2_Gain.Parameter_Boundaries();
 N2_Freq.Parameter_Boundaries();
 N2_Q.Parameter_Boundaries();
 //N3_on.Parameter_Boundaries();
 N3_Gain.Parameter_Boundaries();
 N3_Freq.Parameter_Boundaries();
 N3_Q.Parameter_Boundaries();
 //N4_on.Parameter_Boundaries();
 N4_Gain.Parameter_Boundaries();
 N4_Freq.Parameter_Boundaries();
 N4_Q.Parameter_Boundaries();
 //N5_on.Parameter_Boundaries();
 N5_Gain.Parameter_Boundaries();
 N5_Freq.Parameter_Boundaries();
 N5_Q.Parameter_Boundaries();
 //N6_on.Parameter_Boundaries();
 N6_Freq.Parameter_Boundaries();
 N6_Q.Parameter_Boundaries();
 Outgain.Parameter_Boundaries();
 */
gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
group_check_smpl();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  );
);


playstates();

process = 0;
while_playing ? is_playing ? process = 1;
while_recording ? is_recording ? process = 1;
while_stopped ? is_stopped ? process = 1;
bypass == 1 ? process = 0;

















function encodeMS(l, r, mid*, side*) ( 
  mid = (l+r) * 0.5;
  side = (l-r) * 0.5;
);

function decodeMS(mid, side, l*, r*) (
  l = mid + side;
  r = mid - side;
);










process ? (



spl0 += 0.0000000001; // DeNorm fix
spl1 += 0.0000000001; // DeNorm fix
spl2 += 0.0000000001; // DeNorm fix
spl3 += 0.0000000001; // DeNorm fix
spl4 += 0.0000000001; // DeNorm fix
spl5 += 0.0000000001; // DeNorm fix
spl6 += 0.0000000001; // DeNorm fix
spl7 += 0.0000000001; // DeNorm fix
spl8 += 0.0000000001; // DeNorm fix
spl9 += 0.0000000001; // DeNorm fix
spl10+= 0.0000000001; // DeNorm fix
spl11+= 0.0000000001; // DeNorm fix
spl0orig = spl0;
spl1orig = spl1;

SC1_Input == 0 ? (SC1_InL = spl0;  SC1_InR = spl1):
SC1_Input == 1 ? (SC1_InL = spl2;  SC1_InR = spl3):
SC1_Input == 2 ? (SC1_InL = spl4;  SC1_InR = spl5):
SC1_Input == 3 ? (SC1_InL = spl6;  SC1_InR = spl7):
SC1_Input == 4 ? (SC1_InL = spl8;  SC1_InR = spl9):
SC1_Input == 5 ? (SC1_InL = spl10;  SC1_InR = spl11);

SC2_Input == 0 ? (SC2_InL = spl0;  SC2_InR = spl1):
SC2_Input == 1 ? (SC2_InL = spl2;  SC2_InR = spl3):
SC2_Input == 2 ? (SC2_InL = spl4;  SC2_InR = spl5):
SC2_Input == 3 ? (SC2_InL = spl6;  SC2_InR = spl7):
SC2_Input == 4 ? (SC2_InL = spl8;  SC2_InR = spl9):
SC2_Input == 5 ? (SC2_InL = spl10;  SC2_InR = spl11);

SC3_Input == 0 ? (SC3_InL = spl0;  SC3_InR = spl1):
SC3_Input == 1 ? (SC3_InL = spl2;  SC3_InR = spl3):
SC3_Input == 2 ? (SC3_InL = spl4;  SC3_InR = spl5):
SC3_Input == 3 ? (SC3_InL = spl6;  SC3_InR = spl7):
SC3_Input == 4 ? (SC3_InL = spl8;  SC3_InR = spl9):
SC3_Input == 5 ? (SC3_InL = spl10;  SC3_InR = spl11);

SC4_Input == 0 ? (SC4_InL = spl0;  SC4_InR = spl1):
SC4_Input == 1 ? (SC4_InL = spl2;  SC4_InR = spl3):
SC4_Input == 2 ? (SC4_InL = spl4;  SC4_InR = spl5):
SC4_Input == 3 ? (SC4_InL = spl6;  SC4_InR = spl7):
SC4_Input == 4 ? (SC4_InL = spl8;  SC4_InR = spl9):
SC4_Input == 5 ? (SC4_InL = spl10;  SC4_InR = spl11);

SC5_Input == 0 ? (SC5_InL = spl0;  SC5_InR = spl1):
SC5_Input == 1 ? (SC5_InL = spl2;  SC5_InR = spl3):
SC5_Input == 2 ? (SC5_InL = spl4;  SC5_InR = spl5):
SC5_Input == 3 ? (SC5_InL = spl6;  SC5_InR = spl7):
SC5_Input == 4 ? (SC5_InL = spl8;  SC5_InR = spl9):
SC5_Input == 5 ? (SC5_InL = spl10;  SC5_InR = spl11);
// Sidechain RMS
// RMSSidechain.RMS_process(spl2, spl3);

// Feed the correct buffers depending on spectrum modes
Show_PreEQ ? (
  Spectrum_Mode == 0 ? spectrum.sample2(spl0 + spl1) :
  Spectrum_Mode == 1 ? spectrum.sample2((spl0 + spl1) * 0.5) :
  Spectrum_Mode == 2 ? spectrum.sample2((spl0 - spl1) * 0.5) :
  Spectrum_Mode == 3 ? (spectrum.sample2((spl0 + spl1) * 0.5); spectrum.sample3((spl0 - spl1) * 0.5)) :
  Spectrum_Mode == 4 ? spectrum.sample2(spl0);
  Spectrum_Mode == 5 ? spectrum.sample2(spl1) :
  Spectrum_Mode == 6 ? (spectrum.sample2(spl0); spectrum.sample3(spl1));
);

// Interpolate filter coefficients

Band_Process0 ? band1.filter.svf_tick();
Band_Process1 ? band2.filter.svf_tick();
Band_Process2 ? band3.filter.svf_tick();
Band_Process3 ? band4.filter.svf_tick();
Band_Process4 ? band5.filter.svf_tick();
Band_Process5 ? band6.filter.svf_tick();
Band_Process6 ? band7.filter.svf_tick();
Band_Process7 ? band8.filter.svf_tick();
Band_Process8 ? band9.filter.svf_tick();
Band_Process9 ? band10.filter.svf_tick();
Band_Process10 ? band11.filter.svf_tick();
Band_Process11 ? band12.filter.svf_tick();
Band_Process12 ? band13.filter.svf_tick();
Band_Process13 ? band14.filter.svf_tick();
Band_Process14 ? band15.filter.svf_tick();
Band_Process15 ? band16.filter.svf_tick();

Listen_Process ? listen_filter.svf_tick();





DO_OVERSAMPLE ? (
  // Oversampling with zero padding and FIR half band filtering.

  !Listen_Process ? (
    // Mid/Left
    y0 = spl0; y1 = 0;
    y2 = spl1; y3 = 0;

    Band_Process0 ? (
      Band_Group0 == 1 || Band_Group0 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group0 == 1 ? (mid0 = band1.filter.svf_svf0(mid0); mid1 = band1.filter.svf_svf0(mid1)) : (side0 = band1.filter.svf_svf1(side0); side1 = band1.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group0 == 0 || Band_Group0 == 3 ? (y0 = band1.filter.svf_svf0(y0); y1 = band1.filter.svf_svf0(y1));
        Band_Group0 == 0 || Band_Group0 == 4 ? (y2 = band1.filter.svf_svf1(y2); y3 = band1.filter.svf_svf1(y3))
      )
    );

    Band_Process1 ? (
      Band_Group1 == 1 || Band_Group1 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group1 == 1 ? (mid0 = band2.filter.svf_svf0(mid0); mid1 = band2.filter.svf_svf0(mid1)) : (side0 = band2.filter.svf_svf1(side0); side1 = band2.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group1 == 0 || Band_Group1 == 3 ? (y0 = band2.filter.svf_svf0(y0); y1 = band2.filter.svf_svf0(y1));
        Band_Group1 == 0 || Band_Group1 == 4 ? (y2 = band2.filter.svf_svf1(y2); y3 = band2.filter.svf_svf1(y3))
      )
    );

    Band_Process2 ? (
      Band_Group2 == 1 || Band_Group2 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group2 == 1 ? (mid0 = band3.filter.svf_svf0(mid0); mid1 = band3.filter.svf_svf0(mid1)) : (side0 = band3.filter.svf_svf1(side0); side1 = band3.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group2 == 0 || Band_Group2 == 3 ? (y0 = band3.filter.svf_svf0(y0); y1 = band3.filter.svf_svf0(y1));
        Band_Group2 == 0 || Band_Group2 == 4 ? (y2 = band3.filter.svf_svf1(y2); y3 = band3.filter.svf_svf1(y3))
      )
    );

    Band_Process3 ? (
      Band_Group3 == 1 || Band_Group3 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group3 == 1 ? (mid0 = band4.filter.svf_svf0(mid0); mid1 = band4.filter.svf_svf0(mid1)) : (side0 = band4.filter.svf_svf1(side0); side1 = band4.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group3 == 0 || Band_Group3 == 3 ? (y0 = band4.filter.svf_svf0(y0); y1 = band4.filter.svf_svf0(y1));
        Band_Group3 == 0 || Band_Group3 == 4 ? (y2 = band4.filter.svf_svf1(y2); y3 = band4.filter.svf_svf1(y3))
      )
    );

    Band_Process4 ? (
      Band_Group4 == 1 || Band_Group4 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group4 == 1 ? (mid0 = band5.filter.svf_svf0(mid0); mid1 = band5.filter.svf_svf0(mid1)) : (side0 = band5.filter.svf_svf1(side0); side1 = band5.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group4 == 0 || Band_Group4 == 3 ? (y0 = band5.filter.svf_svf0(y0); y1 = band5.filter.svf_svf0(y1));
        Band_Group4 == 0 || Band_Group4 == 4 ? (y2 = band5.filter.svf_svf1(y2); y3 = band5.filter.svf_svf1(y3))
      )
    );

    Band_Process5 ? (
      Band_Group5 == 1 || Band_Group5 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group5 == 1 ? (mid0 = band6.filter.svf_svf0(mid0); mid1 = band6.filter.svf_svf0(mid1)) : (side0 = band6.filter.svf_svf1(side0); side1 = band6.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group5 == 0 || Band_Group5 == 3 ? (y0 = band6.filter.svf_svf0(y0); y1 = band6.filter.svf_svf0(y1));
        Band_Group5 == 0 || Band_Group5 == 4 ? (y2 = band6.filter.svf_svf1(y2); y3 = band6.filter.svf_svf1(y3))
      )
    );

    Band_Process6 ? (
      Band_Group6 == 1 || Band_Group6 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group6 == 1 ? (mid0 = band7.filter.svf_svf0(mid0); mid1 = band7.filter.svf_svf0(mid1)) : (side0 = band7.filter.svf_svf1(side0); side1 = band7.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group6 == 0 || Band_Group6 == 3 ? (SC1_y0 = band7.filter.svf_svf0(SC1_InL); SC1_y1 = band7.filter.svf_svf0(0));
        Band_Group6 == 0 || Band_Group6 == 4 ? (SC1_y2 = band7.filter.svf_svf1(SC1_InR); SC1_y3 = band7.filter.svf_svf1(0));
        SC1_spl0 = SC1_firL.do_FIR_filter(SC1_y0, SC1_y1);
        SC1_spl1 = SC1_firR.do_FIR_filter(SC1_y2, SC1_y3);
      )
    );

    Band_Process7 ? (
      Band_Group7 == 1 || Band_Group7 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group7 == 1 ? (mid0 = band8.filter.svf_svf0(mid0); mid1 = band8.filter.svf_svf0(mid1)) : (side0 = band8.filter.svf_svf1(side0); side1 = band8.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group7 == 0 || Band_Group7 == 3 ? (SC2_y0 = band8.filter.svf_svf0(SC2_InL); SC2_y1 = band8.filter.svf_svf0(0));
        Band_Group7 == 0 || Band_Group7 == 4 ? (SC2_y2 = band8.filter.svf_svf1(SC2_InR); SC2_y3 = band8.filter.svf_svf1(0));
        SC2_spl0 = SC2_firL.do_FIR_filter(SC2_y0, SC2_y1);
        SC2_spl1 = SC2_firR.do_FIR_filter(SC2_y2, SC2_y3);
      )
    );

    Band_Process8 ? (
      Band_Group8 == 1 || Band_Group8 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group8 == 1 ? (mid0 = band9.filter.svf_svf0(mid0); mid1 = band9.filter.svf_svf0(mid1)) : (side0 = band9.filter.svf_svf1(side0); side1 = band9.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group8 == 0 || Band_Group8 == 3 ? (SC3_y0 = band9.filter.svf_svf0(SC3_InL); SC3_y1 = band9.filter.svf_svf0(0));
        Band_Group8 == 0 || Band_Group8 == 4 ? (SC3_y2 = band9.filter.svf_svf1(SC3_InR); SC3_y3 = band9.filter.svf_svf1(0));
        SC3_spl0 = SC3_firL.do_FIR_filter(SC3_y0, SC3_y1);
        SC3_spl1 = SC3_firR.do_FIR_filter(SC3_y2, SC3_y3);
      )
    );

    Band_Process9 ? (
      Band_Group9 == 1 || Band_Group9 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group9 == 1 ? (mid0 = band10.filter.svf_svf0(mid0); mid1 = band10.filter.svf_svf0(mid1)) : (side0 = band10.filter.svf_svf1(side0); side1 = band10.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group9 == 0 || Band_Group9 == 3 ? (SC4_y0 = band10.filter.svf_svf0(SC4_InL); SC4_y1 = band10.filter.svf_svf0(0));
        Band_Group9 == 0 || Band_Group9 == 4 ? (SC4_y2 = band10.filter.svf_svf1(SC4_InR); SC4_y3 = band10.filter.svf_svf1(0));
        SC4_spl0 = SC4_firL.do_FIR_filter(SC4_y0, SC4_y1);
        SC4_spl1 = SC4_firR.do_FIR_filter(SC4_y2, SC4_y3);
      )
    );

    Band_Process10 ? (
      Band_Group10 == 1 || Band_Group10 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group10 == 1 ? (mid0 = band11.filter.svf_svf0(mid0); mid1 = band11.filter.svf_svf0(mid1)) : (side0 = band11.filter.svf_svf1(side0); side1 = band11.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group10 == 0 || Band_Group10 == 3 ? (SC5_y0 = band11.filter.svf_svf0(SC5_InL); SC5_y1 = band11.filter.svf_svf0(0));
        Band_Group10 == 0 || Band_Group10 == 4 ? (SC5_y2 = band11.filter.svf_svf1(SC5_InR); SC5_y3 = band11.filter.svf_svf1(0));
        SC5_spl0 = SC5_firL.do_FIR_filter(SC5_y0, SC5_y1);
        SC5_spl1 = SC5_firR.do_FIR_filter(SC5_y2, SC5_y3);
      )
    );

    Band_Process11 ? (
      Band_Group11 == 1 || Band_Group11 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group11 == 1 ? (mid0 = band12.filter.svf_svf0(mid0); mid1 = band12.filter.svf_svf0(mid1)) : (side0 = band12.filter.svf_svf1(side0); side1 = band12.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group11 == 0 || Band_Group11 == 3 ? (y0 = band12.filter.svf_svf0(y0); y1 = band12.filter.svf_svf0(y1));
        Band_Group11 == 0 || Band_Group11 == 4 ? (y2 = band12.filter.svf_svf1(y2); y3 = band12.filter.svf_svf1(y3))
      )
    );

    Band_Process12 ? (
      Band_Group12 == 1 || Band_Group12 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group12 == 1 ? (mid0 = band13.filter.svf_svf0(mid0); mid1 = band13.filter.svf_svf0(mid1)) : (side0 = band13.filter.svf_svf1(side0); side1 = band13.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group12 == 0 || Band_Group12 == 3 ? (y0 = band13.filter.svf_svf0(y0); y1 = band13.filter.svf_svf0(y1));
        Band_Group12 == 0 || Band_Group12 == 4 ? (y2 = band13.filter.svf_svf1(y2); y3 = band13.filter.svf_svf1(y3))
      )
    );

    Band_Process13 ? (
      Band_Group13 == 1 || Band_Group13 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group13 == 1 ? (mid0 = band14.filter.svf_svf0(mid0); mid1 = band14.filter.svf_svf0(mid1)) : (side0 = band14.filter.svf_svf1(side0); side1 = band14.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group13 == 0 || Band_Group13 == 3 ? (y0 = band14.filter.svf_svf0(y0); y1 = band14.filter.svf_svf0(y1));
        Band_Group13 == 0 || Band_Group13 == 4 ? (y2 = band14.filter.svf_svf1(y2); y3 = band14.filter.svf_svf1(y3))
      )
    );

    Band_Process14 ? (
      Band_Group14 == 1 || Band_Group14 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group14 == 1 ? (mid0 = band15.filter.svf_svf0(mid0); mid1 = band15.filter.svf_svf0(mid1)) : (side0 = band15.filter.svf_svf1(side0); side1 = band15.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group14 == 0 || Band_Group14 == 3 ? (y0 = band15.filter.svf_svf0(y0); y1 = band15.filter.svf_svf0(y1));
        Band_Group14 == 0 || Band_Group14 == 4 ? (y2 = band15.filter.svf_svf1(y2); y3 = band15.filter.svf_svf1(y3))
      )
    );

    Band_Process15 ? (
      Band_Group15 == 1 || Band_Group15 == 2 ? ( // Mid or Side
        encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
        Band_Group15 == 1 ? (mid0 = band16.filter.svf_svf0(mid0); mid1 = band16.filter.svf_svf0(mid1)) : (side0 = band16.filter.svf_svf1(side0); side1 = band16.filter.svf_svf1(side1));
        decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
      ) : ( // Left and/or Right
        Band_Group15 == 0 || Band_Group15 == 3 ? (y0 = band16.filter.svf_svf0(y0); y1 = band16.filter.svf_svf0(y1));
        Band_Group15 == 0 || Band_Group15 == 4 ? (y2 = band16.filter.svf_svf1(y2); y3 = band16.filter.svf_svf1(y3))
      )
    );

    // Unoptimised
    // spl0 = firL.do_FIR_filter(y0) * 2;
    // firL.do_FIR_filter(y1);
    // spl1 = firR.do_FIR_filter(y0) * 2;
    // firR.do_FIR_filter(y1);

    spl0 = firL.do_FIR_filter(y0, y1);
    spl1 = firR.do_FIR_filter(y2, y3);


  ) : (
    // Listen/Solo mode
    y0 = spl0; y1 = 0;
    y2 = spl1; y3 = 0;

    listen_group == 1 || listen_group == 2 ? ( // Mid or Side
      encodeMS(y0, y2, mid0, side0); encodeMS(y1, y3, mid1, side1);
      listen_group == 1 ? (mid0 = listen_filter.svf_svf0(mid0); mid1 = listen_filter.svf_svf0(mid1)) : (side0 = listen_filter.svf_svf1(side0); side1 = listen_filter.svf_svf1(side1));

      listen_group == 1 ? (side0 = side1 = 0;) : (mid0 = mid1 = 0;);
      decodeMS(mid0, side0, y0, y2); decodeMS(mid1, side1, y1, y3);
    ) : ( // Left and/or Right
      listen_group == 0 || listen_group == 3 ? (y0 = listen_filter.svf_svf0(y0); y1 = listen_filter.svf_svf0(y1));
      listen_group == 0 || listen_group == 4 ? (y2 = listen_filter.svf_svf1(y2); y3 = listen_filter.svf_svf1(y3));
      listen_group == 3 ? (y2 = y3 = 0);
      listen_group == 4 ? (y0 = y1 = 0);
    );

    spl0list = firL.do_FIR_filter(y0, y1);
    spl1list = firR.do_FIR_filter(y2, y3);

    spl0list *= listen_gain;
    spl1list *= listen_gain;
  );
) : (
  // No oversampling

  !Listen_Process ? (

    Band_Process0 ? (
      Band_Group0 == 1 || Band_Group0 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group0 == 1 ? mid0 = band1.filter.svf_svf0(mid0) : side0 = band1.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group0 == 0 || Band_Group0 == 3 ? spl0 = band1.filter.svf_svf0(spl0);
        Band_Group0 == 0 || Band_Group0 == 4 ? spl1 = band1.filter.svf_svf1(spl1);
      )
    );

    Band_Process1 ? (
      Band_Group1 == 1 || Band_Group1 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group1 == 1 ? mid0 = band2.filter.svf_svf0(mid0) : side0 = band2.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group1 == 0 || Band_Group1 == 3 ? spl0 = band2.filter.svf_svf0(spl0);
        Band_Group1 == 0 || Band_Group1 == 4 ? spl1 = band2.filter.svf_svf1(spl1);
      )
    );

    Band_Process2 ? (
      Band_Group2 == 1 || Band_Group2 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group2 == 1 ? mid0 = band3.filter.svf_svf0(mid0) : side0 = band3.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group2 == 0 || Band_Group2 == 3 ? spl0 = band3.filter.svf_svf0(spl0);
        Band_Group2 == 0 || Band_Group2 == 4 ? spl1 = band3.filter.svf_svf1(spl1);
      )
    );

    Band_Process3 ? (
      Band_Group3 == 1 || Band_Group3 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group3 == 1 ? mid0 = band4.filter.svf_svf0(mid0) : side0 = band4.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group3 == 0 || Band_Group3 == 3 ? spl0 = band4.filter.svf_svf0(spl0);
        Band_Group3 == 0 || Band_Group3 == 4 ? spl1 = band4.filter.svf_svf1(spl1);
      )
    );

    Band_Process4 ? (
      Band_Group4 == 1 || Band_Group4 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group4 == 1 ? mid0 = band5.filter.svf_svf0(mid0) : side0 = band5.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group4 == 0 || Band_Group4 == 3 ? spl0 = band5.filter.svf_svf0(spl0);
        Band_Group4 == 0 || Band_Group4 == 4 ? spl1 = band5.filter.svf_svf1(spl1);
      )
    );

    Band_Process5 ? (
      Band_Group5 == 1 || Band_Group5 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group5 == 1 ? mid0 = band6.filter.svf_svf0(mid0) : side0 = band6.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group5 == 0 || Band_Group5 == 3 ? spl0 = band6.filter.svf_svf0(spl0);
        Band_Group5 == 0 || Band_Group5 == 4 ? spl1 = band6.filter.svf_svf1(spl1);
      )
    );

    Band_Process6 ? (
      Band_Group6 == 1 || Band_Group6 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group6 == 1 ? mid0 = band7.filter.svf_svf0(mid0) : side0 = band7.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group6 == 0 || Band_Group6 == 3 ? SC1_spl0 = band7.filter.svf_svf0(SC1_InL);
        Band_Group6 == 0 || Band_Group6 == 4 ? SC1_spl1 = band7.filter.svf_svf1(SC1_InR);
      )
    );

    Band_Process7 ? (
      Band_Group7 == 1 || Band_Group7 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group7 == 1 ? mid0 = band8.filter.svf_svf0(mid0) : side0 = band8.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group7 == 0 || Band_Group7 == 3 ? SC2_spl0 = band8.filter.svf_svf0(SC2_InL);
        Band_Group7 == 0 || Band_Group7 == 4 ? SC2_spl1 = band8.filter.svf_svf1(SC2_InR);
      )
    );


    Band_Process8 ? (
      Band_Group8 == 1 || Band_Group8 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group8 == 1 ? mid0 = band9.filter.svf_svf0(mid0) : side0 = band9.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group8 == 0 || Band_Group8 == 3 ? SC3_spl0 = band9.filter.svf_svf0(SC3_InL);
        Band_Group8 == 0 || Band_Group8 == 4 ? SC3_spl1 = band9.filter.svf_svf1(SC3_InR);
      )
    );

    Band_Process9 ? (
      Band_Group9 == 1 || Band_Group9 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group9 == 1 ? mid0 = band10.filter.svf_svf0(mid0) : side0 = band10.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group9 == 0 || Band_Group9 == 3 ? SC4_spl0 = band10.filter.svf_svf0(SC4_InL);
        Band_Group9 == 0 || Band_Group9 == 4 ? SC4_spl1 = band10.filter.svf_svf1(SC4_InR);
      )
    );

    Band_Process10 ? (
      Band_Group10 == 1 || Band_Group10 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group10 == 1 ? mid0 = band11.filter.svf_svf0(mid0) : side0 = band11.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group10 == 0 || Band_Group10 == 3 ? SC5_spl0 = band11.filter.svf_svf0(SC5_InL);
        Band_Group10 == 0 || Band_Group10 == 4 ? SC5_spl1 = band11.filter.svf_svf1(SC5_InR);
      )
    );

    Band_Process11 ? (
      Band_Group11 == 1 || Band_Group11 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group11 == 1 ? mid0 = band12.filter.svf_svf0(mid0) : side0 = band12.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group11 == 0 || Band_Group11 == 3 ? spl0 = band12.filter.svf_svf0(spl0);
        Band_Group11 == 0 || Band_Group11 == 4 ? spl1 = band12.filter.svf_svf1(spl1);
      )
    );

    Band_Process12 ? (
      Band_Group12 == 1 || Band_Group12 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group12 == 1 ? mid0 = band13.filter.svf_svf0(mid0) : side0 = band13.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group12 == 0 || Band_Group12 == 3 ? spl0 = band13.filter.svf_svf0(spl0);
        Band_Group12 == 0 || Band_Group12 == 4 ? spl1 = band13.filter.svf_svf1(spl1);
      )
    );

    Band_Process13 ? (
      Band_Group13 == 1 || Band_Group13 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group13 == 1 ? mid0 = band14.filter.svf_svf0(mid0) : side0 = band14.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group13 == 0 || Band_Group13 == 3 ? spl0 = band14.filter.svf_svf0(spl0);
        Band_Group13 == 0 || Band_Group13== 4 ? spl1 = band14.filter.svf_svf1(spl1);
      )
    );

    Band_Process14 ? (
      Band_Group14 == 1 || Band_Group14 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group14 == 1 ? mid0 = band15.filter.svf_svf0(mid0) : side0 = band15.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group14 == 0 || Band_Group14 == 3 ? spl0 = band15.filter.svf_svf0(spl0);
        Band_Group14 == 0 || Band_Group14 == 4 ? spl1 = band15.filter.svf_svf1(spl1);
      )
    );

    Band_Process15 ? (
      Band_Group15 == 1 || Band_Group7 == 2 ? ( // Mid or Side
        encodeMS(spl0, spl1, mid0, side0);
        Band_Group15 == 1 ? mid0 = band16.filter.svf_svf0(mid0) : side0 = band16.filter.svf_svf1(side0);
        decodeMS(mid0, side0, spl0, spl1);
      ) : ( // Left and/or Right
        Band_Group15 == 0 || Band_Group15 == 3 ? spl0 = band16.filter.svf_svf0(spl0);
        Band_Group15 == 0 || Band_Group15 == 4 ? spl1 = band16.filter.svf_svf1(spl1);
      )
    );


  ) : (
    // Listen/Solo mode
    spl0list = spl0;
    spl1list = spl1;

    listen_group == 1 || listen_group == 2 ? ( // Mid or Side
      encodeMS(spl0list, spl1list, mid0, side0);
      listen_group == 1 ? mid0 = listen_filter.svf_svf0(mid0) : side0 = listen_filter.svf_svf1(side0);

      listen_group == 1 ? side0 = 0 : mid0 = 0;
      decodeMS(mid0, side0, spl0list, spl1list);
    ) : ( // Left and/or Right
      listen_group == 0 || listen_group == 3 ? spl0list = listen_filter.svf_svf0(spl0list);
      listen_group == 0 || listen_group == 4 ? spl1list = listen_filter.svf_svf1(spl1list);
      listen_group == 3 ? spl1list = 0;
      listen_group == 4 ? spl0list = 0;
    );

    spl0list *= listen_gain;
    spl1list *= listen_gain;
  );
);

// Mid/Side encode
Stereo_Mode == 0 ? (encodeMs(spl0, spl1, mid0, side0); spl0 = mid0; spl1 = side0);

// Stereo gains
spl0 *= gainML;
spl1 *= gainSR;

MidPolarity ? spl0 = -spl0;
SidePolarity ? spl1 = -spl1;

// Mid/Side decode
Stereo_Mode == 0 ? (mid0 = spl0; side0 = spl1; decodeMs(mid0, side0, spl0, spl1));

// Overall gains
spl0 *= gainDb;
spl1 *= gainDb;

Listen_Process ? (
  // Mid/Side encode
  Stereo_Mode == 0 ? (encodeMs(spl0list, spl1list, mid0, side0); spl0list = mid0; spl1list = side0);

  // Stereo gains
  spl0list *= gainML;
  spl1list *= gainSR;

  MidPolarity ? spl0list = -spl0list;
  SidePolarity ? spl1list = -spl1list;

  // Mid/Side decode
  Stereo_Mode == 0 ? (mid0 = spl0list; side0 = spl1list; decodeMs(mid0, side0, spl0list, spl1list));

  // Overall gains
  spl0list *= gainDb;
  spl1list *= gainDb;
);

// Feed the correct buffers depending on spectrum modes
Spectrum_Mode == 0 ? spectrum.sample0(spl0 + spl1) :
Spectrum_Mode == 1 ? spectrum.sample0((spl0 + spl1) * 0.5) :
Spectrum_Mode == 2 ? spectrum.sample0((spl0 - spl1) * 0.5) :
Spectrum_Mode == 3 ? (spectrum.sample0((spl0 + spl1) * 0.5); spectrum.sample1((spl0 - spl1) * 0.5)) :
Spectrum_Mode == 4 ? spectrum.sample0(spl0);
Spectrum_Mode == 5 ? spectrum.sample0(spl1) :
Spectrum_Mode == 6 ? (spectrum.sample0(spl0); spectrum.sample1(spl1));

Listen_Process ? (
  Spectrum_Mode == 0 ? spectrum.sample4(spl0list + spl1list) :
  Spectrum_Mode == 1 ? spectrum.sample4((spl0list + spl1list) * 0.5) :
  Spectrum_Mode == 2 ? spectrum.sample4((spl0list - spl1list) * 0.5) :
  Spectrum_Mode == 3 ? (spectrum.sample4((spl0list + spl1list) * 0.5); spectrum.sample5((spl0list - spl1list) * 0.5)) :
  Spectrum_Mode == 4 ? spectrum.sample4(spl0list);
  Spectrum_Mode == 5 ? spectrum.sample4(spl1list) :
  Spectrum_Mode == 6 ? (spectrum.sample4(spl0list); spectrum.sample5(spl1list));
  spl0 = spl0list;
  spl1 = spl1list;
);

play_state == 1 && agcControl > 0 || agcOverride > 0 ? ( 
  RMSPre.RMS_process(spl0orig, spl1orig);
  RMSPost.RMS_process(spl0, spl1);

  rms_db = RMSPre.RMS_getDB();
  rms_db2 = RMSPost.RMS_getDB();
  diffdb = rms_db - rms_db2;

  agc_gain = 2 ^ (diffdb/6);

  spl0 *= agc_gain;
  spl1 *= agc_gain;

  agcOverride > 0 ? ( 
    agcOverride -= .001;
    agcOverride <= 0 ? (

      agcControl == 0 ? (
        Gain = Gain + 6 * log(agc_gain) / log(2);
        button_gain.db = Gain;

        RMSPre.RMS_reset();
        RMSPost.RMS_reset();
      );
    );
  );
);

// Limit the output
LimitOutput ? (
  spl0 = min(max(spl0,-1.0),1.0);
  spl1 = min(max(spl1,-1.0),1.0);
);

DYN_ON = 0;
Band_Process6 ? (
DYN_ON = 1;
SC1_Target < 0 ? (
SC1_GR = SC1.computeGainReduction(ratio2db(max(abs(SC1_spl0),abs(SC1_spl1))));
SC1_GR = max(SC1_GR, SC1_Target);
Band_Gain[0] = Node1_Gain + SC1_GR;
):SC1_Target > 0 ? (
SC1_GR = SC1.computeGainReduction(ratio2db(max(abs(SC1_spl0),abs(SC1_spl1))));
SC1_GR = min(-SC1_GR, SC1_Target);
Band_Gain[0] = Node1_Gain + SC1_GR;
):(SC1_GR = 0);
flag_filter_update(0);
SC_Listen == 1 ? (
spl0 = SC1_spl0;// * db2ratio(SC1_GR);
spl1 = SC1_spl1;// * db2ratio(SC1_GR);
);
);

Band_Process7 ? (
DYN_ON = 1;
SC2_Target < 0 ? (
SC2_GR = SC2.computeGainReduction(ratio2db(max(abs(SC2_spl0),abs(SC2_spl1))));
SC2_GR = max(SC2_GR, SC2_Target);
Band_Gain[1] = Node2_Gain + SC2_GR;
):SC2_Target > 0 ? (
SC2_GR = SC2.computeGainReduction(ratio2db(max(abs(SC2_spl0),abs(SC2_spl1))));
SC2_GR = min(-SC2_GR, SC2_Target);
Band_Gain[1] = Node2_Gain + SC2_GR;
):(SC2_GR = 0);
flag_filter_update(1);
SC_Listen == 2 ? (
spl0 = SC2_spl0;// * db2ratio(SC2_GR);
spl1 = SC2_spl1;// * db2ratio(SC2_GR);
);
);

Band_Process8 ? (
DYN_ON = 1;
SC3_Target < 0 ? (
SC3_GR = SC3.computeGainReduction(ratio2db(max(abs(SC3_spl0),abs(SC3_spl1))));
SC3_GR = max(SC3_GR, SC3_Target);
Band_Gain[2] = Node3_Gain + SC3_GR;
):SC3_Target > 0 ? (
SC3_GR = SC3.computeGainReduction(ratio2db(max(abs(SC3_spl0),abs(SC3_spl1))));
SC3_GR = min(-SC3_GR, SC3_Target);
Band_Gain[2] = Node3_Gain + SC3_GR;
):(SC3_GR = 0);
flag_filter_update(2);
SC_Listen == 3 ? (
spl0 = SC3_spl0;// * db2ratio(SC3_GR);
spl1 = SC3_spl1;// * db2ratio(SC3_GR);
);
);

Band_Process9 ? (
DYN_ON = 1;
SC4_Target < 0 ? (
SC4_GR = SC4.computeGainReduction(ratio2db(max(abs(SC4_spl0),abs(SC4_spl1))));
SC4_GR = max(SC4_GR, SC4_Target);
Band_Gain[3] = Node4_Gain + SC4_GR;
):SC4_Target > 0 ? (
SC4_GR = SC4.computeGainReduction(ratio2db(max(abs(SC4_spl0),abs(SC4_spl1))));
SC4_GR = min(-SC4_GR, SC4_Target);
Band_Gain[3] = Node4_Gain + SC4_GR;
):(SC4_GR = 0);
flag_filter_update(3);
SC_Listen == 4 ? (
spl0 = SC4_spl0;// * db2ratio(SC4_GR);
spl1 = SC4_spl1;// * db2ratio(SC4_GR);
);
);

Band_Process10 ? (
DYN_ON = 1;
SC5_Target < 0 ? (
SC5_GR = SC5.computeGainReduction(ratio2db(max(abs(SC5_spl0),abs(SC5_spl1))));
SC5_GR = max(SC5_GR, SC5_Target);
Band_Gain[4] = Node5_Gain + SC5_GR;
):SC5_Target > 0 ? (
SC5_GR = SC5.computeGainReduction(ratio2db(max(abs(SC5_spl0),abs(SC5_spl1))));
SC5_GR = min(-SC5_GR, SC5_Target);
Band_Gain[4] = Node5_Gain + SC5_GR;
):(SC5_GR = 0);
flag_filter_update(4);
SC_Listen == 5 ? (
spl0 = SC5_spl0;// * db2ratio(SC5_GR);
spl1 = SC5_spl1;// * db2ratio(SC5_GR);
);
);

Dyn_Box == 1 ? DYN_In_Meter.feed_Meter(max(abs(SC1_spl0),abs(SC1_spl1)));
Dyn_Box == 2 ? DYN_In_Meter.feed_Meter(max(abs(SC2_spl0),abs(SC2_spl1)));
Dyn_Box == 3 ? DYN_In_Meter.feed_Meter(max(abs(SC3_spl0),abs(SC3_spl1)));
Dyn_Box == 4 ? DYN_In_Meter.feed_Meter(max(abs(SC4_spl0),abs(SC4_spl1)));
Dyn_Box == 5 ? DYN_In_Meter.feed_Meter(max(abs(SC5_spl0),abs(SC5_spl1)));
//update_audio_filters();
//DYN_ON ? update_visual_filters();

); //precess playstate






































































@gfx 800 630 // GFX_FLAG
s2_zoom_X = gfx_w / 800;
s2_zoom_y = gfx_h / 630;
zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
zoom_off == 1 ? zoom = gfx_ext_retina;

gfx_ext_flags == 0 ? (
grf_w = (OEQ_knobs_x_plus+2*OEQ_knobs_step+OEQ_knobs_x-30)*zoom;
grf_h = 200*zoom;
ree_offset_x = OEQ_knobs_x + OEQ_knobs_x_plus;//170;
ree_offset_y = 40;
ree_mouse_x = mouse_x- ree_offset_x * zoom;
ree_mouse_y = mouse_y- ree_offset_y * zoom;
gfx_setimgdim(127,grf_w,grf_h);
gfx_dest = 127; //DEST_FLAG
):gfx_ext_flags == 1 ? (
//922 564
grf_w = gfx_w;
grf_h = gfx_h;//(gfx_w/922)*564;
ree_offset_x = 0;
ree_offset_y = 0;
ree_mouse_x = mouse_x;
ree_mouse_y = mouse_y;
gfx_dest = -1;
);

gfx_mode = 0;
//gfx_clear = -2;
//gfx_set(1,1,1,127);
gfx_r=gfx_g=gfx_b=0;
gfx_rect(0,0,grf_w,grf_h);

gfx_x = 100; gfx_y = 100;

actual_width = grf_w / gfx_ext_retina;
actual_height = grf_h / gfx_ext_retina;

// This is necessary!
// Without this, the mouse_caps don't register key presses until the
// mouse button is clicked.
//gfx_getchar();

// Calculage compact view flags
// These are used to disable certain elements for graceful visual shrinking
compact_width = actual_width < 600;
compact_height = actual_height < 320;
very_compact_width = actual_width < 300;
very_compact_height = actual_height < 160;

TOP_MARGIN = 10;
//gfx_ext_flags == 1 ? TOP_MARGIN = 0; // DEBUG FLAG

BOTTOM_MARGIN = gfx_ext_retina == 2 ? 64 : 32;
RAISED_BOTTOM = gfx_ext_retina == 2 ? 240 : 120;

compact_width || compact_height ? BOTTOM_MARGIN = 0;

ShowPanel = PanelEnabled && !compact_width && !compact_height;

ENABLE_RAISED_BOTTOM = ShowPanel;

LEFT_MARGIN = 0;
RIGHT_MARGIN = 0;

spectrum.top_margin = TOP_MARGIN;
spectrum.bottom_margin = BOTTOM_MARGIN;
spectrum.left_margin = LEFT_MARGIN;
spectrum.left_margin = RIGHT_MARGIN;

/*
 * Set rgb from 0..255
 */
function set_rgb255(r, g, b) (
  gfx_r = r / 255;
  gfx_g = g / 255;
  gfx_b = b / 255;
);

/*
 * Set rgba from 0..255
 */
function set_rgba255(r, g, b, a) (
  gfx_r = r / 255;
  gfx_g = g / 255;
  gfx_b = b / 255;
  gfx_a = b / 255;
);

/*
 * Get screen x from freq
 */
function freq_to_scx(freq) (
  LEFT_MARGIN + ((grf_w - LEFT_MARGIN - RIGHT_MARGIN) * log(freq / MIN_FREQ) / FREQ_LOG_MAX);
);

/*
 * Get freq from screen x
 */
function scx_to_freq(x) (
  x = MIN_FREQ * exp(FREQ_LOG_MAX * (x - LEFT_MARGIN) / (grf_w - LEFT_MARGIN - RIGHT_MARGIN));
  max(min(x, MAX_FREQ), MIN_FREQ);
);

/*
 * Convert eq dB to screen y
 */
function db_to_y(db) local(m) (
gfx_ext_flags == 0 ? (
  m = 1.0 - (((db / DB_EQ_RANGE) / 2) + 0.5);
  TOP_MARGIN+(m * (grf_h - (gfx_texth*2) - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM)));
  ):(
  m = 1.0 - (((db / DB_EQ_RANGE) / 2) + 0.5); // DEBUG FLAG
  m*grf_h;//TOP_MARGIN+(m * (grf_h - (gfx_texth*0) - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM)));
  );
);

/*
 * Get eq dB from screen y
 */
function y_to_db(y) local(m) (
gfx_ext_flags == 0 ? (
  m = (y - TOP_MARGIN) / (grf_h - (gfx_texth*2) - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM));
  m = (1.0 - (m + 0.5)) * 2 * DB_EQ_RANGE;
  max(min(m, DB_EQ_RANGE), -DB_EQ_RANGE);
  ):(
    //m = (y - TOP_MARGIN) / (grf_h - (gfx_texth*0) - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM));
    m = min(y,grf_h) / grf_h;
    m = (1.0 - (m + 0.5)) * 2 * DB_EQ_RANGE;
    max(min(m, DB_EQ_RANGE), -DB_EQ_RANGE);
  );
);

function set_filter_from_xy(band, x, y) local(gain, s) (
    Band_Frequency[band] = scx_to_freq(x);
    Band_Type[band] == FILTER_HIGH_CUT || Band_Type[band] == FILTER_LOW_CUT ? (
      Band_Slope[band] == 0 ? (
        Band_Q[band] = 0.707;
      ) : (
        // Convert from gain dB to Q
        gain = y_to_db(y);
        s = floor(((Band_Slope[band] + 1) * 6) / 12);  // Number of 12dB's
        Band_Q[band] = pow(2, ((gain / s) - 3) / 6);
      );
      // Notify Reaper that a parameter change has happened
      notify_touched_Q(band);
    ) : (
      // Normal
      Band_Type[band] == FILTER_NOTCH || Band_Type[band] == FILTER_BAND_PASS || Band_Type[band] == FILTER_ALL_PASS
        || Band_Type[band] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[band] == FILTER_HIGH_CUT_BUTTERWORTH ? Band_Gain[band] = 0 
        : Band_Gain[band] = y_to_db(y);
      // Notify Reaper that a parameter change has happened
      notify_touched_gain(band);
    );
    // Notify Reaper that a parameter change has happened
    notify_touched_frequency(band);
    flag_filter_update(band);
);

function get_filter_x(band) (
    freq_to_scx(Band_Frequency[band]);
);

function get_filter_y(band) local(y, s) (
    Band_Type[band] == FILTER_HIGH_CUT || Band_Type[band] == FILTER_LOW_CUT ? (
      Band_Slope[band] == 0 ? y = db_to_y(0) : (
        // Convert Q to dB, then to screen Y
        s = floor(((Band_Slope[band] + 1) * 6) / 12);  // Number of 12dB's
        y = db_to_y(((6 * s * log(Band_Q[band])) / log(2)) + (3 * s));
      );
    ) : (
      // Butterworth, notch, bandpass and allpass don't have gain
      Band_Type[band] == 2 || Band_Type[band] == 6 || Band_Type[band] == 7 || Band_Type[band] == 8 || Band_Type[band] == 11 ?  (
        y = db_to_y(0);
      ) : (
        // Normal
        y = db_to_y(Band_Gain[band]);
      );
    );
    y;
);

/*
 * Draw the node indicators for a band/node
 * Used for mid/side and left/right indicators
 */
function draw_node_stereo(band, x, y, alpha) local (size, nx, ny, x1, x2, x3, y1, y2, y3) (
  gfx_ext_retina == 2 ? size = 13 : size = 7;

  gfx_r = gfx_g = gfx_b = 1; gfx_a = alpha;

  // Top + bottom
  (Band_Group[band] == 1) ? (
    start = 14 * (2*$pi/16);
    end = 18 * (2*$pi/16);

    gfx_arc(x-1, y-1, size*2, start, end, 1);
    gfx_arc(x-1, y-1, (size*2)-0.5, start, end, 1);
    gfx_ext_retina == 2 ? gfx_arc(x-1, y-1, (size*2)-1.0, start, end, 1);
   
    start = 22 * (2*$pi/16);
    end = 26 * (2*$pi/16);

    gfx_arc(x-1, y-1, size*2, start, end, 1);
    gfx_arc(x-1, y-1, (size*2)-0.5, start, end, 1);
    gfx_ext_retina == 2 ? gfx_arc(x-1, y-1, (size*2)-1.0, start, end, 1);
  );

  // Left
  (Band_Group[band] == 2 || Band_Group[band] == 3) ? (
    start = 26 * (2*$pi/16);
    end = 30 * (2*$pi/16);

    gfx_arc(x-1, y-1, size*2, start, end, 1);
    gfx_arc(x-1, y-1, (size*2)-0.5, start, end, 1);
    gfx_ext_retina == 2 ? gfx_arc(x-1, y-1, (size*2)-1.0, start, end, 1);
  );

  // Right
  (Band_Group[band] == 2 || Band_Group[band] == 4) ? (
    start = 18 * (2*$pi/16);
    end = 22 * (2*$pi/16);

    gfx_arc(x-1, y-1, size*2, start, end, 1);
    gfx_arc(x-1, y-1, (size*2)-0.5, start, end, 1);
    gfx_ext_retina == 2 ? gfx_arc(x-1, y-1, (size*2)-1.0, start, end, 1);
  );
 
);

/*
 * Draw the node/band
 */
function draw_node(band, freq, db, enabled, selected) local(x, y, m, scy, transfer, size, alpha, width) (
  //jj
  x = get_filter_x(band);
  y = get_filter_y(band);


  gfx_ext_flags == 1 ? (y = (1-(db/DB_EQ_RANGE))*grf_h/2); //DEBUG FLAG

  //gfx_ext_retina == 2 ? size = 12 : size = 6;
  gfx_ext_flags ==  1 ? size = 4 : size = 9;
  size *= gfx_ext_retina;
  //gfx_ext_retina == 2 ? size = 18 : size = 9;

  y > grf_h - gfx_texth - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM) ? (
    node_alpha = 0.5;
  ) : node_alpha = 1.0;

  y > grf_h - gfx_texth - BOTTOM_MARGIN ? node_alpha = 0;
  
  node_alpha = 1; // DEBUG FLAG
  
  draw_node_stereo(band, x, y, node_alpha);

  gfx_r = Band_Red[band]; gfx_g = Band_Green[band]; gfx_b = Band_Blue[band];

  // JSFX issue with circles being off one pixel?
  enabled==2 ? gfx_a=node_alpha : gfx_a = node_alpha * 0.3;
  gfx_circle(x-1, y-1, size, 1, 1);

  gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a -= 0.1;
  gfx_circle(x-1, y-1, size, 0, 1); gfx_a -= 0.1;
  gfx_circle(x-1, y-1, size-1, 0, 1); gfx_a -= 0.1;
  gfx_ext_retina == 2 ? (
    gfx_circle(x-1, y-1, size-2, 0, 1); gfx_a -= 0.1;
    gfx_circle(x-1, y-1, size-3, 0, 1);
  );

  gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = node_alpha;
  gfx_circle(x-1, y-1, size, 0, 1);

  band == node_hover || selected_node == band ? (
    //Custom
    // Change Alpha when node is pressed
    selected_node == band ? (
      gfx_r = 1; gfx_g = 1; gfx_b = 0.3; gfx_a = node_alpha * 0.4;
    ):(
      gfx_r = 1; gfx_g = 1; gfx_b = 0.3; gfx_a = node_alpha * 0.2;
    );
    // Add extra circle when hovering over band
    gfx_ext_retina == 2 ?(
      gfx_circle(x-1, y-0.7, 20, 0, 1);
      gfx_circle(x-1, y-0.7, 20, 1, 1);
    ):(
      gfx_circle(x-1, y-0.7, 10, 0, 1);
      gfx_circle(x-1, y-1, 10, 1, 1);
    );
  );

  // Draw the band index number
  gfx_setfont(2);
  //gfx_measurestr(sprintf(#, "%d", band+1), width, height);
  band == 0 ? #S2_node_name = "LS":
  band == 1 ? #S2_node_name = "P1":
  band == 2 ? #S2_node_name = "P2":
  band == 3 ? #S2_node_name = "P3":
  band == 4 ? #S2_node_name = "HS":
  band == 5 ? #S2_node_name = "HP";
  gfx_ext_flags ==  1 ? #S2_node_name = "";
  
  gfx_measurestr(#S2_node_name, width, height);
  gfx_r = gfx_g = gfx_b = 1; gfx_a = node_alpha;
  gfx_x = x - width * 0.5;
  gfx_y = y - gfx_texth * 0.5;

  //gfx_drawnumber(band+1,0);
  gfx_ext_flags == 0 ? gfx_drawstr(#S2_node_name);
  gfx_setfont(1);

  // Draw band selected indicator
  Band_Selected[band] == 1 ? (
    gfx_r = 1; gfx_g = 0.5; gfx_b = 0; gfx_a = band_selected_circle_alpha;
    gfx_circle(x-1, y-1, size*1.5, 0, 1);
    gfx_a = band_selected_circle_alpha * 0.5; gfx_circle(x-1, y-1, (size*1.5)+1, 0, 1);
    gfx_a = band_selected_circle_alpha * 0.5; gfx_circle(x-1, y-1, (size*1.5)-1, 0, 1);
  );

  // Draw connecting line so that we can see which node affects which part of the curve
  // Low Cut,Low Cut (Butterworth),High Cut,High Cut (Butterworth),Band Pass,Notch,Peak,Low Shelf,High Shelf,Tilt Shelf,Pultec Low Shelf,All Pass
  Band_Type[band] != BAND_STATE_OFF || Scale != 100 ? (
    transfer = (
      band == 0 ? gfx_band1.filter.svf_magnitude(freq) :
        band == 1 ? gfx_band2.filter.svf_magnitude(freq) :
          band == 2 ? gfx_band3.filter.svf_magnitude(freq) :
            band == 3 ? gfx_band4.filter.svf_magnitude(freq) :
              band == 4 ? gfx_band5.filter.svf_magnitude(freq) :
                band == 5 ? gfx_band6.filter.svf_magnitude(freq) :
                  band == 6 ? gfx_band7.filter.svf_magnitude(freq) :
                    band == 7 ? gfx_band8.filter.svf_magnitude(freq) :
                      band == 8 ? gfx_band9.filter.svf_magnitude(freq) :
                        band == 9 ? gfx_band10.filter.svf_magnitude(freq) :
                          band == 10 ? gfx_band11.filter.svf_magnitude(freq) :
                            band == 11 ? gfx_band12.filter.svf_magnitude(freq) :
                              band == 12 ? gfx_band13.filter.svf_magnitude(freq) :
                                band == 13 ? gfx_band14.filter.svf_magnitude(freq) :
                                  band == 14 ? gfx_band15.filter.svf_magnitude(freq) :
                                    band == 15 ? gfx_band16.filter.svf_magnitude(freq);
    );

    // Prevent magnitude from blowing up
    transfer < 0.001 ? transfer = 0.001;

    // Convert from scalar to db
    m = 20 * log10(transfer);

    // Convert db to screen y
    scy = db_to_y(m);

    // Notch filters transfer is somewhere down the abyss...compensate
    Band_Enabled[band] == 2 && Band_Type[band] == 7 ? scy = grf_h - BOTTOM_MARGIN - gfx_texth;

    scy = min(grf_h - BOTTOM_MARGIN - gfx_texth, scy);

    gfx_r = Band_Red[band]; gfx_g = Band_Green[band]; gfx_b = Band_Blue[band]; gfx_a = 1;

    scy > y ? y = min(y+size, scy) : y = max(y-size, scy);
    gfx_line(x, y, x, scy);
    gfx_a = 0.5;
    gfx_line(x-1, y, x-1, scy);
    gfx_line(x+1, y, x+1, scy);
  ); 
);

/*
 * Draw all node/bands
 */
function draw_nodes() local (band) (
  band = 0;
  loop (5, ( //NUM_BANDS, (
      Band_Enabled[band] ? draw_node(band, Band_Frequency[band], Band_Gain[band], Band_Enabled[band], 0);
      band += 1;
    );
  );
);

/*
 * Draw a normal line
 */
function draw_line(x1, y1, x2, y2)
(
  x1 = floor(x1);
  x2 = floor(x2);
  x2 = floor(x2);
  y2 = floor(y2);
  color_OEQ();
  gfx_a = 1;
  gfx_line(x1, y1, x2, y2, 1); 
);

/*
 * Draw a thick line
 */
function draw_thick_line(x1, y1, x2, y2)
(
  x1 = floor(x1);
  x2 = floor(x2);
  x2 = floor(x2);
  y2 = floor(y2);
  color_OEQ();
  gfx_a = 1;
  gfx_line(x1, y1, x2, y2, 1); 
  gfx_a = 0.25;
  gfx_line(x1-1, y1-1, x2, y2, 1);
  gfx_line(x1-1, y1+1, x2, y2, 1);
  //gfx_line(x1-1, y1-1, x2+1, y2-1, 1);
  //gfx_line(x1-1, y1+1, x2+1, y2+1, 1);
);

/*
 * Draw the colored filter bands
 */
function draw_filter_bands()
  local(xf, step, xo1, yo1, freq, m, scy, midp, tx0, lx0, x0, y0, x1, y1, bottom)
( 
  // Frequency to track
  xf = 0;

  // Go across the screen in these steps
  step = grf_w / 1000;
  gfx_x = 0;
  gfx_y = (grf_h / 2) - gfx_texth;

  gfx_r = 0.6; gfx_g = 0.6; gfx_b = 0.6; gfx_a = 1.0;

  bottom = grf_h - BOTTOM_MARGIN - gfx_texth;

  midp = db_to_y(0);

  band = 5;

  loop(NUM_BANDS-5, (
      state = Band_Enabled[band];
      state == BAND_STATE_ENABLED ? ( 

        gfx_r = Band_Red[band]; gfx_g = Band_Green[band]; gfx_b = Band_Blue[band];

        xo1 = 0;
        yo1 = (grf_h - gfx_texth)*0.5;
        xf = 0;
        while (
          freq = scx_to_freq(xf);

          transfer = (
            band == 0 ? gfx_band1.filter.svf_magnitude(freq) :
              band == 1 ? gfx_band2.filter.svf_magnitude(freq) :
                band == 2 ? gfx_band3.filter.svf_magnitude(freq) :
                  band == 3 ? gfx_band4.filter.svf_magnitude(freq) :
                    band == 4 ? gfx_band5.filter.svf_magnitude(freq) :
                      band == 5 ? gfx_band6.filter.svf_magnitude(freq) :
                        band == 6 ? gfx_band7.filter.svf_magnitude(freq) :
                          band == 7 ? gfx_band8.filter.svf_magnitude(freq) :
                            band == 8 ? gfx_band9.filter.svf_magnitude(freq) :
                              band == 9 ? gfx_band10.filter.svf_magnitude(freq) :
                                band == 10 ? gfx_band11.filter.svf_magnitude(freq) :
                                  band == 11 ? gfx_band12.filter.svf_magnitude(freq) :
                                    band == 12 ? gfx_band13.filter.svf_magnitude(freq) :
                                      band == 13 ? gfx_band14.filter.svf_magnitude(freq) :
                                        band == 14 ? gfx_band15.filter.svf_magnitude(freq) :
                                          band == 15 ? gfx_band16.filter.svf_magnitude(freq);
          );

          // Prevent magnitude from blowing up
          transfer < 0.001 ? transfer = 0.001;

          // Convert from scalar to db
          m = 20 * log10(transfer);

          // Convert db to screen y
          scy = db_to_y(m);

          xo1 > 0 ? (
            x0 = xo1; y0 = yo1;
            x1 = xf; y1 = scy;

            yo1 < bottom && scy < bottom ? (
              gfx_a = 1.0;

              // Clip line against bottom
              y1 > bottom ? (
                delta = (bottom - y0) / (y1 - y0);
                x1 = x0 + delta * (x1 - x0);
                y1 = bottom;
              );

              y0 > bottom ? (
                delta = (bottom - y1) / (y0 - y1);
                x0 = x1 + delta * (x0 - x1);
                y0 = bottom;
              );

              // Thinner line in very compact mode, thicker if not
              (very_compact_width || very_compact_height) ? Kaetz=0://draw_line(x0, y0, x1, y1) :
               katze=0;
               // draw_thick_line(x0, y0, x1, y1);
            );
            //aaa = max(aaa,band_enabled[5]);
            // Fill in
            gfx_a = 0.5;
            tx0=xf|0;
            lx0=xo1|0;
            y1 = min(scy, bottom);
            y0 = min(yo1, bottom);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            transfer2 = (
              band == 0 ? gfx_band1.filter.svf_magnitude(freq) :
                band == 1 ? gfx_band2.filter.svf_magnitude(freq) :
                  band == 2 ? gfx_band3.filter.svf_magnitude(freq) :
                    band == 3 ? gfx_band4.filter.svf_magnitude(freq) :
                      band == 4 ? gfx_band5.filter.svf_magnitude(freq) :
                        band == 5 ? gfx_band6.filter.svf_magnitude(freq) :
                          band == 6 ? gfx_band1.filter.svf_magnitude(freq) :
                            band == 7 ? gfx_band2.filter.svf_magnitude(freq) :
                              band == 8 ? gfx_band3.filter.svf_magnitude(freq) :
                                band == 9 ? gfx_band4.filter.svf_magnitude(freq) :
                                  band == 10 ? gfx_band5.filter.svf_magnitude(freq) :
                                    band == 11 ? gfx_band12.filter.svf_magnitude(freq) :
                                      band == 12 ? gfx_band13.filter.svf_magnitude(freq) :
                                        band == 13 ? gfx_band14.filter.svf_magnitude(freq) :
                                          band == 14 ? gfx_band15.filter.svf_magnitude(freq) :
                                            band == 15 ? gfx_band16.filter.svf_magnitude(freq);
            );
            
            // Prevent magnitude from blowing up
            transfer2 < 0.001 ? transfer2 = 0.001;
            
            // Convert from scalar to db
            m = 20 * log10(transfer2);
            
            // Convert db to screen y
            scy2 = db_to_y(m);
            
            
            
            
            
            
            
            
            
            //node_drag_mode | gen_dragging ? (//gen_dragging ? (//state == BAND_STATE_ENABLED ? ( //FILL_FLAG
              tx0>lx0 ? (
                color_OEQ();
                gfx_ext_retina == 2 ? gfx_triangle(xo1, y0+2, xf-1, y1+2, xf-1, midp, xo1, midp) :
                  gfx_a = 0.37;
                  gfx_triangle(xo1, y0+1, xf-1, y1+1, xf-1, scy2, xo1, scy2);
              );
            //);
          );

          xo1 = xf; yo1 = scy;

          xf += step;
          xf < grf_w;
        );

      );

      band += 1;
    );
  );
  color_OEQ(); gfx_a = 0.6; gfx_line(0,midp, grf_w, midp);
);

/*
 * Draw the response for all filters
 */
function draw_filter_response(group, red, green, blue)
  local(xf, step, xo1, yo1, freq, m, scy, midp, tx0, lx0, x0, y0, x1, y1, delta, bottom,
    be0, be1, be2, be3, be4, be5, be6, be7, be8, be9, be10, be11, be12, be13, be14, be15,
    bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7, bg8, bg9, bg10, bg11, bg12, bg13, bg14, bg15)
(
  // Go across the screen in these steps
  step = 1; //grf_w / 1000;
  gfx_x = 0;
  gfx_y = (grf_h / 2) - gfx_texth;

  gfx_r = red; gfx_g = green; gfx_b = blue; gfx_a = 1.0;

  be0 = (Band_Enabled[0] == BAND_STATE_ENABLED) && (Band_Group[0] == group);
  be1 = (Band_Enabled[1] == BAND_STATE_ENABLED) && (Band_Group[1] == group);
  be2 = (Band_Enabled[2] == BAND_STATE_ENABLED) && (Band_Group[2] == group);
  be3 = (Band_Enabled[3] == BAND_STATE_ENABLED) && (Band_Group[3] == group);
  be4 = (Band_Enabled[4] == BAND_STATE_ENABLED) && (Band_Group[4] == group);
  be5 = (Band_Enabled[5] == BAND_STATE_ENABLED) && (Band_Group[5] == group);
  be6 = 0; //(Band_Enabled[6] == BAND_STATE_ENABLED) && (Band_Group[6] == group);
  be7 = 0; //(Band_Enabled[7] == BAND_STATE_ENABLED) && (Band_Group[7] == group);
  be8 = 0; //(Band_Enabled[8] == BAND_STATE_ENABLED) && (Band_Group[8] == group);
  be9 = 0; //(Band_Enabled[9] == BAND_STATE_ENABLED) && (Band_Group[9] == group);
  be10 = 0; //(Band_Enabled[10] == BAND_STATE_ENABLED) && (Band_Group[10] == group);
  be11 = 0; //(Band_Enabled[11] == BAND_STATE_ENABLED) && (Band_Group[11] == group);
  be12 = 0; //(Band_Enabled[12] == BAND_STATE_ENABLED) && (Band_Group[12] == group);
  be13 = 0; //(Band_Enabled[13] == BAND_STATE_ENABLED) && (Band_Group[13] == group);
  be14 = 0; //(Band_Enabled[14] == BAND_STATE_ENABLED) && (Band_Group[14] == group);
  be15 = 0; //(Band_Enabled[15] == BAND_STATE_ENABLED) && (Band_Group[15] == group);

  bottom = grf_h - BOTTOM_MARGIN - gfx_texth;

    gfx_ext_flags == 1 ? (bottom += gfx_texth); // DEBUG FLAG

  xo1 = 0;
  yo1 = (grf_h - gfx_texth)*0.5;
  xf = 0;
  while (
    freq = scx_to_freq(xf);
    freq > 22049 ? freq = 22049;

    // Apply the filters
    m = 1.0;

    be0 ? m *= gfx_band1.filter.svf_magnitude(freq);
    be1 ? m *= gfx_band2.filter.svf_magnitude(freq);
    be2 ? m *= gfx_band3.filter.svf_magnitude(freq);
    be3 ? m *= gfx_band4.filter.svf_magnitude(freq);
    be4 ? m *= gfx_band5.filter.svf_magnitude(freq);
    be5 ? m *= gfx_band6.filter.svf_magnitude(freq);
    be6 ? m *= gfx_band7.filter.svf_magnitude(freq);
    be7 ? m *= gfx_band8.filter.svf_magnitude(freq);
    be8 ? m *= gfx_band9.filter.svf_magnitude(freq);
    be9 ? m *= gfx_band10.filter.svf_magnitude(freq);
    be10 ? m *= gfx_band11.filter.svf_magnitude(freq);
    be11 ? m *= gfx_band12.filter.svf_magnitude(freq);
    be12 ? m *= gfx_band13.filter.svf_magnitude(freq);
    be13 ? m *= gfx_band14.filter.svf_magnitude(freq);
    be14 ? m *= gfx_band15.filter.svf_magnitude(freq);
    be15 ? m *= gfx_band16.filter.svf_magnitude(freq);

    // Prevent magnitude from blowing up
    m < 0.001 ? m = 0.001;

    // Convert from scalar to db
    m = 20 * log10(m);

    // Convert db to screen y
    scy = db_to_y(m);

    xo1 > 0 && !(yo1 > bottom && scy > bottom) ? (
      x0 = xo1; y0 = yo1;
      x1 = xf; y1 = scy;
      
      // Clip line against bottom
      y1 > bottom ? (
        delta = (bottom - y0) / (y1 - y0);
        x1 = x0 + delta * (x1 - x0);
        y1 = bottom;
      );

      y0 > bottom ? (
        delta = (bottom - y1) / (y0 - y1);
        x0 = x1 + delta * (x0 - x1);
        y0 = bottom;
      );

      gfx_a = 1;

      gfx_ext_retina == 2 ? (
        draw_thick_line(x0, y0, x1, y1);

        // If we're not in very compact mode then thicken the line up more
        (!very_compact_width && !very_compact_height) ? (
          abs(x1 - x0) > abs(y1 - y0) ? (
            draw_thick_line(x0, y0+1, x1, y1+1);
            draw_thick_line(x0, y0-1, x1, y1-1);
          ) : ( 
            draw_thick_line(x0+1, y0, x1+1, y1);
            draw_thick_line(x0-1, y0, x1-1, y1);
          );
        );
      ) : (
        // Thinner line in very compact mode, thicker if not
        (very_compact_width || very_compact_height) ? draw_line(x0, y0, x1, y1) :
          draw_thick_line(x0, y0, x1, y1);
      )

      /*
      midp = (grf_h - gfx_texth) / 2;

      // Fill in positive gain (above mid line)
      scy < midp-3 ? ( 
        gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.3;

        tx0=xf|0;
        lx0=xo|0;
        tx0>lx0 ? (
          gfx_triangle(xo1, yo1+2, xf-1, scy+2, xf-1, midp, xo1, midp);
        );
      );

      // Fill in negative gain (below mid line)
      scy > midp+3 ? ( 
        gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.2;

        tx0=xf|0;
        lx0=xo|0;
        tx0>lx0 ? (
          gfx_triangle(xo1, yo1-2, xf-1, scy-2, xf-1, midp, xo1, midp);
        );
      );
      */
    );

    xo1 = xf; yo1 = scy;

    xf += step;
    xf < grf_w;
  );
);

/*
 * Draw the eq grid
 */
function draw_grid() local (db, y, scx, size) (

  //spectrum.draw_grid(1);
!very_compact_height && !very_compact_width ? (
  gfx_r=gfx_g=gfx_b=1; gfx_a=0.22;  gfx_setfont(2,"Arial",10,'b');
  mytempx = 20;
  loop(8,
  S2_grid_x = freq_to_per(mytempx,100) * grf_w/100;
  gfx_x = S2_grid_x+1*zoom; gfx_y = grf_h - gfx_texth;
  mytempx < 80 && mytempx != 40 && mytempx != 60 ? (gfx_a=0.52;gfx_drawnumber(mytempx,0);gfx_drawstr("");gfx_a=0.22);
  gfx_line(S2_grid_x,0,S2_grid_x,grf_h);
  mytempx += 10;
  );
  gfx_x = S2_grid_x+8*zoom; gfx_y = grf_h - gfx_texth;
  //gfx_a=0.52;gfx_drawstr("100");gfx_a=0.22;
  

  loop(9,
  S2_grid_x = freq_to_per(mytempx,100) * grf_w/100;
  
  gfx_x = S2_grid_x+1*zoom; gfx_y = grf_h - gfx_texth;
  mytempx < 700 && mytempx != 400 && mytempx != 600 ? (gfx_a=0.52;gfx_drawnumber(mytempx,0);gfx_drawstr("");gfx_a=0.22);
  
  gfx_line(S2_grid_x,0,S2_grid_x,grf_h);
  mytempx += 100;
  );
  loop(10,
  S2_grid_x = freq_to_per(mytempx,100) * grf_w/100;
  
  gfx_x = S2_grid_x+1*zoom; gfx_y = grf_h - gfx_texth;
  mytempx < 6000 ? (gfx_a=0.52;gfx_drawnumber(mytempx/1000,0);gfx_drawstr("k");gfx_a=0.22);
  
  gfx_line(S2_grid_x,0,S2_grid_x,grf_h);
  mytempx += 1000;
  );
  gfx_a=0.52;gfx_drawstr("10k");gfx_a=0.22;
  
  S2_grid_x = freq_to_per(12000,100) * grf_w/100;
  gfx_line(S2_grid_x,0,S2_grid_x,grf_h);
  S2_grid_x = freq_to_per(14000,100) * grf_w/100;
  gfx_line(S2_grid_x,0,S2_grid_x,grf_h);
  
  // ICH !!
  
  /////////////////////7
 );
 
  gfx_r=gfx_g=0.3; gfx_b=0; gfx_a=1.0;

  // Draw db scale button area
  /*
  gfx_ext_retina == 2 ? (
    gfx_rect(grf_w - 40, 0, grf_w - (grf_w - 40), gfx_texth*1.2);
    gfx_circle(grf_w - 40, gfx_texth/2+2, 12, 1);
  ) : ( 
    gfx_rect(grf_w - 22, 0, grf_w - (grf_w - 30), gfx_texth*1.7);
    gfx_circle(grf_w - 22, gfx_texth/2+2, 12, 1);
  );
  */

  // Draw gain db
  gfx_y=-100;

  db = DB_EQ_RANGE;
  //db = 5;
  while(
    y = db_to_y(db);

    scx = grf_w;

    y > gfx_y ? (
      gfx_r=gfx_g=gfx_b=1; gfx_a=0.3;
      
      abs(db) <= DB_EQ_RANGE*2 ? (
      !very_compact_height && !very_compact_width ? (
        gfx_line(0, y, grf_w-(gfx_texth*2.2), y, 0);
        ):(
        db == 0 ? (color_OEQ(); gfx_a = 0.65);
        gfx_line(0, y, grf_w, y, 0);
        );
        color_OEQ(); gfx_a=0.8;
        //gfx_r=gfx_g=0.75; gfx_b=0; gfx_a=1.0;
        gfx_x = scx-gfx_texth*(gfx_ext_retina == 2 ? 2 : 2); gfx_y = y - gfx_texth/2;
        !very_compact_height && !very_compact_width ? db > 0 ? gfx_printf("+%d", db) : db < 0 ? gfx_printf("%d", db) : gfx_printf("  %d", db);
      ) : (

        y < grf_h - gfx_texth*2 - BOTTOM_MARGIN ? gfx_line((gfx_texth*2), y, grf_w - gfx_texth, y, 0);

      );
      gfx_y += gfx_texth;
    );
    db -= DB_EQ_RANGE_STEPS;
    
    gfx_ext_flags == 0 ? ( // DEBUG FLAG
    y < grf_h - gfx_texth*2 - BOTTOM_MARGIN;
    ):(
    y <= grf_h;
    );

  );
);

/*
 * Return true if the mouse is over the freq and dB
 */
function is_node_selected(band) local (x, y, d) ( 
  x = get_filter_x(band);
  y = get_filter_y(band);
  d = sqrt((x - ree_mouse_x)^2 + (y - ree_mouse_y)^2);
  d < 12;
);

/*
 * Return nearest node to mouse within dist or -1 if none
 */
function get_node_in_range(dist)
  local(band, found, founddist, dist, x, y, d)
(
  band = 0;
  found = -1;
  founddist = 1000000;

  while( 
    Band_Enabled[band] != BAND_STATE_OFF ? (
      x = get_filter_x(band);
      y = get_filter_y(band);

      d = sqrt((x - ree_mouse_x)^2 + (y - ree_mouse_y)^2);
      d < founddist && d < dist ? (
        founddist = d;
        found = band;
      );
    );
    band += 1;
    band < NUM_BANDS;
  );

  found;
);

/*
 * Return node nearby to mouse or -1 if none
 */
function get_nearby_node()
  local(band, found, founddist, dist, x, y, d)
(
  get_node_in_range(gfx_ext_retina == 1 ? dist = sqrt(70 * 70) : dist = sqrt(140 * 140));
);

/*
 * Return node nearest to mouse within node halo dist or -1 if none
 */
function get_nearest_node()
  local(band, found, founddist, dist, x, y, d)
(
  get_node_in_range(gfx_ext_retina == 1 ? dist = sqrt(12 * 12) : dist = sqrt(24 * 24));
);

/*
 * Return readable string of frequency
 */
function get_freq_str(read_freq) instance(frq) ( 
  frq = #;
  read_freq < 100 ? ( sprintf(frq,"%.1f Hz", read_freq) ) :
    (read_freq < 1000 ? ( sprintf(frq,"%.0f Hz", read_freq) ) : ( 
      (read_freq < 10000 ? ( sprintf(frq,"%.2f kHz", read_freq/1000) ) : ( 
        sprintf(frq,"%.1f kHz", read_freq/1000);
      )
    )
  ));
  frq;
);

/*
 * Draw a round cornered rectangle
 */
function draw_filled_rect(x, y, w, h, rad, alias) ( 
    gfx_circle(x+rad, y+rad, rad, 1, alias);
    gfx_circle(x+w-rad-1, y+rad, rad, 1, alias);
    gfx_circle(x+w-rad-1, y+h-rad-1, rad, 1, alias);
    gfx_circle(x+rad, y+h-rad-1, rad, 1, alias);

    gfx_rect(x, y+rad, rad*2, h-rad*2, alias);
    gfx_rect(x+w-rad*2, y+rad, rad*2, h-rad*2, alias);
    gfx_rect(x+rad, y, w-rad*2, rad*2, alias);
    gfx_rect(x+rad, y+h-rad*2, w-rad*2, rad*2, alias);

    gfx_rect(x+rad, y+rad, w-rad*2, h-rad*2, alias);
);

/*
 * Return true if mouse is within current window boundaries
 */
function mouse_within_window() ( 
  ree_mouse_x >= 0 && ree_mouse_x < grf_w && ree_mouse_y >= 0 && ree_mouse_y < grf_h;
);

/*
 * Return true if mouse is within panel
 */
function mouse_within_panel() ( 
  ShowPanel && (ree_mouse_x >= panel_x && ree_mouse_x < panel_x+panel_w && ree_mouse_y >= panel_y && ree_mouse_y < panel_y+panel_h);
);

/*
 * Draw the info panel showing frequency, note, cent and dB
 */
function draw_info_panel(note_select)
  local(x, y, xbase, read_freq, read_amp, q, band, C0, semi, octave, note, cent, keys, nn, note_freq, centstr, width, rect_height, slope, panel_offset_x)
 (
  hide = 0;
  mouse_within_window() || node_drag_mode && !box_region_drag_mode ? 
  (
    gfx_set(0, 0.5, 1);
    read_freq = note_select == 0 ? spectrum.x_to_freq(ree_mouse_x) : note_select;
    read_amp = y_to_db(ree_mouse_y);
    
    node_drag_mode == 1 ?
    (
      read_freq = Band_Frequency[node_drag];
      read_amp = y_to_db(get_filter_y(node_drag));
      q = Band_Q[node_drag];
      found_node = node_drag;
    );
    
    node_drag_mode == 0 ? (
      q = -1;
      slope = -1;
      node_hover = do_listen ? get_nearest_node() : get_nearby_node();

      node_hover == -1 ? node_hover = listen_node;

      node_hover != -1 ? ( 
        band = node_hover;
        q = Band_Q[band];
        read_freq = Band_Frequency[band];
        read_amp = y_to_db(get_filter_y(band));
        Band_Type[band] == FILTER_LOW_CUT || Band_Type[band] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[band] == FILTER_HIGH_CUT || Band_Type[band] == FILTER_HIGH_CUT_BUTTERWORTH ? slope = 6 + Band_Slope[band] * 6;
        band = NUM_BANDS;

        // Hide info panel if it's too low
        y = db_to_y(read_amp);
        y > grf_h - gfx_texth - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM) ? hide = 1;
      );
      found_node = node_hover;
    );
    
    //gfx_x = gfx_y = 50;
    //gfx_drawnumber(found_node,0);
    found_node > 5 ? hide = 1;
    //Only show info while hovering band point or in listen mode (handy to see freq etc)
    node_drag_mode || node_hover != -1 || do_listen && !hide ? (

      x = freq_to_scx(read_freq);
      y = db_to_y(read_amp);
    
      gfx_ext_retina != 2 ? x += 20;
      rect_height = 4.2;
      q != -1 ? rect_height += 1;
      slope != -1 ? rect_height += 1;
      width = 140;
      
      //CUSTOM
      panel_offset_x = 50;
      panel_offset_y = 60;
      
      gfx_ext_retina != 2 ? ( width -= 50; panel_offset_x += 45; );

      gfx_x = x - 50;

      // Clamp x position so the panel is never off screen horizontally
      gfx_ext_retina != 2 ? (
        gfx_x = max(32, gfx_x);
        gfx_x = min(grf_w - width - 18, gfx_x);
      ) : ( 
        gfx_x = max(48, gfx_x);
        gfx_x = min(grf_w - width - 32, gfx_x);
      );

      xbase = gfx_x;
      
      gfx_ext_retina != 2 ? (
        panel_offset_y -= 130;
      ):(
       panel_offset_y -= 190;
     );
     
      //Show panel below band node when dragged under 0db
      read_amp > 0 ?
      (
        gfx_y = y - gfx_texth * rect_height - gfx_texth;
        gfx_y < 14 ? ( 
          gfx_y = y - rect_height - panel_offset_y - BOTTOM_MARGIN; //Below
        );
      ):
      (
        gfx_y = y - rect_height - panel_offset_y - BOTTOM_MARGIN; //Below
        gfx_y > grf_h - (gfx_texth * rect_height) - gfx_texth - BOTTOM_MARGIN - (RAISED_BOTTOM * ENABLE_RAISED_BOTTOM) ? (
          gfx_y = y - gfx_texth * rect_height - gfx_texth;
        );
      );
      
      gfx_ext_retina != 2 ? rect_height += 1.0;
      
      //draw_filled_rect(gfx_x-15, gfx_y-15, width+10, gfx_texth*rect_height+10, 8, 1);
      gfx_ext_retina != 2 ?
      (
        gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2; //shadow
        gfx_rect(gfx_x-15,gfx_y-7,width+5, gfx_texth*rect_height);
        
        gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.3; //black border
        gfx_rect(gfx_x-12,gfx_y-15,width-1, gfx_texth*rect_height+1);
        
        gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.2; //Highlight
        gfx_rect(gfx_x-11,gfx_y-14,width-3, gfx_texth*rect_height-1);
        
        gfx_gradrect(gfx_x-10, gfx_y-13, width-5, gfx_texth*rect_height-3,
          0.1 ,0.1, 0.1, 0.4,
          0.0, 0.0, 0.0, 0 / width,
          0.0, 0.0, 0.0, -0.0025 /gfx_texth*rect_height);  
      ) :
      (
        gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.1; //shadow
        gfx_rect(gfx_x-22,gfx_y-4,width+14, gfx_texth*rect_height+3);
        
        gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2; //black border
        gfx_rect(gfx_x-18,gfx_y-17,width+5, gfx_texth*rect_height+5);
        
        gfx_r = 1; gfx_g = 1; gfx_b = 1; gfx_a = 0.1; //Highlight
        gfx_rect(gfx_x-15,gfx_y-15,width-1, gfx_texth*rect_height-1);
        
        gfx_gradrect(gfx_x-12, gfx_y-12, width-7,  gfx_texth*rect_height-7,
          0.1 ,0.1, 0.1, 0.3,
          0.0, 0.0, 0.0, 0 / width,
          0.0, 0.0, 0.0, -0.0025 /gfx_texth*rect_height); 
      );
   
      gfx_ext_retina != 2 ? x -= 17;

      //Text Color
      gfx_r = 1; gfx_g = 1; gfx_b = 0.3; gfx_a = 1;
  
      gfx_x = xbase;
      gfx_y -= 6;

      read_freq < 100 ? ( gfx_drawstr(sprintf(#,"%.1f Hz", read_freq)) ) :
        (read_freq < 1000 ? ( gfx_drawstr(sprintf(#,"%.0f Hz", read_freq)) ) : ( 
          (read_freq < 10000 ? ( gfx_drawstr(sprintf(#,"%.2f kHz", read_freq/1000)) ) : ( 
            gfx_drawstr(sprintf(#,"%.1f kHz", read_freq/1000));
          )
        )
      ));
      gfx_r = 180 / 255; gfx_g = 180 / 255; gfx_b = 180 / 255; gfx_a = 1.0;
      // 440Hz is A4, get C0 as offset from that
      C0 = 440 * pow(2, -4.75);
  
      // Get seminotes (note number), octave and note within octave
      semi = round(12 * log2(read_freq / C0));
      octave = floor(semi / 12);
      note = (semi % 12);
  
      // Calculate cents
      note_freq = C0 * 2.71828 ^ (0.0577623 * semi);
      cent = floor(1200 * log2(read_freq / note_freq));
  
      // The above math goes a bit screwy for our -1 lowest octave.
      // We get a kind of inverse reflection.  This fixes it up.
      octave == -1 ? (
        note = (13 - (-(semi))) % 12;
        cent = -(99 - cent);
      );
 
      // Display it all
      keys="CCDDEFFGGAAB";
  
      strcpy_substr(nn=#,keys,note,1);
      note==1 || note==3 || note==6 || note==8 || note==10 ? strcat(nn,"#");
  
      strcat(nn, int2str(octave));
  
      cent < 0 ? strcpy(centstr=#,"-") : strcpy(centstr=#,"+");
      abs(cent) <= 9 ? strcat(centstr, "0");
  
      strcat(centstr, sprintf(#, "%d", abs(cent)));
      
      //Offset Info panels
      gfx_x = xbase;
      gfx_y += gfx_texth+2;
      gfx_drawstr(nn); 

      gfx_x = xbase + (gfx_ext_retina != 2 ? 35 : 65);
      gfx_drawstr(centstr);
      
      gfx_x = xbase;
      gfx_y += gfx_texth+2;
      gfx_drawstr(sprintf(#,"%.1f dB", read_amp));
  
      q > -1 ? (
        gfx_x = xbase;
        gfx_y += gfx_texth+2;
        band = -1;
        node_drag_mode != 0 ? band = node_drag : node_hover != -1 ? band = node_hover;
        band != -1 && Band_Type[band] == 10 ? gfx_drawstr(sprintf(#,"Cut: %.2f", q/40))
        : gfx_drawstr(sprintf(#,"Q: %.2f", q));
      );
  
      slope > -1 ? (
        gfx_x = xbase;
        gfx_y += gfx_texth+2;
        gfx_drawstr(sprintf(#,"S: %d dB", slope));        
      );
    );
  );
);






/*
 * Draw the listener boundaries and set the Q for the bandpass filter
*/
function draw_listen_helper()
  local (mouse_spec, lread_freq, rread_freq, lfreq, rfreq, lx, rx, node, width, gain, sy)
(
  gfx_r = 240 / 255; gfx_g = 101 / 255; gfx_b = 76 / 255;
  
  listen_freq = spectrum.x_to_freq(ree_mouse_x);

  mouse_spec = (ree_mouse_x - spectrum.left_margin) / (grf_w - spectrum.left_margin - spectrum.right_margin);

  lread_freq = spectrum.min_freq * exp(spectrum.freq_log_max * (mouse_spec - listen_width));
  rread_freq = spectrum.min_freq * exp(spectrum.freq_log_max * (mouse_spec + listen_width));

  lfreq = lread_freq;
  rfreq = rread_freq;

  lx = spectrum.freq_to_x(lfreq);
  rx = spectrum.freq_to_x(rfreq);

  node_drag_mode == 1 || node_hover != -1  || listen_node != -1 ? (

    node_drag_mode == 1 ? node = node_drag : node = node_hover;

    listen_node != -1 ? node = listen_node;

    listen_freq = Band_Frequency[node];
    listen_q = Band_Q[node];
    listen_group = Band_Group[node];
    width = listen_filter.svf_qtobw(listen_q);

    // Peak or notch? - Has a wider band range
    Band_Type[node] == FILTER_PEAK || Band_Type[node] == FILTER_NOTCH ? ( 
      width *= 2;
    );

    lread_freq = listen_freq / (pow(2, width/2));
    rread_freq = listen_freq * (pow(2, width/2));

    lfreq = lread_freq;
    rfreq = rread_freq;

    lx = spectrum.freq_to_x(lfreq);
    rx = spectrum.freq_to_x(rfreq);

    listen_q = listen_filter.svf_bwtoq(width);

    // Peak, Band Pass or Notch?
    Band_Type[node] == FILTER_PEAK || Band_Type[node] == FILTER_BAND_PASS || Band_Type[node] == FILTER_NOTCH ? ( 

      Band_Type[node] == FILTER_PEAK ? (
        gain = Band_Enabled[node] == BAND_STATE_ENABLED ? Band_Gain[node] : 0;
        listen_filter.svf_listen_eq(lfreq, rfreq, Band_Frequency[node], Band_Q[node], db_to_gain(gain));
      ) : (
        Band_Type[node] == FILTER_BAND_PASS ? (
          listen_filter.svf_listen_bs(lfreq, rfreq, Band_Frequency[node], Band_Q[node]);
        ) : ( 
          listen_filter.svf_bp2(listen_freq, Band_Q[node]);
        );
      );

      gfx_a = 1.0;
      gfx_line(lx, 0, lx, grf_h - BOTTOM_MARGIN);
      gfx_line(rx, 0, rx, grf_h - BOTTOM_MARGIN);

      gfx_a = 0.8;
      gfx_line(lx-1, 0, lx-1, grf_h - BOTTOM_MARGIN);
      gfx_line(rx+1, 0, rx+1, grf_h - BOTTOM_MARGIN);

      gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2;
      gfx_rect(lx-3, 0, 2, grf_h - BOTTOM_MARGIN);

      gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2;
      gfx_rect(rx+2, 0, 2, grf_h - BOTTOM_MARGIN);

    ) : (
      // Cut or shelf
      gfx_a = 1.0;
      lx = spectrum.freq_to_x(listen_freq);

      Band_Type[node] == FILTER_LOW_CUT ? (
        listen_filter.svf_lp(listen_freq, Band_Q[node], Band_Slope[node]);
      );
      Band_Type[node] == FILTER_LOW_CUT_BUTTERWORTH ? (
        listen_filter.svf_lpb(listen_freq, Band_Slope[node]);
      );

      Band_Type[node] == FILTER_LOW_CUT_ANALOG ? (
        listen_filter.svf_lp(listen_freq, 0.701, 3);
      );
      Band_Type[node] == FILTER_HIGH_CUT_ANALOG ? (
        listen_filter.svf_hp(listen_freq, 0.701, 3);
      );

      Band_Type[node] == FILTER_LOW_SHELF ? (
        lx = spectrum.freq_to_x(rfreq);
        rfreq = min(max(rfreq, 10), 44000);
        listen_filter.svf_lpb(rfreq, 3);
      );
      Band_Type[node] == FILTER_HIGH_SHELF ? (
        lx = spectrum.freq_to_x(lfreq);
        lfreq = min(max(lfreq, 10), 44000);
        listen_filter.svf_hpb(lfreq, 3);
      );

      Band_Type[node] == FILTER_HIGH_CUT ? (
        listen_filter.svf_hp(listen_freq, Band_Q[node], Band_Slope[node]);
      );
      Band_Type[node] == FILTER_HIGH_CUT_BUTTERWORTH ? (
        listen_filter.svf_hpb(listen_freq, Band_Slope[node]);
      );

      Band_Type[node] == FILTER_TILT_SHELF || Band_Type[node] == FILTER_ALL_PASS ? (
        listen_filter.svf_bypass();
      );

      Band_Type[node] == FILTER_PULTEC_LOW_SHELF ? (
        // Pultec style - maybe we can do better?
        lx = spectrum.freq_to_x(rfreq);
        rfreq = min(max(rfreq, 10), 44000);
        listen_filter.svf_lpb(rfreq, 3);
      );

      Band_Type[node] != FILTER_TILT_SHELF && Band_Type[node] != FILTER_ALL_PASS ? gfx_line(lx, 0, lx, grf_h - BOTTOM_MARGIN);
    );

  ) : (


    // listen_gain = db_to_gain(8);
    !gen_dragging && mouse_cap & 1 ? (
      listen_gain = db_to_gain(y_to_db(ree_mouse_y));

      sy = ree_mouse_y;

      sy < grf_h - BOTTOM_MARGIN ? (
        gfx_a = 1.0;
        gfx_line(lx, sy, rx, sy);
        gfx_line(lx, sy+1, rx, sy+1);
      );

    ) : listen_gain = db_to_gain(0);

    listen_filter.svf_listen_eq(lfreq, rfreq, listen_freq, 0.7071, db_to_gain(0));
  
    gfx_a = 1.0;
    gfx_line(lx, 0, lx, grf_h - BOTTOM_MARGIN);
    gfx_line(rx, 0, rx, grf_h - BOTTOM_MARGIN);

    gfx_a = 0.8;
    gfx_line(lx-1, 0, lx-1, grf_h - BOTTOM_MARGIN);
    gfx_line(rx+1, 0, rx+1, grf_h - BOTTOM_MARGIN);

    gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2;
    gfx_rect(lx-3, 0, 2, grf_h - BOTTOM_MARGIN);

    gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.2;
    gfx_rect(rx+2, 0, 2, grf_h - BOTTOM_MARGIN);
  );
);

/*
 * Animated apha glow effect for node selection halos
 */
function glow_node_selection_halo() local(amount, curr_time, diff_time, tstart, tend) (
  amount = 0.5 + sin(band_selected_circle_phase * 2 * $pi) * 0.5;

  curr_time = time_precise();
  diff_time = curr_time - band_selected_circle_last_time;
  band_selected_circle_last_time = curr_time;

  // Time dependent...
  band_selected_circle_phase += 1.0 * diff_time;

  band_selected_circle_phase > 1.0 ? band_selected_circle_phase -= 1.0;

  // Interpolate within desired range
  tstart = 0.4;
  tend = 0.8;
  band_selected_circle_alpha = tstart + (tend - tstart) * amount;
);

/*
 * Create a band
 */
function create_band(band, x, y) local (m, g, f, i, enabledBands) (
  f = scx_to_freq(x);
  g = y_to_db(y);

  // See if any bands are enabled
  enabledBands = 0;
  i = 0;
  while ( 
    Band_Enabled[i] == BAND_STATE_ENABLED ? enabledBands += 1;
    i += 1;
    i < NUM_BANDS;
  );

  // No bands exist, default group is stereo
  enabledBands == 0 ? selected_node_group = 0;

  Band_Enabled[band] = BAND_STATE_ENABLED;
  Band_Group[band] = selected_node_group;
  Band_Frequency[band] = f;
  Band_Gain[band] = g;
  Band_Q[band] = 0.7071;
  Band_Slope[band] = 1; //12db

  // Select band type based on frequency
  f < 20 ? ( 
    Band_Type[band] = FILTER_LOW_CUT;
    Band_Gain[band] = 0;
  ) : f < 30 ? ( 
    Band_Type[band] = FILTER_LOW_SHELF;
    Band_Q[band] = 0.36;
  ) : f < 10000 ? ( 
    Band_Type[band] = FILTER_PEAK;
  ) : f < 15000 ? ( 
    Band_Type[band] = FILTER_HIGH_SHELF;
    Band_Q[band] = 0.36;
  ) : ( 
    Band_Type[band] = FILTER_HIGH_CUT;
    Band_Gain[band] = 0;
  );

  set_filter_from_xy(band, x, y);

  flag_filter_update(band);

  filters_to_sliders();
);

/*
 * Split the band
 */
function split_band(band, other) (
  Band_Enabled[band] = Band_Enabled[other];
  Band_Group[band] = 1;
  Band_Type[band] = Band_Type[other];
  Band_Frequency[band] = Band_Frequency[other];
  Band_Gain[band] = Band_Gain[other];
  Band_Q[band] = Band_Q[other];
  Band_Slope[band] = Band_Slope[other];

  Band_Group[other] = 2;

  Band_Update[band] = 1;
  Band_GfxUpdate[band] = 1;
  Band_Update[other] = 1;
  Band_GfxUpdate[other] = 1;

  flag_filter_update(band);
  flag_filter_update(other);

  filters_to_sliders();
);

/*
 * Split the band
 */
function duplicate_band(band, other) (
  Band_Enabled[band] = Band_Enabled[other];
  Band_Group[band] = Band_Group[other];
  Band_Type[band] = Band_Type[other];
  Band_Frequency[band] = Band_Frequency[other];
  Band_Gain[band] = Band_Gain[other];
  Band_Q[band] = Band_Q[other];
  Band_Slope[band] = Band_Slope[other];

  Band_Update[band] = 1;
  Band_GfxUpdate[band] = 1;
  Band_Update[other] = 1;
  Band_GfxUpdate[other] = 1;

  flag_filter_update(band);
  flag_filter_update(other);

  filters_to_sliders();
);

/*
 * Set the node color
 */
function set_node_color(band, frq) local (bnd, bndabs, bndfrac) (
  bnd = freq_to_per(frq, 7.0);

  bndabs = floor(bnd);
  bndfrac = bnd - bndabs;

  bndabs == 0.0 ? (r1 = color_band0.red; g1 = color_band0.green; b1 = color_band0.blue) :
    bndabs == 1.0 ? (r1 = color_band1.red; g1 = color_band1.green; b1 = color_band1.blue) :
      bndabs == 2.0 ? (r1 = color_band2.red; g1 = color_band2.green; b1 = color_band2.blue) :
        bndabs == 3.0 ? (r1 = color_band3.red; g1 = color_band3.green; b1 = color_band3.blue) :
          bndabs == 4.0 ? (r1 = color_band4.red; g1 = color_band4.green; b1 = color_band4.blue) :
            bndabs == 5.0 ? (r1 = color_band5.red; g1 = color_band5.green; b1 = color_band5.blue) :
              bndabs == 6.0 ? (r1 = color_band6.red; g1 = color_band6.green; b1 = color_band6.blue) :
                bndabs == 7.0 ? (r1 = color_band7.red; g1 = color_band7.green; b1 = color_band7.blue) :
                  bndabs == 8.0 ? (r1 = color_band8.red; g1 = color_band8.green; b1 = color_band8.blue) :
                    bndabs == 9.0 ? (r1 = color_band9.red; g1 = color_band9.green; b1 = color_band9.blue) :
                      bndabs == 10.0 ? (r1 = color_band10.red; g1 = color_band10.green; b1 = color_band10.blue) :
                        bndabs == 11.0 ? (r1 = color_band11.red; g1 = color_band11.green; b1 = color_band11.blue) :
                          bndabs == 12.0 ? (r1 = color_band12.red; g1 = color_band12.green; b1 = color_band12.blue) :
                            bndabs == 13.0 ? (r1 = color_band13.red; g1 = color_band13.green; b1 = color_band13.blue) :
                              bndabs == 14.0 ? (r1 = color_band14.red; g1 = color_band14.green; b1 = color_band14.blue) :
                                bndabs == 15.0 ? (r1 = color_band15.red; g1 = color_band15.green; b1 = color_band15.blue);



  bndabs == 0.0 ? (r2 = color_band1.red; g2 = color_band1.green; b2 = color_band1.blue) :
    bndabs == 1.0 ? (r2 = color_band2.red; g2 = color_band2.green; b2 = color_band2.blue) :
      bndabs == 2.0 ? (r2 = color_band3.red; g2 = color_band3.green; b2 = color_band3.blue) :
        bndabs == 3.0 ? (r2 = color_band4.red; g2 = color_band4.green; b2 = color_band4.blue) :
          bndabs == 4.0 ? (r2 = color_band5.red; g2 = color_band5.green; b2 = color_band5.blue) :
            bndabs == 5.0 ? (r2 = color_band6.red; g2 = color_band6.green; b2 = color_band6.blue) :
              bndabs == 6.0 ? (r2 = color_band7.red; g2 = color_band7.green; b2 = color_band7.blue) :
                bndabs == 7.0 ? (r2 = color_band8.red; g2 = color_band8.green; b2 = color_band8.blue) :
                  bndabs == 8.0 ? (r2 = color_band9.red; g2 = color_band9.green; b2 = color_band9.blue) :
                    bndabs == 9.0 ? (r2 = color_band10.red; g2 = color_band10.green; b2 = color_band10.blue) :
                      bndabs == 10.0 ? (r2 = color_band11.red; g2 = color_band11.green; b2 = color_band11.blue) :
                        bndabs == 11.0 ? (r2 = color_band12.red; g2 = color_band12.green; b2 = color_band12.blue) :
                          bndabs == 12.0 ? (r2 = color_band13.red; g2 = color_band13.green; b2 = color_band13.blue) :
                            bndabs == 13.0 ? (r2 = color_band14.red; g2 = color_band14.green; b2 = color_band14.blue) :
                              bndabs == 14.0 ? (r2 = color_band15.red; g2 = color_band15.green; b2 = color_band15.blue) :
                                bndabs == 15.0 ? (r2 = color_band16.red; g2 = color_band16.green; b2 = color_band16.blue);

  //(1 - t) * v0 + t * v1;
  Band_Red[band] = (1.0 - bndfrac) * r1 + bndfrac * r2;
  Band_Blue[band]= (1.0 - bndfrac) * g1 + bndfrac * g2;
  Band_Green[band] = (1.0 - bndfrac) * b1 + bndfrac * b2;
);

function uix_thick_line(x1, y1, x2, y2) (
  gfx_line(x1, y1, x2, y2, 1);
  gfx_line(x1 + 1, y1, x2 + 1, y2, 1);
  gfx_line(x1, y1 + 1, x2, y2 + 1, 1);
  gfx_line(x1 - 1, y1, x2 - 1, y2, 1);
  gfx_line(x1, y1 - 1, x2, y2 - 1, 1);
);

/*
 * Node selection functions
 */
function select_node_clear() local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] = 0;
    i += 1;
  );
);

function select_node(band) local(i) (
  slider(band*4+1) > 0 ? Band_Selected[band] = 1;
);

function deselect_node(band) local(i) (
  Band_Selected[band] = 0;
);

function is_node_group_selected(band) (
  Band_Selected[band];
);

function preserve_node_selected_states() local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected_States[i] = Band_Selected[i];
    i += 1;
  );
);

function select_nodes_in_box(x1, y1, x2, y2, mode) local(i, x, y) (
  i = 0;
  while (i < NUM_BANDS) (
    x = get_filter_x(i);
    y = get_filter_y(i);

    (mode == 1) ? (
      (x >= x1 && x <= x2 && y >= y1 && y <= y2) ? (
        select_node(i);
      ) : (
        deselect_node(i);
      );
    ) : (
      (x >= x1 && x <= x2 && y >= y1 && y <= y2) ? (
        Band_Selected_States[i] ? deselect_node(i) : select_node(i);
      ) : (
        Band_Selected_States[i] ? select_node(i) : deselect_node(i);
      );
    );
    i += 1;
  );

  band = get_nearby_node();
  band != -1 ? (
    selected_node = band;
  );
);

function is_box_dragging() (
  box_region_drag_mode ? (
    ree_mouse_x != select_box_x || ree_mouse_y != select_box_y
  ) : (
    0
  )
);

function set_node_drag_offsets(band, x, y) local(i, by, iy) (
  by = y_to_db(get_filter_y(band));
  i = 0;
  while (i < NUM_BANDS) (
    Band_Drag_OffsetX[i] = x - get_filter_x(i);
    Band_Drag_OffsetY[i] = y - get_filter_y(i);
    Band_Invert_dB[i] = 0;

    i != band ? (
      iy = y_to_db(get_filter_y(i));
      by > 0 ? (
        iy < 0 ? Band_Invert_dB[i] = 1;
      ) : (
        iy > 0 ? Band_Invert_dB[i] = 1;
      );
    );

    i += 1;
  );
);

function update_drag_nodes_position(x, y, diffx, diffy) local(i, mmx, mmy, posx, posy) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      posx = x + diffx;
      posy = y - diffy;

      Band_Invert_dB[i] == 1 ? posy = y - -diffy;

      mmx = posx - Band_Drag_OffsetX[i];
      mmy = posy - Band_Drag_OffsetY[i];

      //jj1

      set_filter_from_xy(i, mmx, mmy);
    );
    i += 1;
  );
 filters_to_sliders();
);

function update_drag_nodes_Q(x, y, diffx, diffy, md) local(i, mmx, mmy, posx, posy, md, scalar) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      posx = x + diffx;
      posy = y - diffy;

      mmx = posx - Band_Drag_OffsetX[i];
      mmy = posy - Band_Drag_OffsetY[i];

      Band_Frequency[i] = scx_to_freq(mmx);

      Band_Type[i] != FILTER_LOW_CUT && Band_Type[i] != FILTER_LOW_CUT_BUTTERWORTH && Band_Type[i] != FILTER_HIGH_CUT && Band_Type[i] != FILTER_HIGH_CUT_BUTTERWORTH
        && Band_Type[i] != FILTER_LOW_CUT_ANALOG && Band_Type[i] != FILTER_HIGH_CUT_ANALOG ? (
        scalar = 0.5 / gfx_ext_retina;

        Band_Q[i] = max(0.10, min(40, per_to_q(q_to_per(Band_Q[i], 100) + md * scalar, 100)));

        // Notify Reaper that a parameter change has happened
        notify_touched_Q(i);
      );

      // Notify Reaper that a parameter change has happened
      notify_touched_frequency(i);
      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function update_node_scroll_Q(band, md) local(i) (
    Band_Type[band] != FILTER_LOW_CUT && Band_Type[band] != FILTER_LOW_CUT_BUTTERWORTH && Band_Type[band] != FILTER_HIGH_CUT && Band_Type[band] != FILTER_HIGH_CUT_BUTTERWORTH
      && Band_Type[band] != FILTER_LOW_CUT_ANALOG && Band_Type[band] != FILTER_HIGH_CUT_ANALOG ? (
      Band_Q[band] = max(0.10, min(40, per_to_q(q_to_per(Band_Q[band], 1) + md * 0.008, 1)));

      // Notify Reaper that a parameter change has happened
      notify_touched_Q(band);

      flag_filter_update(band);
      filters_to_sliders();
  );
);

function update_selected_nodes_scroll_Q(md) local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      update_node_scroll_Q(i, md);
    );
    i += 1;
  );
  filters_to_sliders();
);

function update_node_scroll_slope(band, md) local(i, foundSlope, slope, numSlope, qx, qy) (
    Band_Type[band] == FILTER_LOW_CUT || Band_Type[band] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[band] == FILTER_HIGH_CUT || Band_Type[band] == FILTER_HIGH_CUT_BUTTERWORTH ? (

      // Find the current slope
      foundSlope = 0;
      slope = 0;
      while( 
        match("%ddB", FilterSlopes[slope], value);

        numSlope = ((value / 6) - 1);

        numSlope >= Band_Slope[band] ? (
          foundSlope = slope;
          slope = NumFilterSlopes;
        );

        slope += 1;
        slope < NumFilterSlopes;
      );

      foundSlope = max(min(foundSlope - md, 9), 0);

      match("%ddB", FilterSlopes[foundSlope], value);

      qx = get_filter_x(band);
      qy = get_filter_y(band);

      Band_Slope[band] = ((value / 6) - 1);

      set_filter_from_xy(band, qx, qy);

      filters_to_sliders();
  );
);

function update_selected_nodes_scroll_slope(md) local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      update_node_scroll_slope(i, md);
    );
    i += 1;
  );
  filters_to_sliders();
);

function toggle_nodes_enabled(band) local(i, toggle) (
  toggle = Band_Enabled[band];
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      Band_Enabled[i] = toggle==BAND_STATE_ENABLED ? BAND_STATE_DISABLED : BAND_STATE_ENABLED;
      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function invert_nodes_gain() local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      Band_Gain[i] = -Band_Gain[i];
      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function zero_nodes_gain() local(i, x, y) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      x = get_filter_x(i);
      y = db_to_y(0);

      set_filter_from_xy(i, x, y);

      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function delete_selected_nodes() local(i) (
  selected_node = -1;
  listen_node = -1;
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      Band_Enabled[i] = BAND_STATE_OFF;

      i == 0 ? gfx_band1.filter.svf_bypass() :
      i == 1 ? gfx_band2.filter.svf_bypass() :
      i == 2 ? gfx_band3.filter.svf_bypass() :
      i == 3 ? gfx_band4.filter.svf_bypass() :
      i == 4 ? gfx_band5.filter.svf_bypass() :
      i == 5 ? gfx_band6.filter.svf_bypass() :
      i == 6 ? gfx_band7.filter.svf_bypass() :
      i == 7 ? gfx_band8.filter.svf_bypass();
      i == 8 ? gfx_band9.filter.svf_bypass() :
      i == 9 ? gfx_band10.filter.svf_bypass() :
      i == 10 ? gfx_band11.filter.svf_bypass() :
      i == 11 ? gfx_band12.filter.svf_bypass() :
      i == 12 ? gfx_band13.filter.svf_bypass() :
      i == 13 ? gfx_band14.filter.svf_bypass() :
      i == 14 ? gfx_band15.filter.svf_bypass() :
      i == 15 ? gfx_band16.filter.svf_bypass();
      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function split_selected_nodes() local(i, fband) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      // Split band
      fband = 0;
      while(
        Band_Enabled[fband]==BAND_STATE_OFF ? (                
          split_band(fband, i);
          fband = NUM_BANDS;
        );
        fband += 1;
        fband < NUM_BANDS;
      );
    );
    i += 1;
  );
  filters_to_sliders();
);

function duplicate_selected_nodes() local(i, fband) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      // Duplicate band
      fband = 0;
      while(
        Band_Enabled[fband]==BAND_STATE_OFF ? (                
          duplicate_band(fband, i);
          fband = NUM_BANDS;
        );
        fband += 1;
        fband < NUM_BANDS;
      );
    );
    i += 1;
  );
  filters_to_sliders();
);

function stereo_selected_nodes(stereo) local(i) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      Band_Group[i] = stereo;

      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function set_shape_selected_nodes(shape, has_slope) local(i, newshape) (
  newshape = FilterMappingTo[shape];

  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      !has_slope ? Band_Slope[i] = 1;

      // Preserve Q when switching between normal low/high cuts
      !((newshape == FILTER_LOW_CUT || newshape == FILTER_HIGH_CUT) && (Band_Type[i] == FILTER_LOW_CUT || Band_Type[i] == FILTER_HIGH_CUT)) ? (
        Band_Q[i] = 0.7071;
      );

      Band_Type[i] = newshape;
      Band_Type[i] == FILTER_PULTEC_LOW_SHELF ? (Band_Q[i] = 20; Band_Slope[i] = 1);

      Band_Type[i] == FILTER_BAND_PASS || Band_Type[i] == FILTER_NOTCH || Band_Type[i] == FILTER_ALL_PASS || Band_Type[i] == FILTER_LOW_CUT
        || Band_Type[i] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[i] == FILTER_HIGH_CUT || Band_Type[i] == FILTER_HIGH_CUT_BUTTERWORTH ? (
        Band_Gain[i] = 0;
      );

      notify_touched_Q(i);
      notify_touched_gain(i);

      flag_filter_update(i);
    );
    i += 1;
  );
  filters_to_sliders();
);

function set_node_slope(band, slope) (
  x = get_filter_x(band);
  y = get_filter_y(band);

  Band_Slope[band] = slope;

  set_filter_from_xy(band, x, y);

  flag_filter_update(band);
);

function set_slopes_selected_nodes(slope) local(i, x, y) (
  i = 0;
  while (i < NUM_BANDS) (
    Band_Selected[i] ? (
      set_node_slope(i, slope);
    );
    i += 1;
  );
  filters_to_sliders();
);

/*
 * Draw a dial at x, y with radius r and value v 0..1
 * Set mode to 1 to support negative..positive mode
 */
function draw_dial(x, y, r, v, mode) 
local(x, y, x1, x2, x3, x4, y1, y2, y3, y4, x1r, y1r, x2r, y2r, x3r, y3r, x4r, y4r, start, end, ang, rsize, rwidth, roffset, ofs, c, i, st, en)
(
  gfx_r *= 0.4;
  gfx_g *= 0.4;
  gfx_b *= 0.4;

  start = 3 * (2*$pi/8);
  end = 9 * (2*$pi/8);

  ang = start + ((end - start) * v);

  rsize = r-2;
  rwidth = 1 * gfx_ext_retina;
  roffset = r - (7 * gfx_ext_retina);

  gfx_r = gfx_b = gfx_g = 1;

  x1 = roffset;
  y1 = 0;
  x2 = rsize;
  y2 = 0;

  x1r = x1 * cos(ang) - y1 * sin(ang);
  y1r = y1 * cos(ang) + x1 * sin(ang);

  x2r = x2 * cos(ang) - y2 * sin(ang);
  y2r = y2 * cos(ang) + x2 * sin(ang);

  uix_thick_line(x+x1r, y+y1r, x+x2r, y+y2r);

  gfx_r = gfx_b = gfx_g = 0.4;

  ofs = 2 * (2*$pi/8);

  mode == 0 ? ( 
    st = start + ofs;
    en = ang + ofs;
  ) : mode == 1 ? (
    en = 3 * (2*$pi/8) + ofs;
    st = 6 * (2*$pi/8) + ofs;
    en = en + ((st - en) * (v*2));
  );

  gfx_r = gfx_g = gfx_b = 0.3;
  gfx_r = 70/255; gfx_g = 105/255; gfx_b = 127/255;

  c = gfx_ext_retina * 5;
  i=0;
  rad = r + 3;
  while(
    gfx_arc(x,y,rad, start+ofs, end+ofs, 1); 
    rad += 0.5;
    i += 1;
    i < c;
  );

  gfx_r = gfx_g = gfx_b = 1;
  gfx_r = 97/255; gfx_g = 155/255; gfx_b = 173/255;

  c = gfx_ext_retina * 5;
  i=0;
  rad = r + 3;
  while(
    gfx_arc(x,y,rad, st, en, 1); 
    rad += 0.5;
    i += 1;
    i < c;
  );
);

/*
 * Draw button capsule
 */
function draw_capsule(x, y, w, h)
  local(radius, diameter, halfh)
(
  x = floor(x);
  y = floor(y);

  radius = h * 0.5;
  diameter = h;
  halfh = h * 0.5;


  gfx_rect(x, y, w, h+1);

  gfx_circle(x, y + halfh, radius, 1);
  gfx_circle(x + w, y + halfh, radius, 1);
);

/*
 * Init the close style button
 */
function init_close_button(xpos, ypos, buttonwidth, select, label) instance (x, y, width, menutext, label, select, select_r, select_g, select_b, small) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.select = select;
  this.label = label;
  select_r = 46/255;
  select_g = 139/255;
  select_b = 87/255;
  small = 1;
);

/*
 * Draw the close style button
 */
function draw_close_button() instance (x, y, width, menutext, label, pressed, height, select, small, select_r, select_g, select_b) ( 
  gfx_a = 1;
  x = floor(x); y =floor(y);

  small == 1 ? gfx_setfont(2) : gfx_setfont(1);

  strlen(label) == 0 ? gfx_measurestr("*", w, h) : gfx_measurestr(label, w, h);

  height = small == 1 ? (
    gfx_ext_retina == 1 ? 16 : 30;
  ) : (
    gfx_ext_retina == 1 ? 20 : 32;  
  );

  h = height;

  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 &&
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
    gfx_r = (221 / 255);
    gfx_g = (119 / 255);
    gfx_b = (108 / 255);
  ) : (
    gfx_r = (234 / 255) * 0.80;
    gfx_g = (22 / 255) * 0.80;
    gfx_b = (32 / 255) * 0.80;
  );

  draw_capsule(x, y, width, height);

  gfx_r = (114 / 255);
  gfx_g = (215 / 255);
  gfx_b = (253 / 255);
  gfx_a = 1;
  gfx_x = x + (width / 2) - (w / 2);

  gfx_y = y + 4 * gfx_ext_retina;

  gfx_set(0.9, 0.9, 0.9, 1);


  gfx_ext_retina == 2 ? (
    small == 1 ? gfx_y = y + 4 :
      gfx_y = y + 4;
  ) : ( 
    small == 1 ? gfx_y = y + 2 :
      gfx_y = y + 4;
  );

  strlen(label) == 0 ? (
    gfx_ext_retina == 2 ? (
      gfx_circle(gfx_x+6, gfx_y+11, 7, 0, 1);
      gfx_line(gfx_x, gfx_y+20, gfx_x+13, gfx_y+2);
    ) : (
      gfx_circle(gfx_x+3, gfx_y+5, 4, 0, 1);
      gfx_line(gfx_x-1, gfx_y+10, gfx_x+7, gfx_y);
    );
  ) : (
    select == 1 ? gfx_set(0.9, 0.9, 0.9, 1);
    gfx_drawstr(label);
  );
);

/*
 * Handle the close style button
 */
function handle_close_button() instance (x, y, width, menutext, label, pressed, height, select, m1, m2)
  local (last_clicked_item)
(
  last_clicked_item = 0;
  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
    mouse_cap & 1 && !pressed ? (
      ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
        pressed = 1;

        select == 0 ? select = 1 : select = 0;
        last_clicked_item = select;

      ) : pressed = 0;
    ) : ( 
      !(mouse_cap & 1) ? pressed = 0;
    );

  );
  select;
);

/*
 * Init the toggle style button
 */
function init_toggle_button(xpos, ypos, buttonwidth, select, label) instance (x, y, width, menutext, label, select, select_r, select_g, select_b, small) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.select = select;
  this.label = label;
  select_r = 46/255;
  select_g = 139/255;
  select_b = 87/255;
);

function init_toggle_button_small(xpos, ypos, buttonwidth, select, label) instance (x, y, width, menutext, label, select, select_r, select_g, select_b, small) (
  this.init_toggle_button(xpos, ypos, buttonwidth, select, label);
  small = 1;

  select_r = (204*0.90)/255;
  select_g = (127*0.90)/255;
  select_b = (28*0.90)/255;
);

/*
 * Draw the toggle style button
 */
function draw_toggle_button() instance (x, y, width, menutext, label, pressed, height, select, small, select_r, select_g, select_b) ( 
  gfx_a = 1;
  x = floor(x); y =floor(y);

  small == 1 ? gfx_setfont(2) : gfx_setfont(1);

  strlen(label) == 0 ? gfx_measurestr("*", w, h) : gfx_measurestr(label, w, h);

  height = small == 1 ? (
    gfx_ext_retina == 1 ? 16 : 30;
  ) : (
    gfx_ext_retina == 1 ? 20 : 32;  
  );

  h = height;

  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 &&
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
    gfx_r = (114 / 255) * 0.6;
    gfx_g = (215 / 255) * 0.6;
    gfx_b = (253 / 255) * 0.6;
  ) : (
    gfx_r = (114 / 255) * 0.4;
    gfx_g = (215 / 255) * 0.4;
    gfx_b = (253 / 255) * 0.4;
  );

  select == 1 ? (
    strlen(label) == 0 ? ( gfx_r = 0.0; gfx_g = 0.4; gfx_b = 1; ) : 
      ( gfx_r = select_r; gfx_g = select_g; gfx_b = select_b; );
  );

  draw_capsule(x, y, width, height);

  gfx_r = (114 / 255);
  gfx_g = (215 / 255);
  gfx_b = (253 / 255);
  gfx_a = 1;
  gfx_x = x + (width / 2) - (w / 2);

  gfx_ext_retina == 2 ? (
    small == 1 ? gfx_y = y + 4 :
      gfx_y = y + 4;
  ) : ( 
    small == 1 ? gfx_y = y + 2 :
      gfx_y = y + 4;
  );

  strlen(label) == 0 ? (
    gfx_ext_retina == 2 ? (
      gfx_circle(gfx_x+3, gfx_y+11, 7, 0, 1);
      gfx_line(gfx_x-3, gfx_y+20, gfx_x+10, gfx_y+2);
    ) : (
      gfx_circle(gfx_x+3, gfx_y+6, 4, 0, 1);
      gfx_line(gfx_x-1, gfx_y+11, gfx_x+7, gfx_y+1);
    );
  ) : (
    select == 1 ? gfx_set(0.9, 0.9, 0.9, 1);
    gfx_drawstr(label);
  );

  gfx_setfont(1);
);

/*
 * Handle the toggle style button
 */
function handle_toggle_button() instance (x, y, width, menutext, label, pressed, height, select, m1, m2)
  local (last_clicked_item)
(
  last_clicked_item = 0;
  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
    mouse_cap & 1 && !pressed ? (
      ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
        pressed = 1;

        select == 0 ? select = 1 : select = 0;
        last_clicked_item = select;

        // pressed = 0;

      ) : pressed = 0;
    ) : ( 
      !(mouse_cap & 1) ? pressed = 0;
    );

  );
  select;
);

/*
 * Init the options style button
 */
function init_options_button2(xpos, ypos, buttonwidth, select, nOptions, options) instance (x, y, width, menutext, label, select, small, nOptions, options) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.select = select;
  label = options[select];
  this.nOptions = nOptions;
  this.options = options;
);

function init_options_button_small2(xpos, ypos, buttonwidth, select, nOptions, options) instance (x, y, width, menutext, label, select, small, nOptions, options) (
  this.init_options_button2(xpos, ypos, buttonwidth, select, nOptions, options);
  small = 1;
);

/*
 * Draw the options style button
 */
function draw_options_button2() instance (x, y, width, menutext, label, pressed, height, select, small, nOptions, options) ( 
  gfx_a = 1;
  x = floor(x); y =floor(y);

  small == 1 ? gfx_setfont(2) : gfx_setfont(1);

  label = options[select];

  gfx_measurestr(label, w, h);

  height = small == 1 ? (
    gfx_ext_retina == 1 ? 16 : 30;
  ) : (
    gfx_ext_retina == 1 ? 20 : 32;  
  );

  h = height;

  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 &&
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
    gfx_r = (114 / 255) * 0.6;
    gfx_g = (215 / 255) * 0.6;
    gfx_b = (253 / 255) * 0.6;
  ) : (
    gfx_r = (114 / 255) * 0.4;
    gfx_g = (215 / 255) * 0.4;
    gfx_b = (253 / 255) * 0.4;
  );

  draw_capsule(x, y, width, height);

  gfx_r = (114 / 255);
  gfx_g = (215 / 255);
  gfx_b = (253 / 255);
  gfx_a = 1;

  gfx_x = x + (width / 2) - (w / 2);

  gfx_ext_retina == 2 ? (
    small == 1 ? gfx_y = y + 4 :
      gfx_y = y + 4;
  ) : ( 
    small == 1 ? gfx_y = y + 2 :
      gfx_y = y + 4;
  );

  gfx_drawstr(label);

  gfx_setfont(1);
);

/*
 * Handle the options style button
 */
function handle_options_button2() instance (x, y, width, menutext, label, pressed, height, select, nOptions, options)
  local (last_clicked_item, oi)
(
  last_clicked_item = -1;
  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
    mouse_cap & 1 && !pressed ? (
      ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
        pressed = 1;

        #menu = "";

        oi = 0;
        while( 
          oi == select ? #menu += "!";
          #menu += options[oi];
          #menu += "|";
          oi += 1;
          oi < nOptions;
        );

        gfx_x = ree_mouse_x;
        gfx_y = ree_mouse_y;

        last_clicked_item = gfx_showmenu(#menu) - 1;

        pressed = 0;

      ) : pressed = 0;
    ) : ( 
      !(mouse_cap & 1) ? pressed = 0;
    );

  );
  last_clicked_item;
);

/*
 * Init the options style button
 */
function init_options_button(xpos, ypos, buttonwidth, select, m1, m2, mf1, mf2) instance (x, y, width, menutext, label, select, m1, m2, mf1, mf2, small) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.select = select;
  label = buttonlabel;
  this.m1 = m1;
  this.m2 = m2;
  this.mf1 = mf1;
  this.mf2 = mf2;
);

function init_options_button_small(xpos, ypos, buttonwidth, select, m1, m2, mf1, mf2) instance (x, y, width, menutext, label, select, m1, m2, mf1, mf2, small) (
  this.init_options_button(xpos, ypos, buttonwidth, select, m1, m2, mf1, mf2);
  small = 1;
);

/*
 * Draw the options style button
 */
function draw_options_button() instance (x, y, width, menutext, label, pressed, height, select, m1, m2, mf1, mf2, small) ( 
  gfx_a = 1;
  x = floor(x); y =floor(y);

  small == 1 ? gfx_setfont(2) : gfx_setfont(1);

  label = select == 0 ? m1 : select == 1 ? m2;

  gfx_measurestr(label, w, h);

  height = small == 1 ? (
    gfx_ext_retina == 1 ? 16 : 30;
  ) : (
    gfx_ext_retina == 1 ? 20 : 32;  
  );

  h = height;

  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 &&
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 4 ? ( 
    gfx_r = (114 / 255) * 0.6;
    gfx_g = (215 / 255) * 0.6;
    gfx_b = (253 / 255) * 0.6;
  ) : (
    gfx_r = (114 / 255) * 0.4;
    gfx_g = (215 / 255) * 0.4;
    gfx_b = (253 / 255) * 0.4;
  );

  draw_capsule(x, y, width, height);

  gfx_r = (114 / 255);
  gfx_g = (215 / 255);
  gfx_b = (253 / 255);
  gfx_a = 1;

  gfx_x = x + (width / 2) - (w / 2);

  gfx_ext_retina == 2 ? (
    small == 1 ? gfx_y = y + 4 :
      gfx_y = y + 4;
  ) : ( 
    small == 1 ? gfx_y = y + 2 :
      gfx_y = y + 4;
  );

  gfx_drawstr(label);

  gfx_setfont(1);
);

/*
 * Handle the options style button
 */
function handle_options_button() instance (x, y, width, menutext, label, pressed, height, select, m1, m2, mf1, mf2)
  local (last_clicked_item)
(
  last_clicked_item = 0;
  button_focus == -1 && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
    mouse_cap & 1 && !pressed ? (
      ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 9 ? ( 
        pressed = 1;

        #menu = "";
        select == 0 ? #menu += "!";
        #menu += mf1;
        #menu += "|";
        select == 1 ? #menu += "!";
        #menu += mf2;

        gfx_x = ree_mouse_x;
        gfx_y = ree_mouse_y;

        last_clicked_item = gfx_showmenu(#menu);

        last_clicked_item == 1 ? (label = m1; select = 0;);
        last_clicked_item == 2 ? (label = m2; select = 1;);

        pressed = 0;

      ) : pressed = 0;
    ) : ( 
      !(mouse_cap & 1) ? pressed = 0;
    );

  );
  last_clicked_item;
);

/*
 * Init the number style button
 */
function init_number_button(xpos, ypos, buttonwidth, label, type, db) instance (x, y, width, type, db, label) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.db = db;
  this.type = type;
  this.label = label;
);

/*
 * Draw the number style button
 */
function draw_number_button() instance (x, y, width, label, drag, height, db, type) local (txt) ( 
  gfx_a = 1;
  x = floor(x); y =floor(y);

  txt = #;
  type == 0 ? ( 
    db > 0 ? sprintf(txt, "%s+%.1f dB", label, db) : sprintf(txt, "%s%.1f dB", label, db);
  ) : ( 
    sprintf(txt, "%s%d%%", label, db);
  );

  gfx_measurestr(txt, w, h);

  height = small == 1 ? (
    gfx_ext_retina == 1 ? 16 : 30;
  ) : (
    gfx_ext_retina == 1 ? 20 : 32;  
  );

  h = height;

  (button_focus == -1 || button_focus == x) && node_drag_mode == 0 && box_region_drag_mode == 0 &&
    (ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height + 9) || drag ? ( 
    gfx_r = (114 / 255) * 0.6;
    gfx_g = (215 / 255) * 0.6;
    gfx_b = (253 / 255) * 0.6;
  ) : (
    gfx_r = (114 / 255) * 0.4;
    gfx_g = (215 / 255) * 0.4;
    gfx_b = (253 / 255) * 0.4;
  );

  draw_capsule(x, y, width, height);

  gfx_r = (114 / 255);
  gfx_g = (215 / 255);
  gfx_b = (253 / 255);
  gfx_a = 1;
  gfx_x = x + (width / 2) - (w / 2);
  gfx_y = y + 4;
  gfx_drawstr(txt);
);

/*
 * Return 1 if mouse is over number button
 */
function is_mouse_number_button() instance (x, y, width, height)
(
  ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height;
);

/*
 * Handle the number style button
 */
function handle_number_button() instance (x, y, width, menutext, label, drag, height, db, oldy, type)
  local (oldy, md)
(
  (button_focus == -1 || button_focus == x) && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
  mouse_cap & 1 && !drag ? (
    this.is_mouse_number_button() ? (
      drag = 1;
      oldy = ree_mouse_y;

      gfx_x = x / 2;
      gfx_y = y / 2;
      button_focus = x;
    );
  ) : ( 
    !(mouse_cap & 1) ? ( drag = 0; button_focus = -1; );
  );

  drag ? ( 
    md = (ree_mouse_y - oldy);
    type == 0 ? (
      md > 0 ? db -= 0.1 * abs(md*0.5);
      md < 0 ? db += 0.1 * abs(md*0.5);
      abs(db) < 0.005 ? db = 0;
      db = min(30, db);
      db = max(-130, db);
    ) : (
      md > 0 ? db -= abs(md*0.5);
      md < 0 ? db += abs(md*0.5);
      db = min(200, db);
      db = max(0, db);
    );
    oldy = ree_mouse_y;
  );

  );

  db;
);

/*
 * Init the number style dial
 */
function init_number_dial(xpos, ypos, rad, mode, label, label2) instance (x, y, r, v, mode, label, label2) (
  x = xpos;
  y = ypos;
  r = rad;
  v = 0;
  this.mode = mode;
  this.label = label;
  this.label2 = label2;
);

/*
 * Draw the number style button
 */
function draw_number_dial() instance (x, y, r, v, mode, label, label2) local (txt) ( 
  txt = #;

  gfx_setfont(2);

  gfx_measurestr(label, w, h);

  gfx_r = gfx_b = gfx_g = 1;

  gfx_x = x - (w/2);
  gfx_y = y - r - (20 * gfx_ext_retina);

  gfx_printf("%s", label);

  gfx_setfont(1);

  gfx_measurestr(label2, w, h);

  gfx_r = gfx_b = gfx_g = 1;

  gfx_x = x - (w/2);
  gfx_y = y + r + 4 * gfx_ext_retina;// + (gfx_texth - (8 * gfx_ext_retina));

  gfx_printf("%s", label2);

  gfx_setfont(1);

  gfx_r = gfx_b = gfx_g = 1;

  rotval = freq_to_per(Band_Frequency[0], 1.0);

//jjx
  draw_dial(x, y, r, v, mode);

  gfx_setfont(1);
);

/*
 * Return 1 if mouse is over number button
 */
function is_mouse_number_dial() instance (x, y, r, v) local (rad)
(
  rad = r + gfx_texth*2;
  ree_mouse_x >= x - rad && ree_mouse_x <= x + rad && ree_mouse_y >= y - rad && ree_mouse_y <= y + rad;
);

/*
 * Handle the number style button
 */
function handle_number_dial(val) instance (x, y, r, v, width, menutext, label, drag, height, db, oldy, type)
  local (oldy, md, mouse_speed)
(
  v = val;
  (button_focus == -1 || button_focus == x) && node_drag_mode == 0 && box_region_drag_mode == 0 ? (
    mouse_cap & 1 && !drag ? (
      this.is_mouse_number_dial() ? (
        drag = 1;
        oldy = ree_mouse_y;

        gfx_x = x / 2;
        gfx_y = y / 2;
        button_focus = x;
      );
    ) : ( 
      !(mouse_cap & 1) ? ( drag = 0; button_focus = -1; );
    );

    drag ? (
      mouse_cap & 16 ? mouse_speed = 12 : mouse_speed = 1;
      md = (ree_mouse_y - oldy) / mouse_speed;

      md > 0 ? v -= 0.01 * abs(md*0.5);
      md < 0 ? v += 0.01 * abs(md*0.5);
      v < 0.0 ? v = 0;
      v > 1.0 ? v = 1;

      oldy = ree_mouse_y;
    );
  );

  v;
);


/*
 * Initialise the menu style button
 */
function init_menu_button(xpos, ypos, buttonwidth, buttonlabel, menutext) instance (x, y, width, menutext, label) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  this.menutext = menutext;
  label = buttonlabel;
);

/*
 * Draw the menu style button
 */
function draw_menu_button() instance (x, y, width, menutext, label, pressed, height, label) ( 
  ree_mouse_x >= 0 && ree_mouse_x < grf_w && ree_mouse_y >=0 && ree_mouse_y < grf_h || node_drag_mode != 0 || is_box_dragging() ? (
    gfx_a = 1;
    x = floor(x); y =floor(y);

    gfx_measurestr(label, w, h);

    height = small == 1 ? (
      gfx_ext_retina == 1 ? 16 : 30;
    ) : (
      gfx_ext_retina == 1 ? 20 : 32;  
    );

    node_drag_mode == 0 && (!is_box_dragging()) && ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height ? ( 
      gfx_r = (114 / 255) * 0.6;
      gfx_g = (215 / 255) * 0.6;
      gfx_b = (253 / 255) * 0.6;
    ) : (
      gfx_r = (114 / 255) * 0.4;
      gfx_g = (215 / 255) * 0.4;
      gfx_b = (253 / 255) * 0.4;
    );

    draw_capsule(x, y, width, height);

    gfx_r = (114 / 255);
    gfx_g = (215 / 255);
    gfx_b = (253 / 255);
    gfx_a = 1;
    gfx_x = x + (width / 2) - (w / 2);
    gfx_y = y + 4;
    gfx_drawstr(label);
  );
);

/*
 * Handle the menu style button
 */
function handle_menu_button() instance (x, y, width, menutext, label, pressed, height, label)
  local (last_clicked_item, menu)
(
  last_clicked_item = 0;
  mouse_cap & 1 && node_drag_mode == 0 && !is_box_dragging() && !pressed ? (
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height ? ( 
      pressed = 1;

      #menu = "#Version: ";
      #menu += #VERSION;
      #menu += " ||";

      // sprintf(#menu, "#Version: %s ||", VERSION);

      #menu += ">Spectrum|";
      Spectrum_Mode == 0 ? #menu += "!"; #menu += "Full|";
      Spectrum_Mode == 1 ? #menu += "!"; #menu += "Mid|";
      Spectrum_Mode == 2 ? #menu += "!"; #menu += "Side|";
      Spectrum_Mode == 3 ? #menu += "!"; #menu += "Mid + Side|";
      Spectrum_Mode == 4 ? #menu += "!"; #menu += "Left|";
      Spectrum_Mode == 5 ? #menu += "!"; #menu += "Right|";
      Spectrum_Mode == 6 ? #menu += "!"; #menu += "<Left + Right|";

      #menu += ">Display|";
      Display_Mode == 0 ? #menu += "!"; #menu += "Fill|";
      Display_Mode == 1 ? #menu += "!"; #menu += "Line|";
      Display_Mode == 2 ? #menu += "!"; #menu += "<None|";

      #menu += ">Range|";
      Ceiling_Value == 0 ? #menu += "!"; #menu += "Ceiling 0dB|";
      Ceiling_Value == 1 ? #menu += "!"; #menu += "Ceiling 20dB|";
      Ceiling_Value == 2 ? #menu += "!"; #menu += "Ceiling 40dB||";
      Floor_Value == 0 ? #menu += "!"; #menu += "Floor -90dB|";
      Floor_Value == 1 ? #menu += "!"; #menu += "Floor -140dB|";
      Floor_Value == 2 ? #menu += "!"; #menu += "<Floor -200dB|";

      #menu += ">Tilt|";
      Tilt_Value == 0 ? #menu += "!"; #menu += "0dB/oct|";
      Tilt_Value == 1 ? #menu += "!"; #menu += "1.5dB/oct|";
      Tilt_Value == 2 ? #menu += "!"; #menu += "3dB/oct|";
      Tilt_Value == 3 ? #menu += "!"; #menu += "4.5dB/oct|";
      Tilt_Value == 4 ? #menu += "!"; #menu += "<6dB/oct|";

      #menu += ">Window Type|";
      Type_Value == 0 ? #menu += "!"; #menu += "Hamming|";
      Type_Value == 1 ? #menu += "!"; #menu += "Blackman-Harris|";
      Type_Value == 2 ? #menu += "!"; #menu += "Blackman|";
      Type_Value == 3 ? #menu += "!"; #menu += "<Rectangular|";

      #menu += ">FFT Size|";
      Block_Value == 0 ? #menu += "!"; #menu += "2048|";
      Block_Value == 1 ? #menu += "!"; #menu += "4096|";
      Block_Value == 2 ? #menu += "!"; #menu += "8192|";
      Block_Value == 3 ? #menu += "!"; #menu += "<16384|";

      #menu += ">Display Pre-EQ|";
      Show_PreEQ == 0 ? #menu += "!"; #menu += "Off|";
      Show_PreEQ == 1 ? #menu += "!"; #menu += "On|";

      gfx_x = ree_mouse_x;
      gfx_y = ree_mouse_y;

      last_clicked_item = gfx_showmenu(#menu) - 1;

      pressed = 0;

      last_clicked_item >= 1 && last_clicked_item <= 7 ? (
        // Force reset of peak buffers
        spectrum.set_show_peaks(Show_Peaks);

        Spectrum_Mode = last_clicked_item - 1;
      );

      last_clicked_item >= 8 && last_clicked_item <= 10 ? ( 
        Display_Mode = last_clicked_item - 8;
      );

      last_clicked_item >= 11 && last_clicked_item <= 13 ? ( 
        Ceiling_Value = last_clicked_item - 11;
      );

      last_clicked_item >= 14 && last_clicked_item <= 16 ? ( 
        Floor_Value = last_clicked_item - 14;
      );

      last_clicked_item >= 17 && last_clicked_item <= 21 ? ( 
        Tilt_Value = last_clicked_item - 17;
      );

      last_clicked_item >= 22 && last_clicked_item <= 25 ? ( 
        Type_Value = last_clicked_item - 22;
      );

      last_clicked_item >= 26 && last_clicked_item <= 29 ? ( 
        Block_Value = last_clicked_item - 26;
      );

      last_clicked_item >= 30 && last_clicked_item <= 31 ? ( 
        Show_PreEQ = last_clicked_item - 30;
      );

      last_clicked_item >= 1 ? update_state();
    ) : pressed = 0;
  ) : ( 
    !(mouse_cap & 1) ? pressed = 0;
  );

  last_clicked_item;
);

/*
 * Initialise the db scale button
 */
function init_dbscale_button(xpos, ypos, buttonwidth, buttonheight) instance (x, y, width, height) (
  x = xpos;
  y = ypos;
  width = buttonwidth;
  height = buttonheight;
);

/*
 * Handle the db scale button
 */
function handle_dbscale_button() instance (x, y, width, pressed, height)
  local (last_clicked_item)
(
  last_clicked_item = 0;
  mouse_cap & 1 && node_drag_mode == 0 && !is_box_dragging() && !pressed ? (
    ree_mouse_x >= x && ree_mouse_x <= x+width && ree_mouse_y >= y && ree_mouse_y <= y + height ? ( 
      pressed = 1;

      #menu = "";
      Db_Range == 0 ? #menu += "!"; #menu += "6dB|";
      Db_Range == 1 ? #menu += "!"; #menu += "12dB|";
      Db_Range == 2 ? #menu += "!"; #menu += "18dB|";
      Db_Range == 3 ? #menu += "!"; #menu += "24dB|";
      Db_Range == 4 ? #menu += "!"; #menu += "30dB|";

      gfx_x = ree_mouse_x;
      gfx_y = ree_mouse_y;

      last_clicked_item = gfx_showmenu(#menu);

      pressed = 0;

      last_clicked_item > 0 ? (
        Db_Range = last_clicked_item - 1;
        update_state();
      );
    ) : pressed = 0;
  ) : ( 
    !(mouse_cap & 1) ? pressed = 0;
  );

  last_clicked_item;
);










































 
 mouseHold = mouse_cap & 1;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 lastCap = mouseHold;
 




















////////////////////////////////////////////////////////////////////////////////////////////
// Main execution loop for input and rendering
////////////////////////////////////////////////////////////////////////////////////////////
gfx_x = 0; gfx_y = 35*zoom; gfx_a = 0.55;
gfx_ext_flags == 0 ? gfx_blit(12,zoom,0);

gfx_ext_retina != last_gfx_ext_retina ? (
  last_gfx_ext_retina = gfx_ext_retina;
  
  gfx_ext_retina > 1 ? (
    gfx_setfont(1,"Arial",20,'b');
    gfx_setfont(2,"Arial",18,'b');
  ) : (
    gfx_setfont(1,"Arial",12,'b');
    gfx_setfont(2,"Arial",11,'b');
  );
  gfx_setfont(1);
);

// Update any changed filters

update_visual_filters();

// Draw everything

Display_Mode < 2 ? (
  spectrum.draw(0);
  Spectrum_Mode == 3 || Spectrum_Mode == 6 ? spectrum.draw(1);

  Show_PreEQ ? (
    spectrum.draw(2);
    Spectrum_Mode == 3 || Spectrum_Mode == 6 ? spectrum.draw(3);
  );

  do_listen || listen_node != -1 ? ( 
    spectrum.draw(4);
    Spectrum_Mode == 3 || Spectrum_Mode == 6 ? spectrum.draw(5);
  );
);


ht = (grf_h - BOTTOM_MARGIN - gfx_texth) + 2;

dst_a = 0.55 / ht;
gfx_gradrect(0, ht/2, grf_w, ht/2, 0,0,0,0,    0, 0, 0, 0, 0, 0, 0, dst_a*2); 

// Draw the lined grid
//!very_compact_height && !very_compact_width ? (
  draw_grid();
  katze = 0;
//);

gfx_ext_flags == 0 ? draw_filter_bands();

// Determine which filter response curves to draw
drawMid = 0;
drawSide = 0;
drawLeft = 0;
drawRight = 0;

idx = 0;
while ( 
  Band_Enabled[idx] == BAND_STATE_ENABLED ? (
    Band_Group[idx] == 1 ? drawMid = 1 :
      Band_Group[idx] == 2 ? drawSide = 1 :
        Band_Group[idx] == 3 ? drawLeft = 1 :
          Band_Group[idx] == 4 ? drawRight = 1;      
  );
  idx += 1;
  idx < NUM_BANDS;
);


// Mid
drawMid ? draw_filter_response(1, 92/255, 190/255, 98/255);

// Side
drawSide ? draw_filter_response(2, 91/255, 236/255, 252/255);

// Left
drawLeft ? draw_filter_response(3, 240/255, 201/255, 27/255);

// Right
drawRight ? draw_filter_response(4, 213/255, 65/255, 66/255);

// Stereo
draw_filter_response(0, 1.0, 1.0, 1.0);

mouse_within_window() && !gen_dragging?  (

  //do_listen || listen_node != -1 ? draw_listen_helper();

  !very_compact_height && !very_compact_width ? (
    draw_info_panel();
  );

  draw_nodes();
) : ( 
  listen_node != -1 ? draw_listen_helper();
  node_drag_mode != 0 || is_box_dragging() ? (
    draw_info_panel();
    
    draw_nodes();
  );
);

// Set the colors for the bands
frq = scx_to_freq(ree_mouse_x);
band = 0;
loop(NUM_BANDS, ( 
    set_node_color(band, Band_Frequency[band]);
    band += 1;
  );
);

initialise_gfx == 0 ? ( 
  initialise_gfx = 1;

  gfx_ext_retina == 2 ? (
    menu.init_menu_button(grf_w - 200, 10, 120, "Settings", "");
    dbscale.init_dbscale_button(grf_w - 60, 0, grf_w - (grf_w - 60), gfx_texth*1.2);
    //piano.init_piano_button(grf_w - 300, 10, 100);
    //peaks.init_peak_button(grf_w - 420, 10, 100);
  ) : ( 
    menu.init_menu_button(grf_w - 140, 5, 60, "Settings", "");
    dbscale.init_dbscale_button(grf_w - 30, 0, grf_w - (grf_w - 30), gfx_texth*2.4);
    //piano.init_piano_button(grf_w - 300, 10, 60);
    //peaks.init_peak_button(grf_w - 420, 10, 60);
  );

  spectrum.set_show_peaks(Show_Peaks);
);

// Animate glowing halos for node selection
glow_node_selection_halo();

do_general_mouse = 1 && !showTextInput;
do_general_mouse ? (




/*
  // Right mouse click?
  mouse_cap & 2 ? ( 
    band = 0;
    while( 
      Band_Enabled[band]!=BAND_STATE_OFF && is_node_selected(band) ? (
        select_node(band);

        selected_node = band;
        selected_node_group = Band_Group[band];

        #menu = "";
        Band_Enabled[band] == BAND_STATE_DISABLED ? #menu += "Enable" : #menu += "Disable";
        #menu += "|Invert Gain";
        #menu += "|Zero Gain";
        #menu += "||>Shape|";
        Band_Type[band] == 0 ? #menu += "!"; #menu += "Peak|";
        Band_Type[band] == 1 ? #menu += "!"; #menu += "Low Cut|";
        Band_Type[band] == 2 ? #menu += "!"; #menu += "Low Cut (Butterworth)|";
        Band_Type[band] == 12 ? #menu += "!"; #menu += "Low Channel (Analog)|";
        Band_Type[band] == 3 ? #menu += "!"; #menu += "Low Shelf|";
        Band_Type[band] == 4 ? #menu += "!"; #menu += "High Shelf|";
        Band_Type[band] == 5 ? #menu += "!"; #menu += "High Cut|";
        Band_Type[band] == 6 ? #menu += "!"; #menu += "High Cut (Butterworth)|";
        Band_Type[band] == 13 ? #menu += "!"; #menu += "High Channel (Analog)|";
        Band_Type[band] == 7 ? #menu += "!"; #menu += "Notch|";
        Band_Type[band] == 8 ? #menu += "!"; #menu += "Band Pass|";
        Band_Type[band] == 9 ? #menu += "!"; #menu += "Tilt Shelf|";
        Band_Type[band] == 10 ? #menu += "!"; #menu += "Pultec Low Shelf|";
        Band_Type[band] == 11 ? #menu += "!"; #menu += "<All Pass|";

        // Only slope for cut filters
        has_slope_menu = 0;
        Band_Type[band] == FILTER_LOW_CUT || Band_Type[band] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[band] == FILTER_HIGH_CUT || Band_Type[band] == FILTER_HIGH_CUT_BUTTERWORTH ? (
          #menu += ">Slope|";

          slope = 0;
          while(
            match("%ddB", FilterSlopes[slope], value);

            Band_Slope[band] == ((value / 6)-1) ? #menu += "!";
            slope == NumFilterSlopes-1 ? #menu += "<";
            #menu += FilterSlopes[slope]; #menu += "|";

            slope += 1;
            slope < NumFilterSlopes;
          );
          has_slope_menu = 1;
        );

        #menu += ">Stereo Placement|";
        Band_Group[band] == 0 ? #menu += "!"; #menu += "Stereo|";
        Band_Group[band] == 1 ? #menu += "!"; #menu += "Mid|";
        Band_Group[band] == 2 ? #menu += "!"; #menu += "Side|";
        Band_Group[band] == 3 ? #menu += "!"; #menu += "Left|";
        Band_Group[band] == 4 ? #menu += "!"; #menu += "<Right|";

        #menu += "|Split|Duplicate|Delete";

        gfx_x = ree_mouse_x;
        gfx_y = ree_mouse_y;

        last_clicked_item = gfx_showmenu(#menu);

        last_clicked_item == 1 ? (
          toggle_nodes_enabled(band);
        );

        last_clicked_item == 2 ? (
          invert_nodes_gain();
        );

        last_clicked_item == 3 ? (
          zero_nodes_gain();
        );

        last_clicked_item >= 4 && last_clicked_item <= 17 ? (
          set_shape_selected_nodes(last_clicked_item - 4, has_slope_menu);
        );

        has_slope_menu ? (
          last_clicked_item >= 18 && last_clicked_item <= 27 ? (
            match("%ddB", FilterSlopes[last_clicked_item - 18], value);

            set_slopes_selected_nodes((value / 6) - 1);
          );
        ) : last_clicked_item += 10;

        last_clicked_item >= 28 && last_clicked_item <= 32 ? (
          stereo_selected_nodes(last_clicked_item - 28);
        );

        last_clicked_item == 33 ? (
          split_selected_nodes();
        );

        last_clicked_item == 34 ? (
          duplicate_selected_nodes();
        );

        last_clicked_item == 35 ? (
          delete_selected_nodes();
        );

        band = NUM_BANDS;
      );
      band += 1;
      band < NUM_BANDS;
    );
  );

*/



  (!(mouse_cap & 1)) && click_held ? (
    box_region_drag_mode = 0;
  );

  // Mouse button 1 lifted when CMD held down
  (!(mouse_cap & 1)) && click_held == 1 && !gen_dragging ? (
    band = get_nearest_node();
    band != -1 ? (
      // In some cases clicking and lifting on a node deselects it
      //!dont_deselect_node ? deselect_node(band);

      !dont_deselect_node ? (
        //select_node_clear();
        deselect_node(band);
      ) : (
        //select_node_clear();
        select_node(band);
      );

    );
    click_held = 0;
    dont_deselect_node = 0;
  );

  // Mouse button 1 lifted when CMD not held down
  (!(mouse_cap & 1)) && click_held == 2 && !gen_dragging ? (
    band = get_nearest_node();
    band != -1 ? (
      // In some cases clicking and lifting on a node deselects it
      //!dont_deselect_node ? deselect_node(band);

      !dont_deselect_node ? select_node_clear();
      select_node(band);

    );
    click_held = 0;
    dont_deselect_node = 0;
  );

  // Left mouse click?
  !gen_dragging && mouse_cap & 1 ? (
  click_held = 2;
    (mouse_cap & 4) ? ( //
    click_held = 1;
    // Delete band?
      band = 0;
      while( 
        Band_Enabled[band]!=BAND_STATE_OFF && is_node_selected(band) ? (
          selected_node = -1;
          listen_node = -1;
          Band_Enabled[band] = BAND_STATE_OFF;
    
          band == 0 ? gfx_band1.filter.svf_bypass() :
          band == 1 ? gfx_band2.filter.svf_bypass() :
          band == 2 ? gfx_band3.filter.svf_bypass() :
          band == 3 ? gfx_band4.filter.svf_bypass() :
          band == 4 ? gfx_band5.filter.svf_bypass() :
          band == 5 ? gfx_band6.filter.svf_bypass() :
          band == 6 ? gfx_band7.filter.svf_bypass() :
          band == 7 ? gfx_band8.filter.svf_bypass();
          band == 8 ? gfx_band9.filter.svf_bypass() :
          band == 9 ? gfx_band10.filter.svf_bypass() :
          band == 10 ? gfx_band11.filter.svf_bypass() :
          band == 11 ? gfx_band12.filter.svf_bypass() :
          band == 12 ? gfx_band13.filter.svf_bypass() :
          band == 13 ? gfx_band14.filter.svf_bypass() :
          band == 14 ? gfx_band15.filter.svf_bypass() :
          band == 15 ? gfx_band16.filter.svf_bypass();
    
          flag_filter_update(band);
    
          filters_to_sliders();
    
          band = NUM_BANDS;
        );
        band += 1;
        band < NUM_BANDS;
      );
      );
      
    click_up ? (
      tm = time_precise();

      // Double click?
      tm - click_time < 0.4 ? (
        // Handle double click button value resets
        mouse_cap & 4 && ((ree_mouse_y >= grf_h - BOTTOM_MARGIN - gfx_texth) || (selected_node != -1 && mouse_within_panel())) ? (
          button_scale.is_mouse_number_button() ? (Scale = button_scale.db = 100;) : 
            button_gain.is_mouse_number_button() ? (Gain = button_gain.db = 0;) :
              button_mid_gain.is_mouse_number_button() ? (MLGain = button_mid_gain.db = 0;) :
                button_side_gain.is_mouse_number_button() ? (SRGain = button_side_gain.db = 0;) :
                  dial_gain.is_mouse_number_dial() ? (Band_Gain[selected_node] = 0; ) : 
                    dial_freq.is_mouse_number_dial() ? (Band_Frequency[selected_node] = 500; ) : 
                      dial_q.is_mouse_number_dial() ? (Band_Q[selected_node] = 0.707);
          
          filters_to_sliders();
          // Flag all filters for updating
          flag_filter_update_all();
        ) : (
          mouse_within_panel() ? (
            dial_freq.is_mouse_number_dial() ? (
              // TODO: comment back in for text input development
              //textField.text_field_init();
              //showTextInput = 1;
              0;
            );
          );
          
          /*
          // Handle general double click cases
          !mouse_within_panel() ? (
            // Delete band?
            mouse_cap & 16 ? (
              band = 0;
              while( 
                Band_Enabled[band]!=BAND_STATE_OFF && is_node_selected(band) ? (
                  selected_node = -1;
                  listen_node = -1;
                  Band_Enabled[band] = BAND_STATE_OFF;

                  band == 0 ? gfx_band1.filter.svf_bypass() :
                  band == 1 ? gfx_band2.filter.svf_bypass() :
                  band == 2 ? gfx_band3.filter.svf_bypass() :
                  band == 3 ? gfx_band4.filter.svf_bypass() :
                  band == 4 ? gfx_band5.filter.svf_bypass() :
                  band == 5 ? gfx_band6.filter.svf_bypass() :
                  band == 6 ? gfx_band7.filter.svf_bypass() :
                  band == 7 ? gfx_band8.filter.svf_bypass();
                  band == 8 ? gfx_band9.filter.svf_bypass() :
                  band == 9 ? gfx_band10.filter.svf_bypass() :
                  band == 10 ? gfx_band11.filter.svf_bypass() :
                  band == 11 ? gfx_band12.filter.svf_bypass() :
                  band == 12 ? gfx_band13.filter.svf_bypass() :
                  band == 13 ? gfx_band14.filter.svf_bypass() :
                  band == 14 ? gfx_band15.filter.svf_bypass() :
                  band == 15 ? gfx_band16.filter.svf_bypass();

                  flag_filter_update(band);

                  filters_to_sliders();

                  band = NUM_BANDS;
                );
                band += 1;
                band < NUM_BANDS;
              );
            ) : (
              // Band toggle?
              toggled_band = 0;
              band = 0;
              while( 
                 Band_Enabled[band]!=BAND_STATE_OFF && is_node_selected(band) ? (
                  Band_Enabled[band]==BAND_STATE_DISABLED ? Band_Enabled[band] = BAND_STATE_ENABLED : Band_Enabled[band] = BAND_STATE_DISABLED;
                  toggled_band = 1;
                  band = NUM_BANDS;
                );
                band += 1;
                band < NUM_BANDS;
              );

              // Create band?
              !toggled_band && ree_mouse_y < grf_h - BOTTOM_MARGIN - gfx_texth ? ( 
                band = 0;
                while(
                  Band_Enabled[band]==BAND_STATE_OFF ? (                
                    create_band(band, ree_mouse_x+1, ree_mouse_y);
                    band = NUM_BANDS;
                  );
                  band += 1;
                  band < NUM_BANDS;
                );
              );
            );    
          );*/
        );
      );
      click_time = tm;
    );
    
    click_up = 0;

    !gen_dragging  && !mouse_within_panel() && node_drag_mode == 0 && box_region_drag_mode == 0 && button_focus == -1 ? (
      band = get_nearest_node();
      band != -1 ? (

        is_node_group_selected(band) ? (
          dont_deselect_node = 0;
        ) : (
          dont_deselect_node = 1;
        );

        (mouse_cap & 4) ? (
          select_node(band);          
        ) : (
          !is_node_group_selected(band) ? select_node_clear();
          select_node(band);          
        );

        //jj
        selected_node = band;
        selected_node_group = Band_Group[band];
        node_drag = band;
        node_drag_mode = 1;
        node_drag_origy = ree_mouse_y;
        node_drag_offy = ree_mouse_y - db_to_y(Band_Gain[band]);
        node_drag_offx = ree_mouse_x - freq_to_scx(Band_Frequency[band]);

        node_drag_stablex = ree_mouse_x;
        node_drag_stabley = ree_mouse_y;

        set_node_drag_offsets(band, ree_mouse_x, ree_mouse_y);

        mouse_cap & 4 ? ( 
          node_drag_lock = 1;
        ) : node_drag_lock = 0;
      ) : (
        // mouse_cap & 8 is here to check for listen mode...
        ree_mouse_y < grf_h - BOTTOM_MARGIN - gfx_texth && !(mouse_cap & 8)  ? (

          !(mouse_cap & 4) ? select_node_clear();

          selected_node = -1;

          !box_region_drag_mode ? (
            preserve_node_selected_states();
            mouse_cap & 4 ? box_region_drag_mode = 2 : box_region_drag_mode = 1;
            select_box_x = ree_mouse_x;
            select_box_y = ree_mouse_y;
          );
        );
        //listen_node q= -1;        
      );
    );

    node_drag_mode ? (

      mouse_cap & 8 ? (
        node_drag_mouse_speed == 1 ? (
          // Changing speed - reset offsets
          set_node_drag_offsets(node_drag, ree_mouse_x, ree_mouse_y);
          node_drag_stablex = ree_mouse_x;
          node_drag_stabley = ree_mouse_y;
        );

        node_drag_mouse_speed = 6;
      ) : (
        node_drag_mouse_speed == 6 ? (
          // Changing speed - reset offsets
          set_node_drag_offsets(node_drag, ree_mouse_x, ree_mouse_y);
          node_drag_stablex = ree_mouse_x;
          node_drag_stabley = ree_mouse_y;
          0;
        );

        node_drag_mouse_speed = 1;
      );

    /*
      mouse_cap & 4 ? (
        node_drag_lock = 1;
      ) : (
        node_drag_lock != 0 ? (
          // Reset offsets
          set_node_drag_offsets(node_drag, ree_mouse_x, ree_mouse_y);
          node_drag_stablex = ree_mouse_x;
          node_drag_stabley = ree_mouse_y;
        );
        node_drag_lock = 0;
      );
    */
      // Normal drag?
      node_drag_lock == 0 ? (
        // Don't deselect node when mouse click lifted
        (ree_mouse_x != node_drag_stablex || ree_mouse_y != node_drag_stabley) ? dont_deselect_node = 1;

        node_drag_origy = ree_mouse_y;

        diffx = ((ree_mouse_x - node_drag_stablex) / node_drag_mouse_speed) + ofx;
        diffy = (node_drag_stabley - ree_mouse_y) / node_drag_mouse_speed;
        
        update_drag_nodes_position(node_drag_stablex, node_drag_stabley, diffx, diffy);
      );

      // Fixed gain with Q control drag?
      /*
      node_drag_lock == 1 ? (
        // Don't deselect node when mouse click lifted
        (ree_mouse_x != node_drag_stablex || ree_mouse_y != node_drag_stabley) ? dont_deselect_node = 1;

        diffx = (ree_mouse_x - node_drag_stablex) / node_drag_mouse_speed;
        diffy = (node_drag_stabley - ree_mouse_y) / node_drag_mouse_speed;

        md = (node_drag_origy - ree_mouse_y) / node_drag_mouse_speed;
        node_drag_origy = ree_mouse_y;

        update_drag_nodes_Q(node_drag_stablex, node_drag_stabley, diffx, diffy, md);
      );
      */
      flag_filter_update(node_drag);
    );
     
  ) : (
    node_drag_mode = 0;
    node_drag_lock = 0;
    click_up = 1;
  );
  // Enable or disable listen mode
  /*
  mouse_cap & 8 && !box_region_drag_mode ? (
    do_listen == 0 ? ( 
      do_listen = 1;
    );
  ) : (
    do_listen != 0 ? ( 
      do_listen = 0;
      listen_filter.svf_bypass();
    );
  );
*/

  // Get mouse wheel movements
  mw = mouse_wheel;
  md = (mw - last_wheel) / 120;
  
  //last_wheel = 0;

  md != 0.0 ? ( 
    done_band = 0;

    band = get_nearby_node();
    band != -1 ? (
        done_band = 1;
        mouse_cap & 4 ? (
          // Alter filter slope
          md < 0 ? md = -1;
          md > 0 ? md = 1;

          Band_Selected[band] ? (
            update_selected_nodes_scroll_slope(md);
          ) : (
            update_node_scroll_slope(band, md);
          );
        ) : (
          // Alter filter Q
          // If we're selecting a band then affect all other selected bands. Otherwise only
          // affect the closest band.      
          Band_Selected[band] ? (
            update_selected_nodes_scroll_Q(md);
          ) : (
            update_node_scroll_Q(band, md);
          );
        );

        flag_filter_update(band);
    );

    // Shift held and not on a band?  Alter freeform listen width
    mouse_cap & 8 && done_band == 0 ? ( 
      listen_width -= md / 200;
      listen_width = min(0.30, listen_width);
      listen_width = max(0.01, listen_width);
    );
  );
);

box_region_drag_mode ? (
  // Draw node selector region
  gfx_r=gfx_g=gfx_b=1; gfx_a=0.4;

  box_x = min(ree_mouse_x, select_box_x);
  box_y = min(ree_mouse_y, select_box_y);
  box_xx = max(ree_mouse_x, select_box_x);
  box_yy = max(ree_mouse_y, select_box_y);
  box_yy = min(box_yy, grf_h - BOTTOM_MARGIN - gfx_texth);

  gfx_rect(box_x, box_y, box_xx - box_x, box_yy - box_y);

  gfx_r=gfx_g=gfx_b=1; gfx_a=0.8;
  gfx_x = box_x; gfx_y = box_y;
  gfx_lineto(box_xx, box_y);
  gfx_lineto(box_xx, box_yy);
  gfx_lineto(box_x, box_yy);
  gfx_lineto(box_x, box_y);

  // Select the nodes within this region
  select_nodes_in_box(box_x, box_y, box_xx, box_yy, box_region_drag_mode);
);

// Set the button positions each time in case we move between
// retina and non-retina displays (like I do!)
gfx_ext_retina == 2 ? (
  button_oversample_xoffset = 0;
  button_oversample_width = 70;
  button_stereo_mode_xoffset = 110;
  button_stereo_mode_width = 70;
  button_scale_xoffset = 220;
  button_scale_width = 90;
  button_gain_xoffset = 350;
  button_gain_width = 90;
  button_mid_gain_xoffset = 480;
  button_mid_gain_width = 100;
  button_side_gain_xoffset = 660;
  button_side_gain_width = 100;
  button_mid_toggle_xoffset = 610;
  button_mid_toggle_width = 10;
  button_side_toggle_xoffset = 790;
  button_side_toggle_width = 10;
  button_limit_toggle_xoffset = 840;
  button_limit_toggle_width = 50;
  button_agc_toggle_xoffset = 1030;
  button_agc_toggle_width = 60;
  button_agcset_toggle_xoffset = 1105;
  button_agcset_toggle_width = 5;
  button_panel_toggle_xoffset = 930;
  button_panel_toggle_width = 60;
  py = grf_h - (gfx_texth+28);
) : ( 
  button_oversample_xoffset = 0;
  button_oversample_width = 40;
  button_stereo_mode_xoffset = 65;
  button_stereo_mode_width = 40;
  button_scale_xoffset = 130;
  button_scale_width = 40;
  button_gain_xoffset = 195;
  button_gain_width = 50;
  button_mid_gain_xoffset = 270;
  button_mid_gain_width = 60;
  button_side_gain_xoffset = 380;
  button_side_gain_width = 60;
  button_mid_toggle_xoffset = 345;
  button_mid_toggle_width = 10;
  button_side_toggle_xoffset = 455;
  button_side_toggle_width = 10;
  button_limit_toggle_xoffset = 490;
  button_limit_toggle_width = 40;
  button_agc_toggle_xoffset = 620;
  button_agc_toggle_width = 40;
  button_agcset_toggle_xoffset = 665;
  button_agcset_toggle_width = 5;
  button_panel_toggle_xoffset = 555;
  button_panel_toggle_width = 40;
  py = grf_h - (gfx_texth);
);

// TODO: work in progress for panel to track selected node
/*
selected_node != -1 ? (
  panel_x = freq_to_scx(Band_Frequency[selected_node]) - floor(panel_w/2);
) : (
  panel_x = floor(grf_w/2 - panel_w/2);
);
*/

buttons_init == 0 || grf_w != OLD_WIDTH || grf_h != OLD_HEIGHT ? (
  button_oversample.init_options_button(button_oversample_xoffset, py, button_oversample_width, Quality, "ECO", "HQ", "Economy - Fastest, No Latency", "High Quality - Accurate, Latency");
  button_stereo_mode.init_options_button(button_stereo_mode_xoffset, py, button_stereo_mode_width, Stereo_Mode, "M/S", "L/R", "Mid / Side", "Left / Right");
  button_scale.init_number_button(button_scale_xoffset, py, button_scale_width, "", 1, 100);
  button_gain.init_number_button(button_gain_xoffset, py, button_gain_width, "", 0, 0);
  button_mid_gain.init_number_button(button_mid_gain_xoffset, py, button_mid_gain_width, "M: ", 0, 0);
  button_side_gain.init_number_button(button_side_gain_xoffset, py, button_side_gain_width, "S: ", 0, 0);

  button_mid_toggle.init_toggle_button(button_mid_toggle_xoffset, py, button_mid_toggle_width, 0, "");
  button_side_toggle.init_toggle_button(button_side_toggle_xoffset, py, button_side_toggle_width, 0, "");

  button_limit_toggle.init_toggle_button(button_limit_toggle_xoffset, py, button_limit_toggle_width, 0, "LIMIT");

  button_agc_toggle.init_toggle_button(button_agc_toggle_xoffset, py, button_agc_toggle_width, 0, "AGC");
  button_agcset_toggle.init_toggle_button(button_agcset_toggle_xoffset, py, button_agcset_toggle_width, 0, "S");

  button_panel_toggle.init_toggle_button(button_panel_toggle_xoffset, py, button_panel_toggle_width, 0, "PANEL");




/*
  panel_w = 550 * gfx_ext_retina;
  panel_h = 108 * gfx_ext_retina;

  gfx_setfont(2);

  panel_x = floor(grf_w/2 - panel_w/2);
  panel_y = grf_h - BOTTOM_MARGIN - gfx_texth*2.5 - panel_h;

  gfx_ext_retina == 2 ? panel_y += 10 * (gfx_ext_retina * 0.4) : panel_y += 10;

  panel_side_margin = 26 * gfx_ext_retina;
  panel_vert_margin = 8 * gfx_ext_retina;
  panel_gap1 = 20 * gfx_ext_retina;
  panel_gap2 = 20 * 2 * gfx_ext_retina;
  panel_gap3 = 20 * 3 * gfx_ext_retina;
  panel_gap4 = 20 * 4 * gfx_ext_retina;

  // Filter panel

  panel_bypass_xoffset = panel_x + panel_side_margin;
  panel_bypass_width = 50 * gfx_ext_retina;
  panel_bypass_toggle.init_toggle_button_small(panel_bypass_xoffset, panel_y+panel_vert_margin, panel_bypass_width, 0, "BYPASS");

  panel_shape_xoffset = panel_x + panel_side_margin;
  panel_shape_width = 112 * gfx_ext_retina;
  panel_shape_options.init_options_button_small2(panel_shape_xoffset, panel_y+panel_vert_margin+panel_gap1, panel_shape_width, 0, 14, FilterTypes);

  panel_slope_xoffset = panel_x + panel_side_margin;
  panel_slope_width = 50 * gfx_ext_retina;
  panel_slope_toggle.init_options_button_small2(panel_slope_xoffset, panel_y+panel_vert_margin+panel_gap2, panel_slope_width, 0, NumFilterSlopes, FilterSlopes);

  panel_stereo_xoffset = panel_x + panel_side_margin;
  panel_stereo_width = 50 * gfx_ext_retina;
  panel_stereo_options.init_options_button_small2(panel_stereo_xoffset, panel_y+panel_vert_margin+panel_gap3, panel_stereo_width, 0, 5, StereoModes);


  panel_delete_xoffset = panel_x + panel_w - panel_side_margin - 40 * gfx_ext_retina;
  panel_delete_width = 46 * gfx_ext_retina;
  panel_delete_toggle.init_close_button(panel_delete_xoffset, panel_y+panel_vert_margin, panel_delete_width, 0, "DELETE");


  panel_next_xoffset = panel_x + panel_w - panel_side_margin;
  panel_next_width = 6 * gfx_ext_retina;
  panel_next_toggle.init_toggle_button_small(panel_next_xoffset, panel_y+panel_vert_margin+panel_gap1, panel_next_width, 0, ">");

  panel_prev_xoffset = panel_x + panel_w - panel_side_margin - 38 * gfx_ext_retina;
  panel_prev_width = 6 * gfx_ext_retina;
  panel_prev_toggle.init_toggle_button_small(panel_prev_xoffset, panel_y+panel_vert_margin+panel_gap1, panel_next_width, 0, "<");


  panel_listen_xoffset = panel_x + panel_w - panel_side_margin - 40 * gfx_ext_retina;
  panel_listen_width = 46 * gfx_ext_retina;
  panel_listen_toggle.init_toggle_button_small(panel_listen_xoffset, panel_y+panel_vert_margin+panel_gap2, panel_listen_width, 0, "LISTEN");

  buttons_init == 0 ? (
    dial_freq.init_number_dial(100, 200, 20 * gfx_ext_retina, 0, "FREQ", "10kHz");
    dial_gain.init_number_dial(300, 200, 30 * gfx_ext_retina, 1, "GAIN", "18dB");
    dial_q.init_number_dial(500, 200, 20 * gfx_ext_retina, 0, "Q", "0.701");
  );

  gfx_setfont(1);

  buttons_init = 1;
  OLD_WIDTH = grf_w;
  OLD_HEIGHT = grf_h;
);

button_focus != -1 || (ree_mouse_x >= 0 && ree_mouse_x < grf_w && ree_mouse_y >=0 && ree_mouse_y < grf_h) || node_drag_mode != 0 || is_box_dragging() ? (
  gfx_ext_retina == 2 ? px = (grf_w / 2) - (1090/2) : px = (grf_w / 2) - (660/2);
  gfx_ext_retina == 2 ? py = grf_h - (gfx_texth+28) : py = grf_h - (gfx_texth+14);
  button_oversample.x = px+button_oversample_xoffset; button_oversample.y = py;
  button_stereo_mode.x = px+button_stereo_mode_xoffset; button_stereo_mode.y = py;
  button_scale.x = px+button_scale_xoffset; button_scale.y = py;
  button_gain.x = px+button_gain_xoffset; button_gain.y = py;
  button_mid_gain.x = px+button_mid_gain_xoffset; button_mid_gain.y = py;
  button_side_gain.x = px+button_side_gain_xoffset; button_side_gain.y = py;
  button_mid_toggle.x = px+button_mid_toggle_xoffset; button_mid_toggle.y = py;
  button_side_toggle.x = px+button_side_toggle_xoffset; button_side_toggle.y = py;
  button_limit_toggle.x = px+button_limit_toggle_xoffset; button_limit_toggle.y = py;
  button_agc_toggle.x = px+button_agc_toggle_xoffset; button_agc_toggle.y = py;
  button_agcset_toggle.x = px+button_agcset_toggle_xoffset; button_agcset_toggle.y = py;
  button_panel_toggle.x = px+button_panel_toggle_xoffset; button_panel_toggle.y = py;

  !compact_height && !compact_width ? (
    mb = button_oversample.handle_options_button();
    mb > 0 ? (

      mb - 1;
      set_oversample(Quality);

      flag_filter_update_all();

      filters_to_sliders();
    );

    button_oversample.draw_options_button();

    mb = button_stereo_mode.handle_options_button();
    mb > 0 ? Stereo_Mode = mb - 1;

    button_stereo_mode.draw_options_button();

    last_scale = Scale;
    button_scale.db = Scale;
    Scale = button_scale.handle_number_button();
    Scale != last_scale ? flag_filter_update_all();

    button_scale.draw_number_button();

    button_gain.db = Gain;
    Gain = button_gain.handle_number_button();

    button_gain.draw_number_button();

    button_mid_gain.label = Stereo_Mode ? "L: " : "M: ";
    button_mid_gain.db = MLGain;
    MLGain = button_mid_gain.handle_number_button();

    button_mid_gain.draw_number_button();

    button_side_gain.label = Stereo_Mode ? "R: " : "S: ";
    button_side_gain.db = SRGain;
    SRGain = button_side_gain.handle_number_button();

    button_side_gain.draw_number_button();

    button_mid_toggle.select = MidPolarity;
    MidPolarity = button_mid_toggle.handle_toggle_button();
    button_mid_toggle.draw_toggle_button();

    button_side_toggle.select = SidePolarity;
    SidePolarity = button_side_toggle.handle_toggle_button();
    button_side_toggle.draw_toggle_button();

    button_limit_toggle.select = LimitOutput;
    LimitOutput = button_limit_toggle.handle_toggle_button();
    button_limit_toggle.draw_toggle_button();

    button_agc_toggle.select = AGCEnabled;
    AGCEnabled = button_agc_toggle.handle_toggle_button();
    button_agc_toggle.draw_toggle_button();

    AGCEnabled ? (
      button_agcset_toggle.select = 0;
      agc_set = button_agcset_toggle.handle_toggle_button();
      button_agcset_toggle.draw_toggle_button();
      agc_set == 1 ? ( 
        agcOverride = 10;
        agcControl = 0;
        AGCEnabled = 0;
      );
    );

    button_panel_toggle.select = PanelEnabled;
    PanelEnabled = button_panel_toggle.handle_toggle_button();
    button_panel_toggle.draw_toggle_button();

    gfx_ext_retina == 2 ? (
      dbscale.x = grf_w - 60;
      dbscale.width = grf_w - (grf_w - 60);
    ) : (
      dbscale.x = grf_w - 40;
      dbscale.width = grf_w - (grf_w - 40);
    );

    dbscale.handle_dbscale_button();
  );

  !compact_height ? ( 
    gfx_ext_retina == 2 ? (
      menu.x = grf_w - 200; 
      menu.width = 120;
    ) : (
      menu.x = grf_w - 120; 
      menu.width = 60;
    );

    menu.draw_menu_button();
    menu.handle_menu_button();
  );
  



  //Filter node panel features:

    //Enable
    //Delete
    //Shape
    //Slope
    //Stereo
    //Split
    //Duplicate
    //Listen
    //Next
    //Prev

 

  ShowPanel && selected_node != -1 ? (
    // Draw node panel background
    gfx_r = 0; gfx_g = 0; gfx_b = 0; gfx_a = 0.5;
    gfx_rect(panel_x, panel_y, panel_w, panel_h);


    gfx_r = 70/255; gfx_g = 105/255; gfx_b = 127/255;
    gfx_a = 0.9;
    gfx_roundrect(panel_x-2, panel_y-2, panel_w+4, panel_h+4, 3, 1);
    gfx_roundrect(panel_x-1, panel_y-1, panel_w+2, panel_h+2, 3, 1);

    gfx_setfont(2);

    dial_freq.r = 20 * gfx_ext_retina;
    dial_gain.r = 30 * gfx_ext_retina;
    dial_q.r = 20 * gfx_ext_retina;

    // Bypass
    panel_bypass_toggle.select = Band_Enabled[selected_node] == 1;

    bypassed = panel_bypass_toggle.handle_toggle_button() ? 1 : 2;
    bypassed != Band_Enabled[selected_node] ? (
      Band_Enabled[selected_node] = bypassed;
      flag_filter_update(selected_node);
      filters_to_sliders();
    );

    panel_bypass_toggle.draw_toggle_button();

    // Shape
    panel_shape_options.select = FilterMappingFrom[Band_Type[selected_node]];

    panel_shape_options.draw_options_button2();

    new_shape = panel_shape_options.handle_options_button2();

    new_shape != -1 ? (
      new_shape = FilterMappingTo[new_shape];

      new_shape != Band_Type[selected_node] ? (

        Band_Type[selected_node] = new_shape;

        !(Band_Type[selected_node] == FILTER_LOW_CUT || Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH) ? (
          Band_Slope[selected_node] = 0;
        );

        Band_Type[selected_node] == FILTER_BAND_PASS || Band_Type[selected_node] == FILTER_NOTCH || Band_Type[selected_node] == FILTER_ALL_PASS || Band_Type[selected_node] == FILTER_LOW_CUT
         || Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH ? (
          Band_Gain[selected_node] = 0;
        );

        Band_Type[selected_node] == FILTER_PULTEC_LOW_SHELF ? Band_Q[selected_node] = 20 :
          Band_Q[selected_node] = 0.7071;

        flag_filter_update(selected_node);
    
        notify_touched_Q(selected_node);
        notify_touched_gain(selected_node);

        filters_to_sliders();
      );
    );


    // Slope
    Band_Type[selected_node] == FILTER_LOW_CUT || Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH ? (
      cur_slope = Band_Slope[selected_node];
      cur_slope == 7 ? cur_slope = 6 :
        cur_slope == (72/6)-1 ? cur_slope = 7 :
          cur_slope == (96/6)-1 ? cur_slope = 8 :
            cur_slope == (120/6)-1 ? cur_slope = 9;

      panel_slope_toggle.select = cur_slope;

      new_slope = panel_slope_toggle.handle_options_button2();

      new_slope != -1 && new_slope != cur_slope ? ( 

        match("%ddB", FilterSlopes[new_slope], values);

        set_node_slope(selected_node, (values / 6) - 1);

        filters_to_sliders();
      );

      panel_slope_toggle.draw_options_button2();
    );

    // Stereo
    panel_stereo_options.select = Band_Group[selected_node];

    new_stereo = panel_stereo_options.handle_options_button2();

    new_stereo != -1 && new_stereo != Band_Group[selected_node] ? (
      Band_Group[selected_node] = new_stereo;

      selected_node_group = Band_Group[selected_node];

      flag_filter_update(selected_node);

      filters_to_sliders();
    );

    panel_stereo_options.draw_options_button2();


    // Frequency dial
    gfx_a = 1;
    dial_freq.x = panel_x + panel_w/2 - 90 * gfx_ext_retina;
    dial_freq.y = panel_y + panel_h/2;

    dial_gain.x = panel_x + panel_w/2;
    dial_gain.y = panel_y + panel_h/2;

    dial_q.x = panel_x + panel_w/2 + 90 * gfx_ext_retina;
    dial_q.y = panel_y + panel_h/2;

    dial_freq.draw_number_dial();
    rotval = freq_to_per(Band_Frequency[selected_node], 1.0);

    v = dial_freq.handle_number_dial(rotval);

    v != rotval ? (
      Band_Frequency[selected_node] = per_to_freq(v, 1.0);
      flag_filter_update(selected_node);

      notify_touched_frequency(selected_node);
    );
    dial_freq.label2 = dialf.get_freq_str(Band_Frequency[selected_node]);

    // Gain dial
    gfx_a = 1; 
    (Band_Type[selected_node] == FILTER_LOW_CUT || Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT  || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH
      || Band_Type[selected_node] == FILTER_NOTCH || Band_Type[selected_node] == FILTER_BAND_PASS  || Band_Type[selected_node] == FILTER_ALL_PASS) ? gfx_a = 0.3;

    dial_gain.draw_number_dial();
    a1 = -30;  b1 = 30;
    rotval = (Band_Gain[selected_node] - a1) / (b1 - a1);

    !(Band_Type[selected_node] == FILTER_LOW_CUT || Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH
      || Band_Type[selected_node] == FILTER_NOTCH || Band_Type[selected_node] == FILTER_BAND_PASS  || Band_Type[selected_node] == FILTER_ALL_PASS) ? (
      
      v = dial_gain.handle_number_dial(rotval);
      v != rotval ? (
        Band_Gain[selected_node] = a1 + (b1 - a1) * v;
        flag_filter_update(selected_node);

        notify_touched_gain(selected_node);
      );
    ) : (
      dial_gain.v = 0.5;
    );
    dialgs = #;
    sprintf(dialgs, "%.2f dB", Band_Gain[selected_node]);
    dial_gain.label2 = dialgs;


    // Q dial
    gfx_a = 1;
    (Band_Type[selected_node] == FILTER_LOW_CUT || Band_Type[selected_node] == FILTER_HIGH_CUT) && Band_Slope[selected_model] == 0 ? gfx_a = 0.3;
    Band_Type[selected_node] == FILTER_LOW_CUT_BUTTERWORTH || Band_Type[selected_node] == FILTER_HIGH_CUT_BUTTERWORTH 
      || Band_Type[selected_node] == FILTER_LOW_CUT_ANALOG || Band_Type[selected_node] == FILTER_HIGH_CUT_ANALOG ? gfx_a = 0.3;

    dial_q.draw_number_dial();
    a1 = 0.10;  b1 = 40;
    rotval = q_to_per(Band_Q[selected_node], 1.0);

    v = dial_q.handle_number_dial(rotval);
    v != rotval ? (
      Band_Q[selected_node] = per_to_q(v, 1.0);
      flag_filter_update(selected_node);

      notify_touched_Q(selected_node);
    );

    dialqs = #;
    sprintf(dialqs, "%.2f", Band_Q[selected_node]);
    dial_q.label2 = dialqs;


    // Next band button
    next = panel_next_toggle.handle_toggle_button();
    next == 1 ? (
      
      panel_next_toggle.select = 0;

      done = 0;
      while(
        selected_node += 1;
        selected_node >= NUM_BANDS ? selected_node = 0;
        Band_Enabled[selected_node] != BAND_STATE_OFF ? (
          listen_node != -1 ? listen_node = selected_node;
          done = 1;
        );
        !done;
      );

      flag_filter_update(selected_node);
      filters_to_sliders();
    );

    panel_next_toggle.draw_toggle_button();


    // Previous band button
    prev = panel_prev_toggle.handle_toggle_button();
    prev == 1 ? (

      panel_prev_toggle.select = 0;

      done = 0;
      while(
        selected_node -= 1;
        selected_node < 0 ? selected_node = NUM_BANDS - 1;
        Band_Enabled[selected_node] != BAND_STATE_OFF ? ( 
          listen_node != -1 ? listen_node = selected_node;
          done = 1;
        );
        !done;
      );

      flag_filter_update(selected_node);
      filters_to_sliders();
    );

    panel_prev_toggle.draw_toggle_button();


    // Current node number
    wd = (selected_node >= 9) ? 15 : 20;

    gfx_x = panel_prev_toggle.x + wd * gfx_ext_retina;
    gfx_y = panel_prev_toggle.y + 2 * gfx_ext_retina;;

    gfx_r = gfx_b = gfx_g = 1;
    gfx_drawnumber(selected_node+1, 0);

    // Listen button
    old_listen = (listen_node == selected_node);
    panel_listen_toggle.select = old_listen;

    new_listen = panel_listen_toggle.handle_toggle_button();

    new_listen != -1 && new_listen != old_listen ? (
      new_listen == 0 ? listen_node = -1 : listen_node = selected_node;

      // Band_Enabled[selected_node] = bypassed;

      flag_filter_update(selected_node);
      filters_to_sliders();
    );

    panel_listen_toggle.draw_toggle_button();

    // Delete button
    panel_delete_xoffset = 750;
    panel_delete_width = 40;

    del = panel_delete_toggle.handle_close_button();
    del == 1 ? (
      
      panel_delete_toggle.select = 0;
      Band_Enabled[selected_node] = BAND_STATE_OFF;

      listen_node = -1;

      flag_filter_update(selected_node);
      filters_to_sliders();

      original_select_node = selected_node;
      done = 0;
      while(
        selected_node += 1;
        selected_node >= NUM_BANDS ? selected_node = 0;
        Band_Enabled[selected_node] != BAND_STATE_OFF ? (
          done = 1;
        ) :
        selected_node == original_selected_node ? ( 
          selected_node = -1;
          listen_node = -1;
          done = 1;
        );
        !done;
      );
    );

    panel_delete_toggle.draw_close_button();

    gfx_setfont(1);

  );
*/
);




gainDb = 2 ^ (Gain/6);
gainML = 2 ^ (MLGain/6);
gainSR = 2 ^ (SRGain/6);

gfx_r = gfx_g = gfx_b = gfx_a = 1.0; gfx_x = 100; gfx_y = 120;

//Band_Enabled[0] != 0 ? _global.test = Band_Enabled[0];

//gfx_printf("Global = %d", _global.test);  gfx_x = 100; gfx_y += 30;


//rms = RMSSidechain.RMS_getDB();
//gfx_printf("RMS pre = %f", RMSPre.RMS_getDB());  gfx_x = 100; gfx_y += 30;
//gfx_printf("RMS post = %f", RMSPost.RMS_getDB());  gfx_x = 100; gfx_y += 30;

//gfx_printf("gain_diff         = %f", diffdb);  gfx_x = 100; gfx_y += 120;

// gfx_printf("gain_diff         = %f", gain_diff);  gfx_x = 100; gfx_y = 120;

// gfx_printf("srate         = %f", srate);  gfx_x = 100; gfx_y = 120;
// gfx_printf("SAMPLE_RATE   = %f", SAMPLE_RATE);  gfx_x = 100; gfx_y = 140;
// gfx_printf("pdc_delay     = %f", pdc_delay);  gfx_x = 100; gfx_y = 160; 

/*
gfx_printf("BandProcess0 = %d BandEnabled0 = %d  rest = %d",Band_Process0, Band_Enabled[0], band1.filter.svf_is_resting()); gfx_x = 100; gfx_y = 140;
gfx_printf("Coeffs       = %f %f %f %f %f %f", band1.filter.a1, band1.filter.a2, band1.filter.a3, band1.filter.m0, band1.filter.m1, band1.filter.m2);  gfx_x = 100; gfx_y = 160;
gfx_printf("Targ Coeffs  = %f %f %f %f %f %f", band1.filter.t_a1, band1.filter.t_a2, band1.filter.t_a3, band1.filter.t_m0, band1.filter.t_m1, band1.filter.t_m2); gfx_x = 100; gfx_y = 180;
gfx_printf("Targ Steps  = %f %f %f %f %f %f", band1.filter.t_sa1, band1.filter.t_sa2, band1.filter.t_sa3, band1.filter.t_sm0, band1.filter.t_sm1, band1.filter.t_sm2); gfx_x = 100; gfx_y = 200;
*/

/*
gfx_printf("Listen_Process = %d do_listen = %d  rest = %d",Listen_Process, do_listen, listen_filter.svf_is_resting()); gfx_x = 100; gfx_y = 140;
gfx_printf("Coeffs       = %f %f %f %f %f %f", listen_filter.a1, listen_filter.a2, listen_filter.a3, listen_filter.m0, listen_filter.m1, listen_filter.m2);  gfx_x = 100; gfx_y = 160;
gfx_printf("Targ Coeffs  = %f %f %f %f %f %f", listen_filter.t_a1, listen_filter.t_a2, listen_filter.t_a3, listen_filter.t_m0, listen_filter.t_m1, listen_filter.t_m2); gfx_x = 100; gfx_y = 180;
gfx_printf("Targ Steps  = %f %f %f %f %f %f", listen_filter.t_sa1, listen_filter.t_sa2, listen_filter.t_sa3, listen_filter.t_sm0, listen_filter.t_sm1, listen_filter.t_sm2); gfx_x = 100; gfx_y = 200;
*/

//gfx_printf("bands enabled = %d %d %d %d %d %d %d %d", Band_Enabled[0], Band_Enabled[1], Band_Enabled[2], Band_Enabled[3], Band_Enabled[4], Band_Enabled[5], Band_Enabled[6], Band_Enabled[7]);  gfx_x = 100; gfx_y = 180;

/*
gfx_r = gfx_g = gfx_b = gfx_a = 1.0;

gfx_x = 100;
gfx_y = 100;

gfx_printf("a = %f %f %f", band1.filter.cas7.a1, band1.filter.cas7.a2, band1.filter.cas7.a3);  gfx_x = 100; gfx_y = 120;
gfx_printf("m = %f %f %f", band1.filter.cas7.m0, band1.filter.cas7.m1, band1.filter.cas7.m2);  gfx_x = 100; gfx_y = 140;

gfx_printf("ai = %f %f %f", band1.filter.cas1.i_a1.b, band1.filter.cas1.i_a2.b, band1.filter.cas1.i_a3.b);  gfx_x = 100; gfx_y = 120;



*/

 //N1_on.Parameter_Boundaries();
 N1_Gain.Parameter_Boundaries();
 N1_Freq.Parameter_Boundaries();
 N1_Q.Parameter_Boundaries();
 //N2_on.Parameter_Boundaries();
 N2_Gain.Parameter_Boundaries();
 N2_Freq.Parameter_Boundaries();
 N2_Q.Parameter_Boundaries();
 //N3_on.Parameter_Boundaries();
 N3_Gain.Parameter_Boundaries();
 N3_Freq.Parameter_Boundaries();
 N3_Q.Parameter_Boundaries();
 //N4_on.Parameter_Boundaries();
 N4_Gain.Parameter_Boundaries();
 N4_Freq.Parameter_Boundaries();
 N4_Q.Parameter_Boundaries();
 //N5_on.Parameter_Boundaries();
 N5_Gain.Parameter_Boundaries();
 N5_Freq.Parameter_Boundaries();
 N5_Q.Parameter_Boundaries();
 //N6_on.Parameter_Boundaries();
 N6_Freq.Parameter_Boundaries();
 N6_Q.Parameter_Boundaries();
 Outgain.Parameter_Boundaries();

  function OEQ_number_input_show () (
    gfx_r=gfx_g=gfx_b=0;
    gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
    gfx_r=0;gfx_g=1;gfx_b=0;
    gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
    gfx_r=gfx_g=gfx_b=0.7;
    gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
    gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
    gfx_drawnumber(number_input_use,komma);


        mouseclick && !shift_alt ? 
      (
        g_collision(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5) ?
        (
          OEQ_NI == 1 ? number_input_use = freq_to_per(number_input_use, 100);
          OEQ_NI == 2 ? number_input_use = q_to_per(number_input_use, 100);
          valid = 0;
          number_input_use >= number_input_min && number_input_use <= number_input_max ? valid = 1;
          valid ? (
          slider(number_input_slider) = number_input_use;
          caller = 1;
          ):(
          number_input_invalid = 90;
          );
          Number_input = 0;
          number_input_raw = 0;
          number_input_use = 0;
          komma = 0;
          in_key = 0;
          //number_input_x = 0;
          //number_input_y=0;
        ):(
          Number_input = 0;
          number_input_raw = 0;
          number_input_use = 0;
          komma = 0;
          in_key = 0;
          number_input_x = 0;
          number_input_y=0;
        );
      );

      in_key=gfx_getchar();

      in_key ? Aaa = in_key;
        in_key == 8 ? (
        number_input_raw = floor(number_input_raw/10);
        komma = max(0,komma-1);
        komma == 1 ? komma = 0;
        );

      in_key == 45 ? number_input_sign*=-1;

      in_key == 46 ? komma = 1;
      in_key > 47 ? (
      in_key < 58 ? (
          number_input_raw = (number_input_raw*10) + (in_key-48);
          komma ? komma += 1;
      );
      );

      komma ? (number_input_use = number_input_raw / (10^(komma-1))):(number_input_use = number_input_raw);
      number_input_use *= number_input_sign;

    );


 function readout_f () (
 sprintf(#readout, "%.2f", per_to_freq(slider(this.slider),100));
 gfx_x = this.xIn*zoom; gfx_y = this.yIn*zoom - gfx_texth - 2*zoom;
 gfx_measurestr(#readout, rdow, rdoh);
 gfx_r=gfx_b=gfx_g=0; gfx_rect(gfx_x+2*zoom, gfx_y, rdow+3*zoom, gfx_texth+2*zoom);
 gfx_r=gfx_g=gfx_b=0.8;
 gfx_x += 3*zoom;
 gfx_drawstr(#readout);
 );
 
 function readout_q () (
 sprintf(#readout, "%.2f", per_to_q(slider(this.slider),100));
 gfx_x = this.xIn*zoom; gfx_y = this.yIn*zoom - gfx_texth - 2*zoom;
 gfx_measurestr(#readout, rdow, rdoh);
 gfx_r=gfx_b=gfx_g=0; gfx_rect(gfx_x+2*zoom, gfx_y, rdow+3*zoom, gfx_texth+2*zoom);
 gfx_r=gfx_g=gfx_b=0.8;
 gfx_x += 3*zoom;
 gfx_drawstr(#readout);
 );
 
  
gfx_ext_flags == 1 ? (
zoom=(gfx_h/64);

gfx_setfont(3,"Arial",12*zoom,'b');

      #mini_group = sprintf(#, "%i", Link_Group);
      gfx_measurestr(#mini_group, mini_w, mini_h);
      gfx_x = gfx_w - mini_w - 2; gfx_y = 2;
      Link_Group ? (
        rgb_palette(Link_group);
        gfx_drawstr(#mini_group);
      );
      
      
      mouseClick ? (
      shift ? (
      slider(BBypass.slider) == 0 ? slider(BBypass.slider) = 1: slider(BBypass.slider) = 0; caller = 1;
      );
      );
      
     bypass == 1 ? (
     black(); gfx_a=0.4; gfx_rect(0,0,gfx_w,gfx_h);
     lightgrey();
     gfx_x=2;gfx_y=gfx_h - mini_h - 2;gfx_a=0.6;
     gfx_drawstr("BYPASS");
     );
      

);


gfx_ext_flags == 0 ? ( //MY_GFX_FLAG

SC_Listen ? (band = SC_Listen-1; draw_node(band, Band_Frequency[band], Band_Gain[band], Band_Enabled[band], 0); gfx_a = 1);
DYN_Box ? (band = DYN_BOX-1; draw_node(band, Band_Frequency[band], Band_Gain[band], Band_Enabled[band], 0); gfx_a = 1);



gfx_dest = -1;
gfx_x = gfx_y = 0;
gfx_blit(0,zoom,0);

gfx_x = ree_offset_x * zoom;
gfx_y = ree_offset_y * zoom;
gfx_blit(127,1,0,0,0,grf_w,grf_h);
lightgrey();
gfx_roundrect(gfx_x,gfx_y,grf_w,grf_h,0);



//////////////////////////////////////////////////////////////////////////////////////////////
gfx_setfont(1,"Arial",12*zoom,'b');
      N1_on.button3(); gfx_x = N1_on.xIn*zoom +8*zoom; gfx_y = n1_on.yIn*zoom + 33*zoom; gfx_drawstr("ON");
      gfx_x = N1_gain.xIn*zoom +5*zoom; gfx_y = n1_gain.yIn*zoom - 33*zoom; gfx_drawstr("LOW SHELF");
      N1_Gain.knob();
      gfx_setfont(1,"Arial",12*zoom,'b');
      #klabel = "GAIN"; gfx_measurestr(#klabel, klw, klh); N1_Gain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); N1_Gain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); N1_Gain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); N1_Gain.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); N1_Gain.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); N1_Gain.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); N1_Gain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N1_Freq.knob();
      
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N1_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N1_Freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N1_Freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      //#klabel = "180"; gfx_measurestr(#klabel, klw, klh); N1_Freq.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N1_Freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      //#klabel = "1.4k"; gfx_measurestr(#klabel, klw, klh); N1_Freq.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N1_Freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N1_Q.knob();
      #klabel = "Q"; gfx_measurestr(#klabel, klw, klh); N1_Q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "f / B"; gfx_measurestr(#kmeasure, klw, klh); N1_Q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "w"; gfx_measurestr(#klabel, klw, klh); N1_Q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); N1_Q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "n"; gfx_measurestr(#klabel, klw, klh); N1_Q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N1_gain.xIn*zoom - 23*zoom, N1_gain.yIn*zoom-45*zoom, (OEQ_knobs_x_plus+13)*zoom, 395*zoom,5*zoom);
      
      
      N2_on.button3(); gfx_x = N2_on.xIn*zoom - 30*zoom; gfx_y = n2_on.yIn*zoom + 11*zoom; gfx_drawstr("ON");
      gfx_x = N2_gain.xIn*zoom +8*zoom; gfx_y = N2_gain.yIn*zoom + 218*zoom; gfx_drawstr("PEAK EQ 1");
      N2_Gain.knob();
      gfx_setfont(1,"Arial",12*zoom,'b');
      #klabel = "GAIN"; gfx_measurestr(#klabel, klw, klh); N2_Gain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); N2_Gain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); N2_Gain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); N2_Gain.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); N2_Gain.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); N2_Gain.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); N2_Gain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N2_Freq.knob();
      
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N2_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N2_Freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N2_Freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      //#klabel = "180"; gfx_measurestr(#klabel, klw, klh); N2_Freq.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N2_Freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      //#klabel = "1.4k"; gfx_measurestr(#klabel, klw, klh); N2_Freq.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N2_Freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N2_Q.knob();
      #klabel = "Q"; gfx_measurestr(#klabel, klw, klh); N2_Q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "f / B"; gfx_measurestr(#kmeasure, klw, klh); N2_Q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "w"; gfx_measurestr(#klabel, klw, klh); N2_Q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); N2_Q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "n"; gfx_measurestr(#klabel, klw, klh); N2_Q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N2_freq.xIn*zoom - 10*zoom, N2_gain.yIn*zoom-18*zoom, OEQ_knobs_step*zoom, 255*zoom,5*zoom);
      
      
      N3_on.button3();gfx_x = N3_on.xIn*zoom - 30*zoom; gfx_y = n3_on.yIn*zoom + 11*zoom; gfx_drawstr("ON");
      gfx_x = N3_gain.xIn*zoom +8*zoom; gfx_y = N3_gain.yIn*zoom + 218*zoom; gfx_drawstr("PEAK EQ 2");
      N3_Gain.knob();
      gfx_setfont(1,"Arial",12*zoom,'b');
      #klabel = "GAIN"; gfx_measurestr(#klabel, klw, klh); N3_Gain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); N3_Gain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); N3_Gain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); N3_Gain.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); N3_Gain.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); N3_Gain.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); N3_Gain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N3_Freq.knob();
      
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N3_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N3_Freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N3_Freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      //#klabel = "180"; gfx_measurestr(#klabel, klw, klh); N3_Freq.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N3_Freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      //#klabel = "1.4k"; gfx_measurestr(#klabel, klw, klh); N3_Freq.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N3_Freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N3_Q.knob();
      #klabel = "Q"; gfx_measurestr(#klabel, klw, klh); N3_Q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "f / B"; gfx_measurestr(#kmeasure, klw, klh); N3_Q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "w"; gfx_measurestr(#klabel, klw, klh); N3_Q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); N3_Q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "n"; gfx_measurestr(#klabel, klw, klh); N3_Q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N3_freq.xIn*zoom - 10*zoom, N3_gain.yIn*zoom-18*zoom, OEQ_knobs_step*zoom, 255*zoom,5*zoom);
      
      N4_on.button3();gfx_x = N4_on.xIn*zoom - 30*zoom; gfx_y = n4_on.yIn*zoom + 11*zoom; gfx_drawstr("ON");
      gfx_x = N4_gain.xIn*zoom +8*zoom; gfx_y = N4_gain.yIn*zoom + 218*zoom; gfx_drawstr("PEAK EQ 3");
      N4_Gain.knob();
      gfx_setfont(1,"Arial",12*zoom,'b');
      #klabel = "GAIN"; gfx_measurestr(#klabel, klw, klh); N4_Gain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); N4_Gain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); N4_Gain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); N4_Gain.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); N4_Gain.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); N4_Gain.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); N4_Gain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N4_Freq.knob();
      
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N4_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N4_Freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N4_Freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      //#klabel = "180"; gfx_measurestr(#klabel, klw, klh); N4_Freq.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N4_Freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      //#klabel = "1.4k"; gfx_measurestr(#klabel, klw, klh); N4_Freq.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N4_Freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N4_Q.knob();
      #klabel = "Q"; gfx_measurestr(#klabel, klw, klh); N4_Q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "f / B"; gfx_measurestr(#kmeasure, klw, klh); N4_Q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "w"; gfx_measurestr(#klabel, klw, klh); N4_Q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); N4_Q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "n"; gfx_measurestr(#klabel, klw, klh); N4_Q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N4_freq.xIn*zoom - 10*zoom, N4_gain.yIn*zoom-18*zoom, OEQ_knobs_step*zoom, 255*zoom,5*zoom);
      
      
      N5_on.button3();gfx_x = N5_on.xIn*zoom +8*zoom; gfx_y = n5_on.yIn*zoom + 33*zoom; gfx_drawstr("ON");
      gfx_x = N5_gain.xIn*zoom +2*zoom; gfx_y = N5_gain.yIn*zoom - 33*zoom; gfx_drawstr("HIGH SHELF");
      N5_Gain.knob();
      gfx_setfont(1,"Arial",12*zoom,'b');
      #klabel = "GAIN"; gfx_measurestr(#klabel, klw, klh); N5_Gain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); N5_Gain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",10*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); N5_Gain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); N5_Gain.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); N5_Gain.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); N5_Gain.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); N5_Gain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N5_Freq.knob();
      
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N5_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N5_Freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N5_Freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      //#klabel = "180"; gfx_measurestr(#klabel, klw, klh); N5_Freq.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N5_Freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      //#klabel = "1.4k"; gfx_measurestr(#klabel, klw, klh); N5_Freq.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N5_Freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      
      N5_Q.knob();
      #klabel = "Q"; gfx_measurestr(#klabel, klw, klh); N5_Q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "f / B"; gfx_measurestr(#kmeasure, klw, klh); N5_Q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "w"; gfx_measurestr(#klabel, klw, klh); N5_Q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = ""; gfx_measurestr(#klabel, klw, klh); N5_Q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "n"; gfx_measurestr(#klabel, klw, klh); N5_Q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N5_gain.xIn*zoom - 23*zoom, N5_gain.yIn*zoom-45*zoom, (OEQ_knobs_x_plus+13)*zoom, 395*zoom,5*zoom);
      

      n6_freq.knob();
      n6_q.knob();
      n6_on.button3();gfx_x = N6_on.xIn*zoom - 30*zoom; gfx_y = n6_on.yIn*zoom + 11*zoom; gfx_drawstr("ON");
      gfx_x = N6_on.xIn*zoom - 40*zoom; gfx_y -= 30*zoom; gfx_drawstr("HIGH PASS FILTER");
      #klabel = "FREQ"; gfx_measurestr(#klabel, klw, klh); N6_Freq.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "Hz"; gfx_measurestr(#kmeasure, klw, klh); N6_freq.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
       gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "20"; gfx_measurestr(#klabel, klw, klh); N6_freq.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "500"; gfx_measurestr(#klabel, klw, klh); N6_freq.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
      #klabel = "12k"; gfx_measurestr(#klabel, klw, klh); N6_freq.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      gfx_setfont(1,"Arial",12*zoom,'b');
   
      #klabel = "SLOPE"; gfx_measurestr(#klabel, klw, klh); N6_q.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB/Oct"; gfx_measurestr(#kmeasure, klw, klh); N6_q.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "6"; gfx_measurestr(#klabel, klw, klh); n6_q.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "24"; gfx_measurestr(#klabel, klw, klh); n6_q.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "48"; gfx_measurestr(#klabel, klw, klh); n6_q.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N2_freq.xIn*zoom - 10*zoom, 510*zoom, 2*OEQ_knobs_step*zoom, 110*zoom,5*zoom);
      
      
      OutGain.knob();
      #klabel = "OUT TRIM"; gfx_measurestr(#klabel, klw, klh); OutGain.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
      #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); OutGain.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
      gfx_setfont(2,"Arial",9*zoom,'b');
      #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); OutGain.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      #klabel = "0"; gfx_measurestr(#klabel, klw, klh); OutGain.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
      #klabel = "24"; gfx_measurestr(#klabel, klw, klh); OutGain.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel);
      gfx_setfont(1,"Arial",12*zoom,'b');
      gfx_roundrect(N2_freq.xIn*zoom - 10*zoom+2*OEQ_knobs_step*zoom, 510*zoom, OEQ_knobs_step*zoom, 110*zoom,5*zoom);
      
      
      
      Bbypass.button(); gfx_x = Bbypass.xIn*zoom - 57*zoom; gfx_y = Bbypass.yIn*zoom + 12*zoom; gfx_drawstr("BYPASS");
      gfx_roundrect(Bbypass.xIn*zoom - 64*zoom, Bbypass.yIn*zoom + 4*zoom, 120*zoom, 28*zoom, 7*zoom);
      
      
      SC1_On ? rgb(0,255,30) : rgb(150,150,150);
      N1_Dyn_x = N1_Gain.xIn*zoom - 15*zoom; N1_Dyn_y = N1_Gain.yin * zoom - 35*zoom + 360*zoom;
      gfx_roundrect(N1_Dyn_x, N1_Dyn_y, 18*zoom, 18*zoom, 0);
      gfx_x = N1_Dyn_x + 5*zoom; gfx_y = N1_Dyn_y + 3*zoom;
      gfx_drawstr("D");
      listen_node == 0 ? rgb(255,0,30) : rgb(150,150,150);
      SC_Listen == 1 ? orange(); 
      N1_Solo_x =  N1_gain.size*zoom + N1_Gain.xIn*zoom - 74*zoom; N1_Solo_y = N1_Gain.yin * zoom - 35*zoom + 360*zoom;
      gfx_roundrect(N1_Solo_x, N1_Solo_y, 18*zoom, 18*zoom, 0);
      gfx_x = N1_Solo_x + 5*zoom; gfx_y = N1_Solo_y + 3*zoom;
      gfx_drawstr("S");      
      
      
      SC2_On ? rgb(0,255,30) : rgb(150,150,150);
      N2_Dyn_x = N2_Gain.xIn*zoom - 35*zoom; N2_Dyn_y = N2_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N2_Dyn_x, N2_Dyn_y, 18*zoom, 18*zoom, 0);
      gfx_x = N2_Dyn_x + 5*zoom; gfx_y = N2_Dyn_y + 3*zoom;
      gfx_drawstr("D");
      listen_node == 1 ? rgb(255,0,30) : rgb(150,150,150);
      SC_Listen == 2 ? orange(); 
      N2_Solo_x =  N2_gain.size*zoom + N2_Gain.xIn*zoom - 60*zoom; N2_Solo_y = N2_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N2_Solo_x, N2_Solo_y, 18*zoom, 18*zoom, 0);
      gfx_x = N2_Solo_x + 5*zoom; gfx_y = N2_Solo_y + 3*zoom;
      gfx_drawstr("S");
      
      SC3_On ? rgb(0,255,30) : rgb(150,150,150);
      N3_Dyn_x = N3_Gain.xIn*zoom - 35*zoom; N3_Dyn_y = N3_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N3_Dyn_x, N3_Dyn_y, 18*zoom, 18*zoom, 0);
      gfx_x = N3_Dyn_x + 5*zoom; gfx_y = N3_Dyn_y + 3*zoom;
      gfx_drawstr("D");
      listen_node == 2 ? rgb(255,0,30) : rgb(150,150,150);
      SC_Listen == 3 ? orange(); 
      N3_Solo_x =  N3_gain.size*zoom + N3_Gain.xIn*zoom - 60*zoom; N3_Solo_y = N3_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N3_Solo_x, N3_Solo_y, 18*zoom, 18*zoom, 0);
      gfx_x = N3_Solo_x + 5*zoom; gfx_y = N3_Solo_y + 3*zoom;
      gfx_drawstr("S"); 
      
      SC4_On ? rgb(0,255,30) : rgb(150,150,150);
      N4_Dyn_x = N4_Gain.xIn*zoom - 35*zoom; N4_Dyn_y = N4_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N4_Dyn_x, N4_Dyn_y, 18*zoom, 18*zoom, 0);
      gfx_x = N4_Dyn_x + 5*zoom; gfx_y = N4_Dyn_y + 3*zoom;
      gfx_drawstr("D");
      listen_node == 3 ? rgb(255,0,30) : rgb(150,150,150);
      SC_Listen == 4 ? orange(); 
      N4_Solo_x =  N4_gain.size*zoom + N4_Gain.xIn*zoom - 60*zoom; N4_Solo_y = N4_Gain.yin * zoom - 35*zoom + 246*zoom;
      gfx_roundrect(N4_Solo_x, N4_Solo_y, 18*zoom, 18*zoom, 0);
      gfx_x = N4_Solo_x + 5*zoom; gfx_y = N4_Solo_y + 3*zoom;
      gfx_drawstr("S"); 
      
      SC5_On ? rgb(0,255,30) : rgb(150,150,150);
      N5_Dyn_x = N5_Gain.xIn*zoom - 15*zoom; N5_Dyn_y = N5_Gain.yin * zoom - 35*zoom + 360*zoom;
      gfx_roundrect(N5_Dyn_x, N5_Dyn_y, 18*zoom, 18*zoom, 0);
      gfx_x = N5_Dyn_x + 5*zoom; gfx_y = N5_Dyn_y + 3*zoom;
      gfx_drawstr("D");
      listen_node == 4 ? rgb(255,0,30) : rgb(150,150,150);
      SC_Listen == 5 ? orange(); 
      N5_Solo_x =  N5_gain.size*zoom + N5_Gain.xIn*zoom - 74*zoom; N5_Solo_y = N5_Gain.yin * zoom - 35*zoom + 360*zoom;
      gfx_roundrect(N5_Solo_x, N5_Solo_y, 18*zoom, 18*zoom, 0);
      gfx_x = N5_Solo_x + 5*zoom; gfx_y = N5_Solo_y + 3*zoom;
      gfx_drawstr("S");      
      
 ////////////////////////////////////////////////////////////////////////////////////////////// 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
  ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
  last_clicked_item = -1;
  Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
  menu_x = 5; menu_y =5;
 
 gfx_x = menu_x * zoom; gfx_y = menu * zoom; gfx_a=1;
 //gfx_blit(menu,zoom/2,0);
 lightgrey(); //red();
 gfx_roundrect(menu_x * zoom, (menu_y + 5) * zoom, 20*zoom, 20*zoom, 0, 1);
 gfx_line((menu_x+3)*zoom, (menu_y + 11)*zoom, (menu_x+17)*zoom, (menu_y + 11)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 15)*zoom, (menu_x+17)*zoom, (menu_y + 15)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 19)*zoom, (menu_x+17)*zoom, (menu_y + 19)*zoom);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 lightgrey(); gfx_x = menu_x * zoom + 30*zoom;gfx_y += 4*zoom;
 gfx_drawstr("TUKAN STUDIOS  -  GREEN DYNAMIC EQ"); 
 gfx_setfont(1,"Arial",12*zoom,'i');
 lakeblue(); gfx_drawstr(" SERIES 2   ");
 gfx_setfont(1,"Arial",12*zoom,'b');
 link_group ? (
   rgb_palette(Link_group);// gfx_a = 0.7;
   gfx_drawstr("JOINS GROUP "); gfx_drawstr(sprintf(#,"%i", link_group));
 );
 gfx_a = 1;

 
  mouseClick ? (
   g_collision(menu_x*zoom, (menu_y+5) * zoom, 20*zoom, 20*zoom) ? (
    gfx_x = menu_x*zoom;
    gfx_y = (menu_y+20)*zoom;
     
      #item2 =">Processing|";#allitems = #item2;
     while_playing == 1 ? (#item2 = "!On Playback|"):(#item2 = "On Playback|");#allitems += #item2;
     while_recording == 1 ? (#item2 = "!On Recording|"):(#item2 = "On Recording|");#allitems += #item2;
     while_stopped == 1 ? (#item2 = "<!On Stop|>Groups|"):(#item2 = "<On Stop|>Groups|");#allitems += #item2;
 
     mnu_grp_loop = 1;
     loop(16,
 
       mnu_grp_loop == 16 ? #item2 += "<";
       gmem[16*64 + 10 + mnu_grp_loop] == 1 ? ( //Gruppe schon an ?
         mnu_grp_loop == Link_Group ? ( //ist selbst in der gruppe
                 #item2 = "!Joins Group ";
         ):(
             #item2 = "Add to Group ";
         );
       ):(
         #item2 = "Start Group ";
       );
     mnu_grp_loop == 1 ? #item2 += "01";
     mnu_grp_loop == 2 ? #item2 += "02";
     mnu_grp_loop == 3 ? #item2 += "03";
     mnu_grp_loop == 4 ? #item2 += "04";
     mnu_grp_loop == 5 ? #item2 += "05";
     mnu_grp_loop == 6 ? #item2 += "06";
     mnu_grp_loop == 7 ? #item2 += "07";
     mnu_grp_loop == 8 ? #item2 += "08";
     mnu_grp_loop == 9 ? #item2 += "09";
     mnu_grp_loop == 10 ? #item2 += "10";
     mnu_grp_loop == 11 ? #item2 += "11";
     mnu_grp_loop == 12 ? #item2 += "12";
     mnu_grp_loop == 13 ? #item2 += "13";
     mnu_grp_loop == 14 ? #item2 += "14";
     mnu_grp_loop == 15 ? #item2 += "15";
     mnu_grp_loop == 16 ? #item2 += "16";
     
     #item2 += "|";
     #allitems += #item2; //sprintf(#temp, '%f',3); 
     mnu_grp_loop += 1;
     );
     
     link_group ? (#allitems += "|<Delete Group ";#allitems += sprintf(#, "%d", link_group);#allitems += "|"):#allitems += "|<#Delete Group|";

     //#allitems += "<#MENU|";
    #allitems += ">Scaling|";
    zoom_off == 0 ? (#item2 = "!Automatic Scaling|"):(#item2 = "Automatic scaling|");#allitems += #item2;
    zoom_off == 1 ? (#item2 = "<!No scaling|"):(#item2 = "<No scaling|");#allitems += #item2;
    
    
    
    #allitems += ">Analyzer|";
    Display_Mode==0 ? (#item2 = "!Fill analyzer|"):(#item2 = "Fill analyzer|");#allitems += #item2;
    Show_PreEQ==1 ? (#item2 = "!Show input|"):(#item2 = "Show input|");#allitems += #item2;  
    
    #menu = "";
    #menu += ">Range|";
     Ceiling_Value == 0 ? #menu += "!"; #menu += "Ceiling 0dB|";
     Ceiling_Value == 1 ? #menu += "!"; #menu += "Ceiling 20dB|";
     Ceiling_Value == 2 ? #menu += "!"; #menu += "Ceiling 40dB||";
     Floor_Value == 0 ? #menu += "!"; #menu += "Floor -90dB|";
     Floor_Value == 1 ? #menu += "!"; #menu += "Floor -140dB|";
     Floor_Value == 2 ? #menu += "!"; #menu += "<Floor -200dB|";
    
     #menu += ">Tilt|";
     Tilt_Value == 0 ? #menu += "!"; #menu += "0dB/oct|";
     Tilt_Value == 1 ? #menu += "!"; #menu += "1.5dB/oct|";
     Tilt_Value == 2 ? #menu += "!"; #menu += "3dB/oct|";
     Tilt_Value == 3 ? #menu += "!"; #menu += "4.5dB/oct|";
     Tilt_Value == 4 ? #menu += "!"; #menu += "<6dB/oct|";
    
     #menu += ">Window Type|";
     Type_Value == 0 ? #menu += "!"; #menu += "Hamming|";
     Type_Value == 1 ? #menu += "!"; #menu += "Blackman-Harris|";
     Type_Value == 2 ? #menu += "!"; #menu += "Blackman|";
     Type_Value == 3 ? #menu += "!"; #menu += "<Rectangular|";
    
     #menu += ">FFT Size|";
     Block_Value == 0 ? #menu += "!"; #menu += "2048|";
     Block_Value == 1 ? #menu += "!"; #menu += "4096|";
     Block_Value == 2 ? #menu += "!"; #menu += "8192|";
     Block_Value == 3 ? #menu += "!"; #menu += "<16384|<|";
    #allitems += #menu;
    
    Quality==1 ? (#item2 = "!Oversample (Decramp)|"):(#item2 = "Oversample (Decramp)|");#allitems += #item2;  
    #allitems += "|Show Info/Help";
    last_clicked_item = gfx_showmenu(#allitems);
  );
  );
 
 
 
 
  
  last_clicked_item == 1 ? (while_playing == 0 ? (while_playing = 1):(while_playing = 0);processing_update();caller=1);
  last_clicked_item == 2 ? (while_recording == 0 ? (while_recording = 1):(while_recording = 0);processing_update();caller=1);
  last_clicked_item == 3 ? (while_stopped == 0 ? (while_stopped = 1):(while_stopped = 0);processing_update();caller=1);
 
   cgroup = last_clicked_item - 3;
  last_clicked_item > 3 && last_clicked_item < 20 ? (
     Link_Group != cgroup ? ( //eigene Linkgruppe NICHT angeklickt
         gmem[16*64 + 10 + cgroup] == 0 ? ( // Gruppe noch frei
             //gmem[16*64 + 10 + cgroup] = 1; Link_Group = cgroup; gmem[16*64 +27 + cgruop] = 1; //Gruppe Starten!
             gmem[16*64 + 10 + cgroup] = 1;Link_Group = cgroup;group_update();
         ):(
             Link_Group = cgroup;// Gruppe teilnehmen
             group_matching();
             caller = 1;
         );
     ):( //Eigene Gruppe angeklickt
           Link_Group = 0;
     );
  
  );
  
   cgroup = last_clicked_item - 3 - 16;
  last_clicked_item == 20 ? (
    gmem[16*64 + 10 + Link_Group] = 0;Link_Group = 0;
  );
  
  
  
  
  
  last_clicked_item == 20 + 1 ? zoom_off == 0 ? (zoom_off = 1):(zoom_off = 0);
  last_clicked_item == 20 + 2 ? zoom_off == 0 ? (zoom_off = 1):(zoom_off = 0); 
  last_clicked_item == 20 + 3 ? (Display_Mode == 0 ? (Display_Mode = 1):(Display_Mode = 0); update_state();caller=1;);
  last_clicked_item == 20 + 4 ? (Show_PreEQ == 0 ? (Show_PreEQ = 1):(Show_PreEQ = 0); update_state();caller=1;);
  
  last_clicked_item == 20 + 5 ? (Ceiling_Value = 0; update_state();caller=1;);
  last_clicked_item == 20 + 6 ? (Ceiling_Value = 1; update_state();caller=1;);
  last_clicked_item == 20 + 7 ? (Ceiling_Value = 2; update_state();caller=1;);
  last_clicked_item == 20 + 8 ? (Floor_Value = 0; update_state();caller=1;);
  last_clicked_item == 20 + 9 ? (Floor_Value = 1; update_state();caller=1;);
  last_clicked_item == 20 + 10 ? (Floor_Value = 2; update_state();caller=1;);
  last_clicked_item == 20 + 11 ? (Tilt_Value = 0; update_state();caller=1;);
  last_clicked_item == 20 + 12 ? (Tilt_Value = 1; update_state();caller=1;);
  last_clicked_item == 20 + 13 ? (Tilt_Value = 2; update_state();caller=1;);
  last_clicked_item == 20 + 14 ? (Tilt_Value = 3; update_state();caller=1;);
  last_clicked_item == 20 + 15 ? (Tilt_Value = 4; update_state();caller=1;);
  last_clicked_item == 20 + 16 ? (Type_Value = 0; update_state();caller=1;);
  last_clicked_item == 20 + 17 ? (Type_Value = 1; update_state();caller=1;);
  last_clicked_item == 20 + 18 ? (Type_Value = 2; update_state();caller=1;);
  last_clicked_item == 20 + 19 ? (Type_Value = 3; update_state();caller=1;);
  last_clicked_item == 20 + 20 ? (Block_Value = 0; update_state();caller=1;);
  last_clicked_item == 20 + 21 ? (Block_Value = 1; update_state();caller=1;);
  last_clicked_item == 20 + 22 ? (Block_Value = 2; update_state();caller=1;);
  last_clicked_item == 20 + 23 ? (Block_Value = 3; update_state();caller=1;);
  last_clicked_item == 20 + 24 ? (
  
                                  quality == 0 ? (quality = 1):(quality = 0); 
                                  set_oversample(Quality);
                                  flag_filter_update_all();
                                  filters_to_sliders();
                                  );
  
  last_clicked_item == 20 + 25 ? helpshow = 1;
  
  helpshow == 1 ? (
  gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
  gfx_rect(menu_x,menu_y+0,310*zoom,125*zoom);
  menu_x +=3;
  gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
  gfx_x = menu_x+3*zoom; gfx_y = menu_y+3*zoom;
  gfx_drawstr("TUKAN STUDIOS GREEN DYNAMIC EQ (Series 2)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Version: "); gfx_drawnumber(GEQ_VERSION,2);
  gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
  gfx_drawstr("Mouse modifier options:");
  gfx_x = menu_x+3*zoom; gfx_y += 15*zoom;
  gfx_drawstr("Fine tune knobs: [shift]");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Reset knobs: [ctrl] ([cmd] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Link knobs on visible instances: [win] ([ctrl] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Activate number typing: [alt]+[shift]");
  gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
  gfx_drawstr("Toggle Dynamics: [alt]+[click] the [D]");
  );
  
  
  ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
  
 
 
 
 
 
 
 
 
 
 ////////////////////////////////////////////  DYN BOX /////////////////////////////////////////////////////
 //Dyn_Box = 3;
 
 Dyn_box ? (
 gfx_r=0.1;gfx_g=1;gfx_b=0; gfx_a=1;
 black(); gfx_a = 0.35;
 gfx_rect(0,0,169*zoom, gfx_h);
 gfx_rect(169*zoom,0,462*zoom, 40 * zoom);
 gfx_rect(631*zoom,0,gfx_w, gfx_h);
 gfx_rect(169*zoom,241*zoom,462*zoom, gfx_h);
 gfx_a = 1;
 
 
 gfx_x = 170 * zoom; gfx_y = 270*zoom;
 gfx_blit(0,zoom,0,0,0,460,260);
 
 
 
 lightgrey();
 gfx_roundrect(gfx_x, gfx_y, 460*zoom, 260*zoom, 0);
 
 black();
 gfx_rect(200*zoom, 300*zoom, 400*zoom, 17*zoom);
 gfx_r = gfx_b=gfx_g = 0.4;
 gfx_roundrect(200*zoom - 1, 300*zoom - 1, 400*zoom + 2, 17*zoom + 2,0);
 
 DYN_In_Meter.meter_config(200,300,400,5,60, 40);
 
 gfx_r=0.3;gfx_g=1;gfx_b=0; gfx_a=1;
 DYN_In_Meter.dB_Val_Max = -60;
 DYN_In_Meter.meter_show();
 
 
 DYN_Box == 1 ? Dyn_Thresh_Handle_x = 200 * zoom + zoom*400*(60+SC1_thresh)/60;
 DYN_Box == 2 ? Dyn_Thresh_Handle_x = 200 * zoom + zoom*400*(60+SC2_thresh)/60;
 DYN_Box == 3 ? Dyn_Thresh_Handle_x = 200 * zoom + zoom*400*(60+SC3_thresh)/60;
 DYN_Box == 4 ? Dyn_Thresh_Handle_x = 200 * zoom + zoom*400*(60+SC4_thresh)/60;
 DYN_Box == 5 ? Dyn_Thresh_Handle_x = 200 * zoom + zoom*400*(60+SC5_thresh)/60;
 rgb(100, 255, 100);
 gfx_triangle(Dyn_Thresh_Handle_x, 306*zoom, Dyn_Thresh_Handle_x - 8*zoom, 314*zoom, Dyn_Thresh_Handle_x + 8 *zoom, 314*zoom);
 lightgrey();
 gfx_x = 365*zoom; gfx_y = 280*zoom;
 gfx_drawstr("THRESHOLD:");
 
 DYN_BOX == 1 ? SC1_Sensivity.knob();
 DYN_BOX == 2 ? SC2_Sensivity.knob();
 DYN_BOX == 3 ? SC3_Sensivity.knob();
 DYN_BOX == 4 ? SC4_Sensivity.knob();
 DYN_BOX == 5 ? SC5_Sensivity.knob();
 gfx_setfont(1,"Arial",12*zoom,'b');
 #klabel = "SENSITIVITY"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
 #kmeasure = "over/n"; gfx_measurestr(#kmeasure, klw, klh); SC1_Sensivity.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
 gfx_setfont(2,"Arial",10*zoom,'b');
 #klabel = "0"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "2.5"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "5"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
 #klabel = "7.5"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
 #klabel = "10"; gfx_measurestr(#klabel, klw, klh); SC1_Sensivity.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 DYN_BOX == 1 ? SC1_Range.knob();
 DYN_BOX == 2 ? SC2_Range.knob();
 DYN_BOX == 3 ? SC3_Range.knob();
 DYN_BOX == 4 ? SC4_Range.knob();
 DYN_BOX == 5 ? SC5_Range.knob();
 gfx_setfont(1,"Arial",12*zoom,'b');
 #klabel = "RANGE"; gfx_measurestr(#klabel, klw, klh); SC1_Range.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
 #kmeasure = "dB"; gfx_measurestr(#kmeasure, klw, klh); SC1_Range.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
 gfx_setfont(2,"Arial",10*zoom,'b');
 #klabel = "-24"; gfx_measurestr(#klabel, klw, klh); SC1_Range.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "-12"; gfx_measurestr(#klabel, klw, klh); SC1_Range.labelposition(3,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "0"; gfx_measurestr(#klabel, klw, klh); SC1_Range.labelposition(5,klw, klh); lightgrey(); gfx_x += 1*zoom; gfx_drawstr(#klabel); 
 #klabel = "+12"; gfx_measurestr(#klabel, klw, klh); SC1_Range.labelposition(7,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
 #klabel = "+24"; gfx_measurestr(#klabel, klw, klh); SC1_Range.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel); 
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 DYN_BOX == 1 ? SC1_attack.knob();
 DYN_BOX == 2 ? SC2_attack.knob();
 DYN_BOX == 3 ? SC3_attack.knob();
 DYN_BOX == 4 ? SC4_attack.knob();
 DYN_BOX == 5 ? SC5_attack.knob();
 #klabel = "ATTACK"; gfx_measurestr(#klabel, klw, klh); SC1_Attack.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
 #kmeasure = "ms"; gfx_measurestr(#kmeasure, klw, klh); SC1_Attack.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
 gfx_setfont(2,"Arial",9*zoom,'b');
 #klabel = "0.1"; gfx_measurestr(#klabel, klw, klh); SC1_Attack.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "50"; gfx_measurestr(#klabel, klw, klh); SC1_Attack.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
 #klabel = "100"; gfx_measurestr(#klabel, klw, klh); SC1_Attack.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 
 
 DYN_BOX == 1 ? SC1_Release.knob();
 DYN_BOX == 2 ? SC2_Release.knob();
 DYN_BOX == 3 ? SC3_Release.knob();
 DYN_BOX == 4 ? SC4_Release.knob();
 DYN_BOX == 5 ? SC5_Release.knob();
 #klabel = "RELEASE"; gfx_measurestr(#klabel, klw, klh); SC1_Release.knoblabelposition(klw); lightgrey(); gfx_drawstr(#klabel);
 #kmeasure = "ms"; gfx_measurestr(#kmeasure, klw, klh); SC1_Release.knobmeasureposition(klw, klh); lakeblue(); gfx_a = 0.8; gfx_drawstr(#kmeasure); gfx_a = 1;
 gfx_setfont(2,"Arial",9*zoom,'b');
 #klabel = "10"; gfx_measurestr(#klabel, klw, klh); SC1_Release.labelposition(1,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 #klabel = "205"; gfx_measurestr(#klabel, klw, klh); SC1_Release.labelposition(5,klw, klh); lightgrey(); gfx_x += 0*zoom; gfx_drawstr(#klabel); 
 #klabel = "400"; gfx_measurestr(#klabel, klw, klh); SC1_Release.labelposition(9,klw, klh); lightgrey(); gfx_drawstr(#klabel);
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 
 DYN_Box == 1 ? SC1_On.button();
 DYN_Box == 2 ? SC2_On.button();
 DYN_Box == 3 ? SC3_On.button();
 DYN_Box == 4 ? SC4_On.button();
 DYN_Box == 5 ? SC5_On.button();
 gfx_x = Sc1_On.xIn * zoom - 50*zoom; gfx_y = SC1_on.yin * zoom + 11*zoom;
 gfx_drawstr("DYN. ON");
 
 gfx_x -= 390*zoom; gfx_y += 10*zoom;
 DYN_Box == 1 ? gfx_drawstr("LOW SHELF");
 DYN_Box == 2 ? gfx_drawstr("PEAK EQ 1");
 DYN_Box == 3 ? gfx_drawstr("PEAK EQ 2");
 DYN_Box == 4 ? gfx_drawstr("PEAK EQ 3");
 DYN_Box == 5 ? gfx_drawstr("HIGH SHELF");
//gfx_x = 170 * zoom; gfx_y = 270*zoom;
// gfx_blit(0,zoom,0,0,0,460,260);
/*
 shadow_loop = 0;
 loop(10*zoom,
 black(); gfx_a = 0.7-(0.7*shadow_loop / (10*zoom));
 gfx_line(180*zoom, 530* zoom + shadow_loop, 640* zoom, 530*zoom+ shadow_loop);
 shadow_loop += 1;
 );
 */
 
 //Band_Gain[0]
 
 gainresult_x = 200*zoom; gainresult_y = 350*zoom; gainresult_w = 10*zoom; gainresult_h = 150*zoom;
 black();
 gfx_rect(gainresult_x, gainresult_y-7*zoom, gainresult_w*2.5, gainresult_h+14*zoom);

 gfx_r = gfx_b=gfx_g = 0.4;
 gfx_roundrect(gainresult_x-1, gainresult_y-7*zoom-1, gainresult_w*2.5+1, gainresult_h+14*zoom+1 ,0);
 
 gfx_setfont(2,"Arial",9*zoom,'b');
 tmploop = 24;
 Loop(9,
 gainresult_y_line = gainresult_y + gainresult_h/2 - (tmploop/24) * gainresult_h/2;
 gfx_rect(gainresult_x, gainresult_y_line, gainresult_w, 1*zoom);
 gfx_x = gainresult_x + gainresult_w + 2*zoom; gfx_y = gainresult_y_line - gfx_texth/2;
 gfx_drawnumber(tmploop,0);
 tmploop -= 6;
 );
 
 rgb(100,255,100);
 gainresult_y = gainresult_y + gainresult_h/2 - (Band_gain[DYN_Box-1]/24) * gainresult_h/2;
 gfx_rect(gainresult_x, gainresult_y-5*zoom, gainresult_w, 10*zoom);
 
 gfx_setfont(1);
 
 
 DYN_Box == SC_Listen ? rgb(255,0,30) : rgb(150,150,150);
 Dyn_Solo_x =  580*zoom; Dyn_Solo_y = 460*zoom;
 gfx_roundrect(Dyn_Solo_x, Dyn_Solo_y, 18*zoom, 18*zoom, 0);
 gfx_x = dyn_Solo_x + 5*zoom; gfx_y = Dyn_Solo_y + 3*zoom;
 gfx_drawstr("S");
 
 Dyn_box == 1 ? dyn_Sc_input = SC1_Input;
 Dyn_box == 2 ? dyn_Sc_input = SC2_Input;
 Dyn_box == 3 ? dyn_Sc_input = SC3_Input;
 Dyn_box == 4 ? dyn_Sc_input = SC4_Input;
 Dyn_box == 5 ? dyn_Sc_input = SC5_Input;
  
SC_Input_x = 562*zoom; SC_Input_y = 435*zoom;
gfx_roundrect(SC_input_x, SC_Input_y, 36*zoom, 18*zoom, 0);
 gfx_x = SC_Input_x + 5*zoom; gfx_y = SC_Input_y + 3*zoom;
 dyn_Sc_input == 0 ? (
 gfx_x += 4*zoom;gfx_drawstr("INT");
 ):(
 gfx_drawstr("SC ");
 gfx_drawnumber(dyn_sc_Input,0);
 );

 ); // Dyn box
 ////////////////////////////////////////////  ENDE DYN BOX /////////////////////////////////////////////////////
 
 //listen_node > -1 ? draw_listen_helper();
 
 
 
 ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
 
 
       !Number_input ? (
       
      DYN_BOX ? (
      g_collision(170*zoom,270*zoom,460*zoom,260*zoom) ? (
      
      mouseClick == 1 ? (
      solotouch =0 ;
      g_collision(Dyn_Solo_x, Dyn_Solo_y , 18*zoom, 18*zoom) ? (
      DYN_BOX == SC_Listen ?  SC_Listen = 0 : SC_Listen = DYN_Box; 
      solotouch = 1;
      );
      /*
      g_collision(N2_Solo_x, N2_Solo_y , 18*zoom, 18*zoom) ? (SC_Listen == 2 ? SC_Listen = 0 : SC_Listen = 2; solotouch = 1);
      g_collision(N3_Solo_x, N3_Solo_y , 18*zoom, 18*zoom) ? (SC_Listen == 3 ? SC_Listen = 0 : SC_Listen = 3; solotouch = 1);
      g_collision(N4_Solo_x, N4_Solo_y , 18*zoom, 18*zoom) ? (SC_Listen == 4 ? SC_Listen = 0 : SC_Listen = 4; solotouch = 1);
      g_collision(N5_Solo_x, N5_Solo_y , 18*zoom, 18*zoom) ? (SC_Listen == 5 ? SC_Listen = 0 : SC_Listen = 5; solotouch = 1);
      
      solotouch ? (listen_node = SC_Listen-1; SC_Listen = 0);
      */
      //slider26
      solotouch ? (
      press_superkey ? (
      gmem[16*64 + 3] = 2;
      gmem[16*64 + 1] = 26;
      gmem[16*64 + 2] = SC_Listen;
      );
      caller = 1;
      );
      );
      
      Dyn_box == 1 ? (
      mouseClick == 1 ? (
      OEQ_NI = 0; 
        g_collision(Dyn_Thresh_Handle_x -8*zoom, 306*zoom, 16*zoom, 8*zoom) ? SC1_Threshold.h_dragstart();
        SC1_sensivity.k_collision() ? SC1_sensivity.dragstart();
        SC1_Range.k_collision() ? SC1_Range.dragstart();
        SC1_Attack.k_collision() ? SC1_Attack.dragstart();
        SC1_Release.k_collision() ? SC1_Release.dragstart();
        SC1_on.B_collision() ? (SC1_On == 0 ? SC1_On = 1 : sc1_on = 0; SC1_On.quicklink_button(); caller = 1);
        g_collision(SC_Input_x, SC_Input_y, 36*zoom, 18*zoom) ? (
        inp_select = -1;
        inp_select = gfx_showmenu("Internal|SC 1|SC 2|SC 3|SC 4|SC 5|");
        inp_select > 0 ? (
        SC1_Input = inp_select-1;
        );
        );
      ); // Mouse click
      mouse_wheel ? 
          (
            SC1_sensivity.k_collision()   ? SC1_sensivity.potWheel():
            SC1_range.k_collision()   ? SC1_range.potWheel():
            SC1_attack.k_collision()   ? SC1_attack.potWheel():
            SC1_release.k_collision()   ? SC1_release.potWheel():
           mouse_wheel=0;
           caller = 1;
          ); //Mouse wheel
      ); // Dyn box number
      
      Dyn_box == 2 ? (
      mouseClick == 1 ? (
      OEQ_NI = 0; 
        g_collision(Dyn_Thresh_Handle_x -8*zoom, 306*zoom, 16*zoom, 8*zoom) ? SC2_Threshold.h_dragstart();
        SC2_sensivity.k_collision() ? SC2_sensivity.dragstart();
        SC2_Range.k_collision() ? SC2_Range.dragstart();
        SC2_Attack.k_collision() ? SC2_Attack.dragstart();
        SC2_Release.k_collision() ? SC2_Release.dragstart();
        SC2_on.B_collision() ? (SC2_On == 0 ? SC2_On = 1 : SC2_on = 0; SC2_On.quicklink_button(); caller = 1);
        g_collision(SC_Input_x, SC_Input_y, 36*zoom, 18*zoom) ? (
        inp_select = -1;
        inp_select = gfx_showmenu("Internal|SC 1|SC 2|SC 3|SC 4|SC 5|");
        inp_select > 0 ? (
        SC2_Input = inp_select-1;
        );
        );
      ); // Mouse click
      mouse_wheel ? 
          (
            SC2_sensivity.k_collision()   ? SC2_sensivity.potWheel():
            SC2_range.k_collision()   ? SC2_range.potWheel():
            SC2_attack.k_collision()   ? SC2_attack.potWheel():
            SC2_release.k_collision()   ? SC2_release.potWheel():
           mouse_wheel=0;
           caller = 1;
          ); //Mouse wheel
      ); // Dyn box number
      
      Dyn_box == 3 ? (
      mouseClick == 1 ? (
      OEQ_NI = 0; 
        g_collision(Dyn_Thresh_Handle_x -8*zoom, 306*zoom, 16*zoom, 8*zoom) ? SC3_Threshold.h_dragstart();
        SC3_sensivity.k_collision() ? SC3_sensivity.dragstart();
        SC3_Range.k_collision() ? SC3_Range.dragstart();
        SC3_Attack.k_collision() ? SC3_Attack.dragstart();
        SC3_Release.k_collision() ? SC3_Release.dragstart();
        SC3_on.B_collision() ? (SC3_On == 0 ? SC3_On = 1 : SC3_on = 0; SC3_On.quicklink_button(); caller = 1);
        g_collision(SC_Input_x, SC_Input_y, 36*zoom, 18*zoom) ? (
        inp_select = -1;
        inp_select = gfx_showmenu("Internal|SC 1|SC 2|SC 3|SC 4|SC 5|");
        inp_select > 0 ? (
        SC3_Input = inp_select-1;
        );
        );
      ); // Mouse click
      mouse_wheel ? 
          (
            SC3_sensivity.k_collision()   ? SC3_sensivity.potWheel():
            SC3_range.k_collision()   ? SC3_range.potWheel():
            SC3_attack.k_collision()   ? SC3_attack.potWheel():
            SC3_release.k_collision()   ? SC3_release.potWheel():
           mouse_wheel=0;
           caller = 1;
          ); //Mouse wheel
      ); // Dyn box number
      
      Dyn_box == 4 ? (
      mouseClick == 1 ? (
      OEQ_NI = 0; 
        g_collision(Dyn_Thresh_Handle_x -8*zoom, 306*zoom, 16*zoom, 8*zoom) ? SC4_Threshold.h_dragstart();
        SC4_sensivity.k_collision() ? SC4_sensivity.dragstart();
        SC4_Range.k_collision() ? SC4_Range.dragstart();
        SC4_Attack.k_collision() ? SC4_Attack.dragstart();
        SC4_Release.k_collision() ? SC4_Release.dragstart();
        SC4_on.B_collision() ? (SC4_On == 0 ? SC4_On = 1 : SC4_on = 0; SC4_On.quicklink_button(); caller = 1);
        g_collision(SC_Input_x, SC_Input_y, 36*zoom, 18*zoom) ? (
        inp_select = -1;
        inp_select = gfx_showmenu("Internal|SC 1|SC 2|SC 3|SC 4|SC 5|");
        inp_select > 0 ? (
        SC4_Input = inp_select-1;
        );
        );
      ); // Mouse click
      mouse_wheel ? 
          (
            SC4_sensivity.k_collision()   ? SC4_sensivity.potWheel():
            SC4_range.k_collision()   ? SC4_range.potWheel():
            SC4_attack.k_collision()   ? SC4_attack.potWheel():
            SC4_release.k_collision()   ? SC4_release.potWheel():
           mouse_wheel=0;
           caller = 1;
          ); //Mouse wheel
      ); // Dyn box number
      
      Dyn_box == 5 ? (
      mouseClick == 1 ? (
      OEQ_NI = 0; 
        g_collision(Dyn_Thresh_Handle_x -8*zoom, 306*zoom, 16*zoom, 8*zoom) ? SC5_Threshold.h_dragstart();
        SC5_sensivity.k_collision() ? SC5_sensivity.dragstart();
        SC5_Range.k_collision() ? SC5_Range.dragstart();
        SC5_Attack.k_collision() ? SC5_Attack.dragstart();
        SC5_Release.k_collision() ? SC5_Release.dragstart();
        SC5_on.B_collision() ? (SC5_On == 0 ? SC5_On = 1 : SC5_on = 0; SC5_On.quicklink_button(); caller = 1);
        g_collision(SC_Input_x, SC_Input_y, 36*zoom, 18*zoom) ? (
        inp_select = -1;
        inp_select = gfx_showmenu("Internal|SC 1|SC 2|SC 3|SC 4|SC 5|");
        inp_select > 0 ? (
        SC5_Input = inp_select-1;
        );
        );
      ); // Mouse click
      mouse_wheel ? 
          (
            SC5_sensivity.k_collision()   ? SC5_sensivity.potWheel():
            SC5_range.k_collision()   ? SC5_range.potWheel():
            SC5_attack.k_collision()   ? SC5_attack.potWheel():
            SC5_release.k_collision()   ? SC5_release.potWheel():
           mouse_wheel=0;
           caller = 1;
          ); //Mouse wheel
      ); // Dyn box number
      
      
      ):( //DYNBOX Collision
      mouseClick == 1 ? (
      DYN_Box = 0;
      SC_Listen = 0;
      gmem[16*64 + 3] = 2;
      gmem[16*64 + 1] = 26;
      gmem[16*64 + 2] = SC_Listen;
      caller = 1;
      );
      
      );
      
      
      mouseClick == -1 ? (
      SC1_Threshold.dragstop();
      SC1_sensivity.dragstop();
      SC1_Range.dragstop();
      SC1_attack.dragstop();
      SC1_release.dragstop();
      SC2_Threshold.dragstop();
      SC2_sensivity.dragstop();
      SC2_Range.dragstop();
      SC2_attack.dragstop();
      SC2_release.dragstop();
      SC3_Threshold.dragstop();
      SC3_sensivity.dragstop();
      SC3_Range.dragstop();
      SC3_attack.dragstop();
      SC3_release.dragstop();
      SC4_Threshold.dragstop();
      SC4_sensivity.dragstop();
      SC4_Range.dragstop();
      SC4_attack.dragstop();
      SC4_release.dragstop();
      SC5_Threshold.dragstop();
      SC5_sensivity.dragstop();
      SC5_Range.dragstop();
      SC5_attack.dragstop();
      SC5_release.dragstop();
      );
      
      
      SC1_Threshold.h_dragging ? (SC1_Threshold.h_potdrag(400*zoom); caller = 1);
      SC1_sensivity.dragging ? (SC1_sensivity.potdrag(); SC1_sensivity.readout();caller = 1;);
      SC1_Range.dragging ? (SC1_Range.potdrag(); SC1_Range.readout();caller = 1;);
      SC1_Attack.dragging ? (SC1_Attack.potdrag(); SC1_Attack.readout();caller = 1;);
      SC1_Release.dragging ? (SC1_Release.potdrag(); SC1_Release.readout();caller = 1;);
      
      SC2_Threshold.h_dragging ? (SC2_Threshold.h_potdrag(400*zoom); caller = 1);
      SC2_sensivity.dragging ? (SC2_sensivity.potdrag(); SC2_sensivity.readout();caller = 1;);
      SC2_Range.dragging ? (SC2_Range.potdrag(); SC2_Range.readout();caller = 1;);
      SC2_Attack.dragging ? (SC2_Attack.potdrag(); SC2_Attack.readout();caller = 1;);
      SC2_Release.dragging ? (SC2_Release.potdrag(); SC2_Release.readout();caller = 1;);
      
      SC3_Threshold.h_dragging ? (SC3_Threshold.h_potdrag(400*zoom); caller = 1);
      SC3_sensivity.dragging ? (SC3_sensivity.potdrag(); SC3_sensivity.readout();caller = 1;);
      SC3_Range.dragging ? (SC3_Range.potdrag(); SC3_Range.readout();caller = 1;);
      SC3_Attack.dragging ? (SC3_Attack.potdrag(); SC3_Attack.readout();caller = 1;);
      SC3_Release.dragging ? (SC3_Release.potdrag(); SC3_Release.readout();caller = 1;);
      
      SC4_Threshold.h_dragging ? (SC4_Threshold.h_potdrag(400*zoom); caller = 1);
      SC4_sensivity.dragging ? (SC4_sensivity.potdrag(); SC4_sensivity.readout();caller = 1;);
      SC4_Range.dragging ? (SC4_Range.potdrag(); SC4_Range.readout();caller = 1;);
      SC4_Attack.dragging ? (SC4_Attack.potdrag(); SC4_Attack.readout();caller = 1;);
      SC4_Release.dragging ? (SC4_Release.potdrag(); SC4_Release.readout();caller = 1;);
      
      SC5_Threshold.h_dragging ? (SC5_Threshold.h_potdrag(400*zoom); caller = 1);
      SC5_sensivity.dragging ? (SC5_sensivity.potdrag(); SC5_sensivity.readout();caller = 1;);
      SC5_Range.dragging ? (SC5_Range.potdrag(); SC5_Range.readout();caller = 1;);
      SC5_Attack.dragging ? (SC5_Attack.potdrag(); SC5_Attack.readout();caller = 1;);
      SC5_Release.dragging ? (SC5_Release.potdrag(); SC5_Release.readout();caller = 1;);
      ):( // DYN BOX
      
       mouseClick == 1 ? (
       N1_Gain.k_collision() ? (OEQ_NI = 0; N1_gain.dragstart());
       N1_freq.k_collision() ? (OEQ_NI = 1; N1_freq.dragstart());
       N1_q.k_collision() ?    (OEQ_NI = 2; N1_q.dragstart());
       N1_on.b_collision() ?   (caller=1;slider(N1_on.slider) == 0 ? slider(N1_on.slider) = 2: slider(N1_on.slider) == 2 ? slider(N1_on.slider) = 1:slider(N1_on.slider) == 1 ? slider(N1_on.slider) = 0;N1_On.quicklink_button(); Caller = 1);
       N2_Gain.k_collision() ? (OEQ_NI = 0; N2_gain.dragstart());
       N2_freq.k_collision() ? (OEQ_NI = 1; N2_freq.dragstart());
       N2_q.k_collision() ?    (OEQ_NI = 2; N2_q.dragstart());
       N2_on.b_collision() ?   (caller=1;slider(N2_on.slider) == 0 ? slider(N2_on.slider) = 2: slider(N2_on.slider) == 2 ? slider(N2_on.slider) = 1:slider(N2_on.slider) == 1 ? slider(N2_on.slider) = 0;N2_On.quicklink_button(); Caller = 1);
       N3_Gain.k_collision() ? (OEQ_NI = 0; N3_gain.dragstart());
       N3_freq.k_collision() ? (OEQ_NI = 1; N3_freq.dragstart());
       N3_q.k_collision() ?    (OEQ_NI = 2; N3_q.dragstart());
       N3_on.b_collision() ?   (caller=1;slider(N3_on.slider) == 0 ? slider(N3_on.slider) = 2: slider(N3_on.slider) == 2 ? slider(N3_on.slider) = 1:slider(N3_on.slider) == 1 ? slider(N3_on.slider) = 0;N3_On.quicklink_button(); Caller = 1);
       N4_Gain.k_collision() ? (OEQ_NI = 0; N4_gain.dragstart());
       N4_freq.k_collision() ? (OEQ_NI = 1; N4_freq.dragstart());
       N4_q.k_collision() ?    (OEQ_NI = 2; N4_q.dragstart());
       N4_on.b_collision() ?   (caller=1;slider(N4_on.slider) == 0 ? slider(N4_on.slider) = 2: slider(N4_on.slider) == 2 ? slider(N4_on.slider) = 1:slider(N4_on.slider) == 1 ? slider(N4_on.slider) = 0;N4_On.quicklink_button(); Caller = 1);
       N5_Gain.k_collision() ? (OEQ_NI = 0; N5_gain.dragstart());
       N5_freq.k_collision() ? (OEQ_NI = 1; N5_freq.dragstart());
       N5_q.k_collision() ?    (OEQ_NI = 2; N5_q.dragstart());
       N5_on.b_collision() ?   (caller=1;slider(N5_on.slider) == 0 ? slider(N5_on.slider) = 2: slider(N5_on.slider) == 2 ? slider(N5_on.slider) = 1:slider(N5_on.slider) == 1 ? slider(N5_on.slider) = 0;N5_On.quicklink_button(); Caller = 1);
       N6_freq.k_collision() ? (OEQ_NI = 1; N6_freq.dragstart());
       N6_q.k_collision() ?    (OEQ_NI = 2; N6_q.dragstart());
       N6_on.b_collision() ?   (caller=1;slider(N6_on.slider) == 0 ? slider(N6_on.slider) = 2: slider(N6_on.slider) == 2 ? slider(N6_on.slider) = 1:slider(N6_on.slider) == 1 ? slider(N6_on.slider) = 0;N6_On.quicklink_button(); Caller = 1);
        OutGain.k_collision() ? (OEQ_NI = 0; Outgain.dragstart());
       BBypass.b_collision() ? (slider(BBypass.slider) == 0 ? (slider(BBypass.slider) = 1; caller = 1):(slider(BBypass.slider) = 0; caller =1);BBypass.quicklink_button());
       
       g_collision(N1_Dyn_x, N1_Dyn_y , 18*zoom, 18*zoom) ? !press_alt ? (!press_superkey ? DYN_BOX = 1) : (SC1_On == 0 ? SC1_on = 1 : SC1_on = 0; SC1_on.quicklink_button(); caller = 1);
       g_collision(N2_Dyn_x, N2_Dyn_y , 18*zoom, 18*zoom) ? !press_alt ? (!press_superkey ? DYN_BOX = 2) : (SC2_On == 0 ? SC2_on = 1 : SC2_on = 0; SC2_on.quicklink_button(); caller = 1);
       g_collision(N3_Dyn_x, N3_Dyn_y , 18*zoom, 18*zoom) ? !press_alt ? (!press_superkey ? DYN_BOX = 3) : (SC3_On == 0 ? SC3_on = 1 : SC3_on = 0; SC3_on.quicklink_button(); caller = 1);
       g_collision(N4_Dyn_x, N4_Dyn_y , 18*zoom, 18*zoom) ? !press_alt ? (!press_superkey ? DYN_BOX = 4) : (SC4_On == 0 ? SC4_on = 1 : SC4_on = 0; SC4_on.quicklink_button(); caller = 1);
       g_collision(N5_Dyn_x, N5_Dyn_y , 18*zoom, 18*zoom) ? !press_alt ? (!press_superkey ? DYN_BOX = 5) : (SC5_On == 0 ? SC5_on = 1 : SC5_on = 0; SC5_on.quicklink_button(); caller = 1);
       
  g_collision(N1_Dyn_x, N1_Dyn_y , 18*zoom, 18*zoom) ? press_superkey ? (SC1_On == 0 ? SC1_on = 1 : SC1_on = 0; SC1_on.quicklink_button(); caller = 1);
  g_collision(N2_Dyn_x, N2_Dyn_y , 18*zoom, 18*zoom) ? press_superkey ? (SC2_On == 0 ? SC2_on = 1 : SC2_on = 0; SC2_on.quicklink_button(); caller = 1);
  g_collision(N3_Dyn_x, N3_Dyn_y , 18*zoom, 18*zoom) ? press_superkey ? (SC3_On == 0 ? SC3_on = 1 : SC3_on = 0; SC3_on.quicklink_button(); caller = 1);
  g_collision(N4_Dyn_x, N4_Dyn_y , 18*zoom, 18*zoom) ? press_superkey ? (SC4_On == 0 ? SC4_on = 1 : SC4_on = 0; SC4_on.quicklink_button(); caller = 1);
  g_collision(N5_Dyn_x, N5_Dyn_y , 18*zoom, 18*zoom) ? press_superkey ? (SC5_On == 0 ? SC5_on = 1 : SC5_on = 0; SC5_on.quicklink_button(); caller = 1);
       
       !alt ? g_collision(N1_Solo_x, N1_Solo_y , 18*zoom, 18*zoom) ? (listen_node == 1-1 ? listen_node = 0-1 : listen_node = 1-1; solotouch = 1; SC_Listen = 0);
       !alt ? g_collision(N2_Solo_x, N2_Solo_y , 18*zoom, 18*zoom) ? (listen_node == 2-1 ? listen_node = 0-1 : listen_node = 2-1; solotouch = 1; SC_Listen = 0);
       !alt ? g_collision(N3_Solo_x, N3_Solo_y , 18*zoom, 18*zoom) ? (listen_node == 3-1 ? listen_node = 0-1 : listen_node = 3-1; solotouch = 1; SC_Listen = 0);
       !alt ? g_collision(N4_Solo_x, N4_Solo_y , 18*zoom, 18*zoom) ? (listen_node == 4-1 ? listen_node = 0-1 : listen_node = 4-1; solotouch = 1; SC_Listen = 0);
       !alt ? g_collision(N5_Solo_x, N5_Solo_y , 18*zoom, 18*zoom) ? (listen_node == 5-1 ? listen_node = 0-1 : listen_node = 5-1; solotouch = 1; SC_Listen = 0);
       
       solotouch = 0;
       alt ? g_collision(N1_Solo_x, N1_Solo_y , 18*zoom, 18*zoom) ? (listen_node = -1; Sc_Listen == 1 ? SC_Listen = 0 : SC_Listen = 1; solotouch = 1;);
       alt ? g_collision(N2_Solo_x, N2_Solo_y , 18*zoom, 18*zoom) ? (listen_node = -1; Sc_Listen == 2 ? SC_Listen = 0 : SC_Listen = 2; solotouch = 1;);
       alt ? g_collision(N3_Solo_x, N3_Solo_y , 18*zoom, 18*zoom) ? (listen_node = -1; Sc_Listen == 3 ? SC_Listen = 0 : SC_Listen = 3; solotouch = 1;);
       alt ? g_collision(N4_Solo_x, N4_Solo_y , 18*zoom, 18*zoom) ? (listen_node = -1; Sc_Listen == 4 ? SC_Listen = 0 : SC_Listen = 4; solotouch = 1;);
       alt ? g_collision(N5_Solo_x, N5_Solo_y , 18*zoom, 18*zoom) ? (listen_node = -1; Sc_Listen == 5 ? SC_Listen = 0 : SC_Listen = 5; solotouch = 1;);
      
      solotouch ? (
      press_superkey ? (
      gmem[16*64 + 3] = 2;
      gmem[16*64 + 1] = 26;
      gmem[16*64 + 2] = SC_Listen;
      );
      caller = 1;
      );
      
      
       );
       
       mouseclick == -1 ? (
       N1_gain.dragstop();
       N1_freq.dragstop();
       N1_q.dragstop();
       N2_gain.dragstop();
       N2_freq.dragstop();
       N2_q.dragstop();
       N3_gain.dragstop();
       N3_freq.dragstop();
       N3_q.dragstop();
       N4_gain.dragstop();
       N4_freq.dragstop();
       N4_q.dragstop();
       N5_gain.dragstop();
       N5_freq.dragstop();
       N5_q.dragstop();
       N6_freq.dragstop();
       N6_q.dragstop();
       OutGain.dragstop();
       );
       
       
       mouse_wheel ? 
           (
             N1_gain.k_collision()   ? N1_Gain.potWheel():
             N1_freq.k_collision()  ?  N1_freq.potWheel():
             N1_q.k_collision()    ?   N1_q.potWheel():
             N2_gain.k_collision()   ? N2_Gain.potWheel():
             N2_freq.k_collision()  ?  N2_freq.potWheel():
             N2_q.k_collision()    ?   N2_q.potWheel():
             N3_gain.k_collision()   ? N3_Gain.potWheel():
             N3_freq.k_collision()  ?  N3_freq.potWheel():
             N3_q.k_collision()    ?   N3_q.potWheel():
             N4_gain.k_collision()   ? N4_Gain.potWheel():
             N4_freq.k_collision()  ?  N4_freq.potWheel():
             N4_q.k_collision()    ?   N4_q.potWheel():
             N5_gain.k_collision()   ? N5_Gain.potWheel():
             N5_freq.k_collision()  ?  N5_freq.potWheel():
             N5_q.k_collision()    ?   N5_q.potWheel():
             N6_freq.k_collision()  ?  N6_freq.potWheel():
             N6_q.k_collision()    ?   N6_q.potWheel():
             
             Outgain.k_collision()    ? outgain.potWheel():
            mouse_wheel=0;
            caller = 1;
           );
        
        
       N1_Gain.dragging ? (N1_Gain.potdrag(); N1_Gain.readout();caller = 1;);
       N1_Freq.dragging ? (N1_Freq.potdrag();N1_Freq.readout_f();caller = 1;);
       N1_Q.dragging ? (N1_Q.potdrag();N1_Q.readout_q();caller = 1;);
       N2_Gain.dragging ? (N2_Gain.potdrag();N2_Gain.readout();caller = 1;);
       N2_Freq.dragging ? (N2_Freq.potdrag();N2_Freq.readout_f();caller = 1;);
       N2_Q.dragging ? (N2_Q.potdrag();N2_Q.readout_q();caller = 1;);
       N3_Gain.dragging ? (N3_Gain.potdrag();N3_Gain.readout();caller = 1;);
       N3_Freq.dragging ? (N3_Freq.potdrag();N3_Freq.readout_f();caller = 1;);
       N3_Q.dragging ? (N3_Q.potdrag();N3_Q.readout_q();caller = 1;);
       N4_Gain.dragging ? (N4_Gain.potdrag();N4_Gain.readout();caller = 1;);
       N4_Freq.dragging ? (N4_Freq.potdrag();N4_Freq.readout_f();caller = 1;);
       N4_Q.dragging ? (N4_Q.potdrag();N4_Q.readout_q();caller = 1;);
       N5_Gain.dragging ? (N5_Gain.potdrag();N5_Gain.readout();caller = 1;);
       N5_Freq.dragging ? (N5_Freq.potdrag();N5_Freq.readout_f();caller = 1;);
       N5_Q.dragging ? (N5_Q.potdrag();N5_Q.readout_q();caller = 1;);
       N6_Freq.dragging ? (N6_Freq.potdrag();N6_Freq.readout_f();caller = 1;);
       N6_Q.dragging ? (N6_Q.potdrag_integer();N6_Q_q.readout();caller = 1;);
       outgain.dragging ? (outgain.potdrag();outgain.readout();caller = 1;);

     
     

     
     ); // DYN BOX

 
      Link_Group == 0 ? (
      gmem[16*64 + 3] == 0 ? linkstart = 0;
      !mouse_cap ? (
      gmem[16*64 + 3] == 1 ? (linkstart == 0 ? link_old = slider(gmem[16*64 + 1]); linkstart = 1);
      gmem[16*64 + 3] == 1 ? (
           tmp_val = link_old +  gmem[16*64 + 2];
      slider(gmem[16*64 + 1]) = tmp_val;
      slider_automate(slider(gmem[16*64 + 1]));
      caller = 1;
      );
      gmem[16*64 + 3] == 2 ? (
      slider(gmem[16*64 + 1]) =  gmem[16*64 + 2];
      caller = 1;
      );
      );
      );
      
      
      
      ); // !number_input

      
      
     
      
      
      number_input ? OEQ_number_input_show();
      //OEQ_NI == 1 ? number_input
      number_input_invalid = max(0,number_input_invalid-1);
      number_input_invalid ? ( 
      gfx_r=gfx_g=gfx_b=0;
      gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
      gfx_r=0;gfx_g=1;gfx_b=0;
      gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
      red();
      gfx_rect(zoom*number_input_x + gfx_texth+5,zoom*number_input_y, 200*zoom - (gfx_texth+5), gfx_texth+5);
      gfx_r=gfx_g=gfx_b=0.7;
      gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
      gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
      white();
      gfx_drawstr("NO VALID INPUT!");
      );
    
 ////////////////////////////////////////////////////////////////////////////////////////////// ENDE MAUS STEUERUNG
 

katze=1; 
):gfx_ext_flags == 1 ? (
katze = 1;
mouse_wheel=0;
);
 
 

/*
 //N1_on.Parameter_Boundaries();
 N1_Gain.Parameter_Boundaries();
 N1_Freq.Parameter_Boundaries();
 N1_Q.Parameter_Boundaries();
 //N2_on.Parameter_Boundaries();
 N2_Gain.Parameter_Boundaries();
 N2_Freq.Parameter_Boundaries();
 N2_Q.Parameter_Boundaries();
 //N3_on.Parameter_Boundaries();
 N3_Gain.Parameter_Boundaries();
 N3_Freq.Parameter_Boundaries();
 N3_Q.Parameter_Boundaries();
 //N4_on.Parameter_Boundaries();
 N4_Gain.Parameter_Boundaries();
 N4_Freq.Parameter_Boundaries();
 N4_Q.Parameter_Boundaries();
 //N5_on.Parameter_Boundaries();
 N5_Gain.Parameter_Boundaries();
 N5_Freq.Parameter_Boundaries();
 N5_Q.Parameter_Boundaries();
 //N6_on.Parameter_Boundaries();
 N6_Freq.Parameter_Boundaries();
 N6_Q.Parameter_Boundaries();
 Outgain.Parameter_Boundaries();
 */
// link_group_master == 0 ? group_Matching(); 
 
S2_sample_on == 0 ? (
gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
group_check_gfx();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  );
);
);
S2_sample_on = 0;
 
 
  
 //link_group_master == 1 ? (
 //parameters_update_on == 0 ? group_master_collision();
 //);
 
 
 


 
 
 
 
 
 
//gfx_x = 20; gfx_y = 20;
//gfx_drawnumber(per_to_q(Node1_Q, 100),3);

