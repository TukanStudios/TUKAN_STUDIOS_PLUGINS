desc:Multiband Processor S2 (Tukan Studios)
tags: bandsplitter
version: 0.19
author: Joep Vanlier
changelog: Include filter slopes in the syncing.
provides:
  BandJoiner.jsfx
  BandSplitter_phasematcher.jsfx
about:
  # 4-pole Band Splitter
  4-pole band splitter that preserves phase between the bands. It has a UI and uses much steeper crossover filters (24 dB/oct) than the default that ships with Reaper thereby providing sharper band transitions.
  It also has an option for linear phase FIR crossovers instead of the default IIR filters. IIRs cost less CPU and introduce no preringing or latency. The linear phase FIRs however prevent phase distortion (which can be important in some mixing settings), but introduce latency compensation. Note that when using the linear phase filters, it is not recommended to modulate the crossover frequencies as this introduces crackles.
  [Screenshot](https://i.imgur.com/nOhiaJB.png)
  ### Demos
  You can find a tutorial of the plugin [here](https://www.youtube.com/watch?v=JU_7gIr5RTI).
  
license: MIT

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right outpu
out_pin:Band1 Left
out_pin:Band1 Right
out_pin:Band2 Left
out_pin:Band2 Right
out_pin:Band3 Left
out_pin:Band3 Right
out_pin:Band4 Left
out_pin:Band4 Right
out_pin:Band5 Left
out_pin:Band5 Right

slider1:cuts=4<0,4,1>-Cuts
slider2:20<0,100,.0001>-Frequency 1
slider3:35<0,100,.0001>-Frequency 2
slider4:55<0,100,.0001>-Frequency 3
slider5:85<0,100,.0001>-Frequency 4

slider6:band_mode=0<0,1,1{24dB/Oct, 12dB/Oct}>-Crossover Type

slider7:0<-60,0,0.1>-Band1 Threshold
slider8:4<1,20,0.1>-Band1 Ratio
slider9:20<0.1,50,0.1>-Band1 Attack
slider10:50<10,500,1>-Band1 Release
slider11:0<0,3,1{Normal, Solo, Normal witout Processing, Solo without Processing}>-Band1 Solo
slider12:0<-20,20,0.1>-Band1 Gain
slider13:0<-100,100,1>-Band1 EnvAttack
slider14:0<-100,100,1>-Band1 EnvSustain
slider15:0<-100,100,1>-Band1 MS-Processing
slider16:0<-60,0,0.1>-Band2 Threshold
slider17:4<1,20,0.1>-Band2 Ratio
slider18:20<0.1,50,0.1>-Band2 Attack
slider19:50<10,500,1>-Band2 Release
slider20:0<0,0,3,1{Normal, Solo, Normal witout Processing, Solo without Processing}>-Band2 Solo
slider21:0<-20,20,0.1>-Band2 Gain
slider22:0<-100,100,1>-Band2 EnvAttack
slider23:0<-100,100,1>-Band2 EnvSustain
slider24:0<-100,100,1>-Band2 MS-Processing
slider25:0<-60,0,0.1>-Band3 Threshold
slider26:4<1,20,0.1>-Band3 Ratio
slider27:20<0.1,50,0.1>-Band3 Attack
slider28:50<10,500,1>-Band3 Release
slider29:0<0,3,1{Normal, Solo, Normal witout Processing, Solo without Processing}>-Band3 Solo
slider30:0<-20,20,0.1>-Band3 Gain
slider31:0<-100,100,1>-Band3 EnvAttack
slider32:0<-100,100,1>-Band3 EnvSustain
slider33:0<-100,100,1>-Band3 MS-Processing
slider34:0<-60,0,0.1>-Band4 Threshold
slider35:4<1,20,0.1>-Band4 Ratio
slider36:20<0.1,50,0.1>-Band4 Attack
slider37:50<10,500,1>-Band4 Release
slider38:0<0,3,1{Normal, Solo, Normal witout Processing, Solo without Processing}>-Band4 Solo
slider39:0<-20,20,0.1>-Band4 Gain
slider40:0<-100,100,1>-Band4 EnvAttack
slider41:0<-100,100,1>-Band4 EnvSustain
slider42:0<-100,100,1>-Band4 MS-Processing
slider43:0<-60,0,0.1>-Band5 Threshold
slider44:4<1,20,0.1>-Band5 Ratio
slider45:20<0.1,50,0.1>-Band5 Attack
slider46:50<10,500,1>-Band5 Release
slider47:0<0,3,1{Normal, Solo, Normal witout Processing, Solo without Processing}>-Band5 Solo
slider48:0<-20,20,0.1>-Band5 Gain
slider49:0<-100,100,1>-Band5 EnvAttack
slider50:0<-100,100,1>-Band5 EnvSustain
slider51:0<-100,100,1>-Band5 MS-Processing

slider52:1<0,3,1{OFF, ON}>-Band1 Compressor
slider53:1<0,3,1{OFF, ON}>-Band2 Compressor
slider54:1<0,3,1{OFF, ON}>-Band3 Compressor
slider55:1<0,3,1{OFF, ON}>-Band4 Compressor
slider56:1<0,3,1{OFF, ON}>-Band5 Compressor

slider57:2<0,3,1{OFF POST, ON POST, ON PRE, OFF PRE}>-Band1 Envelope Shaper
slider58:2<0,3,1{OFF POST, ON POST, ON PRE, OFF PRE}>-Band2 Envelope Shaper
slider59:2<0,3,1{OFF POST, ON POST, ON PRE, OFF PRE}>-Band3 Envelope Shaper
slider60:2<0,3,1{OFF POST, ON POST, ON PRE, OFF PRE}>-Band4 Envelope Shaper
slider61:2<0,3,1{OFF POST, ON POST, ON PRE, OFF PRE}>-Band5 Envelope Shaper


slider62:colorsper=0<0,1,1{Colors per function, Colors per band}>-Colors
slider63:FIR=0<0,1,1{IIR, FIR}>-Sound engine
slider64:0<0,1,1{ON, BYPASS}>-Bypass


filename:0,S2GFX/MBC_PV.png
filename:1,S2GFX/MBC_PM.png
filename:2,S2GFX/MBC_PR.png
filename:3,S2GFX/MBC_YV.png
filename:4,S2GFX/MBC_YM.png
filename:5,S2GFX/MBC_YR.png
filename:6,S2GFX/MBC_OV.png
filename:7,S2GFX/MBC_OM.png
filename:8,S2GFX/MBC_OR.png
filename:9,S2GFX/MBC_CV.png
filename:10,S2GFX/MBC_CM.png
filename:11,S2GFX/MBC_CR.png
filename:12,S2GFX/MBC_GV.png
filename:13,S2GFX/MBC_GM.png
filename:14,S2GFX/MBC_GR.png
filename:15,S2GFX/MBC_POWER.png
filename:16,S2GFX/MBC_3S.png
filename:17,S2GFX/MBC_FLIP.png
filename:18,S2GFX/S2_logo.png
filename:19,S2GFX/button.png
filename:20,S2GFX/rled.png

/62 12/24 db/Oct
/63 Phase Linear
import S2GFX/tk_lib.jsfx-inc

options:no_meter
options:gfx_hz=60
options:gmem=TukanMultibandProcessorS2
//options:gfx_idle


@init
MBP_Version = 0.985;

ext_tail_size = -1;
ext_nodenorm = 1;
gfx_ext_retina = 1;
gfx_clear=0;
ext_noinit=1;
lastCap=1;
mouse_wheel=1;
is_recording = 0; is_playing = 0; is_stopped = 1;
while_playing = 1; while_recording = 1; while_stopped = 1;
Number_input = 0;
number_input_raw = 0;
number_input_use = 0;
komma = 0;
in_key = 0;
number_input_x = 0;
number_input_y=0;
number_input_slider = 0;
number_input_min=0;
number_input_max=0;
number_input_invalid = 0;
number_input_sign=1;


s2_numbers_of_sliders = 64;
s2_numbers_of_generics = 0;
group_generics =0; // fuer group_generics[bis zu 200]
sliders_old = group_generics + 16*200;
generics_old = sliders_old + 16*64;

in_scope = 1; gr_scope = 1; out_scope = 0;

//link_group = 0;
//link_group_master = 0;

 blueknob = 1;
 redknob = 2;
 smallknob = 3;
 button = 19;
 switch = 5;
 gled = 6; rled = 20; yled = 8; oled = 9; bled = 10;
 menu = 11;  
 logo = 12;
 Mouse_Sensivity ();

Comp_knobs_x = 70;

MBC_POWER = 15;
MBC_3S = 16;
MBC_FLIP = 17;
logo = 18;

/*
filename:0,S2GFX/MBC_PV.png
filename:1,S2GFX/MBC_PM.png
filename:2,S2GFX/MBC_PR.png
filename:3,S2GFX/MBC_YV.png
filename:4,S2GFX/MBC_YM.png
filename:5,S2GFX/MBC_YR.png
filename:6,S2GFX/MBC_OV.png
filename:7,S2GFX/MBC_OM.png
filename:8,S2GFX/MBC_OR.png
filename:9,S2GFX/MBC_CV.png
filename:10,S2GFX/MBC_CM.png
filename:11,S2GFX/MBC_CR.png
filename:12,S2GFX/MBC_GV.png
filename:13,S2GFX/MBC_GM.png
filename:14,S2GFX/MBC_GR.png
*/
function arrange_knobs() (
 !colorsper ? (
     KC_MS = 10;
     KC_Out = 13;
     KC_Thresh = 14;
     KC_Ratio = 0;
     KC_Attack = KC_Release = 6;
     KC_EnvA = 13;
     KC_EnvS = 7;
     );
     colorsper ? (
     KC_MS = 1;
     KC_Out = 1;
     KC_Thresh = 2;
     KC_Ratio = 0;
     KC_Attack = KC_Release = 0;
     KC_EnvA = 1;
     KC_EnvS = 1;
     );
          
     //Parameter_config           (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
     Knobs_x = 40;
     knobs_y = 275;
     K_B1_MS.parameter_config     (15,       0,      -100,    100,  knobs_x,   knobs_y,  120,  200,    1,       KC_MS);
     K_B1_Out.parameter_config     (12,      0,      -20,     20,  knobs_x + 100, knobs_y,  120,  200,    1,       KC_Out);     
     band1_env_on < 2 ? comp_y = 375 : comp_y = 475;
     K_B1_Thresh.parameter_config     (7,       0,      -60,    0,  knobs_x+20,   comp_y,  120,  200,    1,       KC_Thresh);
     K_B1_Ratio.parameter_config     (8,       4,      1,     20,  knobs_x + 100,   comp_y,  120,  200,    1,       KC_Ratio);
     K_B1_Attack.parameter_config     (9,       20,     0.1,   50,  knobs_x+20,   comp_y + 80,  120,  200,    1,       KC_Attack);
     K_B1_Release.parameter_config     (10,      100,    10,   500,  knobs_x + 100,   comp_y + 80,  120,  200,    1,       KC_Release);
     band1_env_on < 2 ? env_y = 555 : env_y = 375;;
     K_B1_EnvA.parameter_config     (13,       0,      -100,    100,  knobs_x+20,   env_y,  120,  200,    1,       KC_EnvA);
     K_B1_EnvS.parameter_config     (14,       0,      -100,    100,  knobs_x + 100,   env_y,  120,  200,    1,  KC_EnvS);
     B_B1_Solo.button_config(11, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B1_CompOn.button_config(52, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B1_EnvOn.button_config(57, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     colorsper ? (
     KC_MS = 4;
     KC_Out = 4;
     KC_Thresh = 5;
     KC_Ratio = 3;
     KC_Attack = KC_Release = 3;
     KC_EnvA = 4;
     KC_EnvS = 4;
     );
     knobs_x += 180;
     K_B2_MS.parameter_config     (24,       0,      -100,    100,  knobs_x,   knobs_y,  120,  200,    1,       KC_MS);
     K_B2_Out.parameter_config     (21,      0,      -20,     20,  knobs_x + 100, knobs_y,  120,  200,    1,       KC_Out);     
     Band2_env_on < 2 ? comp_y = 375 : comp_y = 475;
     K_B2_Thresh.parameter_config     (16,       0,      -60,    0,  knobs_x+20,   comp_y,  120,  200,    1,       KC_Thresh);
     K_B2_Ratio.parameter_config     (17,       4,      1,     20,  knobs_x + 100,   comp_y,  120,  200,    1,       KC_Ratio);
     K_B2_Attack.parameter_config     (18,       20,     0.1,   50,  knobs_x+20,   comp_y + 80,  120,  200,    1,       KC_Attack);
     K_B2_Release.parameter_config     (19,      100,    10,   500,  knobs_x + 100,   comp_y + 80,  120,  200,    1,       KC_Release);
     Band2_env_on < 2 ? env_y = 555 : env_y = 375;;
     K_B2_EnvA.parameter_config     (22,       0,      -100,    100,  knobs_x+20,   env_y,  120,  200,    1,       KC_EnvA);
     K_B2_EnvS.parameter_config     (23,       0,      -100,    100,  knobs_x + 100,   env_y,  120,  200,    1,  KC_EnvS);
     B_B2_Solo.button_config(20, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B2_CompOn.button_config(53, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B2_EnvOn.button_config(58, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     colorsper ? (
     KC_MS = 7;
     KC_Out = 7;
     KC_Thresh = 8;
     KC_Ratio = 6;
     KC_Attack = KC_Release = 6;
     KC_EnvA = 7;
     KC_EnvS = 7;
     );
     knobs_x += 180;
     K_B3_MS.parameter_config     (33,       0,      -100,    100,  knobs_x,   knobs_y,  120,  200,    1,       KC_MS);
     K_B3_Out.parameter_config     (30,      0,      -20,     20,  knobs_x + 100, knobs_y,  120,  200,    1,       KC_Out);     
     Band3_env_on < 2 ? comp_y = 375 : comp_y = 475;
     K_B3_Thresh.parameter_config     (25,       0,      -60,    0,  knobs_x+20,   comp_y,  120,  200,    1,       KC_Thresh);
     K_B3_Ratio.parameter_config     (26,       4,      1,     20,  knobs_x + 100,   comp_y,  120,  200,    1,       KC_Ratio);
     K_B3_Attack.parameter_config     (27,       20,     0.1,   50,  knobs_x+20,   comp_y + 80,  120,  200,    1,       KC_Attack);
     K_B3_Release.parameter_config     (28,      100,    10,   500,  knobs_x + 100,   comp_y + 80,  120,  200,    1,       KC_Release);
     Band3_env_on < 2 ? env_y = 555 : env_y = 375;;
     K_B3_EnvA.parameter_config     (31,       0,      -100,    100,  knobs_x+20,   env_y,  120,  200,    1,       KC_EnvA);
     K_B3_EnvS.parameter_config     (32,       0,      -100,    100,  knobs_x + 100,   env_y,  120,  200,    1,  KC_EnvS);
     B_B3_Solo.button_config(29, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B3_CompOn.button_config(54, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B3_EnvOn.button_config(59, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     colorsper ? (
     KC_MS = 10;
     KC_Out = 10;
     KC_Thresh = 11;
     KC_Ratio = 9;
     KC_Attack = KC_Release = 9;
     KC_EnvA = 10;
     KC_EnvS = 10;
     );
     knobs_x += 180;
     K_B4_MS.parameter_config     (42,       0,      -100,    100,  knobs_x,   knobs_y,  120,  200,    1,       KC_MS);
     K_B4_Out.parameter_config     (39,      0,      -20,     20,  knobs_x + 100, knobs_y,  120,  200,    1,       KC_Out);     
     Band4_env_on < 2 ? comp_y = 375 : comp_y = 475;
     K_B4_Thresh.parameter_config     (34,       0,      -60,    0,  knobs_x+20,   comp_y,  120,  200,    1,       KC_Thresh);
     K_B4_Ratio.parameter_config     (35,       4,      1,     20,  knobs_x + 100,   comp_y,  120,  200,    1,       KC_Ratio);
     K_B4_Attack.parameter_config     (36,       20,     0.1,   50,  knobs_x+20,   comp_y + 80,  120,  200,    1,       KC_Attack);
     K_B4_Release.parameter_config     (37,      100,    10,   500,  knobs_x + 100,   comp_y + 80,  120,  200,    1,       KC_Release);
     Band4_env_on < 2 ? env_y = 555 : env_y = 375;;
     K_B4_EnvA.parameter_config     (40,       0,      -100,    100,  knobs_x+20,   env_y,  120,  200,    1,       KC_EnvA);
     K_B4_EnvS.parameter_config     (41,       0,      -100,    100,  knobs_x + 100,   env_y,  120,  200,    1,  KC_EnvS);
     B_B4_Solo.button_config(38, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B4_CompOn.button_config(55, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B4_EnvOn.button_config(60, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     colorsper ? (
     KC_MS = 13;
     KC_Out = 13;
     KC_Thresh = 14;
     KC_Ratio = 12;
     KC_Attack = KC_Release = 12;
     KC_EnvA = 13;
     KC_EnvS = 13;
     );
     knobs_x += 180;
     K_B5_MS.parameter_config     (51,       0,      -100,    100,  knobs_x,   knobs_y,  120,  200,    1,       KC_MS);
     K_B5_Out.parameter_config     (48,      0,      -20,     20,  knobs_x + 100, knobs_y,  120,  200,    1,       KC_Out);     
     Band5_env_on < 2 ? comp_y = 375 : comp_y = 475;
     K_B5_Thresh.parameter_config     (43,       0,      -60,    0,  knobs_x+20,   comp_y,  120,  200,    1,       KC_Thresh);
     K_B5_Ratio.parameter_config     (44,       4,      1,     20,  knobs_x + 100,   comp_y,  120,  200,    1,       KC_Ratio);
     K_B5_Attack.parameter_config     (45,       20,     0.1,   50,  knobs_x+20,   comp_y + 80,  120,  200,    1,       KC_Attack);
     K_B5_Release.parameter_config     (46,      100,    10,   500,  knobs_x + 100,   comp_y + 80,  120,  200,    1,       KC_Release);
     Band5_env_on < 2 ? env_y = 555 : env_y = 375;;
     K_B5_EnvA.parameter_config     (49,       0,      -100,    100,  knobs_x+20,   env_y,  120,  200,    1,       KC_EnvA);
     K_B5_EnvS.parameter_config     (50,       0,      -100,    100,  knobs_x + 100,   env_y,  120,  200,    1,  KC_EnvS);
     B_B5_Solo.button_config(47, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B5_CompOn.button_config(56, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_B5_EnvOn.button_config(61, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     
     K_Freq1.parameter_config     (2,       20,      0,    100,  sgfx_x + sgfx_w/2,  sgfx_y + sgfx_h/2,  120,  200,    1,  KC_EnvS);
     K_Freq2.parameter_config     (3,       35,      0,    100,  sgfx_x + sgfx_w/2,  sgfx_y + sgfx_h/2,  120,  200,    1,  KC_EnvS);
     K_Freq3.parameter_config     (4,       55,      0,    100,  sgfx_x + sgfx_w/2,  sgfx_y + sgfx_h/2,  120,  200,    1,  KC_EnvS);
     K_Freq4.parameter_config     (5,       85,      0,    100,  sgfx_x + sgfx_w/2,  sgfx_y + sgfx_h/2,  120,  200,    1,  KC_EnvS);
     
     B_Filter.button_config(6, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_Engine.button_config(63, Comp_knobs_x + 460, Comp_knobs_y + 155);
     B_Bands.button_config(1, Comp_knobs_x + 460, Comp_knobs_y + 155);
     
     B_Bypass.button_config(64, 875,5);
);


       
  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);





  function readout_f (value_ cut) (
  thisfreq = per_to_freq(value_,100);
  thisfreq < 1000 ? (
  sprintf(#readout, "%.0f", thisfreq); #readout += "Hz";
  ):(
  sprintf(#readout, "%.2f", thisfreq/1000); #readout += "kHz";  
  );
  cut == 1 ? (gfx_x = freq1_handle_x + 5*zoom; gfx_y = sgfx_y + 4*sgfx_h / 5 - gfx_texth - 5*zoom);
  cut == 2 ? (gfx_x = freq2_handle_x + 5*zoom; gfx_y = sgfx_y + 3*sgfx_h / 5 - gfx_texth - 5*zoom);
  cut == 3 ? (gfx_x = freq3_handle_x + 5*zoom; gfx_y = sgfx_y + 2*sgfx_h / 5 - gfx_texth - 5*zoom);
  cut == 4 ? (gfx_x = freq4_handle_x + 5*zoom; gfx_y = sgfx_y + 1*sgfx_h / 5 - gfx_texth - 5*zoom);
  gfx_measurestr(#readout, rdow, rdoh);
  gfx_r=gfx_b=gfx_g=0; gfx_rect(gfx_x+2*zoom, gfx_y, rdow+3*zoom, gfx_texth+2*zoom);
  gfx_r=gfx_g=gfx_b=0.8;
  gfx_x += 3*zoom;
  gfx_drawstr(#readout);
  );
  
  function number_input_start_freq () (
    number_input_x = this.xin;
    number_input_y = this.yin;
         number_input = 2;
    number_input_slider = this.slider;
    number_input_min = this.minval;
    number_input_max = this.maxval;
    number_input_sign=1;
  );
  
   function number_input_show_freq () (
     gfx_r=gfx_g=gfx_b=0;
     gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
     gfx_r=0;gfx_g=1;gfx_b=0;
     gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
     gfx_r=gfx_g=gfx_b=0.7;
     gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
     gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
     gfx_drawnumber(number_input_use,komma);
  
  
         mouseclick && !shift_alt ? 
       (
         g_collision(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5) ?
         (
           number_input_use = freq_to_per(number_input_use, 100);

           valid = 0;
           number_input_use >= number_input_min && number_input_use <= number_input_max ? valid = 1;
           valid ? (
           slider(number_input_slider) = number_input_use;
           caller = 1;
           ):(
           number_input_invalid = 90;
           );
           Number_input = 0;
           number_input_raw = 0;
           number_input_use = 0;
           komma = 0;
           in_key = 0;
           //number_input_x = 0;
           //number_input_y=0;
         ):(
           Number_input = 0;
           number_input_raw = 0;
           number_input_use = 0;
           komma = 0;
           in_key = 0;
           number_input_x = 0;
           number_input_y=0;
         );
       );
  
       in_key=gfx_getchar();
  
       in_key ? Aaa = in_key;
         in_key == 8 ? (
         number_input_raw = floor(number_input_raw/10);
         komma = max(0,komma-1);
         komma == 1 ? komma = 0;
         );
  
       in_key == 45 ? number_input_sign*=-1;
  
       in_key == 46 ? komma = 1;
       in_key > 47 ? (
       in_key < 58 ? (
           number_input_raw = (number_input_raw*10) + (in_key-48);
           komma ? komma += 1;
       );
       );
  
       komma ? (number_input_use = number_input_raw / (10^(komma-1))):(number_input_use = number_input_raw);
       number_input_use *= number_input_sign;
  
     );
     

ext_nodenorm=1;
recpos=0;
max_fft_size=32768;
 fftsize=max_fft_size;
 
 S2_FFT_Size = 8; //{16,32,64,128,256,512,1024,2048,4096,8192,16384,32768}>-FFT size
 //srate < 100000 ? S2_FFT_Size = 9;
 //srate < 200000 ? S2_FFT_Size = 10;
 //srate >= 200000 ? S2_FFT_Size = 11;
 
 S2_Floor = -100;
 S2_Show_phase = 0;
 S2_Window = 2;
 s2_integration_time = 500;
 S2_slope = 3;
 S2_Octave_gain_center = 1000; 


//fftsize=max_fft_size;
gfx_clear=-1;
windowtype=-1;
fftidx=-1;
analyzer_feed = 1;

histsize=max_fft_size + (max_fft_size*0.5 - 1);
window=histsize;
fftworkspace=window+(max_fft_size*0.5 + 1);
integrate_buf = fftworkspace + max_fft_size*2;
            
       absolute_frequencies = 1;
  MAX_FREQ = 44100 / 2.0;
  MIN_FREQ = 10;
  FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);
function per_to_freq(x, range) (
  MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
);
function freq_to_per(freq, range) (
  range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
);


////////// ANALYZER


function env_init() (
this.b1Env1 = -exp(-30 / srate );
this.a0Env1 = 1.0 + this.b1Env1;
this.b1Env2 = -exp(-1250 / srate );
this.a0Env2 = 1.0 + this.b1Env2;
this.b1Env3 = -exp(-3 / srate );
this.a0Env3 = 1.0 + this.b1Env3;
);

function re_init() (
Band1_Env.env_init();
Band2_Env.env_init();
Band3_Env.env_init();
Band4_Env.env_init();
Band5_Env.env_init();
Freq1 = slider2 / 100;
Freq2 = slider3 / 100;
Freq3 = slider4 / 100;
Freq4 = slider5 / 100;
);
re_init();


function env_sliders (attack_ sustain_) (
 this.attack=attack_/100;
 this.sustain=sustain_/50;
 this.b1Env1 = -exp(-30 / srate );
 this.a0Env1 = 1.0 + this.b1Env1;
 this.b1Env2 = -exp(-1250 / srate );
 this.a0Env2 = 1.0 + this.b1Env2;
 this.b1Env3 = -exp(-3 / srate );
 this.a0Env3 = 1.0 + this.b1Env3;

);

function env_compute_gain(inL inR) (
maxSpls = max(abs(inL),abs(inR));
this.env1 = sqrt(this.tmpEnv1 = this.a0Env1*maxSpls - this.b1Env1*this.tmpEnv1);
this.env2 = sqrt(this.tmpEnv2 = this.a0Env2*maxSpls - this.b1Env2*this.tmpEnv2);
this.env3 = sqrt(this.tmpEnv3 = this.a0Env3*maxSpls - this.b1Env3*this.tmpEnv3);

//gain = 
exp(log(max(this.env2/this.env1,1))*this.attack) * exp( log( max(this.env3/this.env1,1))*this.sustain);
);

 
 
 function computeGainReduction(x)
 (
 (x < this.Tlo) ? x = 0 :
 (x > this.Thi) ? x = this.slope * (x - this.Threshold) :
 (this.delta = x - this.Tlo;
 x = this.delta * this.delta * this.knee_factor;);
 
 this.eps = 0.0000000001;
 this.yR = min(x, this.aplhaER * this.yR + (1 - this.aplhaER) * x + this.eps - this.eps);
 this.yA = this.aplhaA * this.yA + (1 - this.aplhaA) * this.yR + this.eps - this.eps;
 x = this.yA;
 );
 
 function compressor_sliders(threshold_ ratio_ attack_ release_ knee_ ) (
 this.Threshold = threshold_;
 //this.knee_width = abs(threshold_*2*knee_*0.01);
 this.Knee = knee_; 
 this.ratio = ratio_;
 this.slope = ((1 - this.ratio) / this.ratio);
 
 this.attack = attack_/1000;
 this.release = release_/1000;
 this.aplhaA = this.attack>0 ? exp(-1 / (this.attack * srate)) : 0;
 this.aplhaER = this.release>0 ? exp(-1 / (this.release * srate)) : 0;
 
 this.Tlo = (this.Threshold - this.knee_width / 2);
 this.Thi = (this.Threshold + this.knee_width / 2);
 this.knee_factor = (this.slope / (this.knee_width * 2));
 );
 

function all_boundaries() (
K_B1_MS.Parameter_Boundaries();
K_B1_Out.Parameter_Boundaries();
K_B1_EnvA.Parameter_Boundaries();
K_B1_EnvS.Parameter_Boundaries();
K_B1_Thresh.Parameter_Boundaries();
K_B1_Ratio.Parameter_Boundaries();
K_B1_Attack.Parameter_Boundaries();
K_B1_Release.Parameter_Boundaries();
K_B2_MS.Parameter_Boundaries();
K_B2_Out.Parameter_Boundaries();
K_B2_EnvA.Parameter_Boundaries();
K_B2_EnvS.Parameter_Boundaries();
K_B2_Thresh.Parameter_Boundaries();
K_B2_Ratio.Parameter_Boundaries();
K_B2_Attack.Parameter_Boundaries();
K_B2_Release.Parameter_Boundaries();
K_B3_MS.Parameter_Boundaries();
K_B3_Out.Parameter_Boundaries();
K_B3_EnvA.Parameter_Boundaries();
K_B3_EnvS.Parameter_Boundaries();
K_B3_Thresh.Parameter_Boundaries();
K_B3_Ratio.Parameter_Boundaries();
K_B3_Attack.Parameter_Boundaries();
K_B3_Release.Parameter_Boundaries();
K_B4_MS.Parameter_Boundaries();
K_B4_Out.Parameter_Boundaries();
K_B4_EnvA.Parameter_Boundaries();
K_B4_EnvS.Parameter_Boundaries();
K_B4_Thresh.Parameter_Boundaries();
K_B4_Ratio.Parameter_Boundaries();
K_B4_Attack.Parameter_Boundaries();
K_B4_Release.Parameter_Boundaries();
K_B5_MS.Parameter_Boundaries();
K_B5_Out.Parameter_Boundaries();
K_B5_EnvA.Parameter_Boundaries();
K_B5_EnvS.Parameter_Boundaries();
K_B5_Thresh.Parameter_Boundaries();
K_B5_Ratio.Parameter_Boundaries();
K_B5_Attack.Parameter_Boundaries();
K_B5_Release.Parameter_Boundaries();
);

function parameters_update () (

parameters_update_on = 1;

all_boundaries();

group_parameters();

all_boundaries();


cuts_old != cuts ? (
  cuts_old == 1 ? (
    left_band = 100 - slider2;
    cuts == 2 ? (
      slider3 = slider2 + left_band/2;
    );
    cuts == 3 ? (
      slider3 = slider2 + left_band/3;
      slider4 = slider3 + left_band/3;
    );
    cuts == 4 ? (
      slider3 = slider2 + left_band/4;
      slider4 = slider3 + left_band/4;
      slider5 = slider4 + left_band/4;
    );
  );
  cuts_old == 2 ? (
    left_band = 100 - slider3;
    cuts == 3 ? (
      slider4 = slider3 + left_band/2;
    );
    cuts == 4 ? (
      slider4 = slider3 + left_band/3;
      slider5 = slider4 + left_band/3;
    );
  );
  cuts_old == 3 ? (
    left_band = 100 - slider4;
    cuts == 4 ? (
      slider5 = slider4 + left_band/2;
    );
  );
);


cuts_old != cuts || slider2_old != slider2 ? slider2 = max(0,min(slider2, cuts > 1 ? slider3-1 : 100));
cuts_old != cuts || slider3_old != slider3 ? slider3 = max(slider2+1,min(slider3, cuts > 2 ? slider4-1 : 100));
cuts_old != cuts || slider4_old != slider4 ? slider4 = max(slider3+1,min(slider4, cuts > 3 ? slider5-1 : 100));
cuts_old != cuts || slider5_old != slider5 ? slider5 = max(slider4+1,min(slider5, 100));


slider2_old = slider2;
slider3_old = slider3;
slider4_old = slider4;
slider5_old = slider5;

cuts_old = cuts;


Freq1 = slider2 / 100;
Freq2 = slider3 / 100;
Freq3 = slider4 / 100;
Freq4 = slider5 / 100;

last_sent_f1 = last_sent_f2 = last_sent_f3 = last_sent_f4 = 0;

vslider2 = slider2; vslider3 = slider3; vslider4 = slider4; vslider5 = slider5;


bypass = slider64;

Drive1 = Drive2 = Drive3 = Drive4 = Drive5 = 0;
abs_placement = 1;
FIR_quality = 1;
//FIR = 1; //Ob Phasenliniear
masterGainSlider = 0;
//band_Mode = 1; // 0 = 4Pole, 1 = 2Pole
//Cuts = 4; //N+1 Bänder


Band1_Env.env_sliders(slider13, slider14);
Band2_Env.env_sliders(slider22, slider23);
Band3_Env.env_sliders(slider31, slider32);
Band4_Env.env_sliders(slider40, slider41);
Band5_Env.env_sliders(slider49, slider50);
Band1.compressor_sliders(slider7, slider8, slider9, slider10, 0);
Band2.compressor_sliders(slider16, slider17, slider18, slider19, 0);
Band3.compressor_sliders(slider25, slider26, slider27, slider28, 0);
Band4.compressor_sliders(slider34, slider35, slider36, slider37, 0);
Band5.compressor_sliders(slider43, slider44, slider45, slider46, 0);

slider11 == 0 || slider11 == 2 ? (band1_Solo = 0) : (band1_solo = 1);
slider11 < 2 ? Band1_MS_Processing = 1 : Band1_MS_Processing = 0;

cuts > 0 ? (
slider20 == 0 || slider20 == 2 ? (band2_Solo = 0) : (band2_solo = 1);
slider20 < 2 ? Band2_MS_Processing = 1 : Band2_MS_Processing = 0;
):(band2_solo = 0; band2_MS_Processing = 1);
cuts > 1 ? (
slider29 == 0 || slider29 == 2 ? (band3_Solo = 0) : (band3_solo = 1);
slider29 < 2 ? band3_MS_Processing = 1 : band3_MS_Processing = 0;
):(band3_solo = 0; band3_MS_Processing = 1);
cuts > 2 ? (
slider38 == 0 || slider38 == 2 ? (band4_Solo = 0) : (band4_solo = 1);
slider38 < 2 ? band4_MS_Processing = 1 : band4_MS_Processing = 0;
):(band4_solo = 0; band4_MS_Processing = 1);
cuts > 0 ? (
slider47 == 0 || slider47 == 2 ? (band5_Solo = 0) : (band5_solo = 1);
slider47 < 2 ? band5_MS_Processing = 1 : band5_MS_Processing = 0;
):(band5_solo = 0; band5_MS_Processing = 1);
//cuts > 1 ? (Band3_Solo = slider29):(Band3_Solo = slider29 = 0);
//cuts > 2 ? (Band4_Solo = slider38):(Band4_Solo = slider38 = 0);
//cuts > 3 ? (Band5_Solo = slider47):(Band5_Solo = slider47 = 0);

band1_output_val = db2ratio(slider12);
band2_output_val = db2ratio(slider21);
band3_output_val = db2ratio(slider30);
band4_output_val = db2ratio(slider39);
band5_output_val = db2ratio(slider48);
band1_output_db = slider12;
band2_output_db = slider21;
band3_output_db = slider30;
band4_output_db = slider39;
band5_output_db = slider48;
band1_compressor_on = slider52;
band2_compressor_on = slider53;
band3_compressor_on = slider54;
band4_compressor_on = slider55;
band5_compressor_on = slider56;

band1_env_on = slider57;
band2_env_on = slider58;
band3_env_on = slider59;
band4_env_on = slider60;
band5_env_on = slider61;
update = 1;

B1MS = (slider15+100)/200;
B2MS = (slider24+100)/200;
B3MS = (slider33+100)/200;
B4MS = (slider42+100)/200;
B5MS = (slider51+100)/200;

arrange_knobs();
caller = 0;
parameters_update_on = 0;
);



parameters_update ();

filterBank.F1 = Freq1;
filterBank.F2 = Freq2;
filterBank.F3 = Freq3;
filterBank.F4 = Freq4;

/*function fft_real(x, x)
(
  1
);*/

/*-----------*/

/* HINTS     */  
/*-----------*/ 

function updateHintTime(hint)
  global(gfx_x, gfx_y)
  local()
  instance(hintTime, currentHint, delta_time)
  (
    (hint != 0) ? (
      currentHint = hint;
      hintTime = hintTime + delta_time;
      hintTime = min(1, hintTime);
    ) : (
      0
    );
  );   
  
function drawHint_draw()
  global(scaling, gfx_x, gfx_y, gfx_w, gfx_h, mouse_x, mouse_y, fontface, HINT_FONT)
  local(w, h, globalTime)
  instance(hintTime, currentHint, lastGlobalTime, delta_time, lx, ly)
  (
    globalTime = time_precise();
    delta_time = globalTime - lastGlobalTime;
    lastGlobalTime = globalTime;
  
    ( ( abs( lx - mouse_x ) + abs( ly - mouse_y ) ) > 0 ) ? (
      hintTime = 0;
    );
  
    ( hintTime > .99 ) ? (
      gfx_setfont(HINT_FONT);
      gfx_measurestr(currentHint,w,h);
      
      gfx_x = mouse_x+15;
      gfx_y = mouse_y+15;
      ( gfx_x > 0.5*gfx_w ) ? gfx_x = mouse_x - w - 8;
      ( gfx_y > 0.5*gfx_h ) ? gfx_y = mouse_y - h - 8;

      gfx_set( 0.05, 0.05, 0.1, .8 );
      gfx_rect(gfx_x-2, gfx_y-2, w+4, h+4);
      gfx_set( .7, .7, .7, 1 );      
      gfx_printf(currentHint);
    );
    
    lx = mouse_x;
    ly = mouse_y;
  );    


/*-----------*/
/* CIRCLE    */  
/*-----------*/

function fancyCircle(x1, y1, rin, mute, solo, bypass)
  local(dx)
  global(globalTime, lineR, lineG, lineB, lineA, lineHighlightR, lineHighlightG, lineHighlightB)
  instance(hl, x, y, r, over, gfx_mode)
  (
    x = x1;
    y = y1;
    rin == 0 ? r = 10 : r = rin;
    
    over ? (
      hl = abs(sin(2*globalTime));
      gfx_set(lineHighlightR, lineHighlightG, lineHighlightB, .1*hl);
      gfx_circle(x, y, 1.2*r, 1, 1);
      gfx_set(lineHighlightR, lineHighlightG, lineHighlightB, .1*hl);
      gfx_circle(x, y, 1.5*r, 1, 1);
      gfx_set(lineHighlightR, lineHighlightG, lineHighlightB, .05*hl);
      gfx_circle(x, y, 1.9*r, 1, 1);
      gfx_set(lineHighlightR, lineHighlightG, lineHighlightB, .03*hl);
      gfx_circle(x, y, 4*r, 1, 1);
    ); 
    
    gfx_set(.2*lineR, .2*lineG, .2*lineB, 1);
    gfx_circle(x, y, r, 1, 1);
    
    gfx_set(lineR, lineG, lineB, lineA);    
    gfx_circle(x, y, .92*r, 1, 1);
    
    gfx_set(.8*lineR, .8*lineG, .8*lineB, lineA);
    gfx_circle(x, y, .8*r, 1, 1);
    
    gfx_set(.6*lineR, .6*lineG, .6*lineB, lineA);
    gfx_circle(x, y, .75*r, 1, 1);
    
    gfx_set(.4*lineR, .4*lineG, .4*lineB, lineA);
    gfx_circle(x, y, .7*r, 1, 1);
    
    ( solo == 1 ) ? (
      gfx_set(.2, 1, .2, .5);
      gfx_circle(x, y, .8*r, 1, 1);
      gfx_set(.2, 1, .2, .5);
      gfx_circle(x, y, .9*r, 1, 1);
      gfx_set(.2, 1, .2, .5);
      gfx_circle(x, y, r, 1, 1);
      gfx_set(.2, 1, .2, .2);
      gfx_circle(x, y, 1.2*r, 1, 1);    
      
      gfx_set(.7, 1, .7, .3);
      gfx_circle(x, y, .7*r, 1, 1);
      
      gfx_set(.2, 1, .5, .08);
      gfx_circle(x, y, 1.1*r, 1, 0);
      gfx_set(.2, 1, .5, .08);
      gfx_circle(x, y, 1.2*r, 1, 0);
      gfx_set(.2, 1, .5, .08);
      gfx_circle(x, y, 1.4*r, 1, 0);
     ) : ( mute == 1 ) ? (
      gfx_set(1, .2, .2, .5);
      gfx_circle(x, y, .8*r, 1, 1);
      gfx_set(1, .2, .2, .5);
      gfx_circle(x, y, .9*r, 1, 1);
      gfx_set(1, .2, .2, .5);
      gfx_circle(x, y, r, 1, 1);
      gfx_set(1, .2, .2, .2);
      gfx_circle(x, y, 1.2*r, 1, 1);
      
      gfx_set(1, .55, .55, 1);
      gfx_circle(x, y, 1*r, 0, 1);
      
      gfx_set(1, .7, .7, .1);
      gfx_circle(x, y, .7*r, 1, 1);
      
      gfx_set(1, .5, .5, .1);
      gfx_circle(x, y, 1.1*r, 1, 0);
      gfx_set(1, .5, .5, .1);
      gfx_circle(x, y, 1.2*r, 1, 0);
      gfx_set(1, .5, .5, .1);
      gfx_circle(x, y, 1.4*r, 1, 0);
    );    
    
    ( bypass == 1 ) ? (
      gfx_set(1-mute, .2, .2, 1);
      dx = .5*r;
      gfx_line(x-dx, y-dx-1, x+dx, y+dx-1);
      gfx_line(x-dx, y-dx+1, x+dx, y+dx+1);
      gfx_line(x+dx, y-dx-1, x-dx, y+dx-1);
      gfx_line(x+dx, y-dx+1, x-dx, y+dx+1);    
      gfx_line(x+dx, y-dx,   x-dx, y+dx);
      gfx_line(x-dx, y-dx,   x+dx, y+dx);
    );
    
    over ? ( 
      gfx_set(1,1,1,.4*hl);
      gfx_circle(x, y, .6*r, 1, 1);
      gfx_circle(x, y, 1.4*r, 0, 1);
      gfx_circle(x, y, 1.5*r, 0, 1);
    );
    
    over = 0;
  );
  



/*-----------*/
/* TOGGLE    */  
/*-----------*/ 

function processMouseToggle(mx, my, mousecap)
  instance(x, y, w, h, on, lastleft, str, over)
  local(left, slack)
  global(hinter.updateHintTime)
  (
    slack = 5;
    left = mousecap & 1;
    
    over = ( (mx >= (x-slack)) && ( mx <= (x+w+slack) ) && ( my >= (y-slack) ) && ( my <= (y+h+slack) ) );
    
    over ? (
      ( (left == 1) && (lastleft == 0) ) ?  (
        on = 1 - on;
      );
      hinter.updateHintTime(str);
    );
    
    lastleft = left;
    
    on
  );
 
function drawToggle(_x, _y, _w, _h, _on, wr, wg, wb, wa, r, g, b, a, _str)
  local(ww, hh)
  instance(x, y, w, h, str, on, invert, label)
  global(gfx_x, gfx_y, gfx_a, gfx_mode, 
         TOGGLE_FONT, knob_font_color_r, knob_font_color_g, knob_font_color_b, knob_font_color_a)
  (
    x = _x;
    y = _y;
    w = _w;
    h = _h;
    on = _on;
    str = _str;

    gfx_set(0, 0, 0, 0);
    gfx_rect(x, y, w, h);
    
    gfx_set(r, g, b, a*.2);
    gfx_rect(x, y, w, h);
    
    gfx_set(wr, wg, wb, wa);
    gfx_line(x, y, x+w, y);
    gfx_line(x, y, x, y+h);
    gfx_line(x+w, y, x+w, y+h);
    gfx_line(x, y+h, x+w, y+h);

    ( label ) ? (
      gfx_set(knob_font_color_r, knob_font_color_g, knob_font_color_b, knob_font_color_a);
      gfx_setfont(TOGGLE_FONT);
      gfx_measurestr(label, ww, hh);
      gfx_x = floor(x+1.5*w);
      gfx_y = floor(y-.5*hh+.5*h);
      gfx_printf(label);
    );
    
    ( (on && !invert) || (!on && invert) ) ? (
      gfx_set(r, g, b, a);
      gfx_rect(x, y, w, h);
      gfx_a *= .6;
      gfx_rect(x-1, y-1, w+2, h+2);
      gfx_a *= .6;
      gfx_rect(x-2, y-2, w+4, h+4);
      gfx_a *= .6;
      gfx_rect(x-3, y-3, w+6, h+6);
      gfx_a *= .4;
      gfx_circle(x+.5*w-1, y+.5*h-1, 2*max(w,h), 2*max(w,h));
      gfx_a *= .4;
      gfx_circle(x+.5*w-1, y+.5*h-1, 3*max(w,h), 3*max(w,h));
      gfx_a *= .4;
      gfx_circle(x+.5*w-1, y+.5*h-1, 4*max(w,h), 4*max(w,h));
      gfx_a *= .4;
      gfx_circle(x+.5*w-1, y+.5*h-1, 5*max(w,h), 5*max(w,h));
    );
  );
 

  GRID_FONT     = 15;
  HINT_FONT     = 14;
  TOGGLE_FONT   = 15;
  gfx_ext_retina = 1;

  function f_trafo(freq)
  local()
  global(srate, freq_max, norm_freq_min)
  instance()
  (
    freq_max * exp( (1-freq) * log(norm_freq_min) )
  );

  function initBands()
  local()
  global()
  instance(lg1, lg2, lg3, lg4, lg5, b1, b2, b3, b4, b5)
  (
    lg1 = lg2 = lg3 = lg4 = lg5 = -1000000;
    b1.ldrive = b2.ldrive = b3.ldrive = b4.ldrive = b5.ldrive = -1000000;
    b1.initialized = b2.initialized = b3.initialized = b4.initialized = b5.initialized = 0;
  );

maxCuts = 4;
driveMax = 60;
driveMin = -40;
driveRange = driveMax - driveMin;

filterBank.initBands();

// Precompute some things
gainRange = ( gainMax - gainMin );
iGainRange = 1.0 / gainRange;
iDriveRange = 1.0 / driveRange;

///////////////////
/* SLIDER LAYOUT */
///////////////////
/* Keep these updated with the slider locations */

frequencyLocation = 2;
driveLocation     = 6;

/* Shift slider data right (for different bands) */
function shiftRight(loc, fromIdx, numElements)
  local(midx)
  global()
  (
    midx = loc + numElements;
    loop(numElements-fromIdx,
      slider(midx) = slider(midx-1);
      midx = midx - 1;
    );
  );

/* Shift slider data left  (for different bands) */
function shiftLeft(loc, fromIdx, numElements)
  local(midx)
  global()
  (
    midx = loc+fromIdx;
    loop(numElements-fromIdx,
      slider(midx) = slider(midx+1);
      midx = midx + 1;
    );
  );
  
/* Shift slider data right (for different bands) */
function shiftRightMem(loc, fromIdx, numElements)
  local(midx)
  global()
  (
    midx = loc + numElements;
    loop(numElements-fromIdx,
      midx[] = midx[-1];
      midx -= 1;
    );
  );

/* Shift slider data left  (for different bands) */
function shiftLeftMem(loc, fromIdx, numElements)
  local(midx)
  global()
  (
    midx = loc+fromIdx;
    loop(numElements-fromIdx,
      midx[] = midx[1];
      midx += 1;
    );
  );  

/* Make room for a new band in the slider data */
function addBand(idx)
  local(midx)
  instance()
  (
    shiftRight( driveLocation,     idx, maxCuts );
    shiftRight( frequencyLocation, idx, maxCuts-1 );
    
    cuts = cuts + 1;
  );
  
/* Remove a band and move other slider data accordingly */  
function remBand(idx)
  local(midx)
  instance()
  (
    shiftLeft( driveLocation,     idx, maxCuts );
    shiftLeft( frequencyLocation, idx, maxCuts-1 );
    
    cuts = cuts - 1;
  );  

/* Feed sample to FFT */
function feedSample(sample)
  global(fftSize)
  instance(recPtr, window, rStart, rEnd, fftLoc)
  local()
  (
    recPtr[] = sample;
    recPtr = (recPtr+1) >= rEnd ? rStart : recPtr + 1;
  );

/* Initialize FFT windowing function */
function initWindow(windowtype)
  global(fftSize)
  instance(recPtr, window, rStart, rEnd, fftLoc)
  local(i, pwr, dwindowpos, windowpos)
  (
    windowpos = 0;
    dwindowpos = $pi*2/fftSize;
    i = 0; pwr = 0;
    loop(fftSize*.5+1,
       pwr += (window[i] = (
         windowtype==1 ? ( 0.53836 - cos(windowpos)*0.46164 ) :
         windowtype==2 ? ( 0.35875 - 0.48829 * cos(windowpos) + 0.14128 * cos(2*windowpos) - 0.01168 * cos(3*windowpos) ) :
         windowtype==3 ? ( 0.42 - 0.50 * cos(windowpos) + 0.08 * cos(2.0*windowpos) ) :
         windowtype==4 ? ( 1.0 ) :
         ( .21557895 - 0.41663158 * cos(windowpos) + 0.277263158 * cos(2*windowpos) - 0.083578947 * cos(3*windowpos) + 0.006947368 * cos(4*windowpos) )
         ) );
       i+=1;
       windowpos+=dwindowpos;
    );
    pwr=.5/(pwr*2-window[i-1]);
    loop(fftsize*.5+1,window[i-=1]*=pwr);
 );
  
function setToFFTLoc()
 global(fftSize)
 instance(recPtr, rStart)
 local()
 ( 
    recPtr = rStart + fftSize;
 ); 

/* Calculate current spectrum */
function calcFFT()
  global(fftSize)
  instance(recPtr, window, rStart, rEnd, fftLoc, slope, yshift)
  local(buf1, buf2, buf3, yOut, i, prec, ty)
  (
    buf1=recPtr-fftSize;
    buf1<rStart ? buf1+=(rEnd-rStart);
    buf2=window;
    buf3=fftLoc;
    loop(fftSize*.5 + 1,
      buf3[] = buf1[]*buf2[];
      buf3+=1;
    
      buf2+=1;
      (buf1+=1) >= rEnd ? buf1 -= (rEnd-rStart);
    );
    buf2-=1;
    loop(fftSize*.5 - 1,
      buf3[] = buf1[]*(buf2-=1)[];
      buf3+=1;
      (buf1+=1) >= rEnd ? buf1 -= (rEnd-rStart);
    );
    
    fft_real(fftLoc,fftSize);
    fft_permute(fftLoc,fftSize/2);
    
    buf3    = fftLoc;
    yOut    = fftLoc;  
    i       = 0;
    slope   = .5*log(2)*slope;
    yshift  = slope*log(1.0+.5*fftSize);
    prec    = (10^(-500/20*2));
    loop(fftSize*0.5,   
      ty      = sqr(buf3[0])+sqr(buf3[1]);
      ty      = log(max(ty,prec));
      
      ty      = ty + slope*log(1.0+i) - yshift;
      yOut[]  = ty;
      yOut    += 1;
      buf3    += 2;    
      
      i += 1;
    );
  );  

/* Set location of a window */
function setWindowLocation(_x, _y, _w, _h)
  global()
  instance(x, y, w, h, cap)
  local()
  ( 
    x = _x;
    y = _y;
    w = _w;
    h = _h;
  );

// Draws the basic box for the FFT
function drawBackface()
  instance(x, y, w, h)
  global(backface_color_r, backface_color_g, backface_color_b, backface_color_a,
         grid_color_r, grid_color_g, grid_color_b, grid_color_a )
  local()
  (
    gfx_set( backface_color_r, backface_color_g, backface_color_b, backface_color_a );
    gfx_rect(x, y, w, h);
    
    gfx_set( grid_color_r, grid_color_g, grid_color_b, grid_color_a );
    gfx_line(x, y, x+w, y);
    gfx_line(x, y+h, x+w, y+h);
    gfx_line(x, y, x, y+h);
    gfx_line(x+w, y, x+w, y+h);
  );

// Draws the FFT Grid, frequency axis and dB axis
function drawGrid()
  global(fftSize, srate, gfx_x, gfx_y, grid_alpha, scaling, GRID_FONT, norm_freq_max)
  instance(x, y, w, h, recPtr, window, rStart, rEnd, fftLoc, floorLevel, hzoffset,
           grid_color_r, grid_color_g, grid_color_b, grid_color_a )
  local(xx, i, wsc, N, xl)
  (    
    this.drawBackface();
    
    i = 0;
    wsc = w/log(1+fftSize*0.5-hzoffset);
    xl = x;
    gfx_y = y+h+2;
    
    gfx_setfont(GRID_FONT);
    loop(16,
      xx = x + log(i*fftSize/(2 * srate * norm_freq_max)-hzoffset)*wsc;
      gfx_set( grid_color_r, grid_color_g, grid_color_b, grid_color_a );
      gfx_line(xx, y, xx, y+h);
      
      ( (xx - xl) > 30 * (1 + scaling) ) ? (
        gfx_set( 1, 1, 1, 1 );
        gfx_x = xx+2;
        gfx_line(xx, y+h, xx, y+h+7);
        (i>999) ? (
          gfx_printf("%dk", .001*i);
        ) : (
          gfx_printf("%d", i);
        );
        xl = xx;
      );
      
      gfx_set( .2, .2, .2, grid_alpha );
      gfx_line(xx, y, xx, y+h);
      
      ( i < 100 ) ? (i += 20) :
      ( i < 1000 ) ? (i += 200) :
      ( i < 10000 ) ? (i += 2000) :
      ( i < 100000 ) ? (i += 20000);
    );
    
    gfx_set( grid_color_r, grid_color_g, grid_color_b, grid_color_a );
    N = 8;
    xx = y;
    i = 0;
    gfx_measurestr("8", wsc, xl);
    loop(N,
      gfx_set( 1, 1, 1, 1 );
      gfx_x = x+w-20;
      gfx_y = xx-.5*xl;
      i > 0 ? gfx_printf("-%d", 4.41*i*floorLevel/N);
      
      gfx_set( .2, .2, .2, grid_alpha );
      gfx_line(x, xx+1, x+w, xx+1);
      
      xx += h/N;
      gfx_set( grid_color_r, grid_color_g, grid_color_b, grid_color_a );
      gfx_line(x, xx, x+w, xx);
      i += 1;
    );
  );
  
function drawLine(x1, y1, x2, y2)
  local(dx, dy, x, smooth)
  global(gfx_x, gfx_y)
  instance()
  (
    smooth = 1;
    x1 = floor(x1);
    x2 = floor(x2);
    gfx_x=x1;
    gfx_y=y1;
    x2 = floor(x2);
    y2 = floor(y2);
    
    smooth ? (
      (x2 - x1) > 4 ? (
        dx = 1.0/(x2-x1);
        dy = (y2 - y1)*6*dx;
        x = 0;
        loop(x2-x1,
          x2 = x1 + 1;
          y2 = y1 + dy * ( x - x*x );

          gfx_line(x1-1, y1-1, x2-1, y2-1, 1);          
          gfx_line(x1, y1-1, x2, y2-1, 1);
          gfx_lineto(x2,y2,1);
          x1 = x2;
          y1 = y2;
          x = x + dx;
        );
      ) : (
        gfx_line(x1, y1-1, x2, y2-1, 1);
        gfx_lineto(x2,y2,1);
      );
    ) : (
      gfx_line(x1, y1-1, x2, y2-1, 1);
      gfx_lineto(x2,y2,1); 
    );
  );

bandClickRange = 10;
overRange = 10;

function isOver(mx, my)
  instance(x, y, w, h)
  global(overRange)
  local()
  (
    ( ( mx >= (x-overRange) ) && ( mx <= (x+w+overRange) ) && ( my >= (y-overRange) ) && ( my <= (y+h+overRange) ) ) ? 1 : 0;
  );

function clamp(value, mini, maxi)
  local()
  global()
  (
    max(min(value,maxi),mini)
  );

function overRect(x, y, w, h, mx, my)
  local()
  global()
  (
    ( (mx > x) && (mx < (x+w) ) && (my > y) && (my < (y+h) ) )
  );

function pixelToWindowRatio(x_loc)
  instance(x, y, w, h, hzoffset)
  global(fftSize, norm_freq_min)
  local(lmin, wsc, hfft)
  (
    hfft  = 0.5*fftSize;
    lmin  = log(norm_freq_min);
    wsc   = w/log(1+fftSize*0.5-hzoffset);
    
    1-log( (exp((x_loc)/wsc) + hzoffset)/hfft )/lmin
  );

function fftWindow_processMouse(mouse_x, mouse_y, mouse_cap)
  instance(x, y, w, h, lx, ly, lcap, cap, thisUI, htime, hint,
           x_over, dragging, lastLeftClick
           x1, x2, x3, x4, x5,
           v1, v2, v3, v4, v5,
           h1, h2, h3, h4, h5, 
           c1, c2, c3, c4, c5,
           F1hz, F2hz, F3hz, F4hz )
  global(dnoisefloor_freq, dsteps_fft, mouse_wheel, lastUI, fftSize,
         bandClickRange, cuts,
         Freq1, Freq2, Freq3, Freq4,
         bypassBand1, bypassBand2, bypassBand3, bypassBand4, bypassBand5,
         Drive1, Drive2, Drive3, Drive4, Drive5,
         mute1, mute2, mute3, mute4, mute5,
         solo1, solo2, solo3, solo4, solo5,
         driveMin, driveMax, maxCuts,
         hinter.updateHintTime,
         selectedBand, gfx_x, gfx_y, srate, abs_placement )
  local(dx, dy, over, dys,
        F1, F2, F3, F4,
        leftClick, rightClick, doubleClick,
        cTime, mpos, shift, ctrl, lb)
  (
    over = mouse_x > x && mouse_y > y && mouse_x < (x+w) && mouse_y < (y+h);
    leftClick   = ( mouse_cap & 1 == 1 && lcap & 1 == 0 );
    rightClick  = ( mouse_cap & 2 == 2 && lcap & 2 == 0 );
    doubleClick = 0;
    shift       = ( mouse_cap & 8 );
    ctrl        = ( mouse_cap & 4 );
    
    leftClick ? (
       time_precise(cTime);
       ( ( cTime - lastLeftClick ) < .25 ) ? (
          leftClick = 0;
          doubleClick = 1;
       );
       lastLeftClick = cTime;
    );
    
    x_over = -1;
    
    abs_placement ? (
      F1 = clamp(Freq1, 0, 1);
      F2 = clamp(Freq2, F1, cuts > 2 ? F3 : 1);
      F3 = clamp(Freq3, F2, cuts > 3 ? F4 : 1);
      F4 = clamp(Freq4, F3, 1.0);
    ) : (
      F1 = Freq1;
      F2 = Freq1  + Freq2 * (1 - Freq1);
      F3 = F2     + Freq3 * (1 - F2);
      F4 = F3     + Freq4 * (1 - F3);
    );

    F1hz = f_trafo(F1);
    F2hz = f_trafo(F2);
    F3hz = f_trafo(F3);
    F4hz = f_trafo(F4);
        
    ( cap == 3 && mouse_cap & 1 == 1 ) ? (
      dy = mouse_y - ly;
      
      dys = 100*dy/h;
      dragging == 1 ? ( Drive1 -= dys; Drive1 = clamp(Drive1, driveMin, driveMax); );
      dragging == 2 ? ( Drive2 -= dys; Drive2 = clamp(Drive2, driveMin, driveMax); );
      dragging == 3 ? ( Drive3 -= dys; Drive3 = clamp(Drive3, driveMin, driveMax); );
      dragging == 4 ? ( Drive4 -= dys; Drive4 = clamp(Drive4, driveMin, driveMax); );
      dragging == 5 ? ( Drive5 -= dys; Drive5 = clamp(Drive5, driveMin, driveMax); );
      
    ) : ( cap == 2 && mouse_cap & 1 == 1 ) ? (
      // Dragging a band frequency
      dx = mouse_x - lx;
      
      shift ? dx *= .5;
      ctrl ? dx *= .01;
      
      lb = .02;
      dragging == 1 ? ( 
        F1 = this.pixelToWindowRatio(x1 - x + dx);
        abs_placement ? (
          slider_automate( Freq1 = clamp( F1, lb, 1 ) );
        ) : (
          slider_automate( Freq1 = clamp( F1, lb, 1 ) );
          slider_automate( Freq2 = clamp( (F2 - Freq1) / (1-F1), 0, 1 ) );
        );
      );
      dragging == 2 ? ( 
        F2 = this.pixelToWindowRatio(x2 - x + dx);
        abs_placement ? (
          slider_automate( Freq2 = clamp(F2, F1, cuts > 2 ? F3 : 1));
        ) : (
          slider_automate( Freq2 = clamp( (F2 - Freq1) / (1-Freq1), 0, 1 ) );
          F2 = Freq1  + Freq2 * (1 - Freq1);
          slider_automate( Freq3 = clamp( (F3 - F2) / (1-F2), 0, 1) );
        );
      );
      dragging == 3 ? ( 
        F3 = this.pixelToWindowRatio(x3 - x + dx);
        abs_placement ? (
          slider_automate( Freq3 = clamp( F3, F2, cuts > 3 ? F4 : 1 ) );          
        ) : (
          slider_automate( Freq3 = clamp( (F3 - F2) / (1-F2), 0, 1 ) );
          F3 = F2     + Freq3 * (1 - F2);
          slider_automate( Freq4 = clamp( (F4 - F3) / (1-F3), 0, 1 ) );
        );
      );
      dragging == 4 ? ( 
        F4 = this.pixelToWindowRatio(x4 - x + dx);
        abs_placement ? (
          slider_automate( Freq4 = clamp( F4, F3, 1.0 ) );
        ) : (
          slider_automate( Freq4 = clamp( (F4 - F3) / (1-F3), 0, 1 ) );
        );
      );
    ) : ( cap == 1 && mouse_cap & 1 == 1 ) ? (
      dnoisefloor_freq -= .5*(mouse_y-ly);
      dnoisefloor_freq > 35 ? dnoisefloor_freq = 35;
      dnoisefloor_freq < -15 ? dnoisefloor_freq = -15;
    ) : ( 
      // Not already capped
      cap = 0;
      
      /* Toggle mute/solo */
      ( c1.isOver(mouse_x, mouse_y) == 1 ) ? (
        c1.over = 1;
        hinter.updateHintTime("LMB - Toggle mute\nRMB - Toggle solo\nShift + RMB - Select multiple solo bands\nCTRL + LMB - Toggle bypass waveshaper");
        leftClick  ? ( ctrl ? ( bypassBand1 = 1 - bypassBand1) : (
                       mute1 = 1-mute1; solo1 ? (mute1 = 1; solo1 = 0; selectedBand = 0; ); ); );
        rightClick ? ( solo1 = 1-solo1; selectedBand = 0; 
                       ((solo1 == 1) && (shift==0)) ? (solo2=solo3=solo4=solo5=0;); );
      ) : ( c2.isOver(mouse_x, mouse_y) == 1 ) && ( cuts > 0 ) ? (
        hinter.updateHintTime("LMB - Toggle mute\nRMB - Toggle solo\nShift + RMB - Select multiple solo bands\nCTRL + LMB - Toggle bypass waveshaper");
        c2.over = 1;
        leftClick  ? ( ctrl ? ( bypassBand2 = 1 - bypassBand2) : (
                       mute2 = 1-mute2; solo2 ? (mute2 = 1; solo2 = 0; selectedBand = 1;); ); );
        rightClick ? ( solo2 = 1-solo2; selectedBand = 1;
                       ((solo2 == 1) && (shift==0)) ? (solo1=solo3=solo4=solo5=0;); );
      ) : ( c3.isOver(mouse_x, mouse_y) == 1 ) && ( cuts > 1 ) ? (
        hinter.updateHintTime("LMB - Toggle mute\nRMB - Toggle solo\nShift + RMB - Select multiple solo bands\nCTRL + LMB - Toggle bypass waveshaper");
        c3.over = 1;
        leftClick  ? ( ctrl ? ( bypassBand3 = 1 - bypassBand3) : (
                       mute3 = 1-mute3; solo3 ? (mute3 = 1; solo3 = 0; selectedBand = 2; ); ); );
        rightClick ? ( solo3 = 1-solo3; selectedBand = 2;
                       ((solo3 == 1) && (shift==0)) ? (solo1=solo2=solo4=solo5=0;); );
      ) : ( c4.isOver(mouse_x, mouse_y) == 1 ) && ( cuts > 2 ) ? (
        hinter.updateHintTime("LMB - Toggle mute\nRMB - Toggle solo\nShift + RMB - Select multiple solo bands\nCTRL + LMB - Toggle bypass waveshaper");
        c4.over = 1;
        leftClick  ? ( ctrl ? ( bypassBand4 = 1 - bypassBand4) : (
                        mute4 = 1-mute4; solo4 ? (mute4 = 1; solo4 = 0; selectedBand = 3; ); ); );
        rightClick ? ( solo4 = 1-solo4; selectedBand = 3;
                       ((solo4 == 1) && (shift==0)) ? (solo1=solo2=solo3=solo5=0;); );
      ) : ( c5.isOver(mouse_x, mouse_y) == 1 ) && ( cuts > 3 ) ? (
        hinter.updateHintTime("LMB - Toggle mute\nRMB - Toggle solo\nShift + RMB - Select multiple solo bands\nCTRL + LMB - Toggle bypass waveshaper");
        c5.over = 1;
        leftClick  ? ( ctrl ? ( bypassBand5 = 1 - bypassBand5) : (
                       mute5 = 1-mute5; solo5 ? (mute5 = 1; solo5 = 0; selectedBand = 4; ); ); );
        rightClick ? ( solo5 = 1-solo5; selectedBand = 4;
                       ((solo5 == 1) && (shift==0)) ? (solo1=solo2=solo3=solo4=0;); );
        
      /* Drag frequency */
      ) : ( v1.isOver(mouse_x, mouse_y) == 1 ) && ( cuts > 0 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify crossover frequency\nRMB - Remove frequency cut\nRMB anywhere else - Add frequency cut");
        v1.over = 1;
        leftClick ? ( cap = 2; dragging = 1; );
        rightClick ? (
          !abs_placement ? ( Freq2 = ( Freq2 * ( 1 - Freq1 ) + ( Freq1 - 0 ) ) / ( 1 - 0 ); );
          remBand(0);
        );
      ) : ( v2.isOver(mouse_x, mouse_y) ) && ( cuts > 1 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify crossover frequency\nRMB - Remove frequency cut\nRMB anywhere else - Add frequency cut");
        v2.over = 1;
        leftClick ? ( cap = 2; dragging = 2; );
        rightClick ? ( 
          !abs_placement ? ( Freq3 = ( Freq3 * ( 1 - Freq2 ) + ( Freq2 - 0 ) ) / ( 1 - 0 ) );
          remBand(1);
        );
      ) : ( v3.isOver(mouse_x, mouse_y) ) && ( cuts > 2 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify crossover frequency\nRMB - Remove frequency cut\nRMB anywhere else - Add frequency cut");    
        v3.over = 1;
        leftClick ? ( cap = 2; dragging = 3; );
        rightClick ? ( 
          !abs_placement ? ( Freq4 = ( Freq4 * ( 1 - Freq3 ) + ( Freq3 - 0 ) ) / ( 1 - 0 ) );
          remBand(2);
        );
      ) : ( v4.isOver(mouse_x, mouse_y) ) && ( cuts > 3 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify crossover frequency\nRMB - Remove frequency cut\nRMB anywhere else - Add frequency cut");
        v4.over = 1;
        leftClick ? ( cap = 2; dragging = 4; );
        rightClick ? ( remBand(3); );
      ) : ( v5.isOver(mouse_x, mouse_y) ) && ( cuts > 4 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify crossover frequency\nRMB - Remove frequency cut\nRMB anywhere else - Add frequency cut");     
        v5.over = 1;
        leftClick ? ( cap = 2; dragging = 5; );
        rightClick ? ( remBand(4); );
      
      /* Drag drive */
      ) : ( h1.isOver(mouse_x, mouse_y) ) ? (
        hinter.updateHintTime("LMB + Drag - Modify drive\nDouble LMB - Reset drive to zero\nShift + LMB + Drag - Modify drive while reducing gain");      
        h1.over = 1;
        leftClick ? ( cap = 3; dragging = 1; selectedBand = 0; );
        doubleClick ? ( Drive1 = 0; selectedBand = 0; );
      ) : ( h2.isOver(mouse_x, mouse_y) ) && ( cuts > 0 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify drive\nDouble LMB - Reset drive to zero\nShift + LMB + Drag - Modify drive while reducing gain");
        h2.over = 1;
        leftClick ? ( cap = 3; dragging = 2; selectedBand = 1; );
        doubleClick ? ( Drive2 = 0; selectedBand = 1; );
      ) : ( h3.isOver(mouse_x, mouse_y) ) && ( cuts > 1 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify drive\nDouble LMB - Reset drive to zero\nShift + LMB + Drag - Modify drive while reducing gain");
        h3.over = 1;
        leftClick ? ( cap = 3; dragging = 3; selectedBand = 2; );
        doubleClick ? ( Drive3 = 0; selectedBand = 2; );
      ) : ( h4.isOver(mouse_x, mouse_y) ) && ( cuts > 2 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify drive\nDouble LMB - Reset drive to zero\nShift + LMB + Drag - Modify drive while reducing gain");      
        h4.over = 1;
        leftClick ? ( cap = 3; dragging = 4; selectedBand = 3; );
        doubleClick ? ( Drive4 = 0; selectedBand = 3; );
      ) : ( h5.isOver(mouse_x, mouse_y) ) && ( cuts > 3 ) ? (
        hinter.updateHintTime("LMB + Drag - Modify drive\nDouble LMB - Reset drive to zero\nShift + LMB + Drag - Modify drive while reducing gain");            
        h5.over = 1;
        leftClick ? ( cap = 3; dragging = 5; selectedBand = 4; );
        doubleClick ? ( Drive5 = 0; selectedBand = 4; );    
        
      /* Handle clicks within the bands (creating a new band or selecting a band) */
      ) : ( overRect( h1.x, y, h1.w, h, mouse_x, mouse_y ) ) ? (
        leftClick ? selectedBand = 0;
        rightClick && (cuts < maxCuts) ? ( 
          addBand(0);
          mpos = this.pixelToWindowRatio(mouse_x);
          !abs_placement ? ( Freq2 = ( Freq2 * (1-0) + 0 - mpos ) / ( 1 - mpos ); );
          Freq1 = mpos;
        );
      ) : ( overRect( h2.x, y, h2.w, h, mouse_x, mouse_y ) && ( cuts > 0 )  ) ? (
        leftClick ? selectedBand = 1;
        rightClick && (cuts < maxCuts) ? ( 
          addBand(1);
          mpos = this.pixelToWindowRatio(mouse_x);
          !abs_placement ? (
            Freq3 = ( Freq3 * (1-Freq1) + Freq1 - mpos ) / ( 1 - mpos );
            Freq2 = ( mpos - Freq1 ) / ( 1 - Freq1 );
          ) : (
            Freq2 = mpos;
          );
        );
      ) : ( overRect( h3.x, y, h3.w, h, mouse_x, mouse_y ) && ( cuts > 1 ) ) ? (
        leftClick ? selectedBand = 2;
        rightClick && (cuts < maxCuts) ? ( 
          addBand(2);
          mpos = this.pixelToWindowRatio(mouse_x);
          !abs_placement ? (
            F2 = Freq1  + Freq2 * (1 - Freq1);
            Freq4 = ( Freq4 * (1-F2) + F2 - mpos ) / ( 1 - mpos );
            Freq3 = ( mpos - F2 ) / ( 1 - F2 );
          ) : (
            Freq3 = mpos;
          );
        );
      ) : ( overRect( h4.x, y, h4.w, h, mouse_x, mouse_y ) && ( cuts > 2 ) ) ? (
        leftClick ? selectedBand = 3;
        rightClick && (cuts < maxCuts) ? ( 
          addBand(3);
          mpos = this.pixelToWindowRatio(mouse_x);
          !abs_placement ? (
            F2 = Freq1  + Freq2 * (1 - Freq1);
            F3 = F2     + Freq3 * (1 - F2);
            Freq4 = ( mpos - F3 ) / ( 1 - F3 );
          ) : (
            Freq4 = mpos;
          );
        );
      ) : ( overRect( h5.x, y, h5.w, h, mouse_x, mouse_y ) && ( cuts > 3 ) ) ? (
        leftClick ? selectedBand = 4;
      ) : (
        cap = 0;
        ( mouse_cap & 1 == 1 && lcap & 1 == 0 && over ) ? (
          cap = 1;
        );
      );
    );
    
    mouse_wheel > 0 && over ? lastUI = thisUI;
    
    abs(floor(mouse_wheel/240)) > 0 && over ?
    (
      dsteps_fft += floor(mouse_wheel/240);
      dsteps_fft > 8 ? dsteps_fft = 8;
      dsteps_fft < -4 ? dsteps_fft = -4;
      mouse_wheel = 0;
    );
    
    lx = mouse_x;
    ly = mouse_y;
    lcap = mouse_cap;
    
    over
  );

function drawFFT(fill, r, g, b, a)
  global(scaling, fftSize, gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a, srate, gfx_mode, dsteps_fft, FIR1, norm_freq_max)
  instance(hstep, x, y, w, h, recPtr, window, rStart, rEnd, fftLoc, floorLevel, hzoffset)
  local(step, copyval, stepsize, buf, i, ixsc, txl, tx, ty, wsc, fill, tx0, lx0, lx, ly, ty2, ly2, fill_slast, fill_slmin, cum, cumelem)
  (
    this.calcFFT();
 
    cum = -10000000;
    cumelem = 0;
    i = 0;
    ixsc = 0;
    wsc = w/log(fftsize*0.5-hzoffset);
    fill_slmin = y;

    buf = fftLoc + fftsize*0.5;
    stepsize = floor((4+dsteps_fft)*(1+scaling));
    copyval = buf[];
    loop( stepsize*200,
      (buf+=1)[] = copyval;
    );
     
    gfx_r = r;
    gfx_g = g;
    gfx_b = b;
    gfx_a = a;
 
    hstep = 0.5 * stepsize;
    buf = fftLoc;
    txl = x;
    lx = x;
    ly = y - max(buf[2], -floorLevel)*h / floorLevel;
    step = 1.0 / (2*norm_freq_max);
    
    loop(fftsize*0.5+stepsize*200,
      tx = floor(x + log(ixsc - hzoffset)*wsc);
      cum = max(cum, tx > 0 ? buf[] : -10000);
      cumelem += 1;
      
      ( (tx != txl) && (tx-txl > stepsize) && tx > x && i && ( tx < (x+w+stepsize) ) ) ?
      ( 
        ty = y - max(cum, -floorLevel)*h / floorLevel;
        txl = floor(tx);
        
        tx = min(tx, x+w);
        (fill) ? 
        (
          tx0=tx|0;
          lx0=lx|0;
          tx0>lx0 ? 
          (
            gfx_triangle(lx0-hstep,max(y+h,ly),lx0-hstep,ly,tx0-1-hstep,ty,tx0-1-hstep,max(y+h,ty));
          ) : (
            tx0 > fill_slast ? 
            (
              fill_slast < h ? gfx_line(fill_slast,h,fill_slast,fill_slmin);
              fill_slmin=h;
            ) : (
              fill_slmin=min(fill_slmin,ty);
            );
          );
          
          fill_slast=tx0;        
        );
        
        (fill==0) ? (
          drawLine(lx-hstep, ly, tx-hstep, ty);
        );
        
        lx=tx; ly=ty; ly2=ty2; cum = -1000000; cumelem = 0;
      );
      
      buf+=1; i+=1; ixsc+=step;
    );
  );
  
function drawLineFFT(peakLocation)
  global(fftSize, gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a, srate)
  instance(x, y, w, h, hzoffset)
  local(wsc, tx, base, i)
  (
    wsc = w/log(1+fftSize*0.5-hzoffset);
    base = fftSize*peakLocation;
    tx = floor(x + log(1.0+base-hzoffset)*wsc);
    drawLine(tx, y, tx, y+h);
  );  
  
function updateBands()
  global(Freq1,   Freq2,   Freq3,   Freq4,
         Ceil1,   Ceil2,   Ceil3,   Ceil4,
         Drive1,  Drive2,  Drive3,  Drive4,  Drive5,
         fftSize, driveRange, driveMax, abs_placement, cuts,
         norm_freq_min)
  instance(x, y, w, h, hzoffset,
           x1,  x2,  x3,  x4,  x5,  /* Frequencies          */
           y1,  y2,  y3,  y4,  y5,  /* Drives               */
           )
  local(F1, F2, F3, F4, F5, wsc, hfft, lmin, irange, dmax)
  (
    abs_placement ? (
      F1 = clamp(Freq1, 0, 1);
      F2 = clamp(Freq2, F1, cuts > 2 ? F3 : 1);
      F3 = clamp(Freq3, F2, cuts > 3 ? F4 : 1);
      F4 = clamp(Freq4, F3, 1.0);
    ) : (
      F1 = Freq1;
      F2 = Freq1  + Freq2 * (1 - Freq1);
      F3 = F2     + Freq3 * (1 - F2);
      F4 = F3     + Freq4 * (1 - F3);
    );
    
    hfft = 0.5*fftSize;
    lmin = log(norm_freq_min);
    
    wsc = w/log(1+fftSize*0.5-hzoffset);
    x1 = ( x + log( hfft * exp( (1-F1) * lmin ) - hzoffset ) * wsc );
    x2 = ( x + log( hfft * exp( (1-F2) * lmin ) - hzoffset ) * wsc );
    x3 = ( x + log( hfft * exp( (1-F3) * lmin ) - hzoffset ) * wsc );
    x4 = ( x + log( hfft * exp( (1-F4) * lmin ) - hzoffset ) * wsc );
    x5 = ( x + log( hfft * exp( lmin ) - hzoffset ) * wsc );
       
    iRange = 1/driveRange;
    dmax = iRange * driveMax;
    
    y1 = y+h*(dmax-iRange*Drive1);
    y2 = y+h*(dmax-iRange*Drive2);
    y3 = y+h*(dmax-iRange*Drive3);
    y4 = y+h*(dmax-iRange*Drive4);
    y5 = y+h*(dmax-iRange*Drive5);
  );

lineR = 1;
lineG = .9;
lineB = 1.0;
lineA = .95;
lineHighlightR = 0;
lineHighlightG = .7;
lineHighlightB = .5;
  
function drawGroupRect(x, y, w, h, r, g, b, a)  
  local()
  instance()
  global()
  (
    gfx_set(r, g, b, a);
    gfx_line(x, y, x+w, y);
    gfx_line(x, y, x, y+h);
    gfx_line(x+w, y, x+w, y+h);
    gfx_line(x, y+h, x+w, y+h);
    
    gfx_set(r, g, b, a*.5);
    gfx_line(x, y+h+1, x+w, y+h+1);
    gfx_line(x+w+1, y, x+w+1, y+h);
  );  
  
function initBuffer(scopebuffer_in, scopebuffermax_in)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopebuffer     = scopebuffer_in;
    scopebuffermax  = scopebuffermax_in;
    
    scopeptr < scopebuffer ? (
      scopeptr = scopebuffer 
    ) : ( scopeptr > scopebuffermax ) ? scopeptr = scopebuffer    
  );
  
function setOffset(offset)
  local()
  global()
  instance(scopeptr, readptr, scopebuffermax, scopebuffer, frac)
  (
    readptr   = scopeptr;
    frac      = offset - floor(offset);
    readptr  -= floor(offset);
    readptr < scopebuffer ? readptr += (scopebuffermax-scopebuffer+1);
  );
  
function readBuffer()
  local(c1, c2)
  global()
  instance(readptr, scopebuffermax, scopebuffer, frac)
  (
    c1 = readptr[];
    readptr += 1;
    readptr > scopebuffermax ? readptr = scopebuffer;
    
    c2 = readptr[];
    c2 * (1.0-frac) + c1 * frac
  );
  
function updateBuffer(M)
  local()
  global()
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    scopeptr[] = M;
    scopeptr += 1;
    scopeptr > scopebuffermax ? scopeptr = scopebuffer;
    
    M
  );  
  
function clearBuffer()
  local()
  global(MAXBUFFERSIZE)
  instance(scopeptr, scopebuffermax, scopebuffer)
  (
    memset( scopebuffer, 0, MAXBUFFERSIZE );
    scopeptr = scopebuffer;
  );   
  
function fancyLineV(x1, y1, x2, y2)
  local(dx)
  global(globalTime, lineR, lineG, lineB, lineA, lineHighlightR, lineHighlightG, lineHighlightB)
  instance(x, y, w, h, over)
  (
    dx = 5;
    
    x = x1 - .5*dx;
    y = y1;
    w = dx;
    h = y2-y1;
  
    over ? ( 
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
      gfx_rect(x-2, y, w+5, h);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
      gfx_rect(x-4, y, w+9, h);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.05);
      gfx_rect(x-7, y, w+15, h);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.03);
      gfx_rect(x-10, y, w+20, h);
    );
  
    gfx_set(.2*lineR, .2*lineG, .2*lineB, lineA);
    gfx_rect(x, y, w, h);
    gfx_set(.5*lineR, .5*lineG, .5*lineB, lineA);    
    dx = 3; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
    gfx_set(.7*lineR, .7*lineG, .7*lineB, lineA);
    dx = 2; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
    gfx_set(lineR, lineG, lineB, lineA);
    dx = 1; gfx_rect(x1 - .5*dx, y1, dx, y2-y1);
    
    over ? ( 
      gfx_set(1,1,1,.4*abs(sin(2*globalTime)));
      gfx_rect(x, y, w, h);
    );
    
    over = 0;
  );

function fancyLineH(x1, y1, x2, y2)
  local(dy)
  global(globalTime, lineR, lineG, lineB, lineA, lineHighlightR, lineHighlightG, lineHighlightB)
  instance(x, y, w, h, over)
  (
    dy = 5;    
    
    x = x1;
    y = y1 - .5*dy;
    w = x2-x1;
    h = dy;
  
    over ? ( 
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
      gfx_rect(x, y-2, w, h+5);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.1);
      gfx_rect(x, y-4, w, h+9);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.05);
      gfx_rect(x, y-7, w, h+15);
      gfx_set(lineHighlightR,lineHighlightG,lineHighlightB,.03);
      gfx_rect(x, y-10, w, h+20);
    );  
  
    gfx_set(.2*lineR, .2*lineG, .2*lineB, lineA);
    gfx_rect(x, y, w, h);
    gfx_set(.5*lineR, .5*lineG, .5*lineB, lineA);    
    dy = 3; gfx_rect(x1, y1 - .5*dy, x2-x1, dy );
    gfx_set(.7*lineR, .7*lineG, .7*lineB, lineA);
    dy = 2; gfx_rect(x1, y1 - .5*dy, x2-x1, dy );
    gfx_set(lineR, lineG, lineB, lineA);
    dy = 1; gfx_rect(x1, y1 - .5*dy, x2-x1, dy );
    
    over ? ( 
      gfx_set(1,1,1,.7*abs(sin(2*globalTime)));
      gfx_rect(x, y, w, h);
    );
    
    over = 0;    
  ); 

function hzLabel(dy, label)
  local(lww, lhh, cy, dy2)
  global(gfx_x, gfx_y, hzLabelW, hzLabelH, lineR, lineG, lineB, lineA)
  instance(x, y, w, h, over)
  (
    cy = y + dy*h;
    
    gfx_measurestr("888888", hzLabelW, hzLabelH);

    gfx_set(.5*lineR, .5*lineG, .5*lineB, lineA);    
    dy2 = 3; gfx_rect(x-.5*hzLabelW-.5*dy2, cy-.5*dy2, hzLabelW+dy2, hzLabelH+dy2);
    gfx_set(.7*lineR, .7*lineG, .7*lineB, lineA);
    dy2 = 2; gfx_rect(x-.5*hzLabelW-.5*dy2, cy-.5*dy2, hzLabelW+dy2, hzLabelH+dy2);
    gfx_set(lineR, lineG, lineB, lineA);
    dy2 = 1; gfx_rect(x-.5*hzLabelW-.5*dy2, cy-.5*dy2, hzLabelW+dy2, hzLabelH+dy2);

    gfx_set( 1, 1, 1, .8 );
    gfx_rect(x-.5*hzLabelW-1, cy-1, hzLabelW+2, hzLabelH+2);
    
    gfx_set( 0, 0, 0, 1 );
    gfx_rect(x-.5*hzLabelW, cy, hzLabelW, hzLabelH);

    sprintf(19, "%d", label);
    gfx_measurestr(19, lww, lhh);
    gfx_set( 1, 1, 1, 1 );    
    gfx_x = x - .5 *lww;
    gfx_y = y + dy*h;
    gfx_printf(19, label);
  );
  
function drawBands()
  global(Cuts, stest,
           mute1, mute2, mute3, mute4, mute5,
           solo1, solo2, solo3, solo4, solo5,
           bypassBand1, bypassBand2, bypassBand3, bypassBand4, bypassBand5,
           selectedBand )
  instance(xc, dx, x, y, w, h, 
           x1, x2, x3, x4, x5, // Band frequency screen positions
           y1, y2, y3, y4, y5, // Band drive positions
           v1, v2, v3, v4, v5, // Frequency handles
           h1, h2, h3, h4, h5, // Drive handles
           c1, c2, c3, c4, c5, // Circle handles
           F1hz, F2hz, F3hz, F4hz, F5hz, // Frequencies
           x_over)
  local()
  (
    xc = x;
    dx = 5;
    while(xc<x+w) (
      gfx_set(0,0,0,1);
      gfx_line(xc, y+.6*h+1, xc+dx, y+.6*h+1);
      gfx_line(xc, y+.6*h-1, xc+dx, y+.6*h-1);
      gfx_set(0.6,0.6,0.6,1);
      gfx_line(xc, y+.6*h, xc+dx, y+.6*h);
      xc = xc + 2*dx;
    );
    
    xc = x;
    dx = 5;
    gfx_set(0,0,0,.3);
    gfx_line(x, y+.3*h, x+w, y+.3*h);
    gfx_line(x, y+.3*h+2, x+w, y+.3*h+2);
 
    (Cuts > 0) ? (
      gfx_set(1,1,1,1); v1.fancyLineV(x1, y, x1, y+h);
      v1.hzLabel(.8, F1hz);
    );
    (Cuts > 1) ? (
      gfx_set(1,1,1,1); v2.fancyLineV(x2, y, x2, y+h);
      v2.hzLabel(.8, F2hz);
    );
    (Cuts > 2) ? (
      gfx_set(1,1,1,1); v3.fancyLineV(x3, y, x3, y+h);
      v3.hzLabel(.8, F3hz);
    );
    (Cuts > 3) ? (
      gfx_set(1,1,1,1); v4.fancyLineV(x4, y, x4, y+h);
      v4.hzLabel(.8, F4hz);
    );
    (Cuts > 4) ? (
      gfx_set(1,1,1,1); v5.fancyLineV(x5, y, x5, y+h);
      v5.hzLabel(.8, F5hz);
    );
    
    gfx_rect(x_over-3, y, 5, h);
    ( Cuts == 0 ) ? (
       h1.fancyLineH(x, y1, x+w-2, y1);
       c1.fancyCircle(x + .5*w, y1, 0, mute1, solo1, bypassBand1);
    ) : ( Cuts == 1 ) ? (
       h1.fancyLineH(x,  y1, x1-2, y1);
       c1.fancyCircle(.5*x + .5*x1, y1, 0, mute1, solo1, bypassBand1);
       h2.fancyLineH(x1, y2, x+w-2, y2);
       c2.fancyCircle(x1 + .5*(w-x1), y2, 0, mute2, solo2, bypassBand2);
    ) : ( Cuts == 2 ) ? (
       h1.fancyLineH(x,  y1, x1-2, y1);
       c1.fancyCircle(.5*x + .5*x1, y1, 0, mute1, solo1, bypassBand1);
       h2.fancyLineH(x1, y2, x2-2, y2);
       c2.fancyCircle(x1 + .5*(x2-x1), y2, 0, mute2, solo2, bypassBand2);
       h3.fancyLineH(x2, y3, x+w-2, y3);
       c3.fancyCircle(x2 + .5*(w-x2), y3, 0, mute3, solo3, bypassBand3);
    ) : ( Cuts == 3 ) ? (
       h1.fancyLineH(x,  y1, x1-2, y1);
       c1.fancyCircle(.5*x + .5*x1, y1, 0, mute1, solo1, bypassBand1);
       h2.fancyLineH(x1, y2, x2-2, y2);
       c2.fancyCircle(x1 + .5*(x2-x1), y2, 0, mute2, solo2, bypassBand2);
       h3.fancyLineH(x2, y3, x3-2, y3);
       c3.fancyCircle(x2 + .5*(x3-x2), y3, 0, mute3, solo3, bypassBand3);
       h4.fancyLineH(x3, y4, x+w-2, y4);
       c4.fancyCircle(x3 + .5*(w-x3), y4, 0, mute4, solo4, bypassBand4);
    ) : ( Cuts == 4 ) ? (
       h1.fancyLineH(x,  y1, x1-2, y1);
       c1.fancyCircle(.5*x + .5*x1, y1, 0, mute1, solo1, bypassBand1);
       h2.fancyLineH(x1, y2, x2-2, y2);
       c2.fancyCircle(x1 + .5*(x2-x1), y2, 0, mute2, solo2, bypassBand2);
       h3.fancyLineH(x2, y3, x3-2, y3);
       c3.fancyCircle(x2 + .5*(x3-x2), y3, 0, mute3, solo3, bypassBand3);
       h4.fancyLineH(x3, y4, x4-2, y4);      
       c4.fancyCircle(x3 + .5*(x4-x3), y4, 0, mute4, solo4, bypassBand4);
       h5.fancyLineH(x4, y5, x+w-2, y5);
       c5.fancyCircle(x4 + .5*(w-x4), y5, 0, mute5, solo5, bypassBand5);
    );
    
    selectedBand == 0 ? gfx_muladdrect( h1.x, y, h1.w, h, 1, 1, 1, .6, .05, .05, .105 );
    selectedBand == 1 ? gfx_muladdrect( h2.x, y, h2.w, h, 1, 1, 1, .6, .05, .05, .105 );
    selectedBand == 2 ? gfx_muladdrect( h3.x, y, h3.w, h, 1, 1, 1, .6, .05, .05, .105 );
    selectedBand == 3 ? gfx_muladdrect( h4.x, y, h4.w, h, 1, 1, 1, .6, .05, .05, .105 );
    selectedBand == 4 ? gfx_muladdrect( h5.x, y, h5.w, h, 1, 1, 1, .6, .05, .05, .105 );

  );  
  
function initSpectrum(memoryOffset, fftSize, srate)
  global(newUI)
  instance(recPtr, window, rStart, rEnd, fftLoc, hzoffset, thisUI, slope)
  local()
  (
    slope     = 3;
  
    hzoffset  = 10*fftSize/srate;
    window    = memoryOffset + fftSize + (fftSize*0.5 - 1);
  
    // Start and end of the buffer
    rStart    = memoryOffset;                              // rpos
    rEnd      = window;                                      // hsize
    
    fftLoc    = window + (fftSize*0.5 + 1); // fftw
    
    recPtr    = rStart;
    thisUI    = newUI+=1;
    
    this.initWindow(3)
  );
  
  function resetBandMeter()
  local()
  global()
  instance(in, pre, post)
  (
    in = pre = post = 0;
  );
  
  function processBands()
  local(BW2)
  global( Drive1,    Drive2,    Drive3,     Drive4,     Drive5
          play1,     play2,     play3,      play4,      play5 )
  instance(b1, b2, b3, b4, b5, F1, F2, F3, F4, F5,
           g1,       g2,       g3,       g4,       g5,
           lg1,      lg2,      lg3,      lg4,      lg5 )
  (
    ( lg1 != Drive1 ) ? ( g1 = (10^(0.05*Drive1)); lg1 = Drive1; );
    ( lg2 != Drive2 ) ? ( g2 = (10^(0.05*Drive2)); lg2 = Drive2; );
    ( lg3 != Drive3 ) ? ( g3 = (10^(0.05*Drive3)); lg3 = Drive3; );
    ( lg4 != Drive4 ) ? ( g4 = (10^(0.05*Drive4)); lg4 = Drive4; );
    ( lg5 != Drive5 ) ? ( g5 = (10^(0.05*Drive5)); lg5 = Drive5; );

    b1.l = b2.l = b3.l = b4.l = b5.l = 0;
    b1.r = b2.r = b3.r = b4.r = b5.r = 0;
    play1 ? (
      b1.l = g1*b1.inL;
      b1.r = g1*b1.inR;
    );
    play2 ? (
      b2.l = g2*b2.inL;
      b2.r = g2*b2.inR;
    );
    play3 ? (
      b3.l = g3*b3.inL;
      b3.r = g3*b3.inR;
    );
    play4 ? (
      b4.l = g4*b4.inL;
      b4.r = g4*b4.inR;
    );
    play5 ? (
      b5.l = g5*b5.inL;
      b5.r = g5*b5.inR;
    );
  ); 
  
// MEMORY LAYOUT
fftSize     = 2*8192;
bufferDist  = 65536;
audioBufIn  = 0 + 2000000;
audioBufOut = bufferDist;

FIR1        = 2*bufferDist + 2000000;
FIR2        = 3*bufferDist + 2000000;
FIR3        = 4*bufferDist + 2000000;
FIR4        = 5*bufferDist + 2000000;
FIR5        = 6*bufferDist + 2000000;

F1Block1    = 7*bufferDist + 2000000;
F1Block2    = 8*bufferDist + 2000000;
F2Block1    = 9*bufferDist + 2000000;
F2Block2    = 10*bufferDist + 2000000;
F3Block1    = 11*bufferDist + 2000000;
F3Block2    = 12*bufferDist + 2000000;
F4Block1    = 13*bufferDist + 2000000;
F4Block2    = 14*bufferDist + 2000000;
F5Block1    = 15*bufferDist + 2000000;
F5Block2    = 16*bufferDist + 2000000;

specBufferLoc = 17*bufferDist + 2000000;

specBuffer.initBuffer(specBufferLoc, specBufferLoc+bufferDist-4);

// INITIALIZATION
spectrumIn.initSpectrum(audioBufIn, fftSize, srate);
spectrumOut.initSpectrum(audioBufOut, fftSize, srate);













@serialize
file_var(0, mute1);
file_var(0, mute2);
file_var(0, mute3);
file_var(0, mute4);
file_var(0, mute5);

file_var(0, solo1);
file_var(0, solo2);
file_var(0, solo3);
file_var(0, solo4);
file_var(0, solo5);

file_var(0, FIR);

file_var(0, gmem_group);



file_var(0, while_playing);
file_var(0, while_recording);
file_var(0, while_stopped);
file_var(0, link_group);
file_var(0, MBP_VERSION);

seriloop = 0;
loop(64*16 + 27 + 16,
file_var(0, gmem[seriloop]);
seriloop += 1;
);

seriloop = 0;
loop(200*16,
file_var(0, group_generics[seriloop]);
seriloop += 1;
);













@slider
/*
while(
numbands < cuts;
remBand(cuts);
);
while(
numbands > cuts;
addBand(cuts+1);
);
*/
//cuts = numbands;// = 3;
caller = 1;

@block

////////// ANALYZER
S2_Floor != lfloor ? (
  lfloor = S2_Floor;
  minvol=2*exp(log(10)/20*S2_Floor);
);
////////// ANALYZER
csrate = ceil(srate / 44100);


(last_gmem_group != gmem_group) ||
(last_sent_cuts != Cuts) ||
(last_sent_f1 != Freq1) ||
(last_sent_f2 != Freq2) ||
(last_sent_f3 != Freq3) ||
(last_sent_f4 != Freq4) ||
(last_sent_slope != band_mode) ||
(last_sent_abs_placement != abs_placement) ? (
  last_gmem_group = gmem_group;
  last_sent_cuts = Cuts;
  last_sent_f1 = Freq1;
  last_sent_f2 = Freq2;
  last_sent_f3 = Freq3;
  last_sent_f4 = Freq4;
  last_sent_abs_placement = abs_placement;
  last_sent_slope = band_mode;

  (gmem_group > 0) ? (
    gm_ptr = 8 * (gmem_group - 1);
    gmem[gm_ptr] = time_precise();  /* Identity */
    gmem[gm_ptr + 1] = last_sent_cuts;
    gmem[gm_ptr + 2] = last_sent_f1;
    gmem[gm_ptr + 3] = last_sent_f2;
    gmem[gm_ptr + 4] = last_sent_f3;
    gmem[gm_ptr + 5] = last_sent_f4;
    gmem[gm_ptr + 6] = last_sent_abs_placement;
    gmem[gm_ptr + 7] = last_sent_slope;
  );
);

absolute_frequencies ? (
  //freq_max = 22050;
  //norm_freq_min = 10.0 / freq_max;
  //norm_freq_max = freq_max / srate;
  freq_max = 44100/2;//22050 * (srate/44100);
  norm_freq_min = 10.0 / (freq_max/2);
  norm_freq_max = freq_max / srate;
) : (
  freq_max = 0.5 * srate;
  norm_freq_min = 10.0 / 22050;
  norm_freq_max = 0.5;
);

!mute1 ? play1 = 1 : play1 = 0;
!mute2 ? play2 = 1 : play2 = 0;
!mute3 ? play3 = 1 : play3 = 0;
!mute4 ? play4 = 1 : play4 = 0;
!mute5 ? play5 = 1 : play5 = 0;

( solo1 || solo2 || solo3 || solo4 || solo5 ) ? ( play1 = play2 = play3 = play4 = play5 = 0; );
solo1 ? play1 = 1;
solo2 ? play2 = 1;
solo3 ? play3 = 1;
solo4 ? play4 = 1;
solo5 ? play5 = 1;

(FIR) ? (
  chunkSize = (fftCalcSize - firSize - 1);
  newPDC = chunkSize + 0.5*firSize;
) : (
  newPDC = 0;
);

(pdc_delay != newPDC) ? (
  pdc_top_ch = 10;
  pdc_bot_ch = 0;
  pdc_delay = newPDC;
);

@sample






S2_sample_on = 1;

gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
group_check_smpl();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  );
);








  function init_LR2(freq)
    global(srate, norm_freq_max, norm_freq_min, band_mode)
    local(f0, ct, st, div)
    instance(k, a1, a2, a3)
    (
      f0 = norm_freq_max * $pi * exp( (1.0 - freq) * log(norm_freq_min) );
      k = band_mode == 0 ? sqrt(2) : 2; /* Note the different peak resonance because we're combining 2 SVFs into the Linkwitz-Riley structure */

      ct = cos(f0);
      st = sin(f0);
      div = 1.0 / (1.0 + k * st * ct);
      a1 = ct * ct * div;
      a2 = st * ct * div;
      a3 = st * st * div;
    );
  
  function reset_LR()
    global()
    local()
    instance(ic1eq, ic2eq, ic3eq, ic4eq, ic5eq, ic6eq, k, a1, a2, a3)
    (
      ic1eq = ic2eq = 0;  
    );  

  function eval_LRLP(v0)
    global()
    local(v1, v2, v3)
    instance(ic3eq, ic4eq, a1, a2, a3)
    (
      v3 = v0 - ic4eq;
      v1 = a1 * ic3eq + a2 * v3;
      v2 = ic4eq + a2 * ic3eq + a3 * v3;
      ic3eq = 2*v1 - ic3eq;
      ic4eq = 2*v2 - ic4eq;
      
      v2
    );  
 
  function eval_LRAP(v0)
    global()
    local(v1, v2, v3)
    instance(ic5eq, ic6eq, k, a1, a2, a3)
    (
      v3 = v0 - ic6eq;
      v1 = a1 * ic5eq + a2 * v3;
      v2 = ic6eq + a2 * ic5eq + a3 * v3;
      ic5eq = 2*v1 - ic5eq;
      ic6eq = 2*v2 - ic6eq;    
      
      v0 - 2*k*v1
    );
    
  function eval_LR2(v0)
    global()
    local(v1, v2, v3, all)
    instance(ic1eq, ic2eq, k, a1, a2, a3, hp, lp)
    (
      v3 = v0 - ic2eq;
      v1 = a1 * ic1eq + a2 * v3;
      v2 = ic2eq + a2 * ic1eq + a3 * v3;
      ic1eq = 2*v1 - ic1eq;
      ic2eq = 2*v2 - ic2eq;
      
      all = v0 - 2 * k * v1;
 
      lp = this.eval_LRLP(v2); 
      hp = all - lp;
    );
    
  function eval_LR1(v0)
    global()
    local(v1, v2, v3)
    instance(ic1eq, ic2eq, k, a1, a2, a3, hp, lp)
    (
      v3 = v0 - ic2eq;
      v1 = a1 * ic1eq + a2 * v3;
      v2 = ic2eq + a2 * ic1eq + a3 * v3;
      ic1eq = 2*v1 - ic1eq;
      ic2eq = 2*v2 - ic2eq;
 
      lp = v2;
      hp = v0 - k * v1 - lp;
    );
    
  function init_AP1(freq)
    global(srate, norm_freq_min, norm_freq_max)
    instance(k)
    local(f0, st)
    (
      f0 = norm_freq_max * $pi * exp((1 - freq) * log(norm_freq_min));
      st = sin(f0);
      k = st / (st + cos(f0));
    );
    
  function eval_AP1(v0)
    global()
    instance(k, state)
    local(v, y)
    (
      v = (v0 - state) * k;
      y = v + state;
      state = y + v;
      y - (v0 - y)
    );
  
  function resetBands()
  local()
  global()
  instance( b1, b2, b3, b4, b5 )
  (
    b1.r = b1.l = b2.r = b2.l = b3.r = b3.l = b4.r = b4.l = b5.l = 0;
  );
  
  function resetFilters()
  global()
  local()
  instance(
            LF1, LF2, LF3, LF4            /* Lowpass left */
            LA_F2,                        /* Allpass frequency 2 left */
            LA_F3, LA_F3_2,               /* Allpass frequency 3 left */
            LA_F4, LA_F4_2, LA_F4_3,      /* Allpass frequency 4 left */
            RF1, RF2, RF3, RF4            /* Lowpass right */
            RA_F2,                        /* Allpass frequency 2 right */
            RA_F3, RA_F3_2,               /* Allpass frequency 3 right */
            RA_F4, RA_F4_2, RA_F4_3,      /* Allpass frequency 4 right */  
  )
  (
    // LR2  => ic1eq, ic2eq, ic3eq, ic4eq
    // LPLP => ic3eq, ic4eq
    // LRAP => ic5eq, ic6eq
    
    LF1.ic1eq = LF1.ic2eq = LF1.ic3eq = LF1.ic4eq = 0;
    LF2.ic1eq = LF2.ic2eq = LF2.ic3eq = LF2.ic4eq = 0;
    LF3.ic1eq = LF3.ic2eq = LF3.ic3eq = LF3.ic4eq = 0;
    LF4.ic1eq = LF4.ic2eq = LF4.ic3eq = LF4.ic4eq = 0;

    RF1.ic1eq = RF1.ic2eq = RF1.ic3eq = RF1.ic4eq = 0;
    RF2.ic1eq = RF2.ic2eq = RF2.ic3eq = RF2.ic4eq = 0;
    RF3.ic1eq = RF3.ic2eq = RF3.ic3eq = RF3.ic4eq = 0;
    RF4.ic1eq = RF4.ic2eq = RF4.ic3eq = RF4.ic4eq = 0;
    
    LA_F4.ic5eq = LA_F4.ic6eq = LA_F3.ic5eq = LA_F3.ic6eq = LA_F2.ic5eq = LA_F2.ic6eq = 0;
    RA_F4.ic5eq = RA_F4.ic6eq = RA_F3.ic5eq = RA_F3.ic6eq = RA_F2.ic5eq = RA_F2.ic6eq = 0;

    LA_F4_2.ic5eq = LA_F4_2.ic6eq = LA_F3_2.ic5eq = LA_F3_2.ic6eq = LA_F4_3.ic5eq = LA_F4_3.ic6eq = 0;
    RA_F4_2.ic5eq = RA_F4_2.ic6eq = RA_F3_2.ic5eq = RA_F3_2.ic6eq = RA_F4_3.ic5eq = RA_F4_3.ic6eq = 0;
  );
  
  // Make sure the delay is the same on all bands (identical number of filters)
  function splitBands(sl, sr)
  local()
  global(Cuts, FIR, band_mode, lband_mode)
  instance( LF1, LF2, LF3, LF4            /* Lowpass left */
            LA_F2,                        /* Allpass frequency 2 left */
            LA_F3, LA_F3_2,               /* Allpass frequency 3 left */
            LA_F4, LA_F4_2, LA_F4_3,      /* Allpass frequency 4 left */
            RF1, RF2, RF3, RF4            /* Lowpass right */
            RA_F2,                        /* Allpass frequency 2 right */
            RA_F3, RA_F3_2,               /* Allpass frequency 3 right */
            RA_F4, RA_F4_2, RA_F4_3,      /* Allpass frequency 4 right */
            b1, b2, b3, b4, b5, lcuts )
  (
    ( lcuts != cuts ) ? (
      lcuts = cuts;
      this.resetBands();
    );
    
    band_mode == 0 ? (
      // 4p filters
      (cuts==0) ? (
        b1.inL = sl;
        b1.inR = sr;
      ) : (cuts==1) ? (
        LF1.eval_LR2(sl);
        b1.inL = LF1.lp;
        b2.inL = LF1.hp;
          
        RF1.eval_LR2(sr);
        b1.inR = RF1.lp;
        b2.inR = RF1.hp;
      ) : (cuts==2) ? (
        LF1.eval_LR2(sl);
        b1.inL   = LA_F2.eval_LRAP(LF1.lp);
          
        LF2.eval_LR2(LF1.hp);
        b2.inL   = LF2.lp;
        b3.inL   = LF2.hp;
          
        RF1.eval_LR2(sr);
        b1.inR   = RA_F2.eval_LRAP(RF1.lp);
          
        RF2.eval_LR2(RF1.hp);
        b2.inR   = RF2.lp;
        b3.inR   = RF2.hp;
      ) : (cuts == 3) ? (
        LF1.eval_LR2(sl);
        b1.inL   = LA_F3.eval_LRAP(LA_F2.eval_LRAP(LF1.lp));
          
        LF2.eval_LR2(LF1.hp);
        b2.inL   = LA_F3_2.eval_LRAP(LF2.lp);
          
        LF3.eval_LR2(LF2.hp);
        b3.inL   = LF3.lp;
        b4.inL   = LF3.hp;
          
        RF1.eval_LR2(sr);
        b1.inR   = RA_F3.eval_LRAP(RA_F2.eval_LRAP(RF1.lp));
        
        RF2.eval_LR2(RF1.hp);
        b2.inR   = RA_F3_2.eval_LRAP(RF2.lp);
        
        RF3.eval_LR2(RF2.hp);
        b3.inR   = RF3.lp;
        b4.inR   = RF3.hp;
      ) : (cuts == 4) ? (
        LF1.eval_LR2(sl);
        b1.inL   = LA_F4.eval_LRAP(LA_F3.eval_LRAP(LA_F2.eval_LRAP(LF1.lp)));
        
        LF2.eval_LR2(LF1.hp);
        b2.inL   = LA_F4_2.eval_LRAP(LA_F3_2.eval_LRAP(LF2.lp));
          
        LF3.eval_LR2(LF2.hp);
        b3.inL   = LA_F4_3.eval_LRAP(LF3.lp);
          
        LF4.eval_LR2(LF3.hp);
        b4.inL   = LF4.lp;
        b5.inL   = LF4.hp;
          
        RF1.eval_LR2(sr);
        b1.inR   = RA_F4.eval_LRAP(RA_F3.eval_LRAP(RA_F2.eval_LRAP(RF1.lp)));
          
        RF2.eval_LR2(RF1.hp);
        b2.inR   = RA_F4_2.eval_LRAP(RA_F3_2.eval_LRAP(RF2.lp));
          
        RF3.eval_LR2(RF2.hp);
        b3.inR   = RA_F4_3.eval_LRAP(RF3.lp);
          
        RF4.eval_LR2(RF3.hp);
        b4.inR   = RF4.lp;
        b5.inR   = RF4.hp;
      );
    ) : (
      // 2p filters
      (cuts==0) ? (
        b1.inL = sl;
        b1.inR = sr;
      ) : (cuts==1) ? (
        LF1.eval_LR1(sl);
        b1.inL = LF1.lp;
        b2.inL = - LF1.hp;
          
        RF1.eval_LR1(sr);
        b1.inR = RF1.lp;
        b2.inR = - RF1.hp;
      ) : (cuts==2) ? (
        LF1.eval_LR1(sl);
        b1.inL   = LA_F2.eval_AP1(LF1.lp);
          
        LF2.eval_LR1(LF1.hp);
        b2.inL   = -LF2.lp;
        b3.inL   = LF2.hp;
            
        RF1.eval_LR1(sr);
        b1.inR   = RA_F2.eval_AP1(RF1.lp);
            
        RF2.eval_LR1(RF1.hp);
        b2.inR   = -RF2.lp;
        b3.inR   = RF2.hp;
      ) : (cuts == 3) ? (
        LF1.eval_LR1(sl);
        b1.inL   = LA_F3.eval_AP1(LA_F2.eval_AP1(LF1.lp));
          
        LF2.eval_LR1(LF1.hp);
        b2.inL   = - LA_F3_2.eval_AP1(LF2.lp);
        
        LF3.eval_LR1(LF2.hp);
        b3.inL   = LF3.lp;
        b4.inL   = - LF3.hp;
          
        RF1.eval_LR1(sr);
        b1.inR   = RA_F3.eval_AP1(RA_F2.eval_AP1(RF1.lp));
        
        RF2.eval_LR1(RF1.hp);
        b2.inR   = - RA_F3_2.eval_AP1(RF2.lp);
        
        RF3.eval_LR1(RF2.hp);
        b3.inR   = RF3.lp;
        b4.inR   = - RF3.hp;
      ) : (cuts == 4) ? (
        LF1.eval_LR1(sl);
        b1.inL   = LA_F4.eval_AP1(LA_F3.eval_AP1(LA_F2.eval_AP1(LF1.lp)));
        
        LF2.eval_LR1(LF1.hp);
        b2.inL   = - LA_F4_2.eval_AP1(LA_F3_2.eval_AP1(LF2.lp));
          
        LF3.eval_LR1(LF2.hp);
        b3.inL   = LA_F4_3.eval_AP1(LF3.lp);
          
        LF4.eval_LR1(- LF3.hp);
        b4.inL   = LF4.lp;
        b5.inL   = - LF4.hp;
          
        RF1.eval_LR1(sr);
        b1.inR   = RA_F4.eval_AP1(RA_F3.eval_AP1(RA_F2.eval_AP1(RF1.lp)));
          
        RF2.eval_LR1(RF1.hp);
        b2.inR   = - RA_F4_2.eval_AP1(RA_F3_2.eval_AP1(RF2.lp));
          
        RF3.eval_LR1(RF2.hp);
        b3.inR   = RA_F4_3.eval_AP1(RF3.lp);
          
        RF4.eval_LR1(- RF3.hp);
        b4.inR   = RF4.lp;
        b5.inR   = - RF4.hp;
      );
    );
  );  
  
  // Convert to linear phase
  function linearPhase(fft_mem, fftCalcSize)
  local(fwd, r1, i1, mag1, flip, i, w)
  global()
  instance()
  (
    fwd = fft_mem;
    
    /* Making the filter linear phase involves both removing
       the phase; but then also shifting the impulse response
       to overlap with our chunk. If we just remove the phase, 
       we'd get an impulse response like this:
       \____/
       The goal is to shift it to the middle of the FIR section.
       Considering that the FIR section is at .25 of the spectrum,
       we have to shift it further than we normally would (a step of
       1.5 * pi rather than pi. */
    
    flip = 1;
    i = 0;
    loop(fftCalcSize,
      r1  = fwd[];
      i1  = fwd[1];
      
      mag1      = sqrt(sqr(r1) + sqr(i1));
            
      fwd[]     = mag1 * cos($pi*i);
      fwd[1]    = mag1 * sin($pi*i);

      i += 1.5;
      fwd += 2;
    );
    
    /*i = 0;
    loop(1,
      fft_mem[2*i] = 0;
      fft_mem[2*fftCalcSize-2*i] = 0;
      i = i + 1;
    );*/
    
  );
  
  function updateCoeffs()
  local(fptr1, fptr2, fptr3, fptr4, fptr5, middle, i, M)
  global(Cuts, Freq1, Freq2, Freq3, Freq4, FIR, FIR_quality,
         FIR1, FIR2, FIR3, FIR4, FIR5, bufferDist,
         firSize, fftCalcSize, band_mode, lband_mode, abs_placement, srate_changed)
  instance( F1,  F2,  F3,  F4
            LF1, LF2, LF3, LF4            /* Lowpass left */
            LA_F2,                        /* Allpass frequency 2 left */
            LA_F3, LA_F3_2,               /* Allpass frequency 3 left */
            LA_F4, LA_F4_2, LA_F4_3,      /* Allpass frequency 4 left */
            RF1, RF2, RF3, RF4            /* Lowpass right */
            RA_F2,                        /* Allpass frequency 2 right */
            RA_F3, RA_F3_2,               /* Allpass frequency 3 right */
            RA_F4, RA_F4_2, RA_F4_3,      /* Allpass frequency 4 right */
            lcuts, lFIR, lFIR_quality,
            lF1, lF2, lF3, lF4,
            labs_placement,
            updateRequired
            )
  (
      updateRequired = 0;
      updateRequired = (
        ( labs_placement != abs_placement ) ||
        ( lF1 != Freq1 ) ||
        ( lF2 != Freq2 ) ||
        ( lF3 != Freq3 ) ||
        ( lF4 != Freq4 ) ||
        ( cuts != lcuts ) ||
        ( FIR != lFIR ) ||
        ( FIR_quality != lFIR_quality ) ||
        srate_changed ||
        ( band_mode != lband_mode ));
        srate_changed = 0;
      updateRequired ? (
        M = 4;
        (FIR_quality > 0) ? M *= 2;
        (FIR_quality > 1) ? M *= 2;
        firSize = 512*M;
        fftCalcSize = 1024*M;
        lband_mode = band_mode;
        labs_placement = abs_placement;
      
        lF1 = Freq1;
        lF2 = Freq2;
        lF3 = Freq3;
        lF4 = Freq4;
        lFIR = FIR;
        lFIR_quality = FIR_quality;
        lcuts = cuts;
      
        abs_placement ? (
          F1 = clamp(Freq1, 0, 1);
          F2 = clamp(Freq2, F1, cuts > 2 ? F3 : 1);
          F3 = clamp(Freq3, F2, cuts > 3 ? F4 : 1);
          F4 = clamp(Freq4, F3, 1.0);
        ) : (
          F1 = Freq1;
          F2 = Freq1  + Freq2 * (1 - Freq1);
          F3 = F2     + Freq3 * (1 - F2);
          F4 = F3     + Freq4 * (1 - F3);
        );
          
        (cuts==1) ? (
          LF1.init_LR2(Freq1);
          RF1.k  = LF1.k;
          RF1.a1 = LF1.a1;
          RF1.a2 = LF1.a2;
          RF1.a3 = LF1.a3;
        ) : (cuts==2) ? (
          LF1.init_LR2(Freq1);
          RF1.k  = LF1.k;
          RF1.a1 = LF1.a1;
          RF1.a2 = LF1.a2;
          RF1.a3 = LF1.a3;
          LF2.init_LR2(F2);
          RF2.k  = LF2.k;
          RF2.a1 = LF2.a1;
          RF2.a2 = LF2.a2;
          RF2.a3 = LF2.a3;
          
          (band_mode == 0) ? (
            LA_F2.init_LR2(F2);
          ) : (
            LA_F2.init_AP1(F2);
          );
          RA_F2.k  = LA_F2.k;
          RA_F2.a1 = LA_F2.a1;
          RA_F2.a2 = LA_F2.a2;
          RA_F2.a3 = LA_F2.a3;
        ) : (cuts == 3) ? (
          LF1.init_LR2(Freq1);
          RF1.k  = LF1.k;
          RF1.a1 = LF1.a1;
          RF1.a2 = LF1.a2;
          RF1.a3 = LF1.a3;
          LF2.init_LR2(F2);
          RF2.k  = LF2.k;
          RF2.a1 = LF2.a1;
          RF2.a2 = LF2.a2;
          RF2.a3 = LF2.a3;
          LF3.init_LR2(F3);
          RF3.k  = LF3.k;
          RF3.a1 = LF3.a1;
          RF3.a2 = LF3.a2;
          RF3.a3 = LF3.a3;
          
          // All-passes for maintaining the phase relation between the bands
          (band_mode == 0) ? (
            LA_F2.init_LR2(F2);
            LA_F3.init_LR2(F3);
          ) : (
            LA_F2.init_AP1(F2);
            LA_F3.init_AP1(F3);
          );
          
          RA_F3.k   = RA_F3_2.k  = LA_F3_2.k  = LA_F3.k;
          RA_F3.a1  = RA_F3_2.a1 = LA_F3_2.a1 = LA_F3.a1;
          RA_F3.a2  = RA_F3_2.a2 = LA_F3_2.a2 = LA_F3.a2;
          RA_F3.a3  = RA_F3_2.a3 = LA_F3_2.a3 = LA_F3.a3;
    
          RA_F2.k  = LA_F2.k;
          RA_F2.a1 = LA_F2.a1;
          RA_F2.a2 = LA_F2.a2;
          RA_F2.a3 = LA_F2.a3;
        ) : (cuts == 4) ? (
          LF1.init_LR2(Freq1);
          RF1.k  = LF1.k;
          RF1.a1 = LF1.a1;
          RF1.a2 = LF1.a2;
          RF1.a3 = LF1.a3;
          LF2.init_LR2(F2);
          RF2.k  = LF2.k;
          RF2.a1 = LF2.a1;
          RF2.a2 = LF2.a2;
          RF2.a3 = LF2.a3;
          LF3.init_LR2(F3);
          RF3.k  = LF3.k;
          RF3.a1 = LF3.a1;
          RF3.a2 = LF3.a2;
          RF3.a3 = LF3.a3;
          LF4.init_LR2(F4);
          RF4.k  = LF4.k;
          RF4.a1 = LF4.a1;
          RF4.a2 = LF4.a2;
          RF4.a3 = LF4.a3;
          
          // All-passes for maintaining the phase relation between the bands
          (band_mode == 0) ? (
            LA_F2.init_LR2(F2);
            LA_F3.init_LR2(F3);
            LA_F4.init_LR2(F4);
          ) : (
            LA_F2.init_AP1(F2);
            LA_F3.init_AP1(F3);
            LA_F4.init_AP1(F4);
          );
          
          RA_F4.k  = RA_F4_2.k  = RA_F4_3.k  = LA_F4_2.k  = LA_F4_3.k  = LA_F4.k;
          RA_F4.a1 = RA_F4_2.a1 = RA_F4_3.a1 = LA_F4_2.a1 = LA_F4_3.a1 = LA_F4.a1;
          RA_F4.a2 = RA_F4_2.a2 = RA_F4_3.a2 = LA_F4_2.a2 = LA_F4_3.a2 = LA_F4.a2;
          RA_F4.a3 = RA_F4_2.a3 = RA_F4_3.a3 = LA_F4_2.a3 = LA_F4_3.a3 = LA_F4.a3;
          
          RA_F3.k   = RA_F3_2.k  = LA_F3_2.k  = LA_F3.k;
          RA_F3.a1  = RA_F3_2.a1 = LA_F3_2.a1 = LA_F3.a1;
          RA_F3.a2  = RA_F3_2.a2 = LA_F3_2.a2 = LA_F3.a2;
          RA_F3.a3  = RA_F3_2.a3 = LA_F3_2.a3 = LA_F3.a3;
    
          RA_F2.k  = LA_F2.k;
          RA_F2.a1 = LA_F2.a1;
          RA_F2.a2 = LA_F2.a2;
          RA_F2.a3 = LA_F2.a3;
        );
        
        /* Are we dealing with a FIR filter? */
        FIR ? (
          // CalcFIR
          memset(FIR1, 0, bufferDist);
          memset(FIR2, 0, bufferDist);
          memset(FIR3, 0, bufferDist);
          memset(FIR4, 0, bufferDist);
          memset(FIR5, 0, bufferDist);
          
          this.resetFilters();
        
          /* Fetch impulse response */
          fptr1 = FIR1;
          fptr2 = FIR2;
          fptr3 = FIR3;
          fptr4 = FIR4;
          fptr5 = FIR5;

          this.splitBands(1.0/fftCalcSize, 1.0/fftCalcSize);
               
          loop(firSize,
            fptr1[] = this.b1.inL; fptr1 += 2;
            fptr2[] = this.b2.inL; fptr2 += 2;
            fptr3[] = this.b3.inL; fptr3 += 2;
            fptr4[] = this.b4.inL; fptr4 += 2;
            fptr5[] = this.b5.inL; fptr5 += 2;
          
            this.splitBands(0, 0);
          );
          
          //FIR1[0]=1/fftCalcSize;
                    
          /* Transform impulse responses */
          fft(FIR1, fftCalcSize);
          fft(FIR2, fftCalcSize);
          fft(FIR3, fftCalcSize);
          fft(FIR4, fftCalcSize);
          fft(FIR5, fftCalcSize);
          
          fft_permute(FIR1, fftCalcSize);
          fft_permute(FIR2, fftCalcSize);
          fft_permute(FIR3, fftCalcSize);
          fft_permute(FIR4, fftCalcSize);
          fft_permute(FIR5, fftCalcSize);
          
          /* Remove phase information (converts to linear phase) */
          linearPhase(FIR1, fftCalcSize);
          linearPhase(FIR2, fftCalcSize);
          linearPhase(FIR3, fftCalcSize);
          linearPhase(FIR4, fftCalcSize);
          linearPhase(FIR5, fftCalcSize);
          
          fft_ipermute(FIR1, fftCalcSize);
          fft_ipermute(FIR2, fftCalcSize);
          fft_ipermute(FIR3, fftCalcSize);
          fft_ipermute(FIR4, fftCalcSize);
          fft_ipermute(FIR5, fftCalcSize);
        );
      );
    
    updateRequired
  );
  
  function doFIR(l, r, block1, block2, fftCalcSize, filterSize, filterLoc, cPos)
  instance(curBlock, lastBlock, initialized, chunkSize, chunksizeT2)
  local(tmp, cPosT2)
  global(bufferdist)
  (
    !initialized ? (
      curBlock  = block1;
      lastBlock = block2;
      
      memset(curBlock, 0, bufferdist);
      memset(lastBlock, 0, bufferdist);
      initialized = 1;
      
      chunkSize   = (fftCalcSize - filterSize - 1);
      chunkSizeT2 = chunkSize * 2;
    );
  
    cPos >= chunkSize ? 
    (
      tmp       = lastBlock;
      lastBlock = curBlock;
      curBlock  = tmp;
     
      /* Empty out the data beyond chunkSize of the block that has 
         just been filled. This used to be the carried over overlap-add
         tail of the previous one */
      memset( curBlock + chunkSizeT2, 0, (fftCalcSize-chunkSize)*2 );
    
      /* Calculate FFT of current chunk */
      fft(curBlock, fftCalcSize);
      //fft_permute(curBlock, fftCalcSize);
      
      /* Convolve with the FIR filter (already FFT'd) */
      convolve_c(curBlock, filterLoc, fftCalcSize);
      //fft_ipermute(curBlock, fftCalcSize);
      ifft(curBlock, fftCalcSize);
      
      cPos = 0;
    );
      
    /* Save sample */
    cPosT2 = cPos * 2;
    lastBlock[cPosT2]   = l;
    lastBlock[cPosT2+1] = r;
    
    this.inL = curBlock[cPosT2];
    this.inR = curBlock[cPosT2+1];
    
    /* Overlap add the previous tail */
    ( cPos < (fftCalcSize-chunkSize) ) ? 
    (
      this.inL += lastBlock[chunkSizeT2+cPosT2];
      this.inR += lastBlock[chunkSizeT2+cPosT2+1];
      1
    );
 
    cPos + 1
  );
  
  function processSample()
  (  
    FIR ? (
      filterBank.resetBands();   
      cPosNew = filterBank.b1.doFIR(inL, inR, F1Block1, F1Block2, fftCalcSize, firSize, FIR1, cPos);
      ( cuts > 0 ) ? ( filterBank.b2.doFIR(inL, inR, F2Block1, F2Block2, fftCalcSize, firSize, FIR2, cPos); );
      ( cuts > 1 ) ? ( filterBank.b3.doFIR(inL, inR, F3Block1, F3Block2, fftCalcSize, firSize, FIR3, cPos); );
      ( cuts > 2 ) ? ( filterBank.b4.doFIR(inL, inR, F4Block1, F4Block2, fftCalcSize, firSize, FIR4, cPos); );
      ( cuts > 3 ) ? ( filterBank.b5.doFIR(inL, inR, F5Block1, F5Block2, fftCalcSize, firSize, FIR5, cPos); );
      cPos = cPosNew;
    ) : (
      filterBank.splitBands(inL, inR);
    );
    
    filterBank.processBands();
  );
    
  FIR ? (
    specBuffer.updateBuffer(.5*(spl0+spl1));
    specBuffer.setOffset(newPDC+2);
    cSpec = specBuffer.readBuffer();
    spectrumIn.feedSample(cSpec);
  ) : (
    spectrumIn.feedSample(.5*(spl0+spl1));
  );




playstates();

process = 0;
while_playing ? is_playing ? process = 1;
while_recording ? is_recording ? process = 1;
while_stopped ? is_stopped ? process = 1;
bypass == 1 ? process = 0;


process == 1 ? (
srate != srate_old ? (
srate_old = srate;
//resetFilters();
//re_init();
//initBands();
srate_changed = 1;
);

  // Split signal into bands
  
  filterBank.updateCoeffs();
  inL = spl0;
  inR = spl1;
 
 
 ////////// ANALYZER
 abs(recpos[]=spl0+spl1) > minvol ? update=1;
 recpos = ((recpos+1) >= histsize ? 0 : (recpos+1));
 ////////// ANALYZER
 
 
 
 
  processSample();
  
  
  vspl0 = filterBank.b1.l;
  vspl1 = filterBank.b1.r;
  out = spl0 + spl1;
  ( cuts > 0 ) ? (
    vspl2 = filterBank.b2.l;
    vspl3 = filterBank.b2.r;
    out += spl2 + spl3;
    ( cuts > 1 ) ? (
      vspl4 = filterBank.b3.l;
      vspl5 = filterBank.b3.r;
      out += spl4 + spl5;
      ( cuts > 2 ) ? (
        vspl6 = filterBank.b4.l;
        vspl7 = filterBank.b4.r;
        out += spl6 + spl7;
        ( cuts > 3 ) ? (
          vspl8 = filterBank.b5.l;
          vspl9 = filterBank.b5.r;
          out += spl8 + spl9;
        );
      );
    );
  );
  //spectrumOut.feedSample(.5*out);
  band1_env_on == 1 ? (
  band_env_gain = band1_Env.env_compute_gain(vspl0, vspl1);
  vspl0 *= band_env_gain;
  vspl1 *= band_env_gain;
  );
  cuts > 0 && Band2_env_on == 1 ? (
  band_env_gain = band2_Env.env_compute_gain(vspl2, vspl3);
  vspl2 *= band_env_gain;
  vspl3 *= band_env_gain;
  );
  cuts > 2 && Band3_env_on == 1 ? (
  band_env_gain = band3_Env.env_compute_gain(vspl4, vspl5);
  vspl4 *= band_env_gain;
  vspl5 *= band_env_gain;
  );
  cuts > 3 && Band4_env_on == 1 ? (
  band_env_gain = band4_Env.env_compute_gain(vspl6, vspl7);
  vspl6 *= band_env_gain;
  vspl7 *= band_env_gain;
  );
  cuts > 4 && Band5_env_on == 1 ? (
  band_env_gain = band5_Env.env_compute_gain(vspl8, vspl9);
  vspl8 *= band_env_gain;
  vspl9 *= band_env_gain;
  );
  
  /////////////// MULTIBAND COMPRESSION
  band1_compressor_on ? (Band1_GR_db = Band1.computeGainReduction(ratio2db(max(abs(vspl0),abs(vspl1)))); band1_GR_val = db2ratio(Band1_GR_db); vspl0 *= Band1_GR_val; vspl1 *= Band1_GR_val):(Band1_GR_db = 0);
  cuts > 0 ? band2_compressor_on ? (Band2_GR_db = Band2.computeGainReduction(ratio2db(max(abs(vspl2),abs(vspl3)))); band2_GR_val = db2ratio(Band2_GR_db); vspl2 *= Band2_GR_val; vspl3 *= Band2_GR_val):(Band2_GR_db = 0);
  cuts > 1 ? band3_compressor_on ? (Band3_GR_db = Band3.computeGainReduction(ratio2db(max(abs(vspl4),abs(vspl5)))); band3_GR_val = db2ratio(Band3_GR_db); vspl4 *= Band3_GR_val; vspl5 *= Band3_GR_val):(Band3_GR_db = 0);
  cuts > 2 ? band4_compressor_on ? (Band4_GR_db = Band4.computeGainReduction(ratio2db(max(abs(vspl6),abs(vspl7)))); band4_GR_val = db2ratio(Band4_GR_db); vspl6 *= Band4_GR_val; vspl7 *= Band4_GR_val):(Band4_GR_db = 0);
  cuts > 3 ? band5_compressor_on ? (Band5_GR_db = Band5.computeGainReduction(ratio2db(max(abs(vspl8),abs(vspl9)))); band5_GR_val = db2ratio(Band5_GR_db); vspl8 *= Band5_GR_val; vspl9 *= Band5_GR_val):(Band5_GR_db = 0);
  //db2ratio(band1_GR_dB) >= GR1_Meter.dB_Val ? GR1_Meter.feed_Meter_GR(db2ratio(max(-30,band1_GR_dB))) : GR1_Meter.dB_Val *= db2ratio(-GR1_Meter.S2_meter_fallback)/srate;
  GR1_Meter.feed_Meter_GR(db2ratio(max(-30,band1_GR_dB)));
  GR2_Meter.feed_Meter_GR(db2ratio(max(-30,band2_GR_dB)));
  GR3_Meter.feed_Meter_GR(db2ratio(max(-30,band3_GR_dB)));
  GR4_Meter.feed_Meter_GR(db2ratio(max(-30,band4_GR_dB)));
  GR5_Meter.feed_Meter_GR(db2ratio(max(-30,band5_GR_dB)));
  //////////////////////////////////// 
  
  band1_env_on == 2 ? (
  band_env_gain = band1_Env.env_compute_gain(vspl0, vspl1);
  vspl0 *= band_env_gain;
  vspl1 *= band_env_gain;
  );
  cuts > 0 && Band2_env_on == 2 ? (
  band_env_gain = band2_Env.env_compute_gain(vspl2, vspl3);
  vspl2 *= band_env_gain;
  vspl3 *= band_env_gain;
  );
  cuts > 2 && Band3_env_on == 2 ? (
  band_env_gain = band3_Env.env_compute_gain(vspl4, vspl5);
  vspl4 *= band_env_gain;
  vspl5 *= band_env_gain;
  );
  cuts > 3 && Band4_env_on == 2 ? (
  band_env_gain = band4_Env.env_compute_gain(vspl6, vspl7);
  vspl6 *= band_env_gain;
  vspl7 *= band_env_gain;
  );
  cuts > 4 && Band5_env_on == 2 ? (
  band_env_gain = band5_Env.env_compute_gain(vspl8, vspl9);
  vspl8 *= band_env_gain;
  vspl9 *= band_env_gain;
  );
  
  // MS PROCESSING
  Band1_MS_Processing ? (
  vsplm = (vspl0+vspl1)/2;
  vspls = (vspl0-vspl1)/2;
  B1MS > 0.5 ? vsplm *= (1-(B1MS-0.5)*2);
  B1MS < 0.5 ? vspls *= B1MS*2;
  vspl0 = vsplm + vspls;
  vspl1 = vsplm - vspls;
  );
  
  cuts > 0 ? (
  Band2_MS_Processing ? (
  vsplm = (vspl2+vspl3)/2;
  vspls = (vspl2-vspl3)/2;
  B2MS > 0.5 ? vsplm *= (1-(B2MS-0.5)*2);
  B2MS < 0.5 ? vspls *= B2MS*2;
  vspl2 = vsplm + vspls;
  vspl3 = vsplm - vspls;
  );
  );
  
  cuts > 1 ? (
  Band3_MS_Processing ? (
  vsplm = (vspl4+vspl5)/2;
  vspls = (vspl4-vspl5)/2;
  B3MS > 0.5 ? vsplm *= (1-(B3MS-0.5)*2);
  B3MS < 0.5 ? vspls *= B3MS*2;
  vspl4 = vsplm + vspls;
  vspl5 = vsplm - vspls;
  );
  );
  
  cuts > 2 ? (
  Band4_MS_Processing ? (
  vsplm = (vspl6+vspl7)/2;
  vspls = (vspl6-vspl7)/2;
  B4MS > 0.5 ? vsplm *= (1-(B4MS-0.5)*2);
  B4MS < 0.5 ? vspls *= B4MS*2;
  vspl6 = vsplm + vspls;
  vspl7 = vsplm - vspls;
  );
  );
  
  cuts > 3 ? (
  Band5_MS_Processing ? (
  vsplm = (vspl8+vspl9)/2;
  vspls = (vspl8-vspl9)/2;
  B5MS > 0.5 ? vsplm *= (1-(B5MS-0.5)*2);
  B5MS < 0.5 ? vspls *= B5MS*2;
  vspl8 = vsplm + vspls;
  vspl9 = vsplm - vspls;
  );
  );
  
  Band1_MS_Processing ? (vspl0 *= band1_output_val; vspl1 *= band1_output_val);
  Band2_MS_Processing ? (cuts > 0 ? (vspl2 *= band2_output_val; vspl3 *= band2_output_val):(vspl2 = vspl3 = 0));
  Band3_MS_Processing ? (cuts > 1 ? (vspl4 *= band3_output_val; vspl5 *= band3_output_val):(vspl4 = vspl5 = 0));
  Band4_MS_Processing ? (cuts > 2 ? (vspl6 *= band4_output_val; vspl7 *= band4_output_val):(vspl6 = vspl7 = 0));
  Band5_MS_Processing ? (cuts > 3 ? (vspl8 *= band5_output_val; vspl9 *= band5_output_val):(vspl8 = vspl9 = 0));
  
   //Uncomment for testing flatness
  !Band1_Solo && !Band2_Solo && !Band3_Solo && !Band4_Solo && !Band5_Solo ? (
  spl0 = vspl0 + vspl2 + vspl4 + vspl6 + vspl8;
  spl1 = vspl1 + vspl3 + vspl5 + vspl7 + vspl9;
  solo = 0;
  ):(
  spl0 = spl1 = 0;
  Band1_Solo ? (spl0 += vspl0; spl1 += vspl1);
  Band2_Solo ? (spl0 += vspl2; spl1 += vspl3);
  Band3_Solo ? (spl0 += vspl4; spl1 += vspl5);
  Band4_Solo ? (spl0 += vspl6; spl1 += vspl7);
  Band5_Solo ? (spl0 += vspl8; spl1 += vspl9);
  solo = 1;
  );
  spl2 = vspl0; spl3 = vspl1;
  spl4 = vspl2; spl5 = vspl3;
  spl6 = vspl4; spl7 = vspl5;
  spl8 = vspl6; spl9 = vspl7;
  spl10= vspl8; spl11= vspl9;
  
  curSample += 1;
  
 
  ); //process == 1
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
@gfx 959 694



gfx_r=gfx_b=gfx_g = 0.2;
gfx_rect(0,0,gfx_w,gfx_h);
function analyzer_color () (
gfx_r = 0.7; gfx_g = 0.9; gfx_b = 1;
);

 mouseHold = mouse_cap & 1;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 lastCap = mouseHold;
 
 function draw_analyzer () (
 //////////////////////////////////////////////////////// ANALYZER ////////////////////////////////////////////////////////
 band1_compressor_on != band1_compressor_on_old ? (update = 1; band1_compressor_on_old = band1_compressor_on);
 band2_compressor_on != band2_compressor_on_old ? (update = 1; band2_compressor_on_old = band2_compressor_on);
 band3_compressor_on != band3_compressor_on_old ? (update = 1; band3_compressor_on_old = band3_compressor_on);
 band4_compressor_on != band4_compressor_on_old ? (update = 1; band4_compressor_on_old = band4_compressor_on);
 band5_compressor_on != band5_compressor_on_old ? (update = 1; band5_compressor_on_old = band5_compressor_on);
 
 gfx_setimgdim(126,sgfx_w,sgfx_h);
 gfx_dest = 126;
 //black(); gfx_rect(0,0,sgfx_w,sgfx_h);
 lsrate = 44100;
 small_mode = sgfx_w<200 || sgfx_h < 50;
 gfx_ext_retina>1 ? gfx_setfont(1,"Arial",16*gfx_ext_retina,'b') : gfx_setfont(0);
 
 
 
 
 // only update if new fft data is there or if the size changed
 update || old_w != sgfx_w || old_h!=sgfx_h ? (
 
 old_w=sgfx_w; old_h=sgfx_h;
 
 gfx_r=gfx_g=gfx_b=0; gfx_a=1;
 gfx_x=gfx_y=0;
 gfx_rectto(sgfx_w,sgfx_h);
 
 gfx_x = 0*zoom; gfx_y = 35*zoom; gfx_a=0.4;
 gfx_ext_flags == 0 ?  gfx_blit(logo,1.2*zoom,0);
 
 sc=(sgfx_h-20)*20/(-S2_Floor * log(10));
 
 
 // draw horz grid
 gfx_r=gfx_g=gfx_b=0.6;
 gfx_a=0.5;
 gv=1;
 cnt=100;
 gfx_y=-100;
 small_mode||while(
   y=20-log(gv)*sc;
   y> gfx_y ? (
    // gfx_line(0,y,sgfx_w,y,0);
     bottom_line = gfx_y;
     gfx_x=0; 
     gfx_y=y+2;
     //gfx_drawnumber(log10(gv)*20,0);
     //gfx_drawchar($'d');
     //gfx_drawchar($'B');
     gfx_y+=gfx_texth;
   );
   gv*=0.5;
 
   gfx_y<sgfx_h && cnt-=1 > 0;
 );
 
 
 wsc=sgfx_w/log(1+400);
 
 
 // draw vert grid
 f=20;
 gfx_x+=4;
 lx=gfx_x;
 small_mode||while(
   tx = log(1.0+(f/(srate/(srate/44100))*2.0)*400)*wsc;
   dotext = tx > gfx_x && f!=40 && f!=4000 && f != 15000 &&
      (f<400 || f >= 1000 || f == 500) && (f<6000 || f>=10000);
   tx > lx ? ( lx=tx+4; gfx_line(tx,0,tx,sgfx_h - (dotext ? 0 : gfx_texth+2),0); );
   dotext ? (
     gfx_x=tx +3;
     gfx_y = sgfx_h-gfx_texth;
     f>=1000 ? gfx_printf("%dkHz",f*.001) : gfx_printf("%dHz",f);
   );
   f += (f<100?10:f<1000?100:f<10000?1000:5000);
   f < srate*0.5;
 );
 
 update ? (
   update=0;
 
   integrate_sc = 1;
   S2_integration_time > 0 ? (
     integrate_now = time_precise();
     integrate_en ? (
       // fps = 1/(integrate_now - integrate_lastt);
       integrate_sc -= exp(-5 * 1000.0 * (integrate_now - integrate_lastt) / S2_integration_time);
     ) : (
       // force overwrite of buffer
       integrate_en = 1;
     );
     integrate_lastt = integrate_now;
   ) : (
     integrate_en = 0;
   );
 
   fftidx != (S2_FFT_Size|0) ? (
     fftidx=S2_FFT_Size|0;
     fftsize=2^(min(max(fftidx,0),11)+4);
     integrate_sc=1;
   );
 
   windowsize != fftsize || windowtype != (S2_Window|0) ? (
     windowtype=S2_Window|0; 
     windowsize=fftsize;
     dwindowpos = $pi*2/fftsize;
     i=pwr=0;
     loop(fftsize*.5+1,
        windowpos=i*dwindowpos;
        pwr += (window[i] = (
          windowtype==1 ? 0.53836 - cos(windowpos)*0.46164 :
          windowtype==2 ? 0.35875 - 0.48829 * cos(windowpos) + 0.14128 * cos(2*windowpos) - 0.01168 * cos(3*windowpos) :
          windowtype==3 ? 0.42 - 0.50 * cos(windowpos) + 0.08 * cos(2.0*windowpos) :
           1.0));
        i+=1;
     );
     pwr=.5/(pwr*2-window[i-1]);
     loop(fftsize*.5+1,window[i-=1]*=pwr);
     integrate_sc=1;
   );
 
 
   buf1=recpos-fftsize;
   buf1<0 ? buf1+=histsize;
   buf2=window;
   buf3=fftworkspace;
   loop(fftsize*.5 + 1,
     buf3[] = buf1[]*buf2[];
     buf3+=1;
 
     buf2+=1;
     (buf1+=1) >= histsize ? buf1 -= histsize;
   );
   buf2-=1;
   loop(fftsize*.5 - 1,
     buf3[] = buf1[]*(buf2-=1)[];
     buf3+=1;
     (buf1+=1) >= histsize ? buf1 -= histsize;
   );
 
   fft_real(fftworkspace,fftsize);
   fft_permute(fftworkspace,fftsize/2);
   fftworkspace[1]=0;
 
   ascale=sgfx_h/$pi*0.25;
   //xscale=800/(fftsize-4);
  xscale=(800 - 38*zoom) / ((fftsize-4)/(srate/41000));
  
   buf3=fftworkspace;
   buf2=integrate_buf+max_fft_size*0.5;
   i=0;
   lx=0;
   S2_Show_Phase ? loop(fftsize*0.5,
     ang=-atan2(buf3[1],buf3[]);
     buf3+=2;
     
     integrate_en ? (
       ang = buf2[] += integrate_sc * (ang - buf2[]);
       buf2+=1;
     );
     
 
     ty2=ang*ascale + sgfx_h*0.5;
     tx = log(1.0+i*xscale)*wsc;
 
     i ? 
     ( 
       gfX_r=0.6; gfx_g=0; gfx_b=0.8; gfx_a=1;
       gfx_x=lx; gfx_y=ly2; //gfx_lineto(tx,ty2,1) ;
     );
 
     lx=tx; ly2=ty2;
     i+=1;
   );  
   
   buf3=fftworkspace;
   buf2=integrate_buf;
   lx=0;
   i=0;
   fill_slmin=sgfx_h;
   fill_slast=0;
   octavegain = floor(S2_Slope*10+0.5) * ((log(10)*2.0/10.0)/(log(2)*20.0));
   octavegainoffs = log(1 + S2_octave_gain_center * fftsize / srate);
   loop(fftsize*0.5,   
     ty = log(max(sqr(buf3[0])+sqr(buf3[1]),(10^(-500/20*2))));
     octavegain > 0 ? ty += (log(i+1) - octavegainoffs)*octavegain;
     buf3+=2;    
 
     integrate_en ? (
       ty = buf2[] += integrate_sc * (ty - buf2[]);
       buf2+=1;
     );
     
     ty = ty*-0.5*sc + 20;
     tx = log(1.0+i*xscale)*wsc;
 
     i ? 
     ( 
       Analyzer_color();
       
       1 ? ( // Fill
         gfx_a=0.17;
         tx0=tx|0;
         lx0=lx|0;
         tx0>lx0? (
           ly < sgfx_h || ty < sgfx_h ? gfx_triangle(lx0,max(sgfx_h,ly),lx0,ly,tx0-1,ty,tx0-1,max(sgfx_h,ty));
         ) : (
           tx0 > fill_slast ? (
            fill_slast < sgfx_h ? gfx_line(fill_slast,sgfx_h,fill_slast,fill_slmin);
            fill_slmin=sgfx_h;
          ) : (
            fill_slmin=min(fill_slmin,ty);
           );
         );
         fill_slast=tx0;        
       );  
       gfx_a=1.0;
       gfx_x=lx; gfx_y=ly; gfx_lineto(tx,ty,1) ;
     );
 
     ty<sgfx_h ? update=1;
 
     lx=tx; ly=ty; ly2=ty2;
     i+=1;
   );
 );
 
 
 );
 
 gfx_r = gfx_g = gfx_b = 0.8;
 cuts > 0 ? (
 perfreqout = per_to_freq(Freq1*100,100);
 l9x = log(1.0+((perfreqout/(44100/srate))/srate*2.0)*400)*wsc;
 gfx_line(l9x, 1, l9x, sgfx_h - 1);
 freq1_handle_x = l9x + sgfx_x;
 );
 
 cuts > 1 ? (
 perfreqout = per_to_freq(Freq2*100,100);
 l9x = log(1.0+((perfreqout/(44100/srate))/srate*2.0)*400)*wsc;
 gfx_line(l9x, 1, l9x, sgfx_h - 1);
 freq2_handle_x = l9x + sgfx_x;
 );
 
 cuts > 2 ? (
 perfreqout = per_to_freq(Freq3*100,100);
 l9x = log(1.0+((perfreqout/(44100/srate))/srate*2.0)*400)*wsc;
 gfx_line(l9x, 1, l9x, sgfx_h - 1);
 freq3_handle_x = l9x + sgfx_x;
 );
 
 cuts > 3 ? (
 perfreqout = per_to_freq(Freq4*100,100);
 l9x = log(1.0+((perfreqout/(44100/srate))/srate*2.0)*400)*wsc;
 gfx_line(l9x,1, l9x, sgfx_h - 1);
 freq4_handle_x = l9x + sgfx_x;
 );
 
 //////////////////////////////////////////////////////// ENDE ANALYZER ////////////////////////////////////////////////////////
 );
 
 
 gfx_ext_flags == 0 ? (
 
 s2_zoom_X = gfx_w / 959;
 s2_zoom_y = gfx_h / 694;
 zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
 zoom_off == 1 ? zoom = gfx_ext_retina;
 
 

sgfx_x = 30 * zoom;
sgfx_y = 40* zoom;
sgfx_w = 900* zoom;
sgfx_h = 220* zoom;

draw_analyzer();


gfx_dest = -1;
//black();
//gfx_rect(0,0,gfx_w, gfx_h);
gfx_x = sgfx_x; gfx_y = sgfx_y;
gfx_blit(126, 1, 0);
gfx_r=gfx_g=gfx_b=0.7; gfx_a = 1;
gfx_roundrect(sgfx_x,sgfx_y,sgfx_w,sgfx_h,0);


cuts == 0 ? freq1_handle_x = sgfx_w + sgfx_x;
cuts == 1 ? freq2_handle_x = sgfx_w + sgfx_x;
cuts == 2 ? freq3_handle_x = sgfx_w + sgfx_x;
cuts == 3 ? freq4_handle_x = sgfx_w + sgfx_x;

solo == 0 || Band1_Solo ? (
gfx_r = 1; gfx_b = 1; gfx_g=0;
line_h = sgfx_y + sgfx_h / 2 - (band1_output_db + Band1_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band1_output_db)*sgfx_h/40);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(2*zoom + sgfx_x, line_h0 + line_h_loop, freq1_handle_x- 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(2*zoom + sgfx_x, line_h, freq1_handle_x- 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = 2*zoom + sgfx_x; gfx_y = sgfx_y + 1;
gfx_rectto(freq1_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);

cuts > 0 ? (
solo == 0 || Band2_Solo ? (
gfx_r = 1; gfx_b = 0; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band2_output_db + Band2_GR_db)*sgfx_h/40;;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band2_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq1_handle_x + 2*zoom, line_h0 + line_h_loop, freq2_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq1_handle_x + 2*zoom, line_h, freq2_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq1_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq2_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);


cuts > 1 ? (
solo == 0 || Band3_Solo ? (
orange();
line_h = sgfx_y + sgfx_h / 2 - (band3_output_db + Band3_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band3_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq2_handle_x + 2*zoom, line_h0 + line_h_loop, freq3_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq2_handle_x + 2*zoom, line_h, freq3_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq2_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq3_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);

cuts > 2 ? (
solo == 0 || Band4_Solo ? (
gfx_r = 0; gfx_b = 1; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band4_output_db + Band4_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band4_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq3_handle_x + 2*zoom, line_h0 + line_h_loop, freq4_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq3_handle_x+ 2*zoom, line_h, freq4_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq3_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq4_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);


cuts > 3 ? (
solo == 0 || Band5_Solo ? (
gfx_r = 0.3; gfx_b = 0.5; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band5_output_db + Band5_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band5_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq4_handle_x + 2*zoom, line_h0 + line_h_loop,  sgfx_x + sgfx_w - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq4_handle_x + 2*zoom, line_h, sgfx_x + sgfx_w- 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq4_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(sgfx_x + sgfx_w- 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);

gfx_setfont(1); lightgrey();
B_Bypass.button();
gfx_x = B_bypass.xin*zoom - 55*zoom;
gfx_y = B_bypass.yin*zoom + 12*zoom;
gfx_drawstr("BYPASS");
///////////////////////////////////// BAND DRAWING //////////////////////////////////////////

lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
K_B1_Thresh.knob();
gfx_x = K_B1_Thresh.Xin * zoom; gfx_y = K_B1_Thresh.yin * zoom + 64*zoom; 
gfx_drawstr("THRESHOLD", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band1.Threshold); #tmp_label += " dB";
gfx_x = K_B1_Thresh.Xin * zoom; gfx_y = K_B1_Thresh.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_Ratio.knob();
gfx_x = K_B1_ratio.Xin * zoom; gfx_y = K_B1_ratio.yin * zoom + 64*zoom; 
gfx_drawstr("RATIO", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band1.Ratio); #tmp_label += " : 1";
gfx_x = K_B1_ratio.Xin * zoom; gfx_y = K_B1_ratio.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_Attack.knob();
gfx_x = K_B1_Attack.Xin * zoom; gfx_y = K_B1_Attack.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band1.attack*1000); #tmp_label += " ms";
gfx_x = K_B1_Attack.Xin * zoom; gfx_y = K_B1_Attack.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_Release.knob();
gfx_x = K_B1_Release.Xin * zoom; gfx_y = K_B1_Release.yin * zoom + 64*zoom; 
gfx_drawstr("RELEASE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band1.Release*1000); #tmp_label += " ms";
gfx_x = K_B1_Release.Xin * zoom; gfx_y = K_B1_Release.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_EnvA.knob();
gfx_x = K_B1_EnvA.Xin * zoom; gfx_y = K_B1_EnvA.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band1_Env.attack * 100); #tmp_label += " %";
gfx_x = K_B1_EnvA.Xin * zoom; gfx_y = K_B1_EnvA.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_EnvS.knob();
gfx_x = K_B1_EnvS.Xin * zoom; gfx_y = K_B1_EnvS.yin * zoom + 64*zoom; 
gfx_drawstr("SUSTAIN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band1_Env.sustain * 50); #tmp_label += " %";
gfx_x = K_B1_EnvS.Xin * zoom; gfx_y = K_B1_EnvS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_MS.knob();
gfx_x = K_B1_MS.Xin * zoom; gfx_y = K_B1_MS.yin * zoom + 64*zoom; 
gfx_drawstr("MID/SIDE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , (B1MS * 200)-100); #tmp_label += " %";
gfx_x = K_B1_MS.Xin * zoom; gfx_y = K_B1_MS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B1_Out.knob();
gfx_x = K_B1_Out.Xin * zoom; gfx_y = K_B1_Out.yin * zoom + 64*zoom; 
gfx_drawstr("OUTPUT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , band1_output_db); #tmp_label += " dB";
gfx_x = K_B1_Out.Xin * zoom; gfx_y = K_B1_Out.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey(); gfx_setfont(2,"Arial",12*zoom,'b');
gfx_roundrect(K_B1_MS.Xin * zoom -10*zoom, K_B1_MS.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = K_B1_MS.Xin * zoom - 10*zoom; gfx_y = K_B1_MS.yin * zoom + 86*zoom; 
gfx_drawstr("BAND 1", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = K_B1_MS.Xin * zoom + 67*zoom; gfx_y = K_B1_MS.yin * zoom + 16*zoom;
Band1_Solo ? scolor = 0 : solo ? scolor = 1 : scolor = 2;
gfx_blit(MBC_3S, 0.4*zoom, 0, 0, scolor * 60, 60,60); Band1_Solo_Handle_x = gfx_x+3*zoom; band1_Solo_Handle_y = gfx_y+3*zoom;
gfx_y += 25*zoom; gfx_x -= 7*zoom; Band1_Flip_Handle_x = gfx_x+3*zoom; band1_Flip_Handle_y = gfx_y+12*zoom;
Band1_Env_on < 2 ? gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 0, 60,60) : gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 60, 60,60);
//gfx_roundrect(Band1_Flip_Handle_x, Band1_Flip_Handle_y, 35*zoom, 15*zoom, 0);

gfx_roundrect(K_B1_EnvA.Xin * zoom -30*zoom, K_B1_EnvA.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = gfx_x_old =K_B1_EnvA.Xin * zoom - 30*zoom; gfx_y = K_B1_EnvA.yin * zoom + 86*zoom;
gfx_drawstr("ENVELOPE SHAPER", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band1_Env_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 80*zoom; Band1_Env_Handle_y = gfx_y;
Band1_Env_on == 2 || Band1_Env_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_roundrect(K_B1_Thresh.Xin * zoom -30*zoom, K_B1_Thresh.yin * zoom, 180*zoom, 180*zoom, 7*zoom); 
gfx_x = K_B1_Thresh.Xin * zoom - 30*zoom; gfx_y = K_B1_Thresh.yin * zoom + 166*zoom; 
gfx_drawstr("COMPRESSOR", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band1_Comp_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 160*zoom; Band1_Comp_Handle_y = gfx_y;
Band1_Compressor_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_x = Band1_Ms_Handle_x = K_B1_MS.Xin * zoom -7*zoom; gfx_y =K_B1_MS.yin * zoom + 76*zoom; Band1_MS_Handle_y = gfx_y;
Band1_MS_Processing ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);

   gfx_setfont(2);
   
   GR1_Meter.meter_config(Band1_Comp_Handle_x/zoom+8, Band1_Comp_Handle_y/zoom + 25, 5, 125, 30, 30);
   black();
   gfx_rect(Band1_Comp_Handle_x+8*zoom, Band1_Comp_Handle_y + 25*zoom, 6*zoom, 125*zoom);
   gfx_rect(Band1_Comp_Handle_x+3*zoom, Band1_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom);
   gfx_a = 0.8; green(); GR1_Meter.v_gr_meter_show(); gfx_a = 1;
   lightgrey(); gfx_x = Band1_Comp_Handle_x+3*zoom; gfx_y = Band1_Comp_Handle_y + 155*zoom;
   sprintf(#tmp_label, "%.1f" , Gr1_Meter.db_val_Max_GR); //#tmp_label += " dB";
   Gr1_Meter.db_val_Max_GR <= -29.99 ? #tmp_label = "<-30";
   gfx_drawstr(#tmp_label, 0x05, gfx_x + 30*zoom, gfx_y + gfx_texth);
   band1_comp_reset_Handle_x = Band1_Comp_Handle_x+3*zoom; Band1_Comp_reset_Handle_y = Band1_Comp_Handle_y + 25*zoom;
   tmploop = 1;
   loop(8,
   gfx_line(Band1_Comp_Handle_x+15*zoom, Band1_Comp_Handle_y + 25*zoom + tmploop, Band1_Comp_Handle_x+18*zoom, Band1_Comp_Handle_y + 25*zoom + tmploop);
   tmploop += 17.857;
   );




cuts > 0 ? (


lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
K_B2_Thresh.knob();
gfx_x = K_B2_Thresh.Xin * zoom; gfx_y = K_B2_Thresh.yin * zoom + 64*zoom; 
gfx_drawstr("THRESHOLD", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band2.Threshold); #tmp_label += " dB";
gfx_x = K_B2_Thresh.Xin * zoom; gfx_y = K_B2_Thresh.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_Ratio.knob();
gfx_x = K_B2_ratio.Xin * zoom; gfx_y = K_B2_ratio.yin * zoom + 64*zoom; 
gfx_drawstr("RATIO", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band2.Ratio); #tmp_label += " : 1";
gfx_x = K_B2_ratio.Xin * zoom; gfx_y = K_B2_ratio.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_Attack.knob();
gfx_x = K_B2_Attack.Xin * zoom; gfx_y = K_B2_Attack.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band2.attack*1000); #tmp_label += " ms";
gfx_x = K_B2_Attack.Xin * zoom; gfx_y = K_B2_Attack.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_Release.knob();
gfx_x = K_B2_Release.Xin * zoom; gfx_y = K_B2_Release.yin * zoom + 64*zoom; 
gfx_drawstr("RELEASE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band2.Release*1000); #tmp_label += " ms";
gfx_x = K_B2_Release.Xin * zoom; gfx_y = K_B2_Release.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_EnvA.knob();
gfx_x = K_B2_EnvA.Xin * zoom; gfx_y = K_B2_EnvA.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band2_Env.attack * 100); #tmp_label += " %";
gfx_x = K_B2_EnvA.Xin * zoom; gfx_y = K_B2_EnvA.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_EnvS.knob();
gfx_x = K_B2_EnvS.Xin * zoom; gfx_y = K_B2_EnvS.yin * zoom + 64*zoom; 
gfx_drawstr("SUSTAIN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band2_Env.sustain * 50); #tmp_label += " %";
gfx_x = K_B2_EnvS.Xin * zoom; gfx_y = K_B2_EnvS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_MS.knob();
gfx_x = K_B2_MS.Xin * zoom; gfx_y = K_B2_MS.yin * zoom + 64*zoom; 
gfx_drawstr("MID/SIDE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , (B2MS * 200)-100); #tmp_label += " %";
gfx_x = K_B2_MS.Xin * zoom; gfx_y = K_B2_MS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B2_Out.knob();
gfx_x = K_B2_Out.Xin * zoom; gfx_y = K_B2_Out.yin * zoom + 64*zoom; 
gfx_drawstr("OUTPUT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band2_output_db); #tmp_label += " dB";
gfx_x = K_B2_Out.Xin * zoom; gfx_y = K_B2_Out.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey(); gfx_setfont(2,"Arial",12*zoom,'b');
gfx_roundrect(K_B2_MS.Xin * zoom -10*zoom, K_B2_MS.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = K_B2_MS.Xin * zoom - 10*zoom; gfx_y = K_B2_MS.yin * zoom + 86*zoom; 
gfx_drawstr("BAND 2", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = K_B2_MS.Xin * zoom + 67*zoom; gfx_y = K_B2_MS.yin * zoom + 16*zoom;
Band2_Solo ? scolor = 0 : solo ? scolor = 1 : scolor = 2;
gfx_blit(MBC_3S, 0.4*zoom, 0, 0, scolor * 60, 60,60); Band2_Solo_Handle_x = gfx_x+3*zoom; Band2_Solo_Handle_y = gfx_y+3*zoom;
gfx_y += 25*zoom; gfx_x -= 7*zoom; Band2_Flip_Handle_x = gfx_x+3*zoom; Band2_Flip_Handle_y = gfx_y+12*zoom;
Band2_Env_on < 2 ? gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 0, 60,60) : gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 60, 60,60);
//gfx_roundrect(Band2_Flip_Handle_x, Band2_Flip_Handle_y, 35*zoom, 15*zoom, 0);

gfx_roundrect(K_B2_EnvA.Xin * zoom -30*zoom, K_B2_EnvA.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = gfx_x_old =K_B2_EnvA.Xin * zoom - 30*zoom; gfx_y = K_B2_EnvA.yin * zoom + 86*zoom;
gfx_drawstr("ENVELOPE SHAPER", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band2_Env_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 80*zoom; Band2_Env_Handle_y = gfx_y;
Band2_Env_on == 2 || Band2_Env_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_roundrect(K_B2_Thresh.Xin * zoom -30*zoom, K_B2_Thresh.yin * zoom, 180*zoom, 180*zoom, 7*zoom); 
gfx_x = K_B2_Thresh.Xin * zoom - 30*zoom; gfx_y = K_B2_Thresh.yin * zoom + 166*zoom; 
gfx_drawstr("COMPRESSOR", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band2_Comp_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 160*zoom; Band2_Comp_Handle_y = gfx_y;
Band2_Compressor_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_x = band2_Ms_Handle_x = K_B2_MS.Xin * zoom -7*zoom; gfx_y =K_B2_MS.yin * zoom + 76*zoom; band2_MS_Handle_y = gfx_y;
band2_MS_Processing ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);

   gfx_setfont(2);
   
   GR2_Meter.meter_config(Band2_Comp_Handle_x/zoom+8, Band2_Comp_Handle_y/zoom + 25, 5, 125, 30, 30);
   black();
   gfx_rect(Band2_Comp_Handle_x+8*zoom, Band2_Comp_Handle_y + 25*zoom, 6*zoom, 125*zoom);
   gfx_rect(Band2_Comp_Handle_x+3*zoom, Band2_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom);
   gfx_a = 0.8; green(); GR2_Meter.v_gr_meter_show(); gfx_a = 1;
   lightgrey(); gfx_x = Band2_Comp_Handle_x+3*zoom; gfx_y = Band2_Comp_Handle_y + 155*zoom;
   sprintf(#tmp_label, "%.1f" , GR2_Meter.db_val_Max_GR); //#tmp_label += " dB";
   GR2_Meter.db_val_Max_GR <= -29.99 ? #tmp_label = "<-30";
   gfx_drawstr(#tmp_label, 0x05, gfx_x + 30*zoom, gfx_y + gfx_texth);
   Band2_comp_reset_Handle_x = Band2_Comp_Handle_x+3*zoom; Band2_Comp_reset_Handle_y = Band2_Comp_Handle_y + 25*zoom;
   tmploop = 1;
   loop(8,
   gfx_line(Band2_Comp_Handle_x+15*zoom, Band2_Comp_Handle_y + 25*zoom + tmploop, Band2_Comp_Handle_x+18*zoom, Band2_Comp_Handle_y + 25*zoom + tmploop);
   tmploop += 17.857;
   );

); // cuts


cuts > 1 ? (
lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
K_B3_Thresh.knob();
gfx_x = K_B3_Thresh.Xin * zoom; gfx_y = K_B3_Thresh.yin * zoom + 64*zoom; 
gfx_drawstr("THRESHOLD", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band3.Threshold); #tmp_label += " dB";
gfx_x = K_B3_Thresh.Xin * zoom; gfx_y = K_B3_Thresh.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_Ratio.knob();
gfx_x = K_B3_ratio.Xin * zoom; gfx_y = K_B3_ratio.yin * zoom + 64*zoom; 
gfx_drawstr("RATIO", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band3.Ratio); #tmp_label += " : 1";
gfx_x = K_B3_ratio.Xin * zoom; gfx_y = K_B3_ratio.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_Attack.knob();
gfx_x = K_B3_Attack.Xin * zoom; gfx_y = K_B3_Attack.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band3.attack*1000); #tmp_label += " ms";
gfx_x = K_B3_Attack.Xin * zoom; gfx_y = K_B3_Attack.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_Release.knob();
gfx_x = K_B3_Release.Xin * zoom; gfx_y = K_B3_Release.yin * zoom + 64*zoom; 
gfx_drawstr("RELEASE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band3.Release*1000); #tmp_label += " ms";
gfx_x = K_B3_Release.Xin * zoom; gfx_y = K_B3_Release.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_EnvA.knob();
gfx_x = K_B3_EnvA.Xin * zoom; gfx_y = K_B3_EnvA.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band3_Env.attack * 100); #tmp_label += " %";
gfx_x = K_B3_EnvA.Xin * zoom; gfx_y = K_B3_EnvA.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_EnvS.knob();
gfx_x = K_B3_EnvS.Xin * zoom; gfx_y = K_B3_EnvS.yin * zoom + 64*zoom; 
gfx_drawstr("SUSTAIN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band3_Env.sustain * 50); #tmp_label += " %";
gfx_x = K_B3_EnvS.Xin * zoom; gfx_y = K_B3_EnvS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_MS.knob();
gfx_x = K_B3_MS.Xin * zoom; gfx_y = K_B3_MS.yin * zoom + 64*zoom; 
gfx_drawstr("MID/SIDE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , (B3MS * 200)-100); #tmp_label += " %";
gfx_x = K_B3_MS.Xin * zoom; gfx_y = K_B3_MS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B3_Out.knob();
gfx_x = K_B3_Out.Xin * zoom; gfx_y = K_B3_Out.yin * zoom + 64*zoom; 
gfx_drawstr("OUTPUT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band3_output_db); #tmp_label += " dB";
gfx_x = K_B3_Out.Xin * zoom; gfx_y = K_B3_Out.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey(); gfx_setfont(2,"Arial",12*zoom,'b');
gfx_roundrect(K_B3_MS.Xin * zoom -10*zoom, K_B3_MS.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = K_B3_MS.Xin * zoom - 10*zoom; gfx_y = K_B3_MS.yin * zoom + 86*zoom; 
gfx_drawstr("BAND 3", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = K_B3_MS.Xin * zoom + 67*zoom; gfx_y = K_B3_MS.yin * zoom + 16*zoom;
Band3_Solo ? scolor = 0 : solo ? scolor = 1 : scolor = 2;
gfx_blit(MBC_3S, 0.4*zoom, 0, 0, scolor * 60, 60,60); Band3_Solo_Handle_x = gfx_x+3*zoom; Band3_Solo_Handle_y = gfx_y+3*zoom;
gfx_y += 25*zoom; gfx_x -= 7*zoom; Band3_Flip_Handle_x = gfx_x+3*zoom; Band3_Flip_Handle_y = gfx_y+12*zoom;
Band3_Env_on < 2 ? gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 0, 60,60) : gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 60, 60,60);
//gfx_roundrect(Band3_Flip_Handle_x, Band3_Flip_Handle_y, 35*zoom, 15*zoom, 0);

gfx_roundrect(K_B3_EnvA.Xin * zoom -30*zoom, K_B3_EnvA.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = gfx_x_old =K_B3_EnvA.Xin * zoom - 30*zoom; gfx_y = K_B3_EnvA.yin * zoom + 86*zoom;
gfx_drawstr("ENVELOPE SHAPER", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band3_Env_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 80*zoom; Band3_Env_Handle_y = gfx_y;
Band3_Env_on == 2 || Band3_Env_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_roundrect(K_B3_Thresh.Xin * zoom -30*zoom, K_B3_Thresh.yin * zoom, 180*zoom, 180*zoom, 7*zoom); 
gfx_x = K_B3_Thresh.Xin * zoom - 30*zoom; gfx_y = K_B3_Thresh.yin * zoom + 166*zoom; 
gfx_drawstr("COMPRESSOR", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band3_Comp_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 160*zoom; Band3_Comp_Handle_y = gfx_y;
Band3_Compressor_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_x = band3_Ms_Handle_x = K_B3_MS.Xin * zoom -7*zoom; gfx_y =K_B3_MS.yin * zoom + 76*zoom; band3_MS_Handle_y = gfx_y;
band3_MS_Processing ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);

   gfx_setfont(2);
   
   GR3_Meter.meter_config(Band3_Comp_Handle_x/zoom+8, Band3_Comp_Handle_y/zoom + 25, 5, 125, 30, 30);
   black();
   gfx_rect(Band3_Comp_Handle_x+8*zoom, Band3_Comp_Handle_y + 25*zoom, 6*zoom, 125*zoom);
   gfx_rect(Band3_Comp_Handle_x+3*zoom, Band3_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom);
   gfx_a = 0.8; green(); GR3_Meter.v_gr_meter_show(); gfx_a = 1;
   lightgrey(); gfx_x = Band3_Comp_Handle_x+3*zoom; gfx_y = Band3_Comp_Handle_y + 155*zoom;
   sprintf(#tmp_label, "%.1f" , GR3_Meter.db_val_Max_GR); //#tmp_label += " dB";
   GR3_Meter.db_val_Max_GR <= -29.99 ? #tmp_label = "<-30";
   gfx_drawstr(#tmp_label, 0x05, gfx_x + 30*zoom, gfx_y + gfx_texth);
   Band3_comp_reset_Handle_x = Band3_Comp_Handle_x+3*zoom; Band3_Comp_reset_Handle_y = Band3_Comp_Handle_y + 25*zoom;
   tmploop = 1;
   loop(8,
   gfx_line(Band3_Comp_Handle_x+15*zoom, Band3_Comp_Handle_y + 25*zoom + tmploop, Band3_Comp_Handle_x+18*zoom, Band3_Comp_Handle_y + 25*zoom + tmploop);
   tmploop += 17.857;
   );

); // cuts



cuts > 2 ? (

lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
K_B4_Thresh.knob();
gfx_x = K_B4_Thresh.Xin * zoom; gfx_y = K_B4_Thresh.yin * zoom + 64*zoom; 
gfx_drawstr("THRESHOLD", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band4.Threshold); #tmp_label += " dB";
gfx_x = K_B4_Thresh.Xin * zoom; gfx_y = K_B4_Thresh.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_Ratio.knob();
gfx_x = K_B4_ratio.Xin * zoom; gfx_y = K_B4_ratio.yin * zoom + 64*zoom; 
gfx_drawstr("RATIO", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band4.Ratio); #tmp_label += " : 1";
gfx_x = K_B4_ratio.Xin * zoom; gfx_y = K_B4_ratio.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_Attack.knob();
gfx_x = K_B4_Attack.Xin * zoom; gfx_y = K_B4_Attack.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band4.attack*1000); #tmp_label += " ms";
gfx_x = K_B4_Attack.Xin * zoom; gfx_y = K_B4_Attack.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_Release.knob();
gfx_x = K_B4_Release.Xin * zoom; gfx_y = K_B4_Release.yin * zoom + 64*zoom; 
gfx_drawstr("RELEASE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band4.Release*1000); #tmp_label += " ms";
gfx_x = K_B4_Release.Xin * zoom; gfx_y = K_B4_Release.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_EnvA.knob();
gfx_x = K_B4_EnvA.Xin * zoom; gfx_y = K_B4_EnvA.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band4_Env.attack * 100); #tmp_label += " %";
gfx_x = K_B4_EnvA.Xin * zoom; gfx_y = K_B4_EnvA.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_EnvS.knob();
gfx_x = K_B4_EnvS.Xin * zoom; gfx_y = K_B4_EnvS.yin * zoom + 64*zoom; 
gfx_drawstr("SUSTAIN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band4_Env.sustain * 50); #tmp_label += " %";
gfx_x = K_B4_EnvS.Xin * zoom; gfx_y = K_B4_EnvS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_MS.knob();
gfx_x = K_B4_MS.Xin * zoom; gfx_y = K_B4_MS.yin * zoom + 64*zoom; 
gfx_drawstr("MID/SIDE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , (B4MS * 200)-100); #tmp_label += " %";
gfx_x = K_B4_MS.Xin * zoom; gfx_y = K_B4_MS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B4_Out.knob();
gfx_x = K_B4_Out.Xin * zoom; gfx_y = K_B4_Out.yin * zoom + 64*zoom; 
gfx_drawstr("OUTPUT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band4_output_db); #tmp_label += " dB";
gfx_x = K_B4_Out.Xin * zoom; gfx_y = K_B4_Out.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey(); gfx_setfont(2,"Arial",12*zoom,'b');
gfx_roundrect(K_B4_MS.Xin * zoom -10*zoom, K_B4_MS.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = K_B4_MS.Xin * zoom - 10*zoom; gfx_y = K_B4_MS.yin * zoom + 86*zoom; 
gfx_drawstr("BAND 4", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = K_B4_MS.Xin * zoom + 67*zoom; gfx_y = K_B4_MS.yin * zoom + 16*zoom;
Band4_Solo ? scolor = 0 : solo ? scolor = 1 : scolor = 2;
gfx_blit(MBC_3S, 0.4*zoom, 0, 0, scolor * 60, 60,60); Band4_Solo_Handle_x = gfx_x+3*zoom; Band4_Solo_Handle_y = gfx_y+3*zoom;
gfx_y += 25*zoom; gfx_x -= 7*zoom; Band4_Flip_Handle_x = gfx_x+3*zoom; Band4_Flip_Handle_y = gfx_y+12*zoom;
Band4_Env_on < 2 ? gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 0, 60,60) : gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 60, 60,60);
//gfx_roundrect(Band4_Flip_Handle_x, Band4_Flip_Handle_y, 35*zoom, 15*zoom, 0);

gfx_roundrect(K_B4_EnvA.Xin * zoom -30*zoom, K_B4_EnvA.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = gfx_x_old =K_B4_EnvA.Xin * zoom - 30*zoom; gfx_y = K_B4_EnvA.yin * zoom + 86*zoom;
gfx_drawstr("ENVELOPE SHAPER", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band4_Env_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 80*zoom; Band4_Env_Handle_y = gfx_y;
Band4_Env_on == 2 || Band4_Env_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_roundrect(K_B4_Thresh.Xin * zoom -30*zoom, K_B4_Thresh.yin * zoom, 180*zoom, 180*zoom, 7*zoom); 
gfx_x = K_B4_Thresh.Xin * zoom - 30*zoom; gfx_y = K_B4_Thresh.yin * zoom + 166*zoom; 
gfx_drawstr("COMPRESSOR", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band4_Comp_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 160*zoom; Band4_Comp_Handle_y = gfx_y;
Band4_Compressor_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_x = band4_Ms_Handle_x = K_B4_MS.Xin * zoom -7*zoom; gfx_y =K_B4_MS.yin * zoom + 76*zoom; band4_MS_Handle_y = gfx_y;
band4_MS_Processing ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);

   gfx_setfont(2);
   
   GR4_Meter.meter_config(Band4_Comp_Handle_x/zoom+8, Band4_Comp_Handle_y/zoom + 25, 5, 125, 30, 30);
   black();
   gfx_rect(Band4_Comp_Handle_x+8*zoom, Band4_Comp_Handle_y + 25*zoom, 6*zoom, 125*zoom);
   gfx_rect(Band4_Comp_Handle_x+3*zoom, Band4_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom);
   gfx_a = 0.8; green(); GR4_Meter.v_gr_meter_show(); gfx_a = 1;
   lightgrey(); gfx_x = Band4_Comp_Handle_x+3*zoom; gfx_y = Band4_Comp_Handle_y + 155*zoom;
   sprintf(#tmp_label, "%.1f" , GR4_Meter.db_val_Max_GR); //#tmp_label += " dB";
   GR4_Meter.db_val_Max_GR <= -29.99 ? #tmp_label = "<-30";
   gfx_drawstr(#tmp_label, 0x05, gfx_x + 30*zoom, gfx_y + gfx_texth);
   Band4_comp_reset_Handle_x = Band4_Comp_Handle_x+3*zoom; Band4_Comp_reset_Handle_y = Band4_Comp_Handle_y + 25*zoom;
   tmploop = 1;
   loop(8,
   gfx_line(Band4_Comp_Handle_x+15*zoom, Band4_Comp_Handle_y + 25*zoom + tmploop, Band4_Comp_Handle_x+18*zoom, Band4_Comp_Handle_y + 25*zoom + tmploop);
   tmploop += 17.857;
   );

); // cuts

cuts > 3 ? (

lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
K_B5_Thresh.knob();
gfx_x = K_B5_Thresh.Xin * zoom; gfx_y = K_B5_Thresh.yin * zoom + 64*zoom; 
gfx_drawstr("THRESHOLD", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band5.Threshold); #tmp_label += " dB";
gfx_x = K_B5_Thresh.Xin * zoom; gfx_y = K_B5_Thresh.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_Ratio.knob();
gfx_x = K_B5_ratio.Xin * zoom; gfx_y = K_B5_ratio.yin * zoom + 64*zoom; 
gfx_drawstr("RATIO", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band5.Ratio); #tmp_label += " : 1";
gfx_x = K_B5_ratio.Xin * zoom; gfx_y = K_B5_ratio.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_Attack.knob();
gfx_x = K_B5_Attack.Xin * zoom; gfx_y = K_B5_Attack.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band5.attack*1000); #tmp_label += " ms";
gfx_x = K_B5_Attack.Xin * zoom; gfx_y = K_B5_Attack.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_Release.knob();
gfx_x = K_B5_Release.Xin * zoom; gfx_y = K_B5_Release.yin * zoom + 64*zoom; 
gfx_drawstr("RELEASE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band5.Release*1000); #tmp_label += " ms";
gfx_x = K_B5_Release.Xin * zoom; gfx_y = K_B5_Release.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_EnvA.knob();
gfx_x = K_B5_EnvA.Xin * zoom; gfx_y = K_B5_EnvA.yin * zoom + 64*zoom; 
gfx_drawstr("ATTACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band5_Env.attack * 100); #tmp_label += " %";
gfx_x = K_B5_EnvA.Xin * zoom; gfx_y = K_B5_EnvA.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_EnvS.knob();
gfx_x = K_B5_EnvS.Xin * zoom; gfx_y = K_B5_EnvS.yin * zoom + 64*zoom; 
gfx_drawstr("SUSTAIN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , Band5_Env.sustain * 50); #tmp_label += " %";
gfx_x = K_B5_EnvS.Xin * zoom; gfx_y = K_B5_EnvS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_MS.knob();
gfx_x = K_B5_MS.Xin * zoom; gfx_y = K_B5_MS.yin * zoom + 64*zoom; 
gfx_drawstr("MID/SIDE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , (B5MS * 200)-100); #tmp_label += " %";
gfx_x = K_B5_MS.Xin * zoom; gfx_y = K_B5_MS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
K_B5_Out.knob();
gfx_x = K_B5_Out.Xin * zoom; gfx_y = K_B5_Out.yin * zoom + 64*zoom; 
gfx_drawstr("OUTPUT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , Band5_output_db); #tmp_label += " dB";
gfx_x = K_B5_Out.Xin * zoom; gfx_y = K_B5_Out.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey(); gfx_setfont(2,"Arial",12*zoom,'b');
gfx_roundrect(K_B5_MS.Xin * zoom -10*zoom, K_B5_MS.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = K_B5_MS.Xin * zoom - 10*zoom; gfx_y = K_B5_MS.yin * zoom + 86*zoom; 
gfx_drawstr("BAND 5", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = K_B5_MS.Xin * zoom + 67*zoom; gfx_y = K_B5_MS.yin * zoom + 16*zoom;
Band5_Solo ? scolor = 0 : solo ? scolor = 1 : scolor = 2;
gfx_blit(MBC_3S, 0.4*zoom, 0, 0, scolor * 60, 60,60); Band5_Solo_Handle_x = gfx_x+3*zoom; Band5_Solo_Handle_y = gfx_y+3*zoom;
gfx_y += 25*zoom; gfx_x -= 7*zoom; Band5_Flip_Handle_x = gfx_x+3*zoom; Band5_Flip_Handle_y = gfx_y+12*zoom;
Band5_Env_on < 2 ? gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 0, 60,60) : gfx_blit(MBC_FLIP, 0.65*zoom, 0, 0, 60, 60,60);
//gfx_roundrect(Band5_Flip_Handle_x, Band5_Flip_Handle_y, 35*zoom, 15*zoom, 0);

gfx_roundrect(K_B5_EnvA.Xin * zoom -30*zoom, K_B5_EnvA.yin * zoom, 180*zoom, 100*zoom, 7*zoom); 
gfx_x = gfx_x_old =K_B5_EnvA.Xin * zoom - 30*zoom; gfx_y = K_B5_EnvA.yin * zoom + 86*zoom;
gfx_drawstr("ENVELOPE SHAPER", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band5_Env_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 80*zoom; Band5_Env_Handle_y = gfx_y;
Band5_Env_on == 2 || Band5_Env_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_roundrect(K_B5_Thresh.Xin * zoom -30*zoom, K_B5_Thresh.yin * zoom, 180*zoom, 180*zoom, 7*zoom); 
gfx_x = K_B5_Thresh.Xin * zoom - 30*zoom; gfx_y = K_B5_Thresh.yin * zoom + 166*zoom; 
gfx_drawstr("COMPRESSOR", 0x05, gfx_x + 180*zoom, gfx_y + gfx_texth);
gfx_x = Band5_Comp_Handle_x = gfx_x_old + 3*zoom; gfx_y -= 160*zoom; Band5_Comp_Handle_y = gfx_y;
Band5_Compressor_on == 1 ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);
gfx_x = band5_Ms_Handle_x = K_B5_MS.Xin * zoom -7*zoom; gfx_y =K_B5_MS.yin * zoom + 76*zoom; band5_MS_Handle_y = gfx_y;
band5_MS_Processing ? gfx_blit(MBC_POWER, 0.6*zoom, 0, 0,0 , 40,40) :  gfx_blit(MBC_POWER, 0.6*zoom, 0, 0, 40 , 40,40);

   gfx_setfont(2);
   
   GR5_Meter.meter_config(Band5_Comp_Handle_x/zoom+8, Band5_Comp_Handle_y/zoom + 25, 5, 125, 30, 30);
   black();
   gfx_rect(Band5_Comp_Handle_x+8*zoom, Band5_Comp_Handle_y + 25*zoom, 6*zoom, 125*zoom);
   gfx_rect(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom);
   gfx_a = 0.8; green(); GR5_Meter.v_gr_meter_show(); gfx_a = 1;
   lightgrey(); gfx_x = Band5_Comp_Handle_x+3*zoom; gfx_y = Band5_Comp_Handle_y + 155*zoom;
   sprintf(#tmp_label, "%.1f" , GR5_Meter.db_val_Max_GR); //#tmp_label += " dB";
   GR5_Meter.db_val_Max_GR <= -29.99 ? #tmp_label = "<-30";
   gfx_drawstr(#tmp_label, 0x05, gfx_x + 30*zoom, gfx_y + gfx_texth);
   Band5_comp_reset_Handle_x = Band5_Comp_Handle_x+3*zoom; Band5_Comp_reset_Handle_y = Band5_Comp_Handle_y + 25*zoom;
   tmploop = 1;
   loop(8,
   gfx_line(Band5_Comp_Handle_x+15*zoom, Band5_Comp_Handle_y + 25*zoom + tmploop, Band5_Comp_Handle_x+18*zoom, Band5_Comp_Handle_y + 25*zoom + tmploop);
   tmploop += 17.857;
   );
); // cuts

/*
gfx_roundrect(Band1_Solo_Handle_x, Band1_Solo_Handle_y, 20*zoom, 20*zoom, 0);
gfx_roundrect(Band1_Flip_Handle_x, band1_Flip_Handle_y, 35*zoom,17*zoom,0);
gfx_roundrect(Band1_Comp_Handle_x+3*zoom, Band1_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom, 0);
gfx_roundrect(Band1_Env_Handle_x+3*zoom, Band1_Env_Handle_y+3*zoom, 18*zoom, 18*zoom, 0);
gfx_roundrect(Band1_Comp_Handle_x+3*zoom, Band1_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom,0);
*/

gfx_setfont(3,"Arial",15*zoom,'b');
gfx_x = sgfx_x + 140*zoom; gfx_y = sgfx_y+ 625*zoom;
gfx_Drawstr("BANDS:");//   1   2   3   4   5       CROSSOVERS:    12dB/Oct    24dB/Oct       FILTER:    IIR    FIR");
gfx_x = sgfx_x + 206*zoom +4 * zoom;
lightgrey(); cuts == 0 ? green();//gfx_g = 0.9;
gfx_drawstr("1");
gfx_x = sgfx_x + 226*zoom +5 * zoom;
lightgrey(); cuts == 1 ? green();
gfx_drawstr("2");
gfx_x = sgfx_x + 245*zoom +5 * zoom;
lightgrey(); cuts == 2 ? green();
gfx_drawstr("3");
gfx_x = sgfx_x + 266*zoom +5 * zoom;
lightgrey(); cuts == 3 ? green();
gfx_drawstr("4");
gfx_x = sgfx_x + 286*zoom +5 * zoom;
lightgrey(); cuts == 4 ? green();
gfx_drawstr("5");
//green();

gfx_x = sgfx_x + 335*zoom;
lightgrey();
gfx_drawstr("CROSSOVERS:");
gfx_x = sgfx_x+ 457*zoom;
lightgrey(); slider(b_Filter.slider)==1 ? green();
gfx_drawstr("12db/Oct");
gfx_x = sgfx_x+ 537*zoom;
lightgrey(); slider(b_Filter.slider)==0 ? green();
gfx_drawstr("24db/Oct");

gfx_x = sgfx_x + 623*zoom;
lightgrey();
gfx_drawstr("FILTERS:");
gfx_x = sgfx_x+ 703*zoom;
lightgrey(); slider(b_engine.slider)==0 ? green();
gfx_drawstr("IIR");
gfx_x = sgfx_x+ 737*zoom;
lightgrey(); slider(b_engine.slider)==1 ? green();
gfx_drawstr("FIR");

green(); //gfx_g = 0.9;

cuts == 0 ? gfx_roundrect(sgfx_x + 206*zoom,sgfx_y+ 624*zoom, 18*zoom,19*zoom, 5*zoom);
cuts == 1 ? gfx_roundrect(sgfx_x + 226*zoom,sgfx_y+ 624*zoom, 18*zoom,19*zoom, 5*zoom);
cuts == 2 ? gfx_roundrect(sgfx_x + 226*zoom + 19*zoom,sgfx_y+ 624*zoom, 18*zoom,19*zoom, 5*zoom);
cuts == 3 ? gfx_roundrect(sgfx_x + 226*zoom + 40*zoom,sgfx_y+ 624*zoom, 18*zoom,19*zoom, 5*zoom);
cuts == 4 ? gfx_roundrect(sgfx_x + 226*zoom + 60*zoom,sgfx_y+ 624*zoom, 18*zoom,19*zoom, 5*zoom);

slider(b_Filter.slider)==1 ? gfx_roundrect(sgfx_x+ 450*zoom,sgfx_y+ 624*zoom, 77*zoom,19*zoom, 5*zoom);
slider(b_Filter.slider)==0 ? gfx_roundrect(sgfx_x+ 530*zoom,sgfx_y+ 624*zoom, 77*zoom,19*zoom, 5*zoom);

slider(b_engine.slider)==0 ? gfx_roundrect(sgfx_x + 693*zoom,sgfx_y+ 624*zoom, 37*zoom,19*zoom, 5*zoom);
slider(b_engine.slider)==1 ? gfx_roundrect(sgfx_x + 730*zoom,sgfx_y+ 624*zoom, 37*zoom,19*zoom, 5*zoom);

g_collision(sgfx_x + 693*zoom,sgfx_y+ 625*zoom, 37*zoom,17*zoom) ? (
black();
gfx_rect(sgfx_x + sgfx_w / 2 - 150*zoom, sgfx_y + sgfx_h/5, 300*zoom, 3*sgfx_h/5);
lightgrey();
gfx_roundrect(sgfx_x + sgfx_w / 2 - 150*zoom, sgfx_y + sgfx_h/5, 300*zoom, 3*sgfx_h/5,0);
//gfx_setfont(2);
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y = sgfx_y + sgfx_h/5 + 5*zoom;
gfx_drawstr("IIR FILTER:");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 25*zoom;
gfx_drawstr("+ No latency: Plugin can be uesd live");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 20*zoom;
gfx_drawstr("+ Crossover automation can be used");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 20*zoom;
gfx_drawstr("+ Less CPU load");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 25*zoom;
gfx_drawstr("- Crossover filters are not phase-linear");
);

g_collision(sgfx_x + 730*zoom,sgfx_y+ 625*zoom, 37*zoom,17*zoom) ? (
black();
gfx_rect(sgfx_x + sgfx_w / 2 - 150*zoom, sgfx_y + sgfx_h/5 +5*zoom, 320*zoom, 3*sgfx_h/5);
lightgrey();
gfx_roundrect(sgfx_x + sgfx_w / 2 - 150*zoom, sgfx_y + sgfx_h/5 +5*zoom, 320*zoom, 3*sgfx_h/5,0);
//gfx_setfont(2);
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y = sgfx_y + sgfx_h/5 + 5*zoom;
gfx_drawstr("FIR FILTER:");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 25*zoom;
gfx_drawstr("+ Crossover filters are phase-linear");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 25*zoom;
gfx_drawstr("- Latency: Plugin can not really be uesd live");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 20*zoom;
gfx_drawstr("- Changing crossover frequencies during");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 20*zoom;
gfx_drawstr("   playback causes glitches");
gfx_x = sgfx_x + sgfx_w / 2 - 145*zoom; gfx_y += 20*zoom;
gfx_drawstr("- Higher CPU load");
);

/*
g_collision(band1_Comp_Handle_x+3*zoom, band1_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
black();
gfx_rect(band1_Comp_Handle_x+3*zoom, band1_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom);
gfx_setfont(2);
lightgrey();
gfx_roundrect(band1_Comp_Handle_x+3*zoom, band1_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom,0);
orange();
gfx_x = band1_Comp_Handle_x+12*zoom; gfx_y = band1_Comp_Handle_y-12*zoom;
gfx_drawstr("Right click for Side-Chain");
);
g_collision(band2_Comp_Handle_x+3*zoom, band2_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
black();
gfx_rect(band2_Comp_Handle_x+3*zoom, band2_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom);
gfx_setfont(2);
lightgrey();
gfx_roundrect(band2_Comp_Handle_x+3*zoom, band2_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom,0);
orange();
gfx_x = band2_Comp_Handle_x+12*zoom; gfx_y = band2_Comp_Handle_y-12*zoom;
gfx_drawstr("Right click for Side-Chain");
);
g_collision(band3_Comp_Handle_x+3*zoom, band3_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
black();
gfx_rect(band3_Comp_Handle_x+3*zoom, band3_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom);
gfx_setfont(2);
lightgrey();
gfx_roundrect(band3_Comp_Handle_x+3*zoom, band3_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom,0);
orange();
gfx_x = band3_Comp_Handle_x+12*zoom; gfx_y = band3_Comp_Handle_y-12*zoom;
gfx_drawstr("Right click for Side-Chain");
);
g_collision(band4_Comp_Handle_x+3*zoom, band4_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
black();
gfx_rect(band4_Comp_Handle_x+3*zoom, band4_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom);
gfx_setfont(2);
lightgrey();
gfx_roundrect(band4_Comp_Handle_x+3*zoom, band4_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom,0);
orange();
gfx_x = band4_Comp_Handle_x+12*zoom; gfx_y = band4_Comp_Handle_y-12*zoom;
gfx_drawstr("Right click for Side-Chain");
);
g_collision(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
black();
gfx_rect(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom);
gfx_setfont(2);
lightgrey();
gfx_roundrect(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y-15*zoom, 160*zoom, 18*zoom,0);
orange();
gfx_x = Band5_Comp_Handle_x+12*zoom; gfx_y = Band5_Comp_Handle_y-12*zoom;
gfx_drawstr("Right click for Side-Chain");
);

*/

 ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
       g_collision(sgfx_x, sgfx_y, sgfx_w, sgfx_h) ? (
       orange(); 
       cuts > 0 ? gfx_circle(freq1_handle_x, sgfx_y + 4*sgfx_h/5,4*zoom);
       cuts > 1 ? gfx_circle(freq2_handle_x, sgfx_y + 3*sgfx_h/5,4*zoom);
       cuts > 2 ? gfx_circle(freq3_handle_x, sgfx_y + 2*sgfx_h/5,4*zoom);
       cuts > 3 ? gfx_circle(freq4_handle_x, sgfx_y + 1*sgfx_h/5,4*zoom);
       );
       //B_Bypass.b_collision() ? katze = 1 : katze = 0;
 
       !Number_input ? (

       mouseClick == 1 ? (
       number_input = 0;
       B_Bypass.b_collision() ? (slider64 == 0 ? slider64 = 1 : slider64 = 0; B_Bypass.quicklink_button(); caller = 1);
       
       g_collision(sgfx_x + 207*zoom,sgfx_y+ 625*zoom, 16*zoom,17*zoom) ? (slider(b_bands.slider)=0; b_Bands.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 227*zoom,sgfx_y+ 625*zoom, 16*zoom,17*zoom) ? (slider(b_bands.slider)=1; b_Bands.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 227*zoom + 19*zoom,sgfx_y+ 625*zoom, 16*zoom,17*zoom) ? (slider(b_bands.slider)=2; b_Bands.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 227*zoom + 40*zoom,sgfx_y+ 625*zoom, 16*zoom,17*zoom) ? (slider(b_bands.slider)=3; b_Bands.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 227*zoom + 60*zoom,sgfx_y+ 625*zoom, 16*zoom,17*zoom) ? (slider(b_bands.slider)=4; b_Bands.quicklink_button(); caller = 1);
       
       g_collision(sgfx_x + 450*zoom,sgfx_y+ 625*zoom, 77*zoom,17*zoom) ? (slider(b_Filter.slider)=1; b_Filter.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 530*zoom,sgfx_y+ 625*zoom, 77*zoom,17*zoom) ? (slider(b_Filter.slider)=0; b_Filter.quicklink_button(); caller = 1);
       
       g_collision(sgfx_x + 693*zoom,sgfx_y+ 625*zoom, 37*zoom,17*zoom) ? (slider(b_engine.slider)=0; b_engine.quicklink_button(); caller = 1);
       g_collision(sgfx_x + 730*zoom,sgfx_y+ 625*zoom, 37*zoom,17*zoom) ? (slider(b_engine.slider)=1; b_engine.quicklink_button(); caller = 1);
       
       
       K_B1_MS.k_collision() ? alt ? (allms = 1):(K_B1_MS.dragstart());
       K_B1_Out.k_collision() ? alt ? (allgain = 1):(K_B1_Out.dragstart());
       K_B1_Thresh.k_collision() ? alt ? (allthresh = 1):(K_B1_Thresh.dragstart());
       K_B1_Ratio.k_collision() ? alt ? (allratio = 1):(K_B1_Ratio.dragstart());
       K_B1_Attack.k_collision() ? alt ? (allcat = 1):(K_B1_Attack.dragstart());
       K_B1_Release.k_collision() ? alt ? (allrel = 1):(K_B1_Release.dragstart());
       K_B1_EnvA.k_collision() ? alt ? (alleat = 1):(K_B1_EnvA.dragstart());
       K_B1_EnvS.k_collision() ? alt ? (allsus = 1):(K_B1_EnvS.dragstart());
       
       g_collision(Band1_Solo_Handle_x, Band1_Solo_Handle_y, 20*zoom, 20*zoom) ? (
       slider(B_B1_Solo.slider) ==1? slider(B_B1_Solo.slider) = 0 : 
       slider(B_B1_Solo.slider) ==0? slider(B_B1_Solo.slider) = 1 :
       slider(B_B1_Solo.slider) ==2? slider(B_B1_Solo.slider) = 3 :
       slider(B_B1_Solo.slider) ==3? slider(B_B1_Solo.slider) = 2;
       slider_automate(slider(B_B1_Solo.slider));
       B_B1_Solo.quicklink_button();
       caller = 1);
       g_collision(Band1_MS_Handle_x+3*zoom, Band1_MS_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       alt ? (all_MS_procesing = slider(B_B1_Solo.slider) + 1):(
       slider(B_B1_Solo.slider) ==1? slider(B_B1_Solo.slider) = 3 : 
       slider(B_B1_Solo.slider) ==0? slider(B_B1_Solo.slider) = 2 :
       slider(B_B1_Solo.slider) ==2? slider(B_B1_Solo.slider) = 0 :
       slider(B_B1_Solo.slider) ==3? slider(B_B1_Solo.slider) = 1;
       slider_automate(slider(B_B1_Solo.slider));
       B_B1_Solo.quicklink_button();
       caller = 1);
       );
       
       g_collision(Band1_Flip_Handle_x, Band1_Flip_Handle_y, 35*zoom, 17*zoom) ? (
       slider(B_B1_EnvOn.slider) ==0? slider(B_B1_EnvOn.slider) = 3:
       slider(B_B1_EnvOn.slider) ==1? slider(B_B1_EnvOn.slider) = 2 :
       slider(B_B1_EnvOn.slider) ==2? slider(B_B1_EnvOn.slider) = 1 :
       slider(B_B1_EnvOn.slider) ==3? slider(B_B1_EnvOn.slider) = 0;
       slider_automate(slider(B_B1_EnvOn.slider)); B_B1_EnvOn.quicklink_button();caller = 1;
       alt ? (
            allflip = 1;;
            );
       );
       g_collision(Band1_Env_Handle_x+3*zoom, Band1_Env_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       slider(B_B1_EnvOn.slider) ==0? slider(B_B1_EnvOn.slider) = 1:
       slider(B_B1_EnvOn.slider) ==1? slider(B_B1_EnvOn.slider) = 0 :
       slider(B_B1_EnvOn.slider) ==2? slider(B_B1_EnvOn.slider) = 3 :
       slider(B_B1_EnvOn.slider) ==3? slider(B_B1_EnvOn.slider) = 2;
       slider_automate(slider(B_B1_EnvOn.slider)); B_B1_EnvOn.quicklink_button();
       alt ? (
            allenv = 1;;
            );
       caller = 1);
       g_collision(Band1_Comp_Handle_x+3*zoom, Band1_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (alt ? allcompon = 1; slider(B_B1_CompOn.slider) ==1? slider(B_B1_CompOn.slider) = 0 : slider(B_B1_CompOn.slider) = 1; slider_automate(slider(B_B1_CompOn.slider)); B_B1_CompOn.quicklink_button();caller = 1);
       g_collision(Band1_Comp_Handle_x+3*zoom, Band1_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom) ? shift ? (Gr1_Meter.db_val_Max_GR = Gr2_Meter.db_val_Max_GR = Gr3_Meter.db_val_Max_GR = Gr4_Meter.db_val_Max_GR = Gr5_Meter.db_val_Max_GR = 0):(Gr1_Meter.db_val_Max_GR = 0);
       
       cuts > 0 ? (
       K_B2_MS.k_collision() ? alt ? (allms = 1):(K_B2_MS.dragstart());
       K_B2_Out.k_collision() ? alt ? (allgain = 1):(K_B2_Out.dragstart());
       K_B2_Thresh.k_collision() ? alt ? (allthresh = 1):(K_B2_Thresh.dragstart());
       K_B2_Ratio.k_collision() ? alt ? (allratio = 1):(K_B2_Ratio.dragstart());
       K_B2_Attack.k_collision() ? alt ? (allcat = 1):(K_B2_Attack.dragstart());
       K_B2_Release.k_collision() ? alt ? (allrel = 1):(K_B2_Release.dragstart());
       K_B2_EnvA.k_collision() ? alt ? (alleat = 1):(K_B2_EnvA.dragstart());
       K_B2_EnvS.k_collision() ? alt ? (allsus = 1):(K_B2_EnvS.dragstart());
       //g_collision(Band2_Solo_Handle_x, Band2_Solo_Handle_y, 20*zoom, 20*zoom) ? (slider(B_B2_Solo.slider) ==1? slider(B_B2_Solo.slider) = 0 : slider(B_B2_Solo.slider) = 1; slider_automate(slider(B_B2_Solo.slider)); B_B2_Solo.quicklink_button();caller = 1);
       g_collision(band2_Solo_Handle_x, band2_Solo_Handle_y, 20*zoom, 20*zoom) ? (
       slider(B_B2_Solo.slider) ==1? slider(B_B2_Solo.slider) = 0 : 
       slider(B_B2_Solo.slider) ==0? slider(B_B2_Solo.slider) = 1 :
       slider(B_B2_Solo.slider) ==2? slider(B_B2_Solo.slider) = 3 :
       slider(B_B2_Solo.slider) ==3? slider(B_B2_Solo.slider) = 2;
       slider_automate(slider(B_B2_Solo.slider));
       B_B2_Solo.quicklink_button();
       caller = 1);
       g_collision(band2_MS_Handle_x+3*zoom, band2_MS_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       alt ? (all_MS_procesing = slider(B_B2_Solo.slider) + 1):(
       slider(B_B2_Solo.slider) ==1? slider(B_B2_Solo.slider) = 3 : 
       slider(B_B2_Solo.slider) ==0? slider(B_B2_Solo.slider) = 2 :
       slider(B_B2_Solo.slider) ==2? slider(B_B2_Solo.slider) = 0 :
       slider(B_B2_Solo.slider) ==3? slider(B_B2_Solo.slider) = 1;
       slider_automate(slider(B_B2_Solo.slider));
       B_B2_Solo.quicklink_button();
       caller = 1);
       );
       
       g_collision(Band2_Flip_Handle_x, Band2_Flip_Handle_y, 35*zoom, 17*zoom) ? (
       slider(B_B2_EnvOn.slider) ==0? slider(B_B2_EnvOn.slider) = 3:
       slider(B_B2_EnvOn.slider) ==1? slider(B_B2_EnvOn.slider) = 2 :
       slider(B_B2_EnvOn.slider) ==2? slider(B_B2_EnvOn.slider) = 1 :
       slider(B_B2_EnvOn.slider) ==3? slider(B_B2_EnvOn.slider) = 0;
       slider_automate(slider(B_B2_EnvOn.slider)); B_B2_EnvOn.quicklink_button();caller = 1;
       alt ? (
            allflip = 2;;
            );
       );
       g_collision(Band2_Env_Handle_x+3*zoom, Band2_Env_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       slider(B_B2_EnvOn.slider) ==0? slider(B_B2_EnvOn.slider) = 1:
       slider(B_B2_EnvOn.slider) ==1? slider(B_B2_EnvOn.slider) = 0 :
       slider(B_B2_EnvOn.slider) ==2? slider(B_B2_EnvOn.slider) = 3 :
       slider(B_B2_EnvOn.slider) ==3? slider(B_B2_EnvOn.slider) = 2;
       slider_automate(slider(B_B2_EnvOn.slider)); B_B2_EnvOn.quicklink_button();
       alt ? (
            allenv = 2;;
            );
       caller = 1);
       g_collision(Band2_Comp_Handle_x+3*zoom, Band2_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (alt ? allcompon = 2;slider(B_B2_CompOn.slider) ==1? slider(B_B2_CompOn.slider) = 0 : slider(B_B2_CompOn.slider) = 1; slider_automate(slider(B_B2_CompOn.slider)); B_B2_CompOn.quicklink_button();caller = 1);
       g_collision(Band2_Comp_Handle_x+3*zoom, Band2_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom) ? shift ? (Gr1_Meter.db_val_Max_GR = Gr2_Meter.db_val_Max_GR = Gr3_Meter.db_val_Max_GR = Gr4_Meter.db_val_Max_GR = Gr5_Meter.db_val_Max_GR = 0):(GR2_Meter.db_val_Max_GR = 0);
       );
       
       cuts > 1 ? (
       K_B3_MS.k_collision() ? alt ? (allms = 1):(K_B3_MS.dragstart());
       K_B3_Out.k_collision() ? alt ? (allgain = 1):(K_B3_Out.dragstart());
       K_B3_Thresh.k_collision() ? alt ? (allthresh = 1):(K_B3_Thresh.dragstart());
       K_B3_Ratio.k_collision() ? alt ? (allratio = 1):(K_B3_Ratio.dragstart());
       K_B3_Attack.k_collision() ? alt ? (allcat = 1):(K_B3_Attack.dragstart());
       K_B3_Release.k_collision() ? alt ? (allrel = 1):(K_B3_Release.dragstart());
       K_B3_EnvA.k_collision() ? alt ? (alleat = 1):(K_B3_EnvA.dragstart());
       K_B3_EnvS.k_collision() ? alt ? (allsus = 1):(K_B3_EnvS.dragstart());
       //g_collision(Band3_Solo_Handle_x, Band3_Solo_Handle_y, 20*zoom, 20*zoom) ? (slider(B_B3_Solo.slider) ==1? slider(B_B3_Solo.slider) = 0 : slider(B_B3_Solo.slider) = 1; slider_automate(slider(B_B3_Solo.slider)); B_B3_Solo.quicklink_button();caller = 1);
       g_collision(band3_Solo_Handle_x, band3_Solo_Handle_y, 20*zoom, 20*zoom) ? (
       slider(B_B3_Solo.slider) ==1? slider(B_B3_Solo.slider) = 0 : 
       slider(B_B3_Solo.slider) ==0? slider(B_B3_Solo.slider) = 1 :
       slider(B_B3_Solo.slider) ==2? slider(B_B3_Solo.slider) = 3 :
       slider(B_B3_Solo.slider) ==3? slider(B_B3_Solo.slider) = 2;
       slider_automate(slider(B_B3_Solo.slider));
       B_B3_Solo.quicklink_button();
       caller = 1);
       g_collision(band3_MS_Handle_x+3*zoom, band3_MS_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       alt ? (all_MS_procesing = slider(B_B3_Solo.slider) + 1):(
       slider(B_B3_Solo.slider) ==1? slider(B_B3_Solo.slider) = 3 : 
       slider(B_B3_Solo.slider) ==0? slider(B_B3_Solo.slider) = 2 :
       slider(B_B3_Solo.slider) ==2? slider(B_B3_Solo.slider) = 0 :
       slider(B_B3_Solo.slider) ==3? slider(B_B3_Solo.slider) = 1;
       slider_automate(slider(B_B3_Solo.slider));
       B_B3_Solo.quicklink_button();
       caller = 1);
       );
       
       g_collision(Band3_Flip_Handle_x, Band3_Flip_Handle_y, 35*zoom, 17*zoom) ? (
       slider(B_B3_EnvOn.slider) ==0? slider(B_B3_EnvOn.slider) = 3:
       slider(B_B3_EnvOn.slider) ==1? slider(B_B3_EnvOn.slider) = 2 :
       slider(B_B3_EnvOn.slider) ==2? slider(B_B3_EnvOn.slider) = 1 :
       slider(B_B3_EnvOn.slider) ==3? slider(B_B3_EnvOn.slider) = 0;
       slider_automate(slider(B_B3_EnvOn.slider)); B_B3_EnvOn.quicklink_button();caller = 1;
       alt ? (
            allflip = 3;
            );
       );
       g_collision(Band3_Env_Handle_x+3*zoom, Band3_Env_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       slider(B_B3_EnvOn.slider) ==0? slider(B_B3_EnvOn.slider) = 1:
       slider(B_B3_EnvOn.slider) ==1? slider(B_B3_EnvOn.slider) = 0 :
       slider(B_B3_EnvOn.slider) ==2? slider(B_B3_EnvOn.slider) = 3 :
       slider(B_B3_EnvOn.slider) ==3? slider(B_B3_EnvOn.slider) = 2;
       slider_automate(slider(B_B3_EnvOn.slider)); B_B3_EnvOn.quicklink_button();
       alt ? (
            allenv = 3;;
            );
       caller = 1);
       g_collision(Band3_Comp_Handle_x+3*zoom, Band3_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (alt ? allcompon = 3;slider(B_B3_CompOn.slider) ==1? slider(B_B3_CompOn.slider) = 0 : slider(B_B3_CompOn.slider) = 1; slider_automate(slider(B_B3_CompOn.slider)); B_B3_CompOn.quicklink_button();caller = 1);
       g_collision(Band3_Comp_Handle_x+3*zoom, Band3_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom) ? shift ? (Gr1_Meter.db_val_Max_GR = Gr2_Meter.db_val_Max_GR = Gr3_Meter.db_val_Max_GR = Gr4_Meter.db_val_Max_GR = Gr5_Meter.db_val_Max_GR = 0):(GR3_Meter.db_val_Max_GR = 0);
       );
       
       cuts > 2 ? (
       K_B4_MS.k_collision() ? alt ? (allms = 1):(K_B4_MS.dragstart());
       K_B4_Out.k_collision() ? alt ? (allgain = 1):(K_B4_Out.dragstart());
       K_B4_Thresh.k_collision() ? alt ? (allthresh = 1):(K_B4_Thresh.dragstart());
       K_B4_Ratio.k_collision() ? alt ? (allratio = 1):(K_B4_Ratio.dragstart());
       K_B4_Attack.k_collision() ? alt ? (allcat = 1):(K_B4_Attack.dragstart());
       K_B4_Release.k_collision() ? alt ? (allrel = 1):(K_B4_Release.dragstart());
       K_B4_EnvA.k_collision() ? alt ? (alleat = 1):(K_B4_EnvA.dragstart());
       K_B4_EnvS.k_collision() ? alt ? (allsus = 1):(K_B4_EnvS.dragstart());
       //g_collision(Band4_Solo_Handle_x, Band4_Solo_Handle_y, 20*zoom, 20*zoom) ? (slider(B_B4_Solo.slider) ==1? slider(B_B4_Solo.slider) = 0 : slider(B_B4_Solo.slider) = 1; slider_automate(slider(B_B4_Solo.slider)); B_B4_Solo.quicklink_button();caller = 1);
       g_collision(band4_Solo_Handle_x, band4_Solo_Handle_y, 20*zoom, 20*zoom) ? (
       slider(B_B4_Solo.slider) ==1? slider(B_B4_Solo.slider) = 0 : 
       slider(B_B4_Solo.slider) ==0? slider(B_B4_Solo.slider) = 1 :
       slider(B_B4_Solo.slider) ==2? slider(B_B4_Solo.slider) = 3 :
       slider(B_B4_Solo.slider) ==3? slider(B_B4_Solo.slider) = 2;
       slider_automate(slider(B_B4_Solo.slider));
       B_B4_Solo.quicklink_button();
       caller = 1);
       g_collision(band4_MS_Handle_x+3*zoom, band4_MS_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       alt ? (all_MS_procesing = slider(B_B4_Solo.slider) + 1):(
       slider(B_B4_Solo.slider) ==1? slider(B_B4_Solo.slider) = 3 : 
       slider(B_B4_Solo.slider) ==0? slider(B_B4_Solo.slider) = 2 :
       slider(B_B4_Solo.slider) ==2? slider(B_B4_Solo.slider) = 0 :
       slider(B_B4_Solo.slider) ==3? slider(B_B4_Solo.slider) = 1;
       slider_automate(slider(B_B4_Solo.slider));
       B_B4_Solo.quicklink_button();
       caller = 1);
       );
       
       g_collision(Band4_Flip_Handle_x, Band4_Flip_Handle_y, 35*zoom, 17*zoom) ? (
       slider(B_B4_EnvOn.slider) ==0? slider(B_B4_EnvOn.slider) = 3:
       slider(B_B4_EnvOn.slider) ==1? slider(B_B4_EnvOn.slider) = 2 :
       slider(B_B4_EnvOn.slider) ==2? slider(B_B4_EnvOn.slider) = 1 :
       slider(B_B4_EnvOn.slider) ==3? slider(B_B4_EnvOn.slider) = 0;
       slider_automate(slider(B_B4_EnvOn.slider)); B_B4_EnvOn.quicklink_button();caller = 1;
       alt ? (
            allflip = 4;;
            );
            );
       g_collision(Band4_Env_Handle_x+3*zoom, Band4_Env_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       slider(B_B4_EnvOn.slider) ==0? slider(B_B4_EnvOn.slider) = 1:
       slider(B_B4_EnvOn.slider) ==1? slider(B_B4_EnvOn.slider) = 0 :
       slider(B_B4_EnvOn.slider) ==2? slider(B_B4_EnvOn.slider) = 3 :
       slider(B_B4_EnvOn.slider) ==3? slider(B_B4_EnvOn.slider) = 2;
       slider_automate(slider(B_B4_EnvOn.slider)); B_B4_EnvOn.quicklink_button();
       alt ? (
            allenv = 4;;
            );
       caller = 1);
       g_collision(Band4_Comp_Handle_x+3*zoom, Band4_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (alt ? allcompon = 4;slider(B_B4_CompOn.slider) ==1? slider(B_B4_CompOn.slider) = 0 : slider(B_B4_CompOn.slider) = 1; slider_automate(slider(B_B4_CompOn.slider)); B_B4_CompOn.quicklink_button();caller = 1);
       g_collision(Band4_Comp_Handle_x+3*zoom, Band4_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom) ? shift ? (Gr1_Meter.db_val_Max_GR = Gr2_Meter.db_val_Max_GR = Gr3_Meter.db_val_Max_GR = Gr4_Meter.db_val_Max_GR = Gr5_Meter.db_val_Max_GR = 0):(GR4_Meter.db_val_Max_GR = 0);
       );
       
       cuts > 3 ? (
       K_B5_MS.k_collision() ? alt ? (allms = 1):(K_B5_MS.dragstart());
       K_B5_Out.k_collision() ?alt ? (allgain = 1):( K_B5_Out.dragstart());
       K_B5_Thresh.k_collision() ? alt ? (allthresh = 1):(K_B5_Thresh.dragstart());
       K_B5_Ratio.k_collision() ? alt ? (allratio = 1):(K_B5_Ratio.dragstart());
       K_B5_Attack.k_collision() ? alt ? (allcat = 1):(K_B5_Attack.dragstart());
       K_B5_Release.k_collision() ? alt ? (allrel = 1):(K_B5_Release.dragstart());
       K_B5_EnvA.k_collision() ? alt ? (alleat = 1):(K_B5_EnvA.dragstart());
       K_B5_EnvS.k_collision() ? alt ? (allsus = 1):(K_B5_EnvS.dragstart());
       //g_collision(Band5_Solo_Handle_x, Band5_Solo_Handle_y, 20*zoom, 20*zoom) ? (slider(B_B5_Solo.slider) ==1? slider(B_B5_Solo.slider) = 0 : slider(B_B5_Solo.slider) = 1; slider_automate(slider(B_B5_Solo.slider)); B_B5_Solo.quicklink_button();caller = 1);
       g_collision(band5_Solo_Handle_x, band5_Solo_Handle_y, 20*zoom, 20*zoom) ? (
       slider(B_B5_Solo.slider) ==1? slider(B_B5_Solo.slider) = 0 : 
       slider(B_B5_Solo.slider) ==0? slider(B_B5_Solo.slider) = 1 :
       slider(B_B5_Solo.slider) ==2? slider(B_B5_Solo.slider) = 3 :
       slider(B_B5_Solo.slider) ==3? slider(B_B5_Solo.slider) = 2;
       slider_automate(slider(B_B5_Solo.slider));
       B_B5_Solo.quicklink_button();
       caller = 1);
       g_collision(band5_MS_Handle_x+3*zoom, band5_MS_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       alt ? (all_MS_procesing = slider(B_B5_Solo.slider) + 1):(
       slider(B_B5_Solo.slider) ==1? slider(B_B5_Solo.slider) = 3 : 
       slider(B_B5_Solo.slider) ==0? slider(B_B5_Solo.slider) = 2 :
       slider(B_B5_Solo.slider) ==2? slider(B_B5_Solo.slider) = 0 :
       slider(B_B5_Solo.slider) ==3? slider(B_B5_Solo.slider) = 1;
       slider_automate(slider(B_B5_Solo.slider));
       B_B5_Solo.quicklink_button();
       caller = 1);
       );
       
       g_collision(Band5_Flip_Handle_x, Band5_Flip_Handle_y, 35*zoom, 17*zoom) ? (
       slider(B_B5_EnvOn.slider) ==0? slider(B_B5_EnvOn.slider) = 3:
       slider(B_B5_EnvOn.slider) ==1? slider(B_B5_EnvOn.slider) = 2 :
       slider(B_B5_EnvOn.slider) ==2? slider(B_B5_EnvOn.slider) = 1 :
       slider(B_B5_EnvOn.slider) ==3? slider(B_B5_EnvOn.slider) = 0;
       slider_automate(slider(B_B5_EnvOn.slider)); B_B5_EnvOn.quicklink_button();caller = 1;
       alt ? (
            allflip = 5;;
            );
       );
       g_collision(Band5_Env_Handle_x+3*zoom, Band5_Env_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (
       slider(B_B5_EnvOn.slider) ==0? slider(B_B5_EnvOn.slider) = 1:
       slider(B_B5_EnvOn.slider) ==1? slider(B_B5_EnvOn.slider) = 0 :
       slider(B_B5_EnvOn.slider) ==2? slider(B_B5_EnvOn.slider) = 3 :
       slider(B_B5_EnvOn.slider) ==3? slider(B_B5_EnvOn.slider) = 2;
       slider_automate(slider(B_B5_EnvOn.slider)); B_B5_EnvOn.quicklink_button();
       alt ? (
            allenv = 5;;
            );
       caller = 1);
       g_collision(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y+3*zoom, 18*zoom, 18*zoom) ? (alt ? allcompon = 5;slider(B_B5_CompOn.slider) ==1? slider(B_B5_CompOn.slider) = 0 : slider(B_B5_CompOn.slider) = 1; slider_automate(slider(B_B5_CompOn.slider)); B_B5_CompOn.quicklink_button();caller = 1);
       g_collision(Band5_Comp_Handle_x+3*zoom, Band5_Comp_Handle_y + 153*zoom, 30*zoom, 15*zoom) ? shift ? (Gr1_Meter.db_val_Max_GR = Gr2_Meter.db_val_Max_GR = Gr3_Meter.db_val_Max_GR = Gr4_Meter.db_val_Max_GR = Gr5_Meter.db_val_Max_GR = 0):(GR5_Meter.db_val_Max_GR = 0);
       );
       
       allms ? (
       allms = 0;
       K_B1_MS.dragstart(); K_B2_MS.dragstart(); K_B3_MS.dragstart(); K_B4_MS.dragstart(); K_B5_MS.dragstart();
       );
       allgain ? (
       allgain = 0;
       K_B1_Out.dragstart(); K_B2_Out.dragstart(); K_B3_Out.dragstart(); K_B4_Out.dragstart(); K_B5_Out.dragstart();
       );
       allthresh ? (
       allthresh = 0;
       K_B1_Thresh.dragstart(); K_B2_Thresh.dragstart(); K_B3_Thresh.dragstart(); K_B4_Thresh.dragstart(); K_B5_Thresh.dragstart();
       );
       allratio ? (
       allratio = 0;
       K_B1_Ratio.dragstart(); K_B2_Ratio.dragstart(); K_B3_Ratio.dragstart(); K_B4_Ratio.dragstart(); K_B5_Ratio.dragstart();
       );
       allcat ? (
       allcat = 0;
       K_B1_Attack.dragstart(); K_B2_Attack.dragstart(); K_B3_Attack.dragstart(); K_B4_Attack.dragstart(); K_B5_Attack.dragstart();
       );
       allrel ? (
       allrel = 0;
       K_B1_Release.dragstart(); K_B2_Release.dragstart(); K_B3_Release.dragstart(); K_B4_Release.dragstart(); K_B5_Release.dragstart();
       );
       alleat ? (
       alleat = 0;
       K_B1_EnvA.dragstart(); K_B2_EnvA.dragstart(); K_B3_EnvA.dragstart(); K_B4_EnvA.dragstart(); K_B5_EnvA.dragstart();
       );
       allsus ? (
       allsus = 0;
       K_B1_EnvS.dragstart(); K_B2_EnvS.dragstart(); K_B3_EnvS.dragstart(); K_B4_EnvS.dragstart(); K_B5_EnvS.dragstart();
       );
       
       allcompon == 1 ? onoff = slider(B_B1_CompOn.slider);
       allcompon == 2 ? onoff = slider(B_B2_CompOn.slider);
       allcompon == 3 ? onoff = slider(B_B3_CompOn.slider);
       allcompon == 4 ? onoff = slider(B_B4_CompOn.slider);
       allcompon == 5 ? onoff = slider(B_B5_CompOn.slider);
       allcompon ? (
       allcompon = 0;
       slider(B_B1_CompOn.slider) = slider(B_B2_CompOn.slider) = slider(B_B3_CompOn.slider) = slider(B_B4_CompOn.slider) = slider(B_B5_CompOn.slider) = onoff;
       caller = 1;
       );
       
       
       allEnv == 1 ? onoff = slider(B_B1_EnvOn.slider);
       allEnv == 2 ? onoff = slider(B_B2_EnvOn.slider);
       allEnv == 3 ? onoff = slider(B_B3_EnvOn.slider);
       allEnv == 4 ? onoff = slider(B_B4_EnvOn.slider);
       allEnv == 5 ? onoff = slider(B_B5_EnvOn.slider);
       allenv ? (
       allenv != 1 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B1_EnvOn.slider) == 0 ? slider(B_B1_EnvOn.slider) = 1; 
          slider(B_B1_EnvOn.slider) == 3 ? slider(B_B1_EnvOn.slider) = 2;
          ):(
          slider(B_B1_EnvOn.slider) == 1 ? slider(B_B1_EnvOn.slider) = 0; 
          slider(B_B1_EnvOn.slider) == 2 ? slider(B_B1_EnvOn.slider) = 3;
          );
       );
       allenv != 2 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B2_EnvOn.slider) == 0 ? slider(B_B2_EnvOn.slider) = 1; 
          slider(B_B2_EnvOn.slider) == 3 ? slider(B_B2_EnvOn.slider) = 2;
          ):(
          slider(B_B2_EnvOn.slider) == 1 ? slider(B_B2_EnvOn.slider) = 0; 
          slider(B_B2_EnvOn.slider) == 2 ? slider(B_B2_EnvOn.slider) = 3;
          );
       );
       allenv != 3 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B3_EnvOn.slider) == 0 ? slider(B_B3_EnvOn.slider) = 1; 
          slider(B_B3_EnvOn.slider) == 3 ? slider(B_B3_EnvOn.slider) = 2;
          ):(
          slider(B_B3_EnvOn.slider) == 1 ? slider(B_B3_EnvOn.slider) = 0; 
          slider(B_B3_EnvOn.slider) == 2 ? slider(B_B3_EnvOn.slider) = 3;
          );
       );
       allenv != 4 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B4_EnvOn.slider) == 0 ? slider(B_B4_EnvOn.slider) = 1; 
          slider(B_B4_EnvOn.slider) == 3 ? slider(B_B4_EnvOn.slider) = 2;
          ):(
          slider(B_B4_EnvOn.slider) == 1 ? slider(B_B4_EnvOn.slider) = 0; 
          slider(B_B4_EnvOn.slider) == 2 ? slider(B_B4_EnvOn.slider) = 3;
          );
       );
       allenv != 5 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B5_EnvOn.slider) == 0 ? slider(B_B5_EnvOn.slider) = 1; 
          slider(B_B5_EnvOn.slider) == 3 ? slider(B_B5_EnvOn.slider) = 2;
          ):(
          slider(B_B5_EnvOn.slider) == 1 ? slider(B_B5_EnvOn.slider) = 0; 
          slider(B_B5_EnvOn.slider) == 2 ? slider(B_B5_EnvOn.slider) = 3;
          );
       );
       allenv = 0;
       caller = 1;
       );
       
       allflip == 1 ? onoff = slider(B_B1_EnvOn.slider);
       allflip == 2 ? onoff = slider(B_B2_EnvOn.slider);
       allflip == 3 ? onoff = slider(B_B3_EnvOn.slider);
       allflip == 4 ? onoff = slider(B_B4_EnvOn.slider);
       allflip == 5 ? onoff = slider(B_B5_EnvOn.slider);
       allflip ? (
       allflip != 1 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B1_EnvOn.slider) == 2 ? slider(B_B1_EnvOn.slider) = 1:
          slider(B_B1_EnvOn.slider) == 1 ? slider(B_B1_EnvOn.slider) = 2;
          ):(
          slider(B_B1_EnvOn.slider) == 3 ? slider(B_B1_EnvOn.slider) = 0:
          slider(B_B1_EnvOn.slider) == 0 ? slider(B_B1_EnvOn.slider) = 3;
          );
       );
       allflip != 2 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B2_EnvOn.slider) == 2 ? slider(B_B2_EnvOn.slider) = 1:
          slider(B_B2_EnvOn.slider) == 1 ? slider(B_B2_EnvOn.slider) = 2;
          ):(
          slider(B_B2_EnvOn.slider) == 3 ? slider(B_B2_EnvOn.slider) = 0: 
          slider(B_B2_EnvOn.slider) == 0 ? slider(B_B2_EnvOn.slider) = 3;
          );
       );
       allflip != 3 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B3_EnvOn.slider) == 2 ? slider(B_B3_EnvOn.slider) = 1: 
          slider(B_B3_EnvOn.slider) == 1 ? slider(B_B3_EnvOn.slider) = 2;
          ):(
          slider(B_B3_EnvOn.slider) == 3 ? slider(B_B3_EnvOn.slider) = 0: 
          slider(B_B3_EnvOn.slider) == 0 ? slider(B_B3_EnvOn.slider) = 3;
          );
       );
       allflip != 4 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B4_EnvOn.slider) == 2 ? slider(B_B4_EnvOn.slider) = 1: 
          slider(B_B4_EnvOn.slider) == 1 ? slider(B_B4_EnvOn.slider) = 2;
          ):(
          slider(B_B4_EnvOn.slider) == 3 ? slider(B_B4_EnvOn.slider) = 0: 
          slider(B_B4_EnvOn.slider) == 0 ? slider(B_B4_EnvOn.slider) = 3;
          );
       );
       allflip != 5 ? (
          onoff == 1 || onoff == 2 ? (
          slider(B_B5_EnvOn.slider) == 2 ? slider(B_B5_EnvOn.slider) = 1: 
          slider(B_B5_EnvOn.slider) == 1 ? slider(B_B5_EnvOn.slider) = 2;
          ):(
          slider(B_B5_EnvOn.slider) == 3 ? slider(B_B5_EnvOn.slider) = 0: 
          slider(B_B5_EnvOn.slider) == 0 ? slider(B_B5_EnvOn.slider) = 3;
          );
       );
       allflip = 0;
       caller = 1;
       );
       
       all_MS_procesing ? (
       all_MS_procesing -= 1;
       all_ms_procesing == 0 ? onoff = 0;
       all_ms_procesing == 1 ? onoff = 0;
       all_ms_procesing == 2 ? onoff = 1;
       all_ms_procesing == 3 ? onoff = 1;
       
          onoff == 1 ? (
          slider(B_B1_Solo.slider) == 2 ? slider(B_B1_Solo.slider) = 0; 
          slider(B_B1_Solo.slider) == 3 ? slider(B_B1_Solo.slider) = 1;
          slider(B_B2_Solo.slider) == 2 ? slider(B_B2_Solo.slider) = 0; 
          slider(B_B2_Solo.slider) == 3 ? slider(B_B2_Solo.slider) = 1;
          slider(B_B3_Solo.slider) == 2 ? slider(B_B3_Solo.slider) = 0; 
          slider(B_B3_Solo.slider) == 3 ? slider(B_B3_Solo.slider) = 1;
          slider(B_B4_Solo.slider) == 2 ? slider(B_B4_Solo.slider) = 0; 
          slider(B_B4_Solo.slider) == 3 ? slider(B_B4_Solo.slider) = 1;
          slider(B_B5_Solo.slider) == 2 ? slider(B_B5_Solo.slider) = 0; 
          slider(B_B5_Solo.slider) == 3 ? slider(B_B5_Solo.slider) = 1;
          ):(
          slider(B_B1_Solo.slider) == 0 ? slider(B_B1_Solo.slider) = 2; 
          slider(B_B1_Solo.slider) == 1 ? slider(B_B1_Solo.slider) = 3;
          slider(B_B2_Solo.slider) == 0 ? slider(B_B2_Solo.slider) = 2; 
          slider(B_B2_Solo.slider) == 1 ? slider(B_B2_Solo.slider) = 3;
          slider(B_B3_Solo.slider) == 0 ? slider(B_B3_Solo.slider) = 2; 
          slider(B_B3_Solo.slider) == 1 ? slider(B_B3_Solo.slider) = 3;
          slider(B_B4_Solo.slider) == 0 ? slider(B_B4_Solo.slider) = 2; 
          slider(B_B4_Solo.slider) == 1 ? slider(B_B4_Solo.slider) = 3;
          slider(B_B5_Solo.slider) == 0 ? slider(B_B5_Solo.slider) = 2; 
          slider(B_B5_Solo.slider) == 1 ? slider(B_B5_Solo.slider) = 3;
          );

       all_ms_procesing = 0;
       caller = 1;
       );
       
       
       
       cuts > 0 ? g_collision(freq1_handle_x -7*zoom,  sgfx_y + 4*sgfx_h/5 -7*zoom, 14*zoom, 14*zoom) ? shift_alt ? (number_input = 2; K_freq1.number_input_start_freq()) : (Freq1_grab = 1;circle_dragging = 1);
       cuts > 1 ? g_collision(freq2_handle_x -7*zoom,  sgfx_y + 3*sgfx_h/5 -7*zoom, 14*zoom, 14*zoom) ? shift_alt ? (number_input = 2; K_freq2.number_input_start_freq()) : (Freq2_grab = 1;circle_dragging = 1);
       cuts > 2 ? g_collision(freq3_handle_x -7*zoom,  sgfx_y + 2*sgfx_h/5 -7*zoom, 14*zoom, 14*zoom) ? shift_alt ? (number_input = 2; K_freq3.number_input_start_freq()) : (Freq3_grab = 1;circle_dragging = 1);
       cuts > 3 ? g_collision(freq4_handle_x -7*zoom,  sgfx_y + 1*sgfx_h/5 -7*zoom, 14*zoom, 14*zoom) ? shift_alt ? (number_input = 2; K_freq4.number_input_start_freq()) : (Freq4_grab = 1;circle_dragging = 1);
       ); 
       
       mouseclick == -1 ? (
       K_B1_MS.dragstop();
       K_B1_Out.dragstop();
       K_B1_Thresh.dragstop();
       K_B1_Ratio.dragstop();
       K_B1_Attack.dragstop();
       K_B1_Release.dragstop();
       K_B1_EnvA.dragstop();
       K_B1_EnvS.dragstop();
       cuts > 0 ? (
       K_B2_MS.dragstop();
       K_B2_Out.dragstop();
       K_B2_Thresh.dragstop();
       K_B2_Ratio.dragstop();
       K_B2_Attack.dragstop();
       K_B2_Release.dragstop();
       K_B2_EnvA.dragstop();
       K_B2_EnvS.dragstop();
       );
       cuts > 1 ? (
       K_B3_MS.dragstop();
       K_B3_Out.dragstop();
       K_B3_Thresh.dragstop();
       K_B3_Ratio.dragstop();
       K_B3_Attack.dragstop();
       K_B3_Release.dragstop();
       K_B3_EnvA.dragstop();
       K_B3_EnvS.dragstop();
       );
       cuts > 2 ? (
       K_B4_MS.dragstop();
       K_B4_Out.dragstop();
       K_B4_Thresh.dragstop();
       K_B4_Ratio.dragstop();
       K_B4_Attack.dragstop();
       K_B4_Release.dragstop();
       K_B4_EnvA.dragstop();
       K_B4_EnvS.dragstop();
       );
       cuts > 3 ? (
       K_B5_MS.dragstop();
       K_B5_Out.dragstop();
       K_B5_Thresh.dragstop();
       K_B5_Ratio.dragstop();
       K_B5_Attack.dragstop();
       K_B5_Release.dragstop();
       K_B5_EnvA.dragstop();
       K_B5_EnvS.dragstop();
       );
       Freq1_grab = Freq2_grab = Freq3_grab = Freq4_grab = 0;
       );
       
       
       mouse_wheel ? 
           (
       K_B1_MS.k_collision() ? K_B1_MS.potwheel();
       K_B1_Out.k_collision() ? K_B1_Out.potwheel();
       K_B1_Thresh.k_collision() ? K_B1_Thresh.potwheel();
       K_B1_Ratio.k_collision() ? K_B1_Ratio.potwheel();
       K_B1_Attack.k_collision() ? K_B1_Attack.potwheel();
       K_B1_Release.k_collision() ? K_B1_Release.potwheel();
       K_B1_EnvA.k_collision() ? K_B1_EnvA.potwheel();
       K_B1_EnvS.k_collision() ? K_B1_EnvS.potwheel();
       cuts > 0 ? (
       K_B2_MS.k_collision() ? K_B2_MS.potwheel();
       K_B2_Out.k_collision() ? K_B2_Out.potwheel();
       K_B2_Thresh.k_collision() ? K_B2_Thresh.potwheel();
       K_B2_Ratio.k_collision() ? K_B2_Ratio.potwheel();
       K_B2_Attack.k_collision() ? K_B2_Attack.potwheel();
       K_B2_Release.k_collision() ? K_B2_Release.potwheel();
       K_B2_EnvA.k_collision() ? K_B2_EnvA.potwheel();
       K_B2_EnvS.k_collision() ? K_B2_EnvS.potwheel();
       );
       cuts > 1 ? (
       K_B3_MS.k_collision() ? K_B3_MS.potwheel();
       K_B3_Out.k_collision() ? K_B3_Out.potwheel();
       K_B3_Thresh.k_collision() ? K_B3_Thresh.potwheel();
       K_B3_Ratio.k_collision() ? K_B3_Ratio.potwheel();
       K_B3_Attack.k_collision() ? K_B3_Attack.potwheel();
       K_B3_Release.k_collision() ? K_B3_Release.potwheel();
       K_B3_EnvA.k_collision() ? K_B3_EnvA.potwheel();
       K_B3_EnvS.k_collision() ? K_B3_EnvS.potwheel();
       );
       cuts > 2 ? (
       K_B4_MS.k_collision() ? K_B4_MS.potwheel();
       K_B4_Out.k_collision() ? K_B4_Out.potwheel();
       K_B4_Thresh.k_collision() ? K_B4_Thresh.potwheel();
       K_B4_Ratio.k_collision() ? K_B4_Ratio.potwheel();
       K_B4_Attack.k_collision() ? K_B4_Attack.potwheel();
       K_B4_Release.k_collision() ? K_B4_Release.potwheel();
       K_B4_EnvA.k_collision() ? K_B4_EnvA.potwheel();
       K_B4_EnvS.k_collision() ? K_B4_EnvS.potwheel();
       );
       cuts > 3 ? (
       K_B5_MS.k_collision() ? K_B5_MS.potwheel();
       K_B5_Out.k_collision() ? K_B5_Out.potwheel();
       K_B5_Thresh.k_collision() ? K_B5_Thresh.potwheel();
       K_B5_Ratio.k_collision() ? K_B5_Ratio.potwheel();
       K_B5_Attack.k_collision() ? K_B5_Attack.potwheel();
       K_B5_Release.k_collision() ? K_B5_Release.potwheel();
       K_B5_EnvA.k_collision() ? K_B5_EnvA.potwheel();
       K_B5_EnvS.k_collision() ? K_B5_EnvS.potwheel();
       );
            mouse_wheel=0;
            caller = 1;
           );
        
        gfx_a=1;
       K_B1_MS.dragging ? (K_B1_MS.potdrag(); K_B1_MS.readout();caller = 1;);
       K_B1_Out.dragging ? (K_B1_Out.potdrag();K_B1_Out.readout();caller = 1;);
       K_B1_Thresh.dragging ? (K_B1_Thresh.potdrag();K_B1_Thresh.readout();caller = 1;);
       K_B1_Ratio.dragging ? (K_B1_Ratio.potdrag();K_B1_Ratio.readout();caller = 1;);
       K_B1_Attack.dragging ? (K_B1_Attack.potdrag();K_B1_Attack.readout();caller = 1;);
       K_B1_Release.dragging ? (K_B1_Release.potdrag();K_B1_Release.readout();caller = 1;);
       K_B1_EnvA.dragging ? (K_B1_EnvA.potdrag();K_B1_EnvA.readout();caller = 1;);
       K_B1_EnvS.dragging ? (K_B1_EnvS.potdrag();K_B1_EnvS.readout();caller = 1;);        

       K_B2_MS.dragging ? (K_B2_MS.potdrag(); K_B2_MS.readout();caller = 1;);
       K_B2_Out.dragging ? (K_B2_Out.potdrag();K_B2_Out.readout();caller = 1;);
       K_B2_Thresh.dragging ? (K_B2_Thresh.potdrag();K_B2_Thresh.readout();caller = 1;);
       K_B2_Ratio.dragging ? (K_B2_Ratio.potdrag();K_B2_Ratio.readout();caller = 1;);
       K_B2_Attack.dragging ? (K_B2_Attack.potdrag();K_B2_Attack.readout();caller = 1;);
       K_B2_Release.dragging ? (K_B2_Release.potdrag();K_B2_Release.readout();caller = 1;);
       K_B2_EnvA.dragging ? (K_B2_EnvA.potdrag();K_B2_EnvA.readout();caller = 1;);
       K_B2_EnvS.dragging ? (K_B2_EnvS.potdrag();K_B2_EnvS.readout();caller = 1;);   
       
       K_B3_MS.dragging ? (K_B3_MS.potdrag(); K_B3_MS.readout();caller = 1;);
       K_B3_Out.dragging ? (K_B3_Out.potdrag();K_B3_Out.readout();caller = 1;);
       K_B3_Thresh.dragging ? (K_B3_Thresh.potdrag();K_B3_Thresh.readout();caller = 1;);
       K_B3_Ratio.dragging ? (K_B3_Ratio.potdrag();K_B3_Ratio.readout();caller = 1;);
       K_B3_Attack.dragging ? (K_B3_Attack.potdrag();K_B3_Attack.readout();caller = 1;);
       K_B3_Release.dragging ? (K_B3_Release.potdrag();K_B3_Release.readout();caller = 1;);
       K_B3_EnvA.dragging ? (K_B3_EnvA.potdrag();K_B3_EnvA.readout();caller = 1;);
       K_B3_EnvS.dragging ? (K_B3_EnvS.potdrag();K_B3_EnvS.readout();caller = 1;);     
       
       K_B4_MS.dragging ? (K_B4_MS.potdrag(); K_B4_MS.readout();caller = 1;);
       K_B4_Out.dragging ? (K_B4_Out.potdrag();K_B4_Out.readout();caller = 1;);
       K_B4_Thresh.dragging ? (K_B4_Thresh.potdrag();K_B4_Thresh.readout();caller = 1;);
       K_B4_Ratio.dragging ? (K_B4_Ratio.potdrag();K_B4_Ratio.readout();caller = 1;);
       K_B4_Attack.dragging ? (K_B4_Attack.potdrag();K_B4_Attack.readout();caller = 1;);
       K_B4_Release.dragging ? (K_B4_Release.potdrag();K_B4_Release.readout();caller = 1;);
       K_B4_EnvA.dragging ? (K_B4_EnvA.potdrag();K_B4_EnvA.readout();caller = 1;);
       K_B4_EnvS.dragging ? (K_B4_EnvS.potdrag();K_B4_EnvS.readout();caller = 1;);  
       
       K_B5_MS.dragging ? (K_B5_MS.potdrag(); K_B5_MS.readout();caller = 1;);
       K_B5_Out.dragging ? (K_B5_Out.potdrag();K_B5_Out.readout();caller = 1;);
       K_B5_Thresh.dragging ? (K_B5_Thresh.potdrag();K_B5_Thresh.readout();caller = 1;);
       K_B5_Ratio.dragging ? (K_B5_Ratio.potdrag();K_B5_Ratio.readout();caller = 1;);
       K_B5_Attack.dragging ? (K_B5_Attack.potdrag();K_B5_Attack.readout();caller = 1;);
       K_B5_Release.dragging ? (K_B5_Release.potdrag();K_B5_Release.readout();caller = 1;);
       K_B5_EnvA.dragging ? (K_B5_EnvA.potdrag();K_B5_EnvA.readout();caller = 1;);
       K_B5_EnvS.dragging ? (K_B5_EnvS.potdrag();K_B5_EnvS.readout();caller = 1;);   
       
       Freq1_grab == 1 ? (
       llx9 = (mouse_x-sgfx_x);///a_gfx_w)*10;
       llx9=((exp(llx9/wsc)-1)/400)*44100*2; //= slider9/44100*2.0
       llx9 /= 4;
       slider2 = min(max(0, freq_to_per(llx9,100)), 100);
       cuts > 1 ? (readout_f(min(slider2, slider3-1), 1)):(readout_f(slider2,1));
       caller = 1;
       slider_automate(slider2);
       superkey ? (
       gmem[16*64 + 1] = 2; //slider
       gmem[16*64 + 2] = slider2;
       gmem[16*64 + 3] = 2;
       );
       );
       Freq2_grab == 1 ? (
       llx9 = (mouse_x-sgfx_x);///a_gfx_w)*10;
       llx9=((exp(llx9/wsc)-1)/400)*44100*2; //= slider9/44100*2.0
       llx9 /= 4;
       slider3 = min(max(0, freq_to_per(llx9,100)), 100);
       cuts > 2 ? (readout_f(max(slider2+1,min(slider3, slider4-1)), 2)):(readout_f(max(slider2+1,slider3),2));
       caller = 1;
       slider_automate(slider3);
       superkey ? (
       gmem[16*64 + 1] = 3; //slider
       gmem[16*64 + 2] = slider3;
       gmem[16*64 + 3] = 2;
       );
       );
       Freq3_grab == 1 ? (
       llx9 = (mouse_x-sgfx_x);///a_gfx_w)*10;
       llx9=((exp(llx9/wsc)-1)/400)*44100*2; //= slider9/44100*2.0
       llx9 /= 4;
       slider4 = min(max(0, freq_to_per(llx9,100)), 100);
       cuts > 3 ? (readout_f(max(slider3+1,min(slider4, slider5-1)), 3)):(readout_f(max(slider3+1,slider4),3));
       caller = 1;
       slider_automate(slider4);
       superkey ? (
       gmem[16*64 + 1] = 4; //slider
       gmem[16*64 + 2] = slider4;
       gmem[16*64 + 3] = 2;
       );
       );
       Freq4_grab == 1 ? (
       llx9 = (mouse_x-sgfx_x);///a_gfx_w)*10;
       llx9=((exp(llx9/wsc)-1)/400)*44100*2; //= slider9/44100*2.0
       llx9 /= 4;
       slider5 = min(max(0, freq_to_per(llx9,100)), 100);
       readout_f(max(slider4+1, slider5), 4);
       caller = 1;
       slider_automate(slider5);
       superkey ? (
       gmem[16*64 + 1] = 5; //slider
       gmem[16*64 + 2] = slider5;
       gmem[16*64 + 3] = 2;
       );
       );
       
      Link_Group == 0 ? (
      gmem[16*64 + 3] == 0 ? linkstart = 0;
      !mouse_cap ? (
      gmem[16*64 + 3] == 1 ? (linkstart == 0 ? link_old = slider(gmem[16*64 + 1]); linkstart = 1);
      gmem[16*64 + 3] == 1 ? (
           tmp_val = link_old +  gmem[16*64 + 2];
      slider(gmem[16*64 + 1]) = tmp_val;
      slider_automate(slider(gmem[16*64 + 1]));
      caller = 1;
      );
      gmem[16*64 + 3] == 2 ? (
      slider(gmem[16*64 + 1]) =  gmem[16*64 + 2];
      caller = 1;
      );
      );
      );
      
      
      
      ); // !number_input

      
      
     
      
      
      gfx_a=1;
      number_input == 1 ? number_input_show();
      number_input == 2 ? number_input_show_freq();
      //OEQ_NI == 1 ? number_input
      number_input_invalid = max(0,number_input_invalid-1);
      number_input_invalid ? ( 
      gfx_r=gfx_g=gfx_b=0;
      gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
      gfx_r=0;gfx_g=1;gfx_b=0;
      gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
      red();
      gfx_rect(zoom*number_input_x + gfx_texth+5,zoom*number_input_y, 200*zoom - (gfx_texth+5), gfx_texth+5);
      gfx_r=gfx_g=gfx_b=0.7;
      gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
      gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
      white();
      gfx_drawstr("NO VALID INPUT!");
      );
    
 ////////////////////////////////////////////////////////////////////////////////////////////// ENDE MAUS STEUERUNG





  ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
  last_clicked_item = -1;
  Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
  menu_x = 5; menu_y =5;
 
 gfx_x = menu_x * zoom; gfx_y = menu * zoom; gfx_a=1;
 //gfx_blit(menu,zoom/2,0);
 lightgrey(); //red();
 gfx_roundrect(menu_x * zoom, (menu_y + 5) * zoom, 20*zoom, 20*zoom, 0, 1);
 gfx_line((menu_x+3)*zoom, (menu_y + 11)*zoom, (menu_x+17)*zoom, (menu_y + 11)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 15)*zoom, (menu_x+17)*zoom, (menu_y + 15)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 19)*zoom, (menu_x+17)*zoom, (menu_y + 19)*zoom);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 lightgrey(); gfx_x = menu_x * zoom + 30*zoom;gfx_y += 4*zoom;
 gfx_drawstr("TUKAN STUDIOS  -  MULTIBAND PROCESSOR "); 
 gfx_setfont(1,"Arial",12*zoom,'i');
 lakeblue(); gfx_drawstr(" SERIES 2   ");
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 
 
 link_group ? (
   rgb_palette(Link_group);// gfx_a = 0.7;
   gfx_drawstr("JOINS GROUP "); gfx_drawstr(sprintf(#,"%i", link_group));
 );
 gfx_a = 1;

 
  mouseClick ? (
   g_collision(menu_x*zoom, (menu_y+5) * zoom, 20*zoom, 20*zoom) ? (
    gfx_x = menu_x*zoom;
    gfx_y = (menu_y+20)*zoom;
     
      #item2 =">Processing|";#allitems = #item2;
     while_playing == 1 ? (#item2 = "!On Playback|"):(#item2 = "On Playback|");#allitems += #item2;
     while_recording == 1 ? (#item2 = "!On Recording|"):(#item2 = "On Recording|");#allitems += #item2;
     while_stopped == 1 ? (#item2 = "<!On Stop|>Groups|"):(#item2 = "<On Stop|>Groups|");#allitems += #item2;
 
     mnu_grp_loop = 1;
     loop(16,
 
       mnu_grp_loop == 16 ? #item2 += "<";
       gmem[16*64 + 10 + mnu_grp_loop] == 1 ? ( //Gruppe schon an ?
         mnu_grp_loop == Link_Group ? ( //ist selbst in der gruppe
                 #item2 = "!Joins Group ";
         ):(
             #item2 = "Add to Group ";
         );
       ):(
         #item2 = "Start Group ";
       );
     mnu_grp_loop == 1 ? #item2 += "01";
     mnu_grp_loop == 2 ? #item2 += "02";
     mnu_grp_loop == 3 ? #item2 += "03";
     mnu_grp_loop == 4 ? #item2 += "04";
     mnu_grp_loop == 5 ? #item2 += "05";
     mnu_grp_loop == 6 ? #item2 += "06";
     mnu_grp_loop == 7 ? #item2 += "07";
     mnu_grp_loop == 8 ? #item2 += "08";
     mnu_grp_loop == 9 ? #item2 += "09";
     mnu_grp_loop == 10 ? #item2 += "10";
     mnu_grp_loop == 11 ? #item2 += "11";
     mnu_grp_loop == 12 ? #item2 += "12";
     mnu_grp_loop == 13 ? #item2 += "13";
     mnu_grp_loop == 14 ? #item2 += "14";
     mnu_grp_loop == 15 ? #item2 += "15";
     mnu_grp_loop == 16 ? #item2 += "16";
     
     #item2 += "|";
     #allitems += #item2; //sprintf(#temp, '%f',3); 
     mnu_grp_loop += 1;
     );
     
     link_group ? (#allitems += "|<Delete Group ";#allitems += sprintf(#, "%d", link_group);#allitems += "|"):#allitems += "|<#Delete Group|";

     //#allitems += "<#MENU|";
    #allitems += ">Scaling|";
    zoom_off == 0 ? (#item2 = "!Automatic Scaling|"):(#item2 = "Automatic scaling|");#allitems += #item2;
    zoom_off == 1 ? (#item2 = "<!No scaling|"):(#item2 = "<No scaling|");#allitems += #item2;
    
    #allitems += ">Knob colors|";
    colorsper == 0 ? #allitems += "!Color per function|" : #allitems += "Color per function|";
    colorsper == 1 ? #allitems += "<!Color per band|" : #allitems += "<Color per band|";
    #allitems += "|Show Info/Help";
    last_clicked_item = gfx_showmenu(#allitems);
  );
  );
 
 
 
 
  
  last_clicked_item == 1 ? (while_playing == 0 ? (while_playing = 1):(while_playing = 0);processing_update();caller=1;);
  last_clicked_item == 2 ? (while_recording == 0 ? (while_recording = 1):(while_recording = 0);processing_update();caller=1);
  last_clicked_item == 3 ? (while_stopped == 0 ? (while_stopped = 1):(while_stopped = 0);processing_update();caller=1);
 
   cgroup = last_clicked_item - 3;
  last_clicked_item > 3 && last_clicked_item < 20 ? (
     Link_Group != cgroup ? ( //eigene Linkgruppe NICHT angeklickt
         gmem[16*64 + 10 + cgroup] == 0 ? ( // Gruppe noch frei
             //gmem[16*64 + 10 + cgroup] = 1; Link_Group = cgroup; gmem[16*64 +27 + cgruop] = 1; //Gruppe Starten!
             gmem[16*64 + 10 + cgroup] = 1;Link_Group = cgroup;group_update();
         ):(
             Link_Group = cgroup;// Gruppe teilnehmen
         );
     ):( //Eigene Gruppe angeklickt
           Link_Group = 0;
     );
  
  );
  
   cgroup = last_clicked_item - 3 - 16;
  last_clicked_item == 20 ? (
    gmem[16*64 + 10 + Link_Group] = 0;Link_Group = 0;
  );
  
  
  
  last_clicked_item == 21 ? zoom_off = 0;
  last_clicked_item == 22 ? zoom_off = 1;
  
  
  last_clicked_item == 23  ? (colorsper = 0; caller = 1);
  last_clicked_item == 24  ? (colorsper = 1; caller = 1);
  
  last_clicked_item == 25  ? helpshow = 1;
  
  helpshow == 1 ? (
  gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
  gfx_rect(menu_x,menu_y+0,325*zoom,125*zoom);
  menu_x +=3;
  gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
  gfx_x = menu_x+3*zoom; gfx_y = menu_y+3*zoom;
  gfx_drawstr("TUKAN STUDIOS MULTIBAND PROCESSOR (Series 2)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Version: "); gfx_drawnumber(MBP_VERSION,2);
  gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
  gfx_drawstr("Mouse modifier options:");
  gfx_x = menu_x+3*zoom; gfx_y += 15*zoom;
  gfx_drawstr("Fine tune knobs: [shift]");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Reset knobs: [ctrl] ([cmd] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Link knobs on visible instances: [win] ([ctrl] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Link knobs across bands: [alt]");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Activate number typing: [alt]+[shift]");
  );
  
  
  ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
  




):gfx_ext_flags == 1 ? (
sgfx_x = 0;
sgfx_w = gfx_w;
sgfx_y = 0;
sgfx_h = gfx_h;



draw_analyzer();

zoom = min(gfx_w / 115, gfx_h /98);
gfx_setfont(4,"Arial",16*zoom,'b');

gfx_dest = -1;
//black();
//gfx_rect(0,0,gfx_w, gfx_h);
gfx_x = sgfx_x; gfx_y = sgfx_y;
gfx_blit(126, 1, 0);

cuts == 0 ? freq1_handle_x = sgfx_w + sgfx_x;
cuts == 1 ? freq2_handle_x = sgfx_w + sgfx_x;
cuts == 2 ? freq3_handle_x = sgfx_w + sgfx_x;
cuts == 3 ? freq4_handle_x = sgfx_w + sgfx_x;

solo == 0 || Band1_Solo ? (
gfx_r = 1; gfx_b = 1; gfx_g=0;
line_h = sgfx_y + sgfx_h / 2 - (band1_output_db + Band1_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band1_output_db)*sgfx_h/40);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(2*zoom + sgfx_x, line_h0 + line_h_loop, freq1_handle_x- 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(2*zoom + sgfx_x, line_h, freq1_handle_x- 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = 2*zoom + sgfx_x; gfx_y = sgfx_y + 1;
gfx_rectto(freq1_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);

cuts > 0 ? (
solo == 0 || Band2_Solo ? (
gfx_r = 1; gfx_b = 0; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band2_output_db + Band2_GR_db)*sgfx_h/40;;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band2_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq1_handle_x + 2*zoom, line_h0 + line_h_loop, freq2_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq1_handle_x + 2*zoom, line_h, freq2_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq1_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq2_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);


cuts > 1 ? (
solo == 0 || Band3_Solo ? (
orange();
line_h = sgfx_y + sgfx_h / 2 - (band3_output_db + Band3_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band3_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq2_handle_x + 2*zoom, line_h0 + line_h_loop, freq3_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq2_handle_x + 2*zoom, line_h, freq3_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq2_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq3_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);

cuts > 2 ? (
solo == 0 || Band4_Solo ? (
gfx_r = 0; gfx_b = 1; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band4_output_db + Band4_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band4_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq3_handle_x + 2*zoom, line_h0 + line_h_loop, freq4_handle_x - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq3_handle_x+ 2*zoom, line_h, freq4_handle_x - 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq3_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(freq4_handle_x - 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);


cuts > 3 ? (
solo == 0 || Band5_Solo ? (
gfx_r = 0.3; gfx_b = 0.5; gfx_g=1;
line_h = sgfx_y + sgfx_h / 2 - (band5_output_db + Band5_GR_db)*sgfx_h/40;
line_h = min(sgfx_y + sgfx_h - 1, line_h);
line_h0 = (sgfx_y + sgfx_h / 2 - (band5_output_db)*sgfx_h/40;);
line_h_loop = 0;
loop(line_h - line_h0,
gfx_a = 0.2 + 0.7 * line_h_loop / (line_h - line_h_0);
gfx_line(freq4_handle_x + 2*zoom, line_h0 + line_h_loop,  sgfx_x + sgfx_w - 2*zoom, line_h0 + line_h_loop);
line_h_loop += 1;
);
gfx_a = 1;
gfx_line(freq4_handle_x + 2*zoom, line_h, sgfx_x + sgfx_w- 2*zoom, line_h);
):(
black(); gfx_a = 0.5;
gfx_x = freq4_handle_x + 2*zoom; gfx_y = sgfx_y + 1;
gfx_rectto(sgfx_x + sgfx_w- 2*zoom, sgfx_y + sgfx_h - 1);
gfx_a = 1;
);
);

      #mini_group = sprintf(#, "%i", Link_Group);
      gfx_measurestr(#mini_group, mini_w, mini_h);
      gfx_x = gfx_w - mini_w - 2; gfx_y = 2;
      Link_Group ? (
        rgb_palette(Link_group);
        gfx_drawstr(#mini_group);
      );

bypass == 1 ? (
black(); gfx_a=0.4; gfx_rect(0,0,gfx_w,gfx_h);
lightgrey();
gfx_x=gfx_w / 4;gfx_y=gfx_h - gfx_h/2;gfx_a=1;
gfx_drawstr("BYPASS");
);



      mouseClick == 1 ? (
      shift ? (slider(B_Bypass.slider) == 0 ? slider(B_Bypass.slider) = 1: slider(B_Bypass.slider) = 0; caller = 1);
       );
       
       
); // gfx_ext flags


S2_sample_on == 0 ? (
gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
group_check_gfx();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  );
);
);
S2_sample_on = 0;







/*
  function createGUI(stripStart)
  (
    scaling   = gfx_ext_retina-1;
    spectrumX = 0;
    spectrumY = 0;
    spectrumW = gfx_w - 200*0;
    spectrumH = gfx_h - 25 * ( 1 + modVisible ) * (1+scaling);
    
    fontface = "Arial";
    gfx_setfont(GRID_FONT,      fontface, 14*(1+scaling));
    gfx_setfont(HINT_FONT,      fontface, 14*(1+scaling));
    
    spectrumIn.setWindowLocation(spectrumX,  spectrumY, spectrumW, spectrumH);
    spectrumOut.setWindowLocation(spectrumX, spectrumY, spectrumW, spectrumH);
  );

 
  function drawGradients(w, h, spectrumH, gradient_bg)
  instance(lw, lh, lSpectrumH)
  global(gfx_mode, gfx_dest, bg_color_r, bg_color_g, bg_color_b, bg_color_a,
         gfx_x, gfx_y, gfx_r, gfx_g, gfx_b, gfx_a )
  local( oldDest, oldMode)
  (
    oldMode = gfx_mode;
    gfx_mode = 0;
    gfx_set(1,1,1,1);
    ( ( lw != w ) || ( lh != h ) || (spectrumH != lSpectrumH) ) ? (

      gfx_x = gfx_y = 0;
      lw = w;
      lh = h;
      lSpectrumH = spectrumH;
      oldDest = gfx_dest;
      gfx_setimgdim(gradient_bg, w, h);
      gfx_dest = gradient_bg;
      gfx_set(bg_color_r, bg_color_g, bg_color_b, bg_color_a);
      gfx_rectto(w,spectrumH);
      gfx_gradrect(0, 0, w, spectrumH, gfx_r, gfx_g, gfx_b, gfx_a, .0001, .001, .0001, .0001, -.0001, -.0001, .0001, .0001);
      gfx_gradrect(0, 0, w, spectrumH, gfx_r, gfx_g, gfx_b, .3, .0001, .001, .0006, .0001, -.0001, -.0001, .0001, .0001);
      gfx_gradrect(0, 0, w, spectrumH, 0, 0, 0, 0, 0, -.001, -.0006, .0001, -.0001, -.0001, .01, -.00008);
      gfx_gradrect(0, spectrumH, w, h-spectrumH, 0, 0, .0, 1.0, .0001, .0001, .0002, 0, 0, 0, .0005, 0);
      gfx_dest = oldDest;
    );
    
    gfx_x = gfx_y = 0;
    gfx_blit(gradient_bg, 1, 0);
    gfx_mode = oldMode;
  );
  
  bg_color_r = 47/255;
  bg_color_g = 65/255;
  bg_color_b = 75/255;
  bg_color_a = 1;
  fft_out_r = .8;
  fft_out_g = .8;
  fft_out_b = .8;
  fft_out_a = 1.0;
  fft_in_r = .13;
  fft_in_g = .13;
  fft_in_b = .23;
  fft_in_a = .6;
  grid_color_r = .73;
  grid_color_g = .73;
  grid_color_b = .76;
  grid_color_a = .2;
  grid_alpha = .1 * (1+.5*abs(sin(2*time_precise())));
  backface_color_r = .2;
  backface_color_g = .2;
  backface_color_b = .3;
  backface_color_a = .1;
  font_color_r = .8;
  font_color_g = .8;
  font_color_b = .8;
  font_color_a = .8;
  knob_font_color_r = .5;
  knob_font_color_g = .7;
  knob_font_color_b = 1;
  knob_font_color_a = 1;
  highlight_color_r = .5;
  highlight_color_g = .7+.2*abs(sin(2*time_precise()));
  highlight_color_b = .9;
  highlight_color_a = .6+.4*abs(sin(2*time_precise()));
  disabled_color_r = .4;
  disabled_color_g = .4;
  disabled_color_b = .4;
  disabled_color_a = .8;
  
  stripStart = 35; 
  createGUI(stripStart);
  gradient.drawGradients(gfx_w, gfx_h, spectrumH, 2);
  
  globalTime = time_precise();
  delta_time = globalTime - lastGlobalTime;
  lastGlobalTime = globalTime;
  
  gfx_r = 1;
  spectrumIn.drawGrid();
  spectrumIn.floorLevel = 25 + dnoisefloor_freq;
  spectrumOut.floorLevel = 25 + dnoisefloor_freq;
  spectrumIn.drawFFT(1, fft_in_r, fft_in_g, fft_in_b, fft_in_a);
  spectrumOut.drawFFT(0, fft_out_r, fft_out_g, fft_out_b, fft_out_a);
  spectrumIn.updateBands();
  spectrumIn.drawBands();    
  spectrumIn.fftWindow_processMouse(mouse_x, mouse_y, mouse_cap);  

  tFIR.label = "FIR";  
  tFIR.drawToggle(20, 20, 10, 10, FIR, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Linear phase FIR mode.\n\nLinear phase filters preserve the phase relations between this\nand other tracks but introduce a higher CPU cost and latency.\nEnable only when needed for its linear phase properties.\n\nNote: Modulation of the frequency when in FIR mode can cause crackles.");
  FIR = tFIR.processMouseToggle(mouse_x, mouse_y, mouse_cap);

  FIR ? (
    FIR_NQ.drawToggle(60, 20, 10, 10, FIR_quality == 0, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Normal quality mode.\n\nHigher quality modes can be useful when using splits\nat very low frequencies. Note that high quality modes\ninduce more latency and require restarting transport\n(press stop and play).");
    FIR_NQ.processMouseToggle(mouse_x, mouse_y, mouse_cap) ? FIR_quality = 0;  
    FIR_HQ.drawToggle(75, 20, 10, 10, FIR_quality == 1, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "High quality mode.\n\nHigher quality modes can be useful when using splits\nat very low frequencies. Note that high quality modes\ninduce more latency and require restarting transport\n(press stop and play).");
    FIR_HQ.processMouseToggle(mouse_x, mouse_y, mouse_cap) ? FIR_quality = 1;
    FIR_UQ.label =
      FIR_quality == 0 ? "Normal"
      : FIR_quality == 1 ? "High"
      : FIR_quality == 2 ? "Ultra";
    FIR_UQ.drawToggle(90, 20, 10, 10, FIR_quality == 2, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Ultra quality mode.\n\nHigher quality modes can be useful when using splits\nat very low frequencies. Note that high quality modes\ninduce more latency and require restarting transport\n(press stop and play).");
    FIR_UQ.processMouseToggle(mouse_x, mouse_y, mouse_cap) ? FIR_quality = 2;
  );

  fourpole.drawToggle(20, 40, 10, 10, band_mode == 0, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Use 4 pole 24 dB/oct filters");
  fourpole.processMouseToggle(mouse_x, mouse_y, mouse_cap) ? band_mode = 0;
  fourpole.label = "4p";
  twopole.drawToggle(60, 40, 10, 10, band_mode == 1, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Use 2 pole 12 dB/oct filters");
  twopole.processMouseToggle(mouse_x, mouse_y, mouse_cap) ? band_mode = 1;
  twopole.label = "2p";
  
  absChoice.label = "Abs position";  
  absChoice.drawToggle(20, 60, 10, 10, abs_placement, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Absolute positioning.\n\nIn this mode the slider mapping is absolute.");
  abs_placement = absChoice.processMouseToggle(mouse_x, mouse_y, mouse_cap);
  
  function setup_menu_string(str_var, value, start)
  local(s, i)
  global()
  (
    s = sprintf(str_var, "");
    i = start;
    loop(17 - start ,
      i == 0 ? (
        s = sprintf(str_var, "%s|%s%sUnlinked", s, (i == 16) ? "<" : "", (i == value) ? "!" : "");
      ) : (
        s = sprintf(str_var, "%s|%s%sSend to group %d", s, (i == 16) ? "<" : "", (i == value) ? "!" : "", i);
      );
      
      i += 1;
    );
    
    s
  );
  
  link.label = gmem_group > 0 ? sprintf(7, "Link group %d", gmem_group) : "Link";
  link.drawToggle(20, 80, 10, 10, gmem_group > 0, 1, 0.2, 0.2, 0.8, 1.0, 0.2, 0.2, 0.8, "Link to phase matcher.\n\nClick this to link this bandsplitter to a phase matcher.");
  link.processMouseToggle(mouse_x, mouse_y, mouse_cap);
  (link.over && (mouse_cap == 1) && (last_cap == 0)) ? (
    menu_selection = gfx_showmenu(sprintf(8, "%s", setup_menu_string(8, gmem_group, 0)));
    gmem_group = menu_selection - 1;
  );
  
  
  gfx_x = gfx_y = 30;
  gfx_setfont(1,"ARIAL",30);
  gfx_set(1,0,0,1);
  gfx_x = 30;
  gfx_y = 60;
  
  gfx_x = gfx_w-130*(1+scaling);
  gfx_y = bottomRow + 30*(1+scaling);
  gfx_mode = 4;
  
  hinter.drawHint_draw();
  last_cap = mouse_cap;


  gfx_x = 30; gfx_y = 10;
  gfx_r = gfx_b = gfx_g = 0;
  gfx_drawnumber(per_to_freq(vslider2,100),1);
