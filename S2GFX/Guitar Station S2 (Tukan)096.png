desc:Guitar Station S2 (Tukan)

slider1:0<0,1,1{Off, On}>-1 Pre Boost
slider2:3<0,10,0.01>-2 PreGain (dB)
slider3:3<0,10,0.01>-3 Distortion (Level)
slider4:0<-24,24,0.1>-4 Output (dB)

slider5:5<0,10,0.01>-5 Bass
slider6:5<0,10,0.01>-6 Mid
slider7:5<0,10,0.01>-7 Treble
slider8:5<0,10,0.01>-8 Bright

slider9:1<0,4,1{No Amp, Amp 1, Amp 2, Amp 3, Amp4}>-9 Amp
slider10:1<0,4,1{No Cab, Cab 1, Cab 2, Cab 3, Cab 4}>-10 Cabinet
slider11:0<0,6,1{57,421,906,20,Rib,87,648}>-11 Mic
slider12:0<0,1,1{Center,Side}>-12 Mic Position

slider13:3<0,3,1{Ambience, Room, Short Spring, Long Spring}>-13 Reverb Type
slider14:3<0,10,0.1>-14 Reberb

slider15:-90<-90,-12>-Gate Threshold (dB)
slider16:50<1,250>-Gate Release Time (ms)

slider17:0<0,1,1{Chorus Off, Chorus On}>-17 Chorus
slider18:1<0,1,1{PreAmp, PoatAmp}>-18 Chorus
slider19:3.75<0,10,0.01>-19 Depth
slider20:1<0,1,1{Mono, Stereo}>-20 Stereo
slider21:6<0,10,0.01>-21 Balance

slider22:0<0,1,1{Flanger Off, Flanger On}>-22 Flanger
slider23:1<0,1,1{PreAmp, PoatAmp}>-23 Flanger
slider24:Flanger_tempo_Hz=0.1<0.001,2>-24 Frequency (Hz)
slider25:5<0,10,0.01>-25 Central delay (ms)
slider26:9.9<0,10,0.001>-26 Depth

slider27:0<0,1,1{Phaser Off, Phaser On}>-27 Phaser
slider28:1<0,1,1{PreAmp, PoatAmp}>-28 Phaser
slider29:Phaser_tempo_Hz=0.5<0,10,.01>-29 Rate (Hz)
slider30:2<0,10>-30 Range Min (Hz)
slider31:6<0,10>-31 Range Max (Hz)
slider32:9<0,10,.01>-32 Phase_Feedback (dB)
slider33:5<0,10,.01>-33 Phase_wet Mix (dB)

slider34:0<0,1,1{Dist Off, Dist On}>-34 Dist
slider35:1<0,1,1{Invisible, Visible}>-35 Dist
slider36:8<0,10,.1>-36 Drive
slider37:6<0,10>-37 Lowpass Cutoff
slider38:0<0,1,1{TS, DS}>-38 Dist Type
slider39:0<-18,18,.1>-39 Dist Output

slider40:0<0,1,1{Trem Off, Trem On}>-40 Trem
slider41:1<0,1,1{PreAmp, PoatAmp}>-41 Trem
slider42:Tremolo_tempo_Hz=4<0,20,.01>-42 Frequency (Hz)
slider43:10<0,10,.1>-43 Amount (dB)
slider44:0<0,10,0.1>-44 Stereo Seperation
slider45:0<0,10,0.1>-45 Trem Shape

slider46:0<0,1,1{Wah Off, Wah On}>-46 Wah
slider47:1<0,1,1{PreAmp, PoatAmp}>-47 Wah
slider48:0<0,1,1{DCB, MRL}>-48 Wah Type
slider49:5<0,10,.001>-49 Wah Freq

slider50:0<0,1,1{Delay Off, Delay On}>-50 delay
slider51:1<0,1,1{PreAmp, PoatAmp}>-51 delay
slider52:250<1,1000>-52 Delay Time (ms)
slider53:2<0,10>-53 Feedback
slider54:3<0,10>-54 Delay Mix

slider55:flanger_free_run=0<0,1,1{Free Run, Project Time based}>-55Flanger Free Run
slider56:Flanger_phase_shift=0<0,360,1>-56Flanger Phase Shift
slider57:Flanger_sync_Selection=9<0,27,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial, 8 Bars T, 4 bars T, 2 Bars T, 1 Bars T, 1/2T, 1/4T, 1/8T, 1/16T, 1/32T,8 Bars D, 4 bars D, 2 Bars D, 1 Bars D, 1/2 D, 1/4 D, 1/8 D, 1/16 D, 1/32 D}>-Flanger Sync

slider58:Tremolo_free_run=0<0,1,1{Free Run, Project Time based}>-Tremolo Free Run
slider59:Tremolo_phase_shift=0<0,360,1>-Tremolo Phase Shift
slider60:Tremolo_sync_Selection=9<0,27,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial, 8 Bars T, 4 bars T, 2 Bars T, 1 Bars T, 1/2T, 1/4T, 1/8T, 1/16T, 1/32T,8 Bars D, 4 bars D, 2 Bars D, 1 Bars D, 1/2 D, 1/4 D, 1/8 D, 1/16 D, 1/32 D}>-Tremolo Sync

slider61:Phaser_free_run=0<0,1,1{Free Run, Project Time based}>-61 Phaser Free Run
slider62:Phaser_phase_shift=0<0,360,1>-62 Phaser Phase Shift
slider63:Phaser_sync_Selection=9<0,27,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial, 8 Bars T, 4 bars T, 2 Bars T, 1 Bars T, 1/2T, 1/4T, 1/8T, 1/16T, 1/32T,8 Bars D, 4 bars D, 2 Bars D, 1 Bars D, 1/2 D, 1/4 D, 1/8 D, 1/16 D, 1/32 D}>-63 phaser Sync

slider64:Delay_sync_Selection=9<0,27,1{8 Bars, 4 bars, 2 Bars, 1 Bars, 1/2, 1/4, 1/8, 1/16, 1/32, Dial, 8 Bars T, 4 bars T, 2 Bars T, 1 Bars T, 1/2T, 1/4T, 1/8T, 1/16T, 1/32T,8 Bars D, 4 bars D, 2 Bars D, 1 Bars D, 1/2 D, 1/4 D, 1/8 D, 1/16 D, 1/32 D}>-63 phaser Sync

//slider64:1<0.1,10,0.1>Zoom

import S2GFX/tk_lib.jsfx-inc
import S2GFX/cookdsp.jsfx-inc
import S2GFX/st-oversampler.jsfx-inc
import S2GFX/VT_Filters.jsfx-inc

filename:0,GitAmp/Knob1.png
filename:1,GitAmp/grill1.png
filename:2,GitAmp/grill2.png
filename:3,GitAmp/grill3.png
filename:4,GitAmp/grill4.png

filename:5,GitAmp/57v.png
filename:6,S2GFX/Amp_Plates.png
filename:7,S2GFX/Amp_Back.png
filename:8,S2GFX/Pedalback.png
filename:9,S2GFX/Footswitch.png
filename:10,S2GFX/Ampbuttons.png
filename:11,S2GFX/Ampframes.png

filename:12,S2GFX/MyAmp1.png
filename:13,S2GFX/MyAmp2.png
filename:14,S2GFX/MyAmp3.png
filename:15,S2GFX/MyAmp4.png

filename:16,S2GFX/switch.png

filename:17,S2GFX/rled.png
filename:18,S2GFX/oled.png
filename:19,S2GFX/gled.png
filename:20,S2GFX/S2_logo_amp.png
filename:21,S2GFX/gatebox.png

filename:22,S2GFX/LFO_moog.png

filename:23,S2GFX/GitAmp/B_Mid_20.wav
filename:24,S2GFX/GitAmp/B_Mid_421.wav
filename:25,S2GFX/GitAmp/B_Mid_57.wav
filename:26,S2GFX/GitAmp/B_Mid_648.wav
filename:27,S2GFX/GitAmp/B_Mid_87.wav
filename:28,S2GFX/GitAmp/B_Mid_906.wav
filename:29,S2GFX/GitAmp/B_Mid_Rib.wav
filename:30,S2GFX/GitAmp/B_Side_20.wav
filename:31,S2GFX/GitAmp/B_Side_421.wav
filename:32,S2GFX/GitAmp/B_Side_57.wav
filename:33,S2GFX/GitAmp/B_Side_648.wav
filename:34,S2GFX/GitAmp/B_Side_87.wav
filename:35,S2GFX/GitAmp/B_Side_906.wav
filename:36,S2GFX/GitAmp/B_Side_Rib.wav

filename:37,S2GFX/GitAmp/E_Mid_20.wav
filename:38,S2GFX/GitAmp/E_Mid_421.wav
filename:39,S2GFX/GitAmp/E_Mid_57.wav
filename:40,S2GFX/GitAmp/E_Mid_648.wav
filename:41,S2GFX/GitAmp/E_Mid_87.wav
filename:42,S2GFX/GitAmp/E_Mid_906.wav
filename:43,S2GFX/GitAmp/E_Mid_Rib.wav
filename:44,S2GFX/GitAmp/E_Side_20.wav
filename:45,S2GFX/GitAmp/E_Side_421.wav
filename:46,S2GFX/GitAmp/E_Side_57.wav
filename:47,S2GFX/GitAmp/E_Side_648.wav
filename:48,S2GFX/GitAmp/E_Side_87.wav
filename:49,S2GFX/GitAmp/E_Side_906.wav
filename:50,S2GFX/GitAmp/E_Side_Rib.wav

filename:51,S2GFX/GitAmp/F_Mid_20.wav
filename:52,S2GFX/GitAmp/F_Mid_421.wav
filename:53,S2GFX/GitAmp/F_Mid_57.wav
filename:54,S2GFX/GitAmp/F_Mid_648.wav
filename:55,S2GFX/GitAmp/F_Mid_87.wav
filename:56,S2GFX/GitAmp/F_Mid_906.wav
filename:57,S2GFX/GitAmp/F_Mid_Rib.wav
filename:58,S2GFX/GitAmp/F_Side_20.wav
filename:59,S2GFX/GitAmp/F_Side_421.wav
filename:60,S2GFX/GitAmp/F_Side_57.wav
filename:61,S2GFX/GitAmp/F_Side_648.wav
filename:62,S2GFX/GitAmp/F_Side_87.wav
filename:63,S2GFX/GitAmp/F_Side_906.wav
filename:64,S2GFX/GitAmp/F_Side_Rib.wav

filename:65,S2GFX/GitAmp/M_Mid_20.wav
filename:66,S2GFX/GitAmp/M_Mid_421.wav
filename:67,S2GFX/GitAmp/M_Mid_57.wav
filename:68,S2GFX/GitAmp/M_Mid_648.wav
filename:69,S2GFX/GitAmp/M_Mid_87.wav
filename:70,S2GFX/GitAmp/M_Mid_906.wav
filename:71,S2GFX/GitAmp/M_Mid_Rib.wav
filename:72,S2GFX/GitAmp/M_Side_20.wav
filename:73,S2GFX/GitAmp/M_Side_421.wav
filename:74,S2GFX/GitAmp/M_Side_57.wav
filename:75,S2GFX/GitAmp/M_Side_648.wav
filename:76,S2GFX/GitAmp/M_Side_87.wav
filename:77,S2GFX/GitAmp/M_Side_906.wav
filename:78,S2GFX/GitAmp/M_Side_Rib.wav

filename:79,S2GFX/GitAmp/B20M_dc.wav
filename:80,S2GFX/GitAmp/B421M_dc.wav
filename:81,S2GFX/GitAmp/B57M_dc.wav
filename:82,S2GFX/GitAmp/B648M_dc.wav
filename:83,S2GFX/GitAmp/B87M_dc.wav
filename:84,S2GFX/GitAmp/B906M_dc.wav
filename:85,S2GFX/GitAmp/BRibM_dc.wav
filename:86,S2GFX/GitAmp/B20S_dc.wav
filename:87,S2GFX/GitAmp/B421S_dc.wav
filename:88,S2GFX/GitAmp/B57S_dc.wav
filename:89,S2GFX/GitAmp/B648S_dc.wav
filename:90,S2GFX/GitAmp/B87S_dc.wav
filename:91,S2GFX/GitAmp/B906S_dc.wav
filename:92,S2GFX/GitAmp/BRibS_dc.wav

filename:93,S2GFX/GitAmp/E20M_dc.wav
filename:94,S2GFX/GitAmp/E421M_dc.wav
filename:95,S2GFX/GitAmp/E57M_dc.wav
filename:96,S2GFX/GitAmp/E648M_dc.wav
filename:97,S2GFX/GitAmp/E87M_dc.wav
filename:98,S2GFX/GitAmp/E906M_dc.wav
filename:99,S2GFX/GitAmp/ERibM_dc.wav
filename:100,S2GFX/GitAmp/E20S_dc.wav
filename:101,S2GFX/GitAmp/E421S_dc.wav
filename:102,S2GFX/GitAmp/E57S_dc.wav
filename:103,S2GFX/GitAmp/E648S_dc.wav
filename:104,S2GFX/GitAmp/E87S_dc.wav
filename:105,S2GFX/GitAmp/E906S_dc.wav
filename:106,S2GFX/GitAmp/ERibS_dc.wav

filename:107,S2GFX/GitAmp/F20M_dc.wav
filename:108,S2GFX/GitAmp/F421M_dc.wav
filename:109,S2GFX/GitAmp/F57M_dc.wav
filename:110,S2GFX/GitAmp/F648M_dc.wav
filename:111,S2GFX/GitAmp/F87M_dc.wav
filename:112,S2GFX/GitAmp/F906M_dc.wav
filename:113,S2GFX/GitAmp/FRibM_dc.wav
filename:114,S2GFX/GitAmp/F20S_dc.wav
filename:115,S2GFX/GitAmp/F421S_dc.wav
filename:116,S2GFX/GitAmp/F57S_dc.wav
filename:117,S2GFX/GitAmp/F648S_dc.wav
filename:118,S2GFX/GitAmp/F87S_dc.wav
filename:119,S2GFX/GitAmp/F906S_dc.wav
filename:120,S2GFX/GitAmp/FRibS_dc.wav

filename:121,S2GFX/GitAmp/M20M_dc.wav
filename:122,S2GFX/GitAmp/M421M_dc.wav
filename:123,S2GFX/GitAmp/M57M_dc.wav
filename:124,S2GFX/GitAmp/M648M_dc.wav
filename:125,S2GFX/GitAmp/M87M_dc.wav
filename:126,S2GFX/GitAmp/M906M_dc.wav
filename:127,S2GFX/GitAmp/MRibM_dc.wav
filename:128,S2GFX/GitAmp/M20S_dc.wav
filename:129,S2GFX/GitAmp/M421S_dc.wav
filename:130,S2GFX/GitAmp/M57S_dc.wav
filename:131,S2GFX/GitAmp/M648S_dc.wav
filename:132,S2GFX/GitAmp/M87S_dc.wav
filename:133,S2GFX/GitAmp/M906S_dc.wav
filename:134,S2GFX/GitAmp/MRibS_dc.wav
//options:no_meter
options:gfx_hz=60
options:gmem=TukanGuitarAmpS2
options:gfx_idle

@init


GuitarAmp_VERSION = 0.96;
       // pit.yin(0.3, 40, 1500, 1500, 80*srate/1000);
offs = memalloc(250000,1); //150000
//ext_tail_size = -1;
ext_nodenorm = 1;
gfx_ext_retina = 1;
gfx_clear=0;
ext_noinit=1;
lastCap=1;
mouse_wheel=1;
is_recording = 0; is_playing = 0; is_stopped = 1;
while_playing = 1; while_recording = 1; while_stopped = 1;
Number_input = 0;
number_input_raw = 0;
number_input_use = 0;
komma = 0;
in_key = 0;
number_input_x = 0;
number_input_y=0;
number_input_slider = 0;
number_input_min=0;
number_input_max=0;
number_input_invalid = 0;
number_input_sign=1;

newIR = 1;
oma = 0;
postEQ =0;
s2_numbers_of_sliders = 64;
s2_numbers_of_generics = 0;
group_generics = memalloc(200,1); // fuer group_generics[bis zu 200]
sliders_old = memalloc(16*200); //group_generics + 16*200;
generics_old = memalloc(16*64);//sliders_old + 16*64;

chain_mem = 16*64+27+48+200+(16)*200;

flanger_run_on_stop = flanger_multiplier = 1;
Tremolo_run_on_stop = Tremolo_multiplier = 1;
Phaser_run_on_stop = Phaser_multiplier = 1;

mouse_sensivity();
        BBoost.button_config (1, 80, 130);
        BAmp.button_config (9, 80, 130);
        BCab.button_config (10, 80, 130);
        BMic.button_config (11, 80, 130);
        BPos.button_config (12, 80, 130);
        BReverb.button_config (13, 80, 130);
        
        BChorus.button_config (20, 0, 0);
        BDist.button_config (38, 0, 0);
        BWah.button_config (48, 0, 0);

        BChorus_Bypass.button_config(17, 0,0);
        BChorus_On.button_config(18, 0,0);
        BFlanger_Bypass.button_config(22, 0,0);
        BFlanger_On.button_config(23, 0,0);
        BPhaser_Bypass.button_config(27, 0,0);
        BPhaser_On.button_config(28, 0,0);
        BDist_Bypass.button_config(34, 0,0);
        BDist_On.button_config(35, 0,0);
        BTrem_Bypass.button_config(40, 0,0);
        BTrem_On.button_config(41, 0,0);
        BWah_Bypass.button_config(46, 0,0);
        BWah_On.button_config(47, 0,0);
        BDelay_Bypass.button_config(50, 0,0);
        Bdelay_On.button_config(51, 0,0);
       
       Btrem_Free_run.button_config(58,0,0);
       Btrem_phase_shift.button_config(59,0,0);
       Btrem_Sync_selection.button_config(60,0,0);
       Bphaser_Free_run.button_config(61,0,0);
       Bphaser_phase_shift.button_config(62,0,0);
       Bphaser_Sync_selection.button_config(63,0,0);
       Bflanger_Free_run.button_config(55,0,0);
       Bflanger_phase_shift.button_config(56,0,0);
       Bflanger_Sync_selection.button_config(57,0,0);
       BDelay_Sync_selection.button_config(64,0,0);
       dist_chain_pos = 2;
       wah_chain_pos = 1;
       delay_chain_pos = 3;
       phaser_chain_pos = 4;
       flanger_chain_pos = 5;
       chorus_chain_pos = 6;
       trem_chain_pos = 7;
       rev_chain_pos = 9;
       amp_chain_pos = 8;
       

     function wgverb_do_amp(signal)
     (
         junc_ = this.total * 0.25;
         this.total = 0.0;
     
         v_ = this.d1.delay_fread2(this.t1 + this.r1.random_do());
         v_ *= this.feed;
         v_ += (this.ys[0] - v_) * this.c2;
         this.total += v_;
         this.d1.delay_write(signal + junc_ - this.ys[0]);
         this.ys[0] = v_;
     
         v1_ = this.d2.delay_fread2(this.t2 + this.r2.random_do());
         v_ *= this.feed;
         v_ += (this.ys[1] - v_) * this.c2;
         this.total += v_;
         this.d2.delay_write(signal + junc_ - this.ys[1]);
         this.ys[1] = v_;
     
         v_ = this.d3.delay_fread2(this.t3 + this.r3.random_do());
         v_ *= this.feed;
         v_ += (this.ys[2] - v_) * this.c2;
         this.total += v_;
         this.d3.delay_write(signal + junc_ - this.ys[2]);
         this.ys[2] = v_;
     
         v_ = this.d4.delay_fread2(this.t4 + this.r4.random_do());
         v_ *= this.feed;
         v_ += (this.ys[3] - v_) * this.c2;
         this.total += v_;
         this.d4.delay_write(signal + junc_ - this.ys[3]);
         this.ys[3] = v_;
     
         v_ = this.d5.delay_fread2(this.t5 + this.r5.random_do());
         v_ *= this.feed;
         v_ += (this.ys[4] - v_) * this.c2;
         this.total += v_;
         this.d5.delay_write(signal + junc_ - this.ys[4]);
         this.ys[4] = v_;
     
         v_ = this.d6.delay_fread2(this.t6 + this.r6.random_do());
         v_ *= this.feed;
         v_ += (this.ys[5] - v_) * this.c2;
         this.total += v_;
         this.d6.delay_write(signal + junc_ - this.ys[5]);
         this.ys[5] = v_;
     
         v_ = this.d7.delay_fread2(this.t7 + this.r7.random_do());
         v_ *= this.feed;
         v_ += (this.ys[6] - v_) * this.c2;
         this.total += v_;
         this.d7.delay_write(signal + junc_ - this.ys[6]);
         this.ys[6] = v_;
     
         v_ = this.d8.delay_fread2(this.t8 + this.r8.random_do());
         v_ *= this.feed;
         v_ += (this.ys[7] - v_) * this.c2;
         this.total += v_;
         this.d8.delay_write(signal + junc_ - this.ys[7]);
         this.ys[7] = v_;
     
         rev_ = this.total * 0.25;
         //signal + (rev_ - signal) * this.bal;
       rev_ * db2ratio(6);
     );
       
  
       
       
       chorusL.chorus(2, .2, 1);
       chorusR.chorus(2, .2, 1);
       
       flanger_f = slider24;
       flanger_Cdelay = slider25;
       flanger_depth = slider26;
       flanger_feedback = slider27;
       FlangerL.flanger(Flanger_F, Flanger_CDelay, Flanger_Depth, Flanger_Feedback);
       FlangerR.flanger(Flanger_CDelay, Flanger_CDelay, Flanger_Depth, Flanger_Feedback);
       
       revbal = slider14/10;
       slider13 == 0 ? revfeed = 0.03;
       slider13 == 1 ? revfeed = 0.2;
       slider13 == 2 ? revfeed = 0.53;
       slider13 == 3 ? revfeed = 0.87;
       myverb_L.wgverb(revfeed, 8500, revbal);
       myverb_R.wgverb(revfeed, 8500, revbal);
       
       
       xfade = 20 * 0.001 * srate;
       delayL.sdelay(srate*16, xfade);
       delayR.sdelay(srate*16, xfade);
       
       
       
       
        //zc.zcross(.01);
function re_init() (


disL.disto(slider36, slider37);
disR.disto(slider36, slider37);
       
        LSH_L.eq(LSH_Freq*2, LSH_Q, LSH_G, 1);
        LSH_R.eq(LSH_Freq*2, LSH_Q, LSH_G, 1);
        Low_L.eq(Low_Freq*2, Low_Q, Low_G, 0);
        Low_R.eq(Low_Freq*2, Low_Q, Low_G, 0);
        Mid_L.eq(Mid_Freq*2, Mid_Q, Mid_G, 0);
        Mid_R.eq(Mid_Freq*2, Mid_Q, Mid_G, 0);
        High_L.eq(High_Freq*2, High_Q, High_G, 0);
        High_R.eq(High_Freq*2, High_Q, High_G, 0);
        HSH_L.eq(HSH_Freq*2, HSH_Q, HSH_G, 2);
        HSH_R.eq(HSH_Freq*2, HSH_Q, HSH_G, 2);
        
        LSH_L_Os2.eq_Os2(LSH_Freq, LSH_Q, LSH_G, 1);
        LSH_R_Os2.eq_Os2(LSH_Freq, LSH_Q, LSH_G, 1);
        Low_L_Os2.eq_Os2(Low_Freq, Low_Q, Low_G, 0);
        Low_R_Os2.eq_Os2(Low_Freq, Low_Q, Low_G, 0);
        Mid_L_Os2.eq_Os2(Mid_Freq, Mid_Q, Mid_G, 0);
        Mid_R_Os2.eq_Os2(Mid_Freq, Mid_Q, Mid_G, 0);
        High_L_Os2.eq_Os2(High_Freq, High_Q, High_G, 0);
        High_R_Os2.eq_Os2(High_Freq, High_Q, High_G, 0);
        HSH_L_Os2.eq_Os2(HSH_Freq, HSH_Q, HSH_G, 2);
        HSH_R_Os2.eq_Os2(HSH_Freq, HSH_Q, HSH_G, 2);
        
        
Gate_gain = 1;
Gate_env = 0;

//ext_tail_size=3*srate;//32768;
fftsize=-1;
need_refft=1;
convsrc=128*1024;
lslider1=-1;
impbuf=256*1024;

    chorusL.lfo1.sine(.254 * (rand(.1) + 0.95), 0);
    chorusL.lfo2.sine(.465 * (rand(.1) + 0.95), 0);
    chorusL.lfo3.sine(.657 * (rand(.1) + 0.95), 0);
    chorusL.lfo4.sine(.879 * (rand(.1) + 0.95), 0);
    chorusL.lfo5.sine(1.23 * (rand(.1) + 0.95), 0);
    chorusL.lfo6.sine(1.342 * (rand(.1) + 0.95), 0);
    chorusL.lfo7.sine(1.654 * (rand(.1) + 0.95), 0);
    chorusL.lfo8.sine(1.879 * (rand(.1) + 0.95), 0);

    chorusR.lfo1.sine(.254 * (rand(.1) + 0.95), 0);
    chorusR.lfo2.sine(.465 * (rand(.1) + 0.95), 0);
    chorusR.lfo3.sine(.657 * (rand(.1) + 0.95), 0);
    chorusR.lfo4.sine(.879 * (rand(.1) + 0.95), 0);
    chorusR.lfo5.sine(1.23 * (rand(.1) + 0.95), 0);
    chorusR.lfo6.sine(1.342 * (rand(.1) + 0.95), 0);
    chorusR.lfo7.sine(1.654 * (rand(.1) + 0.95), 0);
    chorusR.lfo8.sine(1.879 * (rand(.1) + 0.95), 0);
    
itm1=itm2=otm1=otm2=0;
); //re_init

re_init();





function clear_chorus_buffer () (
//memset(dest,value,length)
memset(chorusL.d1.buf,0,chorus.d1.size);
memset(chorusL.d2.buf,0,chorus.d2.size);
memset(chorusL.d3.buf,0,chorus.d3.size);
memset(chorusL.d4.buf,0,chorus.d4.size);
memset(chorusL.d5.buf,0,chorus.d5.size);
memset(chorusL.d6.buf,0,chorus.d6.size);
memset(chorusL.d7.buf,0,chorus.d7.size);
memset(chorusL.d8.buf,0,chorus.d8.size);

memset(chorusr.d1.buf,0,chorus.d1.size);
memset(chorusr.d2.buf,0,chorus.d2.size);
memset(chorusr.d3.buf,0,chorus.d3.size);
memset(chorusr.d4.buf,0,chorus.d4.size);
memset(chorusr.d5.buf,0,chorus.d5.size);
memset(chorusr.d6.buf,0,chorus.d6.size);
memset(chorusr.d7.buf,0,chorus.d7.size);
memset(chorusr.d8.buf,0,chorus.d8.size);

memset(chorusL.lfo1.buf.buf,0,chorus.lfo1.buf.size);
memset(chorusL.lfo2.buf.buf,0,chorus.lfo2.buf.size);
memset(chorusL.lfo3.buf.buf,0,chorus.lfo3.buf.size);
memset(chorusL.lfo4.buf.buf,0,chorus.lfo4.buf.size);
memset(chorusL.lfo5.buf.buf,0,chorus.lfo5.buf.size);
memset(chorusL.lfo6.buf.buf,0,chorus.lfo6.buf.size);
memset(chorusL.lfo7.buf.buf,0,chorus.lfo7.buf.size);
memset(chorusL.lfo8.buf.buf,0,chorus.lfo8.buf.size);

memset(chorusr.lfo1.buf.buf,0,chorus.lfo1.buf.size);
memset(chorusr.lfo2.buf.buf,0,chorus.lfo2.buf.size);
memset(chorusr.lfo3.buf.buf,0,chorus.lfo3.buf.size);
memset(chorusr.lfo4.buf.buf,0,chorus.lfo4.buf.size);
memset(chorusr.lfo5.buf.buf,0,chorus.lfo5.buf.size);
memset(chorusr.lfo6.buf.buf,0,chorus.lfo6.buf.size);
memset(chorusr.lfo7.buf.buf,0,chorus.lfo7.buf.size);
memset(chorusr.lfo8.buf.buf,0,chorus.lfo8.buf.size);
);




   
   /////////////////////////////////////////////// FUNCTION FILTER ////////
     MAX_FREQ = 44100 / 2.0;
     MIN_FREQ = 10;
     FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);
     
   /*
    * Convert slider % to frequency
    */
   function per_to_freq(x, range) (
     MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
   );
   
   /*
    * Convert frequency to slider %
    */
   function freq_to_per(freq, range) (
     range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
   );
   
   
   
   /////////////////////////////////////////////// FUNCTION FILTER ////////
   
   
   

function amp_tanh(x) (
x=exp(2*x);
(x-1)/(x+1);
);
aab = 0;
  // DC Blocker to remove near-static frequency content
  // that would otherwise "offset" the waveform.
  function dcBlocker () instance (otml, itml)
  (
    /*
    srate < 50000 ? (stateOut *= 0.99); //99988487
    srate > 50000 ? (stateOut *= 0.99999999);
    
    stateOut += this - stateIn;
    stateIn = this;
    this = stateOut;
  */
  aab = srate/(srate*1.00008);
  srate < 400000 ? aab = srate/(srate*1.0002);
  srate < 200000 ? aab = srate/(srate*1.0003);
  srate < 100000 ? aab = srate/(srate*1.0007);
  srate < 50000 ? aab = srate/(srate*1.001);
  
  otm1=aab*otm1 + this - itm1; itm1=this; this=otm1;

  );


function filter_update () (
LSH_L.EQ_set_type(1);
LSH_R.EQ_set_type(1);
Low_L.EQ_set_type(0);
Low_R.EQ_set_type(0);
Mid_L.EQ_set_type(0);
Mid_R.EQ_set_type(0);
High_L.EQ_set_type(0);
High_R.EQ_set_type(0);
HSH_L.EQ_set_type(2);
HSH_R.EQ_set_type(2);

LSH_L_Os2.EQ_set_type(1);
LSH_R_Os2.EQ_set_type(1);
Low_L_Os2.EQ_set_type(0);
Low_R_Os2.EQ_set_type(0);
Mid_L_Os2.EQ_set_type(0);
Mid_R_Os2.EQ_set_type(0);
High_L_Os2.EQ_set_type(0);
High_R_Os2.EQ_set_type(0);
HSH_L_Os2.EQ_set_type(2);
HSH_R_Os2.EQ_set_type(2);

LSH_L.EQ_set_freq(LSH_Freq*2);
LSH_R.EQ_set_freq(LSH_Freq*2);
Low_L.EQ_set_freq(Low_Freq*2);
Low_R.EQ_set_freq(Low_Freq*2);
Mid_L.EQ_set_freq(Mid_Freq*2);
Mid_R.EQ_set_freq(Mid_Freq*2);
High_L.EQ_set_freq(High_Freq*2);
High_R.EQ_set_freq(High_Freq*2);
HSH_L.EQ_set_freq(HSH_Freq*2);
HSH_R.EQ_set_freq(HSH_Freq*2);

LSH_L_Os2.EQ_set_freq(LSH_Freq);
LSH_R_Os2.EQ_set_freq(LSH_Freq);
Low_L_Os2.EQ_set_freq(Low_Freq);
Low_R_Os2.EQ_set_freq(Low_Freq);
Mid_L_Os2.EQ_set_freq(Mid_Freq);
Mid_R_Os2.EQ_set_freq(Mid_Freq);
High_L_Os2.EQ_set_freq(High_Freq);
High_R_Os2.EQ_set_freq(High_Freq);
HSH_L_Os2.EQ_set_freq(HSH_Freq);
HSH_R_Os2.EQ_set_freq(HSH_Freq);

LSH_L.EQ_set_q(LSH_Q);
LSH_R.EQ_set_q(LSH_Q);
Low_L.EQ_set_q(Low_Q);
Low_R.EQ_set_q(Low_Q);
Mid_L.EQ_set_q(Mid_Q);
Mid_R.EQ_set_q(Mid_Q);
High_L.EQ_set_q(High_Q);
High_R.EQ_set_q(High_Q);
HSH_L.EQ_set_q(HSH_Q);
HSH_R.EQ_set_q(HSH_Q);

LSH_L_Os2.EQ_set_q(LSH_Q);
LSH_R_Os2.EQ_set_q(LSH_Q);
Low_L_Os2.EQ_set_q(Low_Q);
Low_R_Os2.EQ_set_q(Low_Q);
Mid_L_Os2.EQ_set_q(Mid_Q);
Mid_R_Os2.EQ_set_q(Mid_Q);
High_L_Os2.EQ_set_q(High_Q);
High_R_Os2.EQ_set_q(High_Q);
HSH_L_Os2.EQ_set_q(HSH_Q);
HSH_R_Os2.EQ_set_q(HSH_Q);

LSH_L.EQ_set_boost(LSH_G);
LSH_R.EQ_set_boost(LSH_G);
Low_L.EQ_set_boost(Low_G);
Low_R.EQ_set_boost(Low_G);
Mid_L.EQ_set_boost(Mid_G);
Mid_R.EQ_set_boost(Mid_G);
High_L.EQ_set_boost(High_G);
High_R.EQ_set_boost(High_G);
HSH_L.EQ_set_boost(HSH_G);
HSH_R.EQ_set_boost(HSH_G);

LSH_L_Os2.EQ_set_boost(LSH_G);
LSH_R_Os2.EQ_set_boost(LSH_G);
Low_L_Os2.EQ_set_boost(Low_G);
Low_R_Os2.EQ_set_boost(Low_G);
Mid_L_Os2.EQ_set_boost(Mid_G);
Mid_R_Os2.EQ_set_boost(Mid_G);
High_L_Os2.EQ_set_boost(High_G);
High_R_Os2.EQ_set_boost(High_G);
HSH_L_Os2.EQ_set_boost(HSH_G);
HSH_R_Os2.EQ_set_boost(HSH_G);
);

function filter_gain_update () (

LSH_L.EQ_set_boost(LSH_G);
LSH_R.EQ_set_boost(LSH_G);
Low_L.EQ_set_boost(Low_G);
Low_R.EQ_set_boost(Low_G);
Mid_L.EQ_set_boost(Mid_G);
Mid_R.EQ_set_boost(Mid_G);
High_L.EQ_set_boost(High_G);
High_R.EQ_set_boost(High_G);
HSH_L.EQ_set_boost(HSH_G);
HSH_R.EQ_set_boost(HSH_G);

LSH_L_Os2.EQ_set_boost(LSH_G);
LSH_R_Os2.EQ_set_boost(LSH_G);
Low_L_Os2.EQ_set_boost(Low_G);
Low_R_Os2.EQ_set_boost(Low_G);
Mid_L_Os2.EQ_set_boost(Mid_G);
Mid_R_Os2.EQ_set_boost(Mid_G);
High_L_Os2.EQ_set_boost(High_G);
High_R_Os2.EQ_set_boost(High_G);
HSH_L_Os2.EQ_set_boost(HSH_G);
HSH_R_Os2.EQ_set_boost(HSH_G);
);

function amp_switch() (
amp == 0 ? (Compensation_Gain_amp = 0.9);
//Amp 1: /////////////////////////////////////////////////////////////
amp == 1 ? (
VK = 3;
RP = 65;
VS = 4;

boost = 8;
PreBoost = db2ratio(boost * slider1);
NegPreBoost = 1;
Compensation_Gain_amp = negpreboost * db2ratio(-24 + 2);


LSH_Per = 8;
LSH_Q = 0.7;
LSH_G = -1;

HSH_Per = 65;
HSH_Offset = 12;
HSH_Q = 0.3;

Low_Per = 19; //LOW F
LOW_Offset = 10;
Low_q = 0.1; // LOW Q

Mid_Per = 49; //MID F
MID_Offset = -12;
MID_Range = 8;
Mid_q = 0.7; // MID Q

High_Per = 80; //HIGH F
HIGH_Offset = 7;
High_Q = 0.1; //HIGH Q
);
 /////////////////////////////////////////////////////////////

//Amp 2: /////////////////////////////////////////////////////////////
amp == 2 ? (
VK = 3;
RP = 65;
VS = 0;

boost = 11;
PreBoost = db2ratio(boost * slider1);
NegPreBoost = 1;
Compensation_Gain_amp = negpreboost * db2ratio(-24 + 9);


LSH_Per = 29;
LSH_Q = 0.7;
LSH_G = 0;

HSH_Per = 55;
HSH_Offset = 4;
HSH_Q = 0.6;

Low_Per = 19; //LOW F
LOW_Offset = 6;
Low_q = 0.5; // LOW Q

Mid_Per = 49; //MID F
MID_Offset = -8;
MID_Range = 8;
Mid_q = 0.5; // MID Q

High_Per = 80; //HIGH F
HIGH_Offset = 6;
High_Q = 0.1; //HIGH Q
);
 /////////////////////////////////////////////////////////////

//Amp 3: /////////////////////////////////////////////////////////////
amp == 3 ? (
VK = 3;
RP = 100;
VS = 0;

boost = 18;
PreBoost = db2ratio(boost * slider1);
NegPreBoost = 1;
Compensation_Gain_amp = negpreboost * db2ratio(-24 + 9);
//soma = 0;

LSH_Per = 4; // alt 8
oma ? lsh_per = 8;
LSH_Q = 0.7;
LSH_G = -3.4; //alt -8
oma ? lsh_g = -8;

HSH_Per = 63.2; //72 alt
HSH_Offset = 2;//4;
oma ? hsh_Offset =4;
HSH_Q = 0.9;

Low_Per = 23; //LOW F
LOW_Offset =3;// 3;
Low_q = 0.4; // LOW Q

Mid_Per = 41.7; //MID F alt: 49
oma ? mid_per = 49;
MID_Offset = -7.8; //alt -3
oma ? MID_Offset = -3;
MID_Range = 6;
Mid_q = 0.6; // MID Q

High_Per = 72; //HIGH F
HIGH_Offset = 4;//4;
High_Q = 0.2; //HIGH Q
);
 /////////////////////////////////////////////////////////////

//Amp 4: /////////////////////////////////////////////////////////////
amp == 4 ? (
VK = 3;
RP = 60;
VS = 0;

boost = 13;
PreBoost = db2ratio(boost * slider1);
NegPreBoost = 1;
Compensation_Gain_amp = negpreboost * db2ratio(-24+9.5);


LSH_Per = 16;
LSH_Q = 0.7;
LSH_G = 5;

HSH_Per = 64.1; //74 alt
HSH_Offset = 4;
HSH_Q = 0.9;

Low_Per = 33; //LOW F
LOW_Offset = 4;
Low_q = 0.5; // LOW Q

Mid_Per = 43; //MID F
MID_Offset = -3;
MID_Range = 6;
Mid_q = 1.6; // MID Q

High_Per = 70; //HIGH F
HIGH_Offset = 4.5;
High_Q = 0.4; //HIGH Q
);
 /////////////////////////////////////////////////////////////



Rp=-RP*0.1;
Vk=(-VK-1)+4;

LSH_Freq = 16+LSH_Per*1.20103;
LSH_Freq = floor(exp(LSH_Freq*log(1.059))*8.17742);

HSH_Freq = 16+HSH_Per*1.20103;
//HSH_G = HSH_Offset + 12*((slider8-5)/5);
HSH_G = HSH_Offset + 18*((slider8-5)/5);
HSH_Freq = floor(exp(HSH_Freq*log(1.059))*8.17742);

Low_Freq = 16+Low_Per*1.20103;
Low_Freq = floor(exp(Low_Freq*log(1.059))*8.17742);
//Low_G = Low_Offset + LOW_Offset*((slider5-5)/5);
Low_G = Low_Offset + 15*((slider5-5)/5);

Mid_Freq = 16+Mid_Per*1.20103;
Mid_Freq = floor(exp(Mid_Freq*log(1.059))*8.17742);
//Mid_G = Mid_Offset + mid_range*((slider6-5)/5);
Mid_G = Mid_Offset +15*((slider6-5)/5);

High_Freq = 16+High_Per*1.20103;
High_Freq = floor(exp(High_Freq*log(1.059))*8.17742);
//High_G = High_Offset + High_Offset*((slider7-5)/5);
High_G = High_Offset + 15*((slider7-5)/5);


        ampknob = amp +11;
        
        ampknobscale = 0.8;
        amp == 4 ? ampknobscale = 0.9;
        Amp_knobs_x = 103;
        Amp_knobs_y = 58;
        
        amp == 0 ? (ampknob = 22; ampknobscale = 0.9);
        
         //Parameter_config                (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)
               KPreGain.parameter_config   (2,       3,        0,     10,   amp_knobs_x,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KPostGain.parameter_config  (3,       3,        0,     10,   amp_knobs_x +75,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KBass.parameter_config      (5,       5,        0,     10,   amp_knobs_x +80*2,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KMid.parameter_config       (6,       5,        0,     10,   amp_knobs_x +80 + 75*2,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KTreble.parameter_config    (7,       5,        0,     10,   amp_knobs_x +80 + 75*3,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KBright.parameter_config    (8,       5,        0,     10,   amp_knobs_x +80 + 75*4,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KReverb.parameter_config    (14,      3,        0,     10,   amp_knobs_x +78*6,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               KOutGain.parameter_config   (4,       0,        -24,   24,   amp_knobs_x +80*7,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
               
         // lslider1 = -1;     
         //amp_old != amp ?
         filter_update();
         //amp_old == amp ? filter_gain_update();
         //amp_old = amp;
);

function switch_IR () (
init_ir = 1;
/*
            filehandle=file_open(dings);
            impbuf_l=impbuf_nch=impbuf_srate=0;
            filehandle > 0 ? 
            (
              file_riff(filehandle,impbuf_nch,impbuf_srate);
              impbuf_nch ?
              (
                impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
                need_refft=1; 
                file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
              );
              file_close(filehandle);
            );
            need_refft=1; stereo_mode=1;
            
            microphone == 0 ? Compensation_Gain_Mic = db2ratio(2);
            microphone == 1 ? Compensation_Gain_Mic = db2ratio(0.5);
            microphone == 2 ? Compensation_Gain_Mic = db2ratio(3.4);
            microphone == 3 ? Compensation_Gain_Mic = db2ratio(2.8);
            microphone == 4 ? Compensation_Gain_Mic = db2ratio(0);
            microphone == 5 ? Compensation_Gain_Mic = db2ratio(3.3);
            microphone == 6 ? Compensation_Gain_Mic = db2ratio(0);
            //Compensation_Gain_amp = 1;
            cabinet == 1 ? Compensation_Gain_cab = db2ratio(1);
            cabinet == 2 ? Compensation_Gain_cab = db2ratio(-1);
            cabinet == 3 ? Compensation_Gain_cab = db2ratio(0);
            cabinet == 4 ? Compensation_Gain_cab = db2ratio(1.5);
            cabinet_on == 0 ? (Compensation_Gain_cab = db2ratio(0.7); Compensation_Gain_Mic = 1);
            Compensation_Gain = Compensation_Gain_amp * Compensation_Gain_cab * Compensation_Gain_Mic;
            
            //UPsample: 0No,1Yes (no gain adjust),2Yes (correct gain)
            useresample = 2; //slider3 ? (useresample=slider3; need_refft=1; );
            IR_Switch = 3;
   */
          );

function chorus_update () (
        chorus_on = slider17;
        chorus_position = slider18;
        
        chorus_Stereo = slider20;
        
        chorus_depth != slider19 / 5 ? (
        chorus_depth = slider19 / 5;
        chorusL.chorus_set_depth(chorus_depth);
        chorusR.chorus_set_depth(chorus_depth);
        );
        
        //chorusL.chorus_set_feed(.3);
        //chorusR.chorus_set_feed(.3);
        
        chorus_Mix != slider21 / 10 ? (
        chorus_Mix = slider21 / 10;
        chorusL.chorus_set_bal(chorus_Mix);
        chorusR.chorus_set_bal(chorus_Mix);
        );
);


function flanger_lfo () (
   flanger_sync_on == 1 ? ( //TEMP SYNCED
   flanger_Takt_in_s = (240 / tempo);
   flanger_time_sync_2 == 1 ? (flanger_T_Fac = 1.5):(flanger_T_Fac=1);
   flanger_Hertz = flanger_Takt_in_s / (flanger_time_sync*flanger_T_Fac);
   flanger_time_sync_2 == 2 ? flanger_Hertz *= 1.5;
   flanger_cosphi = flanger_phase_shift / 360;
   ):(
   flanger_vslider41 = flanger_tempo_hz * flanger_multiplier;
   flanger_vslider41 != 0 ? flanger_Hertz = 1/flanger_vslider41;
   flanger_cosphi = flanger_phase_shift / 360;
   );

   //block_ ... + (pos_add/srate) 
   flanger_n_durchgaenge = ((flanger_block_play_position + (flanger_pos_add/srate) + flanger_cosphi*flanger_Hertz) / flanger_Hertz);
   flanger_pos_add += 1;
   
   flanger_free_run == 1 ? ( //1 = Time sync, not free run
   flanger_run_on_stop == 1 ? (
   flanger_phase_position += (1/flanger_Hertz) / srate;
   flanger_phase_position >= 1 ? flanger_phase_position = 0;
   play_state == 1 ? flanger_phase_position = flanger_n_durchgaenge - floor(flanger_n_durchgaenge); // von 0 bis 1
   play_state == 5 ? flanger_phase_position = flanger_n_durchgaenge - floor(flanger_n_durchgaenge); // von 0 bis 1
   ):(
   flanger_phase_position = flanger_n_durchgaenge - floor(flanger_n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   flanger_run_on_stop == 1 ? (
   flanger_phase_position += (1/flanger_Hertz) / srate;
   flanger_phase_position >= 1 ? flanger_phase_position = 0;
   ):(
   play_state == 1 ? flanger_phase_position += (1/flanger_Hertz) / srate;
   play_state == 5 ? flanger_phase_position += (1/flanger_Hertz) / srate;
   flanger_phase_position >= 1 ? flanger_phase_position = 0;
   );
   );

   flanger_sinus_Position = sin(flanger_phase_position * 2 * $pi);
);

function flanger_do_amp(signal)
(
    sec_ = this.cdelay * 0.001;
    read_ = this.line.delay_fsread2(sec_ + flanger_sinus_Position * this.depth * sec_);
    this.line.delay_write(signal + read_ * this.feed);
    (signal + read_) * 0.5;
);

function flanger_update() (
flanger_on = slider22;
flanger_position = slider23;
flanger_f = slider24;
flanger_Cdelay = 0.3 + 4*slider25/10;;
flanger_depth = 0.1 + 0.83*slider26/10;
flanger_feedback = 0.5; //slider27;slider27:0.25<-1,1,0.01>Feedback
FlangerL.flanger_set_freq(Flanger_F);
FlangerR.flanger_set_freq(Flanger_F);
FlangerL.flanger_set_cdelay(Flanger_CDelay);
FlangerR.flanger_set_cdelay(Flanger_CDelay);
FlangerL.flanger_set_depth(Flanger_Depth);
FlangerR.flanger_set_depth(Flanger_Depth);
FlangerL.flanger_set_feed(Flanger_Feedback);
FlangerR.flanger_set_feed(Flanger_Feedback);

Flanger_sync_Selection > 18 ? (Flanger_sync_Selection_tmp = Flanger_sync_Selection - 19; flanger_time_sync_2 = 2):
Flanger_sync_Selection > 9 ? (Flanger_sync_Selection_tmp = Flanger_sync_Selection - 10; flanger_time_sync_2 = 1):
(Flanger_sync_Selection_tmp = Flanger_sync_Selection; flanger_time_sync_2 = 0);

   Flanger_sync_Selection_tmp == 0 ? flanger_time_sync = 0.125;
   Flanger_sync_Selection_tmp == 1 ? flanger_time_sync = 0.25;
   Flanger_sync_Selection_tmp == 2 ? flanger_time_sync = 0.5;
   Flanger_sync_Selection_tmp == 3 ? flanger_time_sync = 1;
   Flanger_sync_Selection_tmp == 4 ? flanger_time_sync = 2;
   Flanger_sync_Selection_tmp == 5 ? flanger_time_sync = 4;
   Flanger_sync_Selection_tmp == 6 ? flanger_time_sync = 8;
   Flanger_sync_Selection_tmp == 7 ? flanger_time_sync = 16;
   Flanger_sync_Selection_tmp == 8 ? flanger_time_sync = 32;
   Flanger_sync_Selection_tmp == 9 ? Flanger_sync_on = 0 : Flanger_sync_on = 1;

Flanger_tempo_Hertz_old != Flanger_tempo_Hz ? (flanger_sync_on = 0; Flanger_sync_selection = 9);
Flanger_tempo_Hertz_old = Flanger_tempo_Hz;
);


function phaser_update () (
Phaser_sync_Selection > 18 ? (Phaser_sync_Selection_tmp = Phaser_sync_Selection - 19; Phaser_time_sync_2 = 2):
Phaser_sync_Selection > 9 ? (Phaser_sync_Selection_tmp = Phaser_sync_Selection - 10; Phaser_time_sync_2 = 1):
(Phaser_sync_Selection_tmp = Phaser_sync_Selection; Phaser_time_sync_2 = 0);

   Phaser_sync_Selection_tmp == 0 ? Phaser_time_sync = 0.125;
   Phaser_sync_Selection_tmp == 1 ? Phaser_time_sync = 0.25;
   Phaser_sync_Selection_tmp == 2 ? Phaser_time_sync = 0.5;
   Phaser_sync_Selection_tmp == 3 ? Phaser_time_sync = 1;
   Phaser_sync_Selection_tmp == 4 ? Phaser_time_sync = 2;
   Phaser_sync_Selection_tmp == 5 ? Phaser_time_sync = 4;
   Phaser_sync_Selection_tmp == 6 ? Phaser_time_sync = 8;
   Phaser_sync_Selection_tmp == 7 ? Phaser_time_sync = 16;
   Phaser_sync_Selection_tmp == 8 ? Phaser_time_sync = 32;
   Phaser_sync_Selection_tmp == 9 ? Phaser_sync_on = 0 : Phaser_sync_on = 1;

Phaser_tempo_Hertz_old != Phaser_tempo_Hz ? (Phaser_sync_on = 0; Phaser_sync_selection = 9);
Phaser_tempo_Hertz_old = Phaser_tempo_Hz;
Phaser_on = slider27;
phaser_position = slider28;
Phase_Feedback= db2ratio(-1) * slider32/10;
//Phase_lfoPhase=0;
Phase_wetmix =slider33 / 5;
phase_aa = per_to_freq(40+slider31*5.8,100);
phase_min_freq = per_to_freq(7+slider30*7,100);
phase_Max_freq = per_to_freq(40+slider31 * 8,100);
Phase_min=phase_min_freq * 2 / srate;
Phase_max=phase_max_freq *2/ srate;
Phase_dsc=abs(Phase_max-Phase_min) * 0.5;
Phase_min=min(Phase_min,Phase_max);
Phase_lfoInc =  $pi * 2* slider29 / srate;
);


function phaser_lfo () (
   Phaser_sync_on == 1 ? ( //TEMP SYNCED
   Phaser_Takt_in_s = (240 / tempo);
   Phaser_time_sync_2 == 1 ? (Phaser_T_Fac = 1.5):(Phaser_T_Fac=1);
   Phaser_Hertz = Phaser_Takt_in_s / (Phaser_time_sync*Phaser_T_Fac);
   Phaser_time_sync_2 == 2 ? Phaser_Hertz *= 1.5;
   Phaser_cosphi = Phaser_phase_shift / 360;
   ):(
   Phaser_vslider41 = Phaser_tempo_hz * Phaser_multiplier;
   Phaser_vslider41 != 0 ? Phaser_Hertz = 1/Phaser_vslider41;
   Phaser_cosphi = Phaser_phase_shift / 360;
   );

   //block_ ... + (pos_add/srate) 
   Phaser_n_durchgaenge = ((Phaser_block_play_position + (Phaser_pos_add/srate) + Phaser_cosphi*Phaser_Hertz) / Phaser_Hertz);
   Phaser_pos_add += 1;
   
   Phaser_free_run == 1 ? ( //1 = Time sync, not free run
   Phaser_run_on_stop == 1 ? (
   Phaser_phase_position += (1/Phaser_Hertz) / srate;
   Phaser_phase_position >= 1 ? Phaser_phase_position = 0;
   play_state == 1 ? Phaser_phase_position = Phaser_n_durchgaenge - floor(Phaser_n_durchgaenge); // von 0 bis 1
   play_state == 5 ? Phaser_phase_position = Phaser_n_durchgaenge - floor(Phaser_n_durchgaenge); // von 0 bis 1
   ):(
   Phaser_phase_position = Phaser_n_durchgaenge - floor(Phaser_n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   Phaser_run_on_stop == 1 ? (
   Phaser_phase_position += (1/Phaser_Hertz) / srate;
   Phaser_phase_position >= 1 ? Phaser_phase_position = 0;
   ):(
   play_state == 1 ? Phaser_phase_position += (1/Phaser_Hertz) / srate;
   play_state == 5 ? Phaser_phase_position += (1/Phaser_Hertz) / srate;
   Phaser_phase_position >= 1 ? Phaser_phase_position = 0;
   );
   );

   Phaser_sinus_Position = sin(Phaser_phase_position * 2 * $pi);
);

function phaser_do () (
phaser_lfo();
Phase_d = Phase_min + Phase_dsc * (sin(Phaser_sinus_Position) + 1); //phase_lfophase;//
//Phase_lfoPhase += Phase_lfoInc;
//Phase_lfoPhase >= 2*$pi ? Phase_lfoPhase -= 2*$pi;
//Phase_lfoPhase >= 2*$pi ? Phase_lfoInc = -Phase_lfoInc;
//Phase_lfoPhase <= 0 ? Phase_lfoInc = -Phase_lfoInc;

Phase_coef=(1-Phase_d)/(1+Phase_d);

Phase_x1=spl0 + Phase_ly4 * Phase_Feedback;
Phase_ly1 = Phase_coef * (Phase_ly1 + Phase_x1) - lPhase_x1;  lPhase_x1 = Phase_x1;
Phase_ly2 = Phase_coef * (Phase_ly2 + Phase_ly1) - Phase_lx2; Phase_lx2 = Phase_ly1;
Phase_ly3 = Phase_coef * (Phase_ly3 + Phase_ly2) - Phase_lx3; Phase_lx3 = Phase_ly2;
Phase_ly4 = Phase_coef * (Phase_ly4 + Phase_ly3) - Phase_lx4; Phase_lx4 = Phase_ly3;
spl0 += Phase_ly4*Phase_wetmix;


// right channel, can comment this out if you
// want mono for 2x the speed :)
Phase_rx=spl1 + Phase_ry4 * Phase_Feedback;
Phase_ry1 = Phase_coef * (Phase_ry1 + Phase_rx) - rPhase_x1;  rPhase_x1 = Phase_rx;
Phase_ry2 = Phase_coef * (Phase_ry2 + Phase_ry1) - Phase_rx2; Phase_rx2 = Phase_ry1;
Phase_ry3 = Phase_coef * (Phase_ry3 + Phase_ry2) - Phase_rx3; Phase_rx3 = Phase_ry2;
Phase_ry4 = Phase_coef * (Phase_ry4 + Phase_ry3) - Phase_rx4; Phase_rx4 = Phase_ry3;
spl1 += Phase_ry4*Phase_wetmix;
);




function dist_update () (
dist_on = slider34;
dist_position = slider35;
dist_scaler = slider36/10;
dist_output_factor = db2ratio(slider39);
dist_type = slider38;
dist_cutoff = per_to_freq(slider37*3.9 + 50.8,100);
slider38 == 0 ? (
disL.disto_set_drive((slider36-0.5)/10);
disR.disto_set_drive((slider36-0.5)/10);
dist_clip = 1;
):(
disL.disto_set_drive(0);
disR.disto_set_drive(0);
dist_clip = 1-(slider36-0.3)/10;
);
disL.disto_set_cutoff(dist_cutoff);
disR.disto_set_cutoff(dist_cutoff);
);

function trem_lfo () (
   Tremolo_sync_on == 1 ? ( //TEMP SYNCED
   Tremolo_Takt_in_s = (240 / tempo);
   Tremolo_time_sync_2 == 1 ? (Tremolo_T_Fac = 1.5):(Tremolo_T_Fac=1);
   Tremolo_Hertz = Tremolo_Takt_in_s / (Tremolo_time_sync*Tremolo_T_Fac);
   Tremolo_time_sync_2 == 2 ? Tremolo_Hertz *= 1.5;
   Tremolo_cosphi = Tremolo_phase_shift / 360;
   ):(
   Tremolo_vslider41 = Tremolo_tempo_hz * Tremolo_multiplier;
   Tremolo_vslider41 != 0 ? Tremolo_Hertz = 1/Tremolo_vslider41;
   Tremolo_cosphi = Tremolo_phase_shift / 360;
   );

   //block_ ... + (pos_add/srate) 
   Tremolo_n_durchgaenge = ((Tremolo_block_play_position + (Tremolo_pos_add/srate) + Tremolo_cosphi*Tremolo_Hertz) / Tremolo_Hertz);
   Tremolo_pos_add += 1;
   
   Tremolo_free_run == 1 ? ( //1 = Time sync, not free run
   Tremolo_run_on_stop == 1 ? (
   Tremolo_phase_position += (1/Tremolo_Hertz) / srate;
   Tremolo_phase_position >= 1 ? Tremolo_phase_position = 0;
   play_state == 1 ? Tremolo_phase_position = Tremolo_n_durchgaenge - floor(Tremolo_n_durchgaenge); // von 0 bis 1
   play_state == 5 ? Tremolo_phase_position = Tremolo_n_durchgaenge - floor(Tremolo_n_durchgaenge); // von 0 bis 1
   ):(
   Tremolo_phase_position = Tremolo_n_durchgaenge - floor(Tremolo_n_durchgaenge); // von 0 bis 1
   );
   ):( //Free run LFO?
   Tremolo_run_on_stop == 1 ? (
   Tremolo_phase_position += (1/Tremolo_Hertz) / srate;
   Tremolo_phase_position >= 1 ? Tremolo_phase_position = 0;
   ):(
   play_state == 1 ? Tremolo_phase_position += (1/Tremolo_Hertz) / srate;
   play_state == 5 ? Tremolo_phase_position += (1/Tremolo_Hertz) / srate;
   Tremolo_phase_position >= 1 ? Tremolo_phase_position = 0;
   );
   );

   Tremolo_sinus_Position = sin(Tremolo_phase_position * 2 * $pi);
);
function trem_update () (
Tremolo_sync_Selection > 18 ? (Tremolo_sync_Selection_tmp = Tremolo_sync_Selection - 19; Tremolo_time_sync_2 = 2):
Tremolo_sync_Selection > 9 ? (Tremolo_sync_Selection_tmp = Tremolo_sync_Selection - 10; Tremolo_time_sync_2 = 1):
(Tremolo_sync_Selection_tmp = Tremolo_sync_Selection; Tremolo_time_sync_2 = 0);

   Tremolo_sync_Selection_tmp == 0 ? Tremolo_time_sync = 0.125;
   Tremolo_sync_Selection_tmp == 1 ? Tremolo_time_sync = 0.25;
   Tremolo_sync_Selection_tmp == 2 ? Tremolo_time_sync = 0.5;
   Tremolo_sync_Selection_tmp == 3 ? Tremolo_time_sync = 1;
   Tremolo_sync_Selection_tmp == 4 ? Tremolo_time_sync = 2;
   Tremolo_sync_Selection_tmp == 5 ? Tremolo_time_sync = 4;
   Tremolo_sync_Selection_tmp == 6 ? Tremolo_time_sync = 8;
   Tremolo_sync_Selection_tmp == 7 ? Tremolo_time_sync = 16;
   Tremolo_sync_Selection_tmp == 8 ? Tremolo_time_sync = 32;
   Tremolo_sync_Selection_tmp == 9 ? Tremolo_sync_on = 0 : Tremolo_sync_on = 1;

Tremolo_tempo_Hertz_old != Tremolo_tempo_Hz ? (Tremolo_sync_on = 0; Tremolo_sync_selection = 9);
Tremolo_tempo_Hertz_old = Tremolo_tempo_Hz;

trem_shape = 1+(9*slider45/10);
Trem_on = slider40;
Trem_position = slider41;
  Trem_adv=$pi*2*slider42/srate;
  Trem_sep=slider44*$pi;
  Trem_amount=slider43/10;
  Trem_sc=0.5*Trem_amount; Trem_amount=1-Trem_amount;

);

function wah_update() (
wah_on = slider46;
wah_position = slider47;
wah_mode = slider48;


   fil_q = 4;
   fil_gain = 0;
   fil_type = 3;
);

function delay_update () (
delaY_samps2 = (240 / tempo);
delay_sync_Selection > 18 ? (delay_sync_Selection_tmp = delay_sync_Selection - 19; delay_time_sync_2 = 1.5):
delay_sync_Selection > 9 ? (delay_sync_Selection_tmp = delay_sync_Selection - 10; delay_time_sync_2 = 2/3):
(delay_sync_Selection_tmp = delay_sync_Selection; delay_time_sync_2 = 1);

   delay_sync_Selection_tmp == 0 ? delay_time_sync = 0.125;
   delay_sync_Selection_tmp == 1 ? delay_time_sync = 0.25;
   delay_sync_Selection_tmp == 2 ? delay_time_sync = 0.5;
   delay_sync_Selection_tmp == 3 ? delay_time_sync = 1;
   delay_sync_Selection_tmp == 4 ? delay_time_sync = 2;
   delay_sync_Selection_tmp == 5 ? delay_time_sync = 4;
   delay_sync_Selection_tmp == 6 ? delay_time_sync = 8;
   delay_sync_Selection_tmp == 7 ? delay_time_sync = 16;
   delay_sync_Selection_tmp == 8 ? delay_time_sync = 32;
   delay_sync_Selection_tmp == 9 ? delay_sync_on = 0 : delay_sync_on = 1;
   
   slider52_old != slider52 ? (delay_sync_on = 0; delay_sync_Selection = 9);
   slider52_old = slider52;
delay_on = slider50;
delay_position = slider51;
delay_sync_on ? delay_samps = ((240000 / tempo) / delay_time_sync)*delay_time_sync_2 * 0.001*srate: delay_samps = slider52 * 0.001 * srate;
delay_Amount = slider54 / 10;
delay_feedback = 0.9 * slider53/10;
);




    function parameters_update() (
        parameters_update_on = 1;
        
        kPregain.Parameter_boundaries();
        Kpostgain.Parameter_boundaries();
        KBAss.Parameter_boundaries();
        KMid.Parameter_boundaries();
        KTreble.Parameter_boundaries();
        Kbright.Parameter_boundaries();
        KReverb.Parameter_boundaries();
        KOutgain.Parameter_boundaries();
        KWah_freq.Parameter_boundaries();
        kphaser_floor.Parameter_boundaries();
        kphaser_ceiling.Parameter_boundaries();
        KPhaser_speed.Parameter_boundaries();
        KPhaser_Feedback.Parameter_boundaries();
        KPhaser_mix.Parameter_boundaries();
        KDist_drive.Parameter_boundaries();
        KDist_tone.Parameter_boundaries();
        Kdist_out.Parameter_boundaries();
        Kdelay_Time.Parameter_boundaries();
        KDelay_Feedback.Parameter_boundaries();
        Kdelay_mix.Parameter_boundaries();
        KChorus_depth.Parameter_boundaries();
        KChorus_mix.Parameter_boundaries();
        Ktrem_Speed.Parameter_boundaries();
        Ktrem_mix.Parameter_boundaries();
        KTrem_Stereo.Parameter_boundaries();
        KTrem_shape.Parameter_boundaries();
        Kflanger_speed.Parameter_boundaries();
        Kflanger_delay.Parameter_boundaries();
        Kflanger_depth.Parameter_boundaries();
        Kflanger_Shift.Parameter_boundaries();
        Ktrem_Shift.Parameter_boundaries();
        KPhaser_Shift.Parameter_boundaries();
        
        group_parameters();
        
        chorus_update();
        flanger_update();
        phaser_update();
        dist_update();
        trem_update();
        wah_update();
        delay_update();
        /*
        reinit_amp == 1 ? (
        amp = amp+1; amp > 4 ? amp = 1; amp_switch();
        );
        */
        amp = slider9;amp_switch();
        /*
        amp_old == amp ? (
        amp_switch();
        amp_old = amp+1;
        ):0 == 1 ? (
*/
        /*
        HSH_G = HSH_Offset + 12*((slider8-5)/5);
        Low_G = Low_Offset + LOW_Offset*((slider5-5)/5);
        Mid_G = Mid_Offset + mid_range*((slider6-5)/5);
        High_G = High_Offset + High_Offset*((slider7-5)/5);
        */
        //f1.eq_set_boost(slider3);
        
        /*
        Low_L.eq_set_boost(Low_g);
        Mid_L.eq_set_boost(Mid_g);
        High_L.eq_set_boost(High_g);
        HSH_L.eq_set_boost(HSH_g);
        Low_R.eq_set_boost(Low_g);
        Mid_R.eq_set_boost(Mid_g);
        High_R.eq_set_boost(High_g);
        HSH_R.eq_set_boost(HSH_g);
        
        Low_L_Os2.eq_set_boost(Low_g);
        Mid_L_Os2.eq_set_boost(Mid_g);
        High_L_Os2.eq_set_boost(High_g);
        HSH_L_Os2.eq_set_boost(HSH_g);
        Low_R_Os2.eq_set_boost(Low_g);
        Mid_R_Os2.eq_set_boost(Mid_g);
        High_R_Os2.eq_set_boost(High_g);
        HSH_R_Os2.eq_set_boost(HSH_g);
        );
        */
        
        level=2*slider3/10;
        PreGain=10^(24*((slider2-5)/5)/20);
        PostGain=10^((slider4-3)/20);
        anti_alias = 1;
        
        
        srate >48000 ? anti_alias = 0;
        
        
        slider10 == 0 ? cabinet_on = 0 : cabinet_on = 1;
        slider10 == 1 ? (vslider1 = 0;); //Black
        slider10 == 2 ? (vslider1 = 42;); //Mesa
        slider10 == 3 ? (vslider1 = 14;); // Engl
        slider10 == 4 ? (vslider1 = 28;); // 7ender
        
        slider12 == 1 ? (vslider1 += 7;#Position = "Side_"):(#Position = "Mid_");
        
        slider11 == 0 ? (vslider1 += 3;(cab_comp = 10));
        slider11 == 1 ? (vslider1 += 2;(cab_comp = 9));
        slider11 == 2 ? (vslider1 += 6;(cab_comp = 8));
        slider11 == 3 ? (vslider1 += 1;(cab_comp = 11));
        slider11 == 4 ? (vslider1 += 7;(cab_comp = 7)); // 7
        slider11 == 5 ? (vslider1 += 5;(cab_comp = -9));
        slider11 == 6 ? (vslider1 += 4;(cab_comp = 0));
        
        //newIR ? (
        vslider1 += 56;
        cab_comp = -12;
        posteq = 0;
        //);
        //new_IR = 0;
        
        cabinet = slider10;
        microphone = slider11;
        Mic_position = slider12;
        
        
        
        PreAmp=2^(cab_comp/6);
        
        ////////////////////////////////////// IR LOADER //////////////////////7
        cabinet_on ? (
        dings = vslider1 +22;
        
          tmp=dings;
          tmp != lslider1 ?
          (
          init_ir = 1;
            lslider1=dings;
            
            //dings == 25 ? IR_Compensate = db2ratio(0.5);
          );
        );
        //////////////////////////////////////////////////////////////////////////////////////////////////////
        
        
        
        revbal = slider14/20;
        slider13 == 0 ? (revbal *= 2; revfeed = 0.34; #rev_label = "Amb."); //0.1 alt
        slider13 == 1 ? (revbal *= 2; revfeed = 0.5  ; #rev_label = "Room"); // 0.34 alt
        slider13 == 2 ? (revfeed = 0.77; #rev_label = "S. Spring");
        slider13 == 3 ? (revfeed = 0.87; #rev_label = "L. Spring");
        myverb_l.wgverb_set_feed(revfeed);
        myverb_l.wgverb_set_cutoff(8500);
        myverb_l.wgverb_set_bal(1);
        myverb_r.wgverb_set_feed(revfeed);
        myverb_r.wgverb_set_cutoff(8500);
        myverb_r.wgverb_set_bal(1);
        
        gate_threshold = 10^(slider15/20);
        slider15 > -90 ? gate_on = 1 : gate_on = 0;
        gate_attack = exp(-1/(0.01/1000*srate));
        gate_release = exp(-1/(slider16/1000*srate));
        gate_envelope_decay = exp(-1/(30/1000*srate));
        
        
        
        cabinet_on == 0 ? Compensation_Gain = Compensation_Gain_amp * db2ratio(0.7);
        
        Compensation_Gain = Compensation_Gain_amp * Compensation_Gain_cab * Compensation_Gain_Mic;
        
        
        
        
        
      parameters_update_on = 0; caller = 0;
    );
@slider

caller = 1;



@serialize
file_var(0, while_playing);
file_var(0, while_recording);
file_var(0, while_stopped);
file_var(0, GuitarAmp_VERSION);
file_var(0, link_group);

file_var(0, wah_chain_pos);
file_var(0, dist_chain_pos);
file_var(0, delay_chain_pos);
file_var(0, phaser_chain_pos);
file_var(0, flanger_chain_pos);
file_var(0, chorus_chain_pos);
file_var(0, trem_chain_pos);
file_var(0, amp_chain_pos);
file_var(0, rev_chain_pos);

file_var(0, slider52_old);
file_var(0, Tremolo_tempo_Hertz_old);
file_var(0, Phaser_tempo_Hertz_old);
file_var(0, Flanger_tempo_Hertz_old);
file_var(0, Compensation_Gain);
file_var(0, newIR);

file_var(0, postEQ);

seriloop = 0;
loop(64*16 + 27 + 16,
file_var(0, gmem[seriloop]);
seriloop += 1;
);

seriloop = 0;
loop(200*16,
file_var(0, group_generics[seriloop]);
seriloop += 1;
);




@block

   flanger_block_play_position = play_position;
   flanger_pos_add = 0;
   
   Tremolo_block_play_position = play_position;
   Tremolo_pos_add = 0;
   
   Phaser_block_play_position = play_position;
   Phaser_pos_add = 0;
   
   
   /*
   IR_Fade <= 0 ? (
     IR_Switch == 1 ? (
       IR_Switch = 2;
       //caller = 1;
       spl0 *= IR_Fade;
       spl1 *= IR_Fade;
       switch_IR();
       IR_Fade = 0;
     );
   );
   */
   //cabinet_on ? (
   
   IR_Switch == 1 ? (
   //switch_IR(); 
   //IR_Switch=2;
 
    filehandle=file_open(dings);
   impbuf_l=impbuf_nch=impbuf_srate=0;
   filehandle > 0 ? 
   (
     file_riff(filehandle,impbuf_nch,impbuf_srate);
     impbuf_nch ?
     (
       impbuf_l=(file_avail(filehandle)/impbuf_nch)|0; 
       need_refft=1; 
       file_mem(filehandle,impbuf,impbuf_l*impbuf_nch);
     );
     file_close(filehandle);
   );
   need_refft=1; stereo_mode=1;
   
   microphone == 0 ? Compensation_Gain_Mic = db2ratio(2);
   microphone == 1 ? Compensation_Gain_Mic = db2ratio(0.5);
   microphone == 2 ? Compensation_Gain_Mic = db2ratio(3.4);
   microphone == 3 ? Compensation_Gain_Mic = db2ratio(2.8);
   microphone == 4 ? Compensation_Gain_Mic = db2ratio(0);
   microphone == 5 ? Compensation_Gain_Mic = db2ratio(3.3);
   microphone == 6 ? Compensation_Gain_Mic = db2ratio(0);
   //Compensation_Gain_amp = 1;
   cabinet == 1 ? Compensation_Gain_cab = db2ratio(1);
   cabinet == 2 ? Compensation_Gain_cab = db2ratio(-1);
   cabinet == 3 ? Compensation_Gain_cab = db2ratio(0);
   cabinet == 4 ? Compensation_Gain_cab = db2ratio(1.5);
   cabinet_on == 0 ? (Compensation_Gain_cab = db2ratio(0.7); Compensation_Gain_Mic = 1);
   Compensation_Gain = Compensation_Gain_amp * Compensation_Gain_cab * Compensation_Gain_Mic;
   
   //UPsample: 0No,1Yes (no gain adjust),2Yes (correct gain)
   useresample = 2; //slider3 ? (useresample=slider3; need_refft=1; );
   
   
   
   
need_refft ? (  // prepare convolution source, here...
  useresample && srate > impbuf_srate && impbuf_srate > 1 ? 
  (
    filtersize = ((srate*impbuf_l)/impbuf_srate)|0;
    filtersize > 16384 ? (
      filtersize = 16384;
      impbuf_l = ((filtersize * impbuf_srate) / srate)|0;
    );
    isc=impbuf_srate/srate;
  )
  : 
  (
    impbuf_l > 16384 ? impbuf_l = 16384;
    filtersize=impbuf_l;
    isc=1.0;
  );

  fftsize=32;

  while(
    filtersize > fftsize*0.5 ? 
    (
      fftsize += fftsize;
    ) : 0;
  );

  chunksize=fftsize-filtersize-1; // size of chunk size of audio to use
  chunksize2=chunksize*2;
  bpos=0; 
  curblock=0;
  lastblock=64*1024;
  invfsize=1/fftsize;
  pre_sum = post_sum = i = 0;
  loop(impbuf_l,
    pre_sum += impbuf[i];
    stereo_mode == 0 ? pre_sum += impbuf[i + impbuf_nch - 1];
    i+=impbuf_nch;
  );
  i=0;
  i2=0;
  loop(min(fftsize,filtersize),
     ipos=i|0;
     ipart=(i-ipos);
     convsrc[i2]=impbuf[ipos*impbuf_nch]*(1-ipart) + impbuf[(ipos+1)*impbuf_nch]*ipart;
     convsrc[i2+1]=stereo_mode ? 0.0 : (impbuf[(ipos+1)*impbuf_nch-1]*(1-ipart) +
                                        impbuf[(ipos+2)*impbuf_nch-1]*(ipart));
     post_sum += convsrc[i2] + convsrc[i2+1];
     i += isc;
     i2+=2;
  );
  loop(fftsize-filtersize,
     convsrc[i2]=convsrc[i2+1]=0;
     i2+=2;
  );
  isc != 1 && useresample>=2 && abs(post_sum) > 0.0001*fftsize*(stereo_mode?1:2) &&
      abs(pre_sum) > 0.0001*impbuf_l*(stereo_mode?1:2) ? (
    invfsize *= abs(pre_sum / post_sum);
  );
  fft(convsrc,fftsize);
  i=0;
  loop(fftsize*2, convsrc[i] *= invfsize; i+=1; );
  need_refft=0;
);

IR_Switch = 3;
);

//); // cab on?


 Link_Group ? (
 !chain_arrange ? (
 gmem[chain_mem] == link_Group ? (
 dist_chain_pos = gmem[chain_mem+1];
 delay_chain_pos = gmem[chain_mem+2];
 wah_chain_pos = gmem[chain_mem+3];
 chorus_chain_pos = gmem[chain_mem+4];
 flanger_chain_pos = gmem[chain_mem+5];
 phaser_chain_pos = gmem[chain_mem+6];
 trem_chain_pos = gmem[chain_mem+7];
 rev_chain_pos = gmem[chain_mem+8];
 amp_chain_pos = gmem[chain_mem+9];
 caller = 1;
 );
 );
 );





srate_old != srate ? (srate > 48000 ? anti_alias = 0 : anti_alias = 1; init_ir = 1; reinit_amp = 1; re_init();  caller =1);
srate_old = srate;







@sample




S2_sample_on = 1;
gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
link_group ? group_check_smpl();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  ):(ausgelassen += 1);
);


playstates();

process = 0;
while_playing ? is_playing ? process = 1;
while_recording ? is_recording ? process = 1;
while_stopped ? is_stopped ? process = 1;

bypass ? process = 0;

//process = 0;
process == 1 ? (

/////////////////////////////////// GATE
Gate_detect == 1 ? (
start_detecting = 0;
gate_detect = 2;
gate_set = 0;
);

Gate_detect == 2 ? (
gate_set = max(gate_set, max(abs(spl0), abs(spl1)));
start_detecting += 1;
);

start_detecting >= srate/4 ? (
slider(KGatethreshold.slider) = max(-90,min(-12, ratio2db(gate_set) + 26));
slider(KGateRelease.slider) = 20 + (200 + slider(KGatethreshold.slider)/2);
link_group ? gmem[(Link_Group-1)*64+KGatethreshold.slider-1] = slider(KGatethreshold.slider);
link_group ? gmem[(Link_Group-1)*64+KGaterelease.slider-1] = slider(KGaterelease.slider);
gate_detect = 0;
start_detecting = 0;
caller = 1;
);

gate_on ? (

gate_inL = spl0;
gate_inR = spl1;

gate_det = max(abs(gate_inL),abs(gate_inR));
gate_det += 0.000000000001;
gate_env = gate_det >= gate_env ? gate_det : gate_det+gate_envelope_decay*(gate_env-gate_det);
gate_transfer_gain = gate_env > gate_threshold ? pow(gate_env,0):0;
gate_gain = gate_transfer_gain > gate_gain ? gate_transfer_gain+gate_attack*(gate_gain-gate_transfer_gain) : gate_transfer_gain+gate_release*(gate_gain-gate_transfer_gain);

spl0 = gate_inL * gate_gain;
spl1 = gate_inR * gate_gain;
);
//////////////////////////////////////////////////

//ncross = zc.zcross_do(spl0*db2ratio(-20));anti
/*
tuner_on ? Measured_note = pit.yin_do(spl0); //ncross * srate/2;
zielton = -2;

#note = "X";
Measured_note > E1L && measured_note < E1H ? (
#Note = "E";
zielton = measured_note - E1;
LowM =    E1L;
TargetM = E1;
HighM =   E1H;
):
Measured_note > a1L && measured_note < a1H ? (
#Note = "A";
zielton = measured_note - A1;
LowM =    A1L;
TargetM = A1;
HighM =   A1H;
):
Measured_note > D1L && measured_note < D1H ? (
#Note = "D";
zielton = measured_note - D1;
LowM =    D1L;
TargetM = D1;
HighM =   D1H;
):
Measured_note > G1L && measured_note < G1H ? (
#Note = "G";
zielton = measured_note - G1;
LowM =    G1L;
TargetM = G1;
HighM =   G1H;
):
Measured_note > H1L && measured_note < H1H ? (
#Note = "H";
zielton = measured_note - H1;
LowM =    H1L;
TargetM = H1;
HighM =   H1H;
):
Measured_note > E2L && measured_note < E2H ? (
#Note = "E";
zielton = measured_note - E2;
LowM =    E2L;
TargetM = E2;
HighM =   E2H;
):

Measured_note > a2L && measured_note < a2H ? (
#Note = "A";
zielton = measured_note - A2;
LowM =    A2L;
TargetM = A2;
HighM =   A2H;
):
Measured_note > D2L && measured_note < D2H ? (
#Note = "D";
zielton = measured_note - D2;
LowM =    D2L;
TargetM = D2;
HighM =   D2H;
):
Measured_note > G2L && measured_note < G2H ? (
#Note = "G";
zielton = measured_note - G2;
LowM =    G2L;
TargetM = G2;
HighM =   G2H;
):
Measured_note > H2L && measured_note < H2H ? (
#Note = "H";
zielton = measured_note - H2;
LowM =    H2L;
TargetM = H2;
HighM =   H2H;
):
Measured_note > E3L && measured_note < E3H ? (
#Note = "E";
zielton = measured_note - E3;
LowM =    E3L;
TargetM = E3;
HighM =   E3H;
):
Measured_note > a3L && measured_note < a3H ? (
#Note = "A";
zielton = measured_note - A3;
LowM =    A3L;
TargetM = A3;
HighM =   A3H;
):
Measured_note > D3L && measured_note < D3H ? (
#Note = "D";
zielton = measured_note - D3;
LowM =    D3L;
TargetM = D3;
HighM =   D3H;
):
Measured_note > G3L && measured_note < G3H ? (
#Note = "G";
zielton = measured_note - G3;
LowM =    G3L;
TargetM = G3;
HighM =   G3H;
):
Measured_note > H3L && measured_note < H3H ? (
#Note = "H";
zielton = measured_note - H3;
LowM =    H3L;
TargetM = H3;
HighM =   H3H;
):
Measured_note > E4L && measured_note < E4H ? (
#Note = "E";
zielton = measured_note - E4;
LowM =    E4L;
TargetM = E4;
HighM =   E4H;
):
Measured_note > a4L && measured_note < a4H ? (
#Note = "A";
zielton = measured_note - A4;
LowM =    A4L;
TargetM = A4;
HighM =   A4H;
):
Measured_note > D4L && measured_note < D4H ? (
#Note = "D";
zielton = measured_note - D4;
LowM =    D4L;
TargetM = D4;
HighM =   D4H;
):
Measured_note > G4L && measured_note < G4H ? (
#Note = "G";
zielton = measured_note - G4;
LowM =    G4L;
TargetM = G4;
HighM =   G4H;
):
Measured_note > H4L && measured_note < H4H ? (
#Note = "H";
zielton = measured_note - H4;
LowM =    H4L;
TargetM = H4;
HighM =   H4H;
);

*/




chorus_chain_pos != chorus_chain_pos_old || chorus_on != chorus_on_old || chorus_position != chorus_position_old ? (
chorus_chain_pos_old = chorus_chain_pos;
chorus_on_old = chorus_on;
chorus_position_old = chorus_position;
chorus_fade = 0;
clear_chorus_buffer();
);// 

delay_chain_pos != delay_chain_pos_old || delay_on != delay_on_old || delay_position != delay_position_old ? (
delay_chain_pos_old = delay_chain_pos;
delay_on_old = delay_on;
delay_position_old = delay_position;
memset(delayL.delay.buf,0,delayL.delay.size);
memset(delayR.delay.buf,0,delayR.delay.size);
);// clear_delay_buffer();




current_chain_pos = 1;
loop(9,
current_chain_pos < amp_chain_pos ? (

chorus_chain_pos == current_chain_pos ? (
chorus_position && chorus_on ? (
chorus_fade_dif = srate / 10;
chorus_fade < chorus_Mix ? (
chorusL.chorus_set_bal(chorus_fade);
chorusR.chorus_set_bal(chorus_fade);
chorus_fade += 1 / chorus_fade_dif;
);
spl0 = db2ratio(chorus_mix*3)*chorusL.chorus_do_2(spl0);
chorus_Stereo ? spl1 = db2ratio(chorus_mix*3)*chorusR.chorus_do_2(spl1) : spl1 = spl0;
);
);

flanger_chain_pos == current_chain_pos ? (
flanger_position && flanger_on ? (
flanger_lfo();
spl0 = FlangerL.flanger_do_amp(spl0);
spl1 = FlangerR.flanger_do_amp(spl1);
);
);

phaser_chain_pos == current_chain_pos ? (
phaser_position && phaser_on ? (
phaser_do();
);
);

dist_chain_pos == current_chain_pos ? (
dist_position && dist_on ? (
dist_clip == 1 ? (
distamp = scale(dist_scaler, 0, 1, 1, 0.9, 2);
spl0 = db2ratio(-20)*disL.disto_do(db2ratio(20)*spl0) * distamp*dist_output_factor;
spl1 = db2ratio(-20)*disR.disto_do(db2ratio(20)*spl1) * distamp*dist_output_factor;
):(
distamp = db2ratio(-ratio2db(dist_clip) + 10);
spl0 = db2ratio(-35)*min(max(-dist_clip, db2ratio(35)*spl0), dist_clip);// * distamp;
spl1 = db2ratio(-35)*min(max(-dist_clip, db2ratio(35)*spl1), dist_clip);// * distamp;
spl0 = db2ratio(0)*disL.disto_do(db2ratio(0)*spl0) * distamp*dist_output_factor;
spl1 = db2ratio(0)*disR.disto_do(db2ratio(0)*spl1) * distamp*dist_output_factor;
);
);
);

trem_chain_pos == current_chain_pos ? (
trem_position && trem_on ? (
trem_lfo();
spl0=spl0*((amp_tanh(trem_shape*cos(Tremolo_phase_position*2*$pi))+1) * trem_sc + trem_amount);
spl1=spl1*((amp_tanh(trem_shape*cos(Tremolo_phase_position*2*$pi+trem_sep))+1) * trem_sc + trem_amount);
//trem_pos+=trem_adv;
//trem_pos >= 2*$pi ? trem_pos = 0;
);
);

wah_chain_pos == current_chain_pos ? (
wah_position && wah_on ? (
wah_mode == 0 ? (
   fil_freq = 4.8+slider49/4.8;
   fil_q = 10-slider49 + 4;
   wah_boost = 20 - slider49/2;
   ):(
   fil_freq = 5.4+slider49/5;
   fil_q = 5.8;
   wah_boost = 10 + slider49;
   );
   Lfilter.setfilter(fil_type, per_to_freq(Fil_freq*10,100), fil_q, fil_gain);
   Rfilter.setfilter(fil_type, per_to_freq(Fil_freq*10,100), fil_q, fil_gain);
   spl0 = db2ratio(wah_boost)*Lfilter.df1(spl0);
   spl1 = db2ratio(wah_boost)*Rfilter.df1(spl1);
);
);

delay_chain_pos == current_chain_pos ? (
delay_position && delay_on ? (
// read with cubic interpolation
delay_val0 = delayL.sdelay_read2(delay_samps);
delay_val1 = delayR.sdelay_read2(delay_samps);
// write values in delay lines 
delayL.sdelay_write(spl0 + delay_val0 * delay_feedback);
delayR.sdelay_write(spl1 + delay_val1 * delay_feedback);
// sum and output
spl0 = (spl0 + delay_val0*delay_amount);
spl1 = (spl1 + delay_val1*delay_amount);
);
);

rev_chain_pos == current_chain_pos ? (
revbal ? (
spl0 = spl0 + myverb_L.wgverb_do_amp(spl0) * revbal;
spl1 = spl1 + myverb_R.wgverb_do_amp(spl1) * revbal;
);
);

);
current_chain_pos += 1;
);


amp ? ( /// AMP


s0.os_up2(spl0);
s1.os_up2(spl1);

//////////////////////////////////////////////////////////// PREAMP

in0 = amp_tanh(s0.y1*PreGain*PreBoost);
in1 = amp_tanh(s1.y1*PreGain*PreBoost);

Gk = in0*Vk - Vk;
Vgk = 0.0357167 + 0.978574*Gk - 0.0857147*Gk*Gk - 0.0285716*Gk*Gk*Gk;
Ip = -0.0182*Vgk*Vgk*Vgk - 0.0233*Vgk*Vgk + 0.6117*Vgk + 1.6718;
Vp = Vs - Ip*Rp;
out0 = in0*Vp;

Gk = in1*Vk - Vk;
Vgk = 0.0357167 + 0.978574*Gk - 0.0857147*Gk*Gk - 0.0285716*Gk*Gk*Gk;
Ip = -0.0182*Vgk*Vgk*Vgk - 0.0233*Vgk*Vgk + 0.6117*Vgk + 1.6718;
Vp = Vs - Ip*Rp;
out1 = in1*Vp;

S0.y1 = out0;
s1.y1 = out1;

in0 = amp_tanh(s0.y0*PreGain*PreBoost);
in1 = amp_tanh(s1.y0*PreGain*PreBoost);

Gk = in0*Vk - Vk;
Vgk = 0.0357167 + 0.978574*Gk - 0.0857147*Gk*Gk - 0.0285716*Gk*Gk*Gk;
Ip = -0.0182*Vgk*Vgk*Vgk - 0.0233*Vgk*Vgk + 0.6117*Vgk + 1.6718;
Vp = Vs - Ip*Rp;
out0 = in0*Vp;

Gk = in1*Vk - Vk;
Vgk = 0.0357167 + 0.978574*Gk - 0.0857147*Gk*Gk - 0.0285716*Gk*Gk*Gk;
Ip = -0.0182*Vgk*Vgk*Vgk - 0.0233*Vgk*Vgk + 0.6117*Vgk + 1.6718;
Vp = Vs - Ip*Rp;
out1 = in1*Vp;

s0.y0 = out0;
S1.y0 = out1;

//////////////////////////////////////////////////////////// PREAMP


anti_alias == 0 ? (
postEQ == 0 ? s0.y0 = (amp_tanh(s0.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 0 ? s1.y0 = (amp_tanh(s1.y0*(5*level+0.1)*2)) * 0.5;
s0.y0=LSH_L.eq_do(s0.y0);
s1.y0=LSH_R.eq_do(s1.y0);
s0.y0=Low_L.eq_do(s0.y0);
s1.y0=Low_R.eq_do(s1.y0);
s0.y0=Mid_L.eq_do(s0.y0);
s1.y0=Mid_R.eq_do(s1.y0);
s0.y0=High_L.eq_do(s0.y0);
s1.y0=High_R.eq_do(s1.y0);
s0.y0=HSH_L.eq_do(s0.y0);
s1.y0=HSH_R.eq_do(s1.y0);

postEQ == 1 ? s0.y0 = (amp_tanh(s0.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 1 ? s1.y0 = (amp_tanh(s1.y0*(5*level+0.1)*2)) * 0.5;
//s0.y0 = (in0+amp_tanh(out0*(5*level+0.1)*2)) * 0.5;
//s1.y0 = (in1+amp_tanh(out1*(5*level+0.1)*2)) * 0.5;
spl0 = s0.y0;
spl1 = s1.y0;
):anti_alias ? (
postEQ == 0 ?s0.y0 = (amp_tanh(s0.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 0 ?s1.y0 = (amp_tanh(s1.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 0 ?s0.y1 = (amp_tanh(s0.y1*(5*level+0.1)*2)) * 0.5;
postEQ == 0 ?s1.y1 = (amp_tanh(s1.y1*(5*level+0.1)*2)) * 0.5;
s0.y1=LSH_L_Os2.eq_do(s0.y1);
s1.y1=LSH_R_Os2.eq_do(s1.y1);
s0.y1=Low_L_Os2.eq_do(s0.y1);
s1.y1=Low_R_Os2.eq_do(s1.y1);
s0.y1=Mid_L_Os2.eq_do(s0.y1);
s1.y1=Mid_R_Os2.eq_do(s1.y1);
s0.y1=High_L_Os2.eq_do(s0.y1);
s1.y1=High_R_Os2.eq_do(s1.y1);
s0.y1=HSH_L_Os2.eq_do(s0.y1);
s1.y1=HSH_R_Os2.eq_do(s1.y1);
s0.y0=LSH_L_Os2.eq_do(s0.y0);
s1.y0=LSH_R_Os2.eq_do(s1.y0);
s0.y0=Low_L_Os2.eq_do(s0.y0);
s1.y0=Low_R_Os2.eq_do(s1.y0);
s0.y0=Mid_L_Os2.eq_do(s0.y0);
s1.y0=Mid_R_Os2.eq_do(s1.y0);
s0.y0=High_L_Os2.eq_do(s0.y0);
s1.y0=High_R_Os2.eq_do(s1.y0);
s0.y0=HSH_L_Os2.eq_do(s0.y0);
s1.y0=HSH_R_Os2.eq_do(s1.y0);
postEQ == 1 ?s0.y0 = (amp_tanh(s0.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 1 ?s1.y0 = (amp_tanh(s1.y0*(5*level+0.1)*2)) * 0.5;
postEQ == 1 ?s0.y1 = (amp_tanh(s0.y1*(5*level+0.1)*2)) * 0.5;
postEQ == 1 ?s1.y1 = (amp_tanh(s1.y1*(5*level+0.1)*2)) * 0.5;
/*
s0.y0 = (amp_tanh(s0.y0*(5*level+0.1)*2)) * 0.5;
s1.y0 = (amp_tanh(s1.y0*(5*level+0.1)*2)) * 0.5;
s0.y1 = (amp_tanh(s0.y1*(5*level+0.1)*2)) * 0.5;
s1.y1 = (amp_tanh(s1.y1*(5*level+0.1)*2)) * 0.5;
*/
//s0.y1 = (in0+amp_tanh(out0*(5*level+0.1)*2)) * 0.5;
//s1.y1 = (in1+amp_tanh(out1*(5*level+0.1)*2)) * 0.5;
//s0.y0 = (in0+amp_tanh(out0*(5*level+0.1)*2)) * 0.5;
//s1.y0 = (in1+amp_tanh(out1*(5*level+0.1)*2)) * 0.5;

spl0 = s0.os_down2();
spl1 = s1.os_down2();
);






); // AMP







current_chain_pos = amp_chain_pos+1;
loop(9,
current_chain_pos < 10 ? (

chorus_chain_pos == current_chain_pos ? (
chorus_position && chorus_on ? (
spl0 = db2ratio(chorus_mix*3)*chorusL.chorus_do_2(spl0);
chorus_Stereo ? spl1 = db2ratio(chorus_mix*3)*chorusR.chorus_do_2(spl1) : spl1 = spl0;
);
);

flanger_chain_pos == current_chain_pos ? (
flanger_position && flanger_on ? (
flanger_lfo();
spl0 = FlangerL.flanger_do_amp(spl0);
spl1 = FlangerR.flanger_do_amp(spl1);
);
);

phaser_chain_pos == current_chain_pos ? (
phaser_position && phaser_on ? (
phaser_do();
);
);

dist_chain_pos == current_chain_pos ? (
dist_position && dist_on ? (
dist_clip == 1 ? (
distamp = scale(dist_scaler, 0, 1, 1, 0.9, 2);
spl0 = db2ratio(-20)*disL.disto_do(db2ratio(20)*spl0) * distamp*dist_output_factor;
spl1 = db2ratio(-20)*disR.disto_do(db2ratio(20)*spl1) * distamp*dist_output_factor;
):(
distamp = db2ratio(-ratio2db(dist_clip) + 10);
spl0 = db2ratio(-35)*min(max(-dist_clip, db2ratio(35)*spl0), dist_clip);// * distamp;
spl1 = db2ratio(-35)*min(max(-dist_clip, db2ratio(35)*spl1), dist_clip);// * distamp;
spl0 = db2ratio(0)*disL.disto_do(db2ratio(0)*spl0) * distamp*dist_output_factor;
spl1 = db2ratio(0)*disR.disto_do(db2ratio(0)*spl1) * distamp*dist_output_factor;
);
);
);

trem_chain_pos == current_chain_pos ? (
trem_position && trem_on ? (
trem_lfo();
spl0=spl0*((amp_tanh(trem_shape*cos(Tremolo_phase_position*2*$pi))+1) * trem_sc + trem_amount);
spl1=spl1*((amp_tanh(trem_shape*cos(Tremolo_phase_position*2*$pi+trem_sep))+1) * trem_sc + trem_amount);
);
);

wah_chain_pos == current_chain_pos ? (
wah_position && wah_on ? (
wah_mode == 0 ? (
   fil_freq = 4.8+slider49/4.8;
   fil_q = 10-slider49 + 4;
   wah_boost = 20 - slider49/2;
   ):(
   fil_freq = 5.4+slider49/5;
   fil_q = 5.8;
   wah_boost = 10 + slider49;
   );
   Lfilter.setfilter(fil_type, per_to_freq(Fil_freq*10,100), fil_q, fil_gain);
   Rfilter.setfilter(fil_type, per_to_freq(Fil_freq*10,100), fil_q, fil_gain);
   spl0 = db2ratio(wah_boost)*Lfilter.df1(spl0);
   spl1 = db2ratio(wah_boost)*Rfilter.df1(spl1);
);
);

delay_chain_pos == current_chain_pos ? (
delay_position && delay_on ? (
// read with cubic interpolation
delay_val0 = delayL.sdelay_read2(delay_samps);
delay_val1 = delayR.sdelay_read2(delay_samps);
// write values in delay lines 
delayL.sdelay_write(spl0 + delay_val0 * delay_feedback);
delayR.sdelay_write(spl1 + delay_val1 * delay_feedback);
// sum and output
spl0 = (spl0 + delay_val0*delay_amount);
spl1 = (spl1 + delay_val1*delay_amount);
);
);

rev_chain_pos == current_chain_pos ? (
revbal ? (
spl0 = spl0 + myverb_L.wgverb_do_amp(spl0) * revbal;
spl1 = spl1 + myverb_R.wgverb_do_amp(spl1) * revbal;
);
);

);
current_chain_pos += 1;
);





init_ir == 1 ? (IR_Switch = 0.5; init_ir = 0; IR_Fade = 1);


IR_Switch == 0.5 ? (
spl0 *= 0;//max(IR_Fade,0);
spl1 *= 0;//max(IR_Fade,0);
fade_dif = srate / 100; // 2ms
IR_Fade -= 1 / fade_dif;
IR_Fade_min = min(IR_Fade_min, IR_Fade);
);

//IR_Fade <= 0 ? (
//IR_switch = 1;
//spl0 *= max(IR_Fade,0);
//spl1 *= max(IR_Fade,0);
//);


   IR_Fade <= 0 ? (
     IR_Switch < 3 ? (
       IR_Switch = 1;
       //caller = 1;
       spl0 *= max(IR_Fade,0);
       spl1 *= max(IR_Fade,0);
       //switch_IR();
       IR_Fade_count = 0;
     );
   );

IR_Switch == 3 ? (
spl0 = spl1 = 0;
IR_fade_count += 100;
IR_fade_count >= srate / 1 ? IR_Switch = 4;
);

IR_Switch == 4 ? (
spl0 *= max(IR_Fade,0);
spl1 *= max(IR_Fade,0);
fade_dif = srate / 200; // 2ms
IR_Fade += 1 / fade_dif;
IR_Fade >= 1 ? (IR_Switch = 0; IR_Fade =1);
);


spl0 *= Compensation_Gain;
spl1 *= Compensation_Gain;



cabinet_on ? (
filtersize > 0 ?
(

bpos >= chunksize ? 
(
  t=lastblock;
  lastblock=curblock;
  curblock=t;

  memset(curblock+chunksize*2,0,(fftsize-chunksize)*2);

  fft(curblock,fftsize);
  convolve_c(curblock,convsrc,fftsize);

  ifft(curblock,fftsize);

  bpos=0;
);

// save sample
bp2=bpos*2;
lastblock[bp2]=spl0*preamp;
lastblock[bp2+1]=stereo_mode ? (spl1*preamp) : 0;

spl0=curblock[bp2];
spl1=curblock[bp2+1];

bpos < fftsize-chunksize ? 
(
  spl0+=lastblock[chunksize2+bp2];
  spl1+=lastblock[chunksize2+bp2+1];
);


bpos += 1;

);
);



tuner_on ? spl0 = spl1 = 0;

postgain < realpostgain ? realpostgain -= 1/(200*srate*0.001);
postgain > realpostgain ? realpostgain += 1/(200*srate*0.001);

floor(10*ratio2db(postgain)) == floor(10*ratio2db(realpostgain)) ? realpostgain = postgain;

microphone == 3 ? realpostgainy = (44100 / srate) : realpostgainy = 1;
spl0 *= realpostgain * realpostgainy;
spl1 *= realpostgain * realpostgainy;

); // Process











@gfx 982 663
    function Amp_knoblabelposition (textw) (
    //gfx_setfont(1,"Arial",12*zoom,'b');
    gfx_x = (this.xIn * zoom) + (ampknobscale*this.size*zoom/4) - (textw / 2); gfx_y = (this.yIn * zoom) + (ampknobscale*this.size*zoom / 2) + (2 * zoom);
    );
  
//zoom = slider6;
s2_zoom_X = gfx_w / 982;
s2_zoom_y = gfx_h / 663;
zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
zoom_off == 1 ? zoom = gfx_ext_retina;
//zoom = gfx_ext_retina * slider5; // CHANGE THIS!
mouseHold = mouse_cap & 1;
press_superkey = mouse_cap & 32;
press_ctrl = mouse_cap & 4;
press_shift = mouse_cap & 8;
press_alt = mouse_cap & 16;
superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
!press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
!press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
!press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
!press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
!press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;

mouseClick = mouseHold - lastCap;
lastCap = mouseHold;









gfx_ext_flags == 0 ? (

rgb(100,100,100);
gfx_rect(0,0,gfx_w,gfx_h);
gfx_x = 40*zoom; gfx_y = 35*zoom;
amp == 1 || amp == 4 ? gfx_blit(6,zoom/2,0);
amp == 2 ? gfx_blit(6,zoom/2,0,0,250,1550,250);
amp == 3 ? gfx_blit(6,zoom/2,0,0,500,1550,250);

gfx_x = gfx_y = 0;
gfx_blit(7,0.5*zoom,0);

     gfx_setfont(1,"Arial",12*zoom,'b');
     
     //gfx_setfont(2,"Arial",10*zoom,'b');
     
     gfx_x = 830*zoom; gfx_y += 255*zoom;
     gfx_blit(20,zoom/1.4,0);
     
     black();
amp ? (

KPreGain.knob();
#label = "PreGain"; gfx_measurestr(#label, klw, klh); KPreGain.Amp_knoblabelposition(klw); gfx_drawstr(#label);
ytext = gfx_y;
KPostGain.knob();
//posteq == 0 ? #label = "PostGain->EQ" : #label = "EQ->Postgain";
#label = "PostGain";
gfx_measurestr(#label, klw, klh); KPostGain.Amp_knoblabelposition(klw); gfx_drawstr(#label);
KBass.knob();
#label = "Bass"; gfx_measurestr(#label, klw, klh); Kbass.Amp_knoblabelposition(klw); gfx_drawstr(#label);
KMid.knob();
#label = "Mids"; gfx_measurestr(#label, klw, klh); Kmid.Amp_knoblabelposition(klw); gfx_drawstr(#label);
Ktreble.knob();
#label = "Treble"; gfx_measurestr(#label, klw, klh); Ktreble.Amp_knoblabelposition(klw); gfx_drawstr(#label);
KBright.knob();
#label = "Bright"; gfx_measurestr(#label, klw, klh); Kbright.Amp_knoblabelposition(klw); gfx_drawstr(#label);
);

KReverb.knob();
#label = #rev_label; gfx_measurestr(#label, klw, klh); Kreverb.Amp_knoblabelposition(klw); 
gfx_x -= (zoom + 0.8*gfx_texth/2);
gfx_drawstr(#label);
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
KOutGain.knob();
#label = "Main Out"; gfx_measurestr(#label, klw, klh); KOutGain.Amp_knoblabelposition(klw); gfx_drawstr(#label);


cabinet_x = 200; cabinet_y = 160;
cabinet_on ? (
gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
gfx_blit(11, zoom/2, 0, 0, 468 * cabinet, 740, 468);
//gfx_blit(11, zoom/2, 0, 0, 0, 740, 468);
Mic_position == 1 ? gfx_x += 77*zoom;
gfx_blit(11, zoom/2, 0, 0, 468 * 4 + 468 * (microphone+1);, 740, 468);
);
gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
//gfx_blit(11, zoom/2, 0, 0, 468 * cabinet, 740, 468);
gfx_blit(11, zoom/2, 0, 0, 0, 740, 468);

     gfx_x += 40*zoom; gfx_y += 55*zoom;
     //gfx_blit(20,zoom/1.4,0);
     
//black();
//gfx_rect(480,200, 75,75);
bsize = 60;boffset = bsize + 5;
Cab_select_x = cabinet_x * zoom - 2.2 * boffset * zoom; Cab_select_y = cabinet_y * zoom + 40*zoom;
gfx_x = Cab_select_x; gfx_y = Cab_select_y;
gfx_blit(10, 0.8*zoom/2, 0, 0, 450, 150, 150);
cabinet == 1 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 600, 150, 150);
cabinet == 2 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x -= boffset*zoom; gfx_y += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 900, 150, 150);
cabinet == 3 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 750, 150, 150);
cabinet == 4 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);


Mic_select_x = cabinet_x * zoom + 396 * zoom; Mic_select_y = 40 *zoom + cabinet_y * zoom;
lightgrey();
gfx_x=Mic_select_x + 30*zoom; gfx_y = mic_select_y -30*zoom;
gfx_roundrect(gfx_x, gfx_y, 132*zoom, 20*zoom, 7*zoom);
gfx_x += 5*zoom; gfx_y += 4*zoom;
gfx_drawstr("MOVE MICROPHONE");

gfx_x = mic_select_x; gfx_y = mic_select_y;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1650, 150, 150);
cabinet_on ? microphone == 0 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1800, 150, 150);
cabinet_on ? microphone == 1 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x -= boffset*zoom; gfx_y += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1950, 150, 150);
cabinet_on ? microphone == 2 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 2100, 150, 150);
cabinet_on ? microphone == 3 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x -= boffset*zoom; gfx_y += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 2250, 150, 150);
cabinet_on ? microphone == 4 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 2400, 150, 150);
cabinet_on ? microphone == 5 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 2550, 150, 150);
cabinet_on ? microphone == 6 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_y -= boffset*zoom;      gfx_setfont(3,"Arial",15*zoom,'b'); tmpgfxx = gfx_x; tmpgfxy = gfx_y;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
cabinet_on == 0 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_y += gfx_texth; black();
gfx_drawstr("NO", 0x05, gfx_x + bsize*zoom, gfx_y + gfx_texth);
gfx_y += gfx_texth; gfx_x = tmpgfxx;
gfx_drawstr("CAB", 0x05, gfx_x + bsize*zoom, gfx_y + gfx_texth);
gfx_y = tmpgfxy - boffset*zoom; gfx_x = tmpgfxx;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
amp == 0 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_y += gfx_texth;
gfx_drawstr("NO", 0x05, gfx_x + bsize*zoom, gfx_y + gfx_texth);
gfx_y += gfx_texth; gfx_x = tmpgfxx;
gfx_drawstr("AMP", 0x05, gfx_x + bsize*zoom, gfx_y + gfx_texth);



Amp_select_x = 820 * zoom; Amp_select_y = 20 * zoom;
gfx_x = Amp_select_x; gfx_y = Amp_select_y;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10,0.8*zoom/2, 0, 0, 1050, 150, 150);
amp == 1 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1200, 150, 150);
amp == 2 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x -= boffset*zoom; gfx_y += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1350, 150, 150);
amp == 3 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);
gfx_x += boffset*zoom;
gfx_blit(10, 0.8*zoom/2, 0, 0, 0, 150, 150);
gfx_blit(10, 0.8*zoom/2, 0, 0, 1500, 150, 150);
amp == 4 ? greenframe = 1 : greenframe = 0;
gfx_blit(10, 0.8*zoom/2, 0, 0, 150*(1 + greenframe), 150, 150);

amp ? (
amp != 4 ? (gfx_x = KPreGain.xIn*zoom - 50*zoom; gfx_y = KPreGain.yIn*zoom + 10*zoom);
amp == 4 ? (gfx_x = KPreGain.xIn*zoom - 50*zoom; gfx_y = KPreGain.yIn*zoom + 10*zoom);
boostswitchx = gfx_x; boostswitch_y = gfx_y;
gfx_blit(16,0.5*zoom,0,0,120*(PreBoost != 1) ,96,120);
gfx_setfont(2,"Arial",12*zoom,'b');
gfx_x += 7*zoom; gfx_y -= gfx_texth;
gfx_drawstr("Boost");
gfx_x = KPreGain.xIn*zoom - 47*zoom; gfx_y = ytext; amp == 4 ? gfx_y -= 7*zoom;
gfx_drawstr("Normal");

//17 18 19
gfx_x = KOutGain.xIn*zoom + 80*zoom; gfx_y = KoutGain.yIn*zoom+20*zoom;
gate_on == 0 ? (
gfx_blit(17, zoom/4,0 ,0,0,128,128);
):(
gate_gain == 1 ? gfx_blit(19, zoom/4,0 ,0,128,128,128):
gate_gain == 0 ? gfx_blit(17, zoom/4,0 ,0,128,128,128):
gfx_blit(18, zoom/4,0 ,0,128,128,128);
);
gfx_y -= 10*zoom;
gfx_drawstr("Gate");
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
gate_handle_x = gfx_x - 30*zoom;
gate_handle_y = gfx_y;
//gfx_roundrect(gfx_x-30*zoom, gfx_y, 45*zoom, 15*zoom,0);
);

gate_box ? (
gfx_x = 820*zoom; gfx_y = 180*zoom;gfx_blit(8,0.5*zoom,0,146+200+300+268+180+256+120,0,210,440);
//               KDist_drive.parameter_config   (36,      8,       0, 10,   gfx_dist_x/zoom + 2,  chain_y/zoom + 17,  150, 200,    0.8,       22);
black();
gfx_y += 3*zoom;
gfx_drawstr("GATE", 0x05, gfx_x + gfx_dist_w*zoom, gfx_y + gfx_texth);
gfx_x = 820*zoom;
               KGatethreshold.parameter_config   (15,      -50,       -90, -12,   820 + 23,  amp_knobs_y + 155,  150, 200,    0.8,       22);
               Kgaterelease.parameter_config   (16,      50,        1,   250,   820 + 23,  amp_knobs_y + 255,  150, 200,    0.8,       22);


//gfx_x = KGatethreshold.xIn * zoom - 22*zoom;
//gfx_y = KGatethreshold.yIn * zoom - 5*zoom;
//gfx_blit(21, zoom/4,0);
KGateThreshold.knob();
gfx_x -= 8*zoom;
#label = "THRESHOLD"; gfx_measurestr(#label, klw, klh); KGateThreshold.amp_knoblabelposition(klw); gfx_y -= gfx_texth*0.3; gfx_drawstr(#label);
#label = "DETECT"; gfx_measurestr(#label, klw, klh); KGateThreshold.amp_knoblabelposition(klw); gfx_y += 1.2*gfx_texth;
gate_detect_handle_x = gfx_x -5*zoom; gate_detect_handle_y = gfx_y-2*zoom;
gate_detect_handle_w = klw + 10*zoom;
gate_detect_handle_h = klh;

gfx_roundrect(gate_detect_handle_x, gate_detect_handle_y,gate_detect_handle_w, gate_detect_handle_h, 4*zoom);
gfx_drawstr(#label);

KGateRelease.knob();
#label = "RELEASE"; gfx_measurestr(#label, klw, klh); KGaterelease.amp_knoblabelposition(klw); gfx_y -= gfx_texth*0.3; gfx_drawstr(#label);
);



gfx_dist_w = 105;
gfx_wah_w = 75;
gfx_delay_w = 100;
gfx_phaser_w = 150;
gfx_flanger_w = 134;
gfx_chorus_w = 90;
gfx_trem_w = 128;
gfx_rev_w = 30;
gfx_amp_w = 30;
gfx_spacer_w = 10;

chain_x = 30*zoom; chain_y = 430*zoom; chain_h = 220*zoom;
spacer0_x = chain_x - gfx_spacer_w*zoom;
pos_loop = 1;
loop(9,
dist_chain_pos    == pos_loop ? (gfx_dist_x = chain_x; chain_x += gfx_dist_w*zoom); 
wah_chain_pos     == pos_loop ? (gfx_wah_x = chain_x; chain_x += gfx_wah_w*zoom); 
delay_chain_pos   == pos_loop ? (gfx_delay_x = chain_x; chain_x += gfx_delay_w*zoom); 
phaser_chain_pos  == pos_loop ? (gfx_phaser_x = chain_x; chain_x += gfx_phaser_w*zoom); 
flanger_chain_pos == pos_loop ? (gfx_flanger_x = chain_x; chain_x += gfx_flanger_w*zoom); 
chorus_chain_pos  == pos_loop ? (gfx_chorus_x = chain_x; chain_x += gfx_chorus_w*zoom); 
trem_chain_pos    == pos_loop ? (gfx_trem_x = chain_x; chain_x += gfx_trem_w*zoom); 
rev_chain_pos     == pos_loop ? (gfx_rev_x = chain_x; chain_x += gfx_rev_w*zoom); 
amp_chain_pos     == pos_loop ? (gfx_amp_x = chain_x; chain_x += gfx_amp_w*zoom);
pos_loop == 1 ? spacer1_x = chain_x;
pos_loop == 2 ? spacer2_x = chain_x;
pos_loop == 3 ? spacer3_x = chain_x;
pos_loop == 4 ? spacer4_x = chain_x;
pos_loop == 5 ? spacer5_x = chain_x;
pos_loop == 6 ? spacer6_x = chain_x;
pos_loop == 7 ? spacer7_x = chain_x;
pos_loop == 8 ? spacer8_x = chain_x;
pos_loop == 9 ? spacer9_x = chain_x;
chain_x += gfx_spacer_w*zoom;
pos_loop += 1;
);

//black();
//gfx_rect(30*zoom, chain_y -  1.8*gfx_texth, 923, gfX_texth);

gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = 30*zoom; gfx_y = chain_y - 1.8*gfx_texth; lightgrey();
gfx_drawstr("(CHANGE THE ORDER OF THE PEDALS BY DRAGGING THEM)", 0x05, 953*zoom, gfx_y + gfx_texth);





close_y = chain_y + 5*zoom;

//rgb(250, 100, 0);
//gfx_rect(gfx_dist_x, chain_y, gfx_dist_w*zoom, chain_h);
dist_position ? (gfx_x = gfx_dist_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300+268+180+256+120,0,210,440));
gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = gfx_dist_x; gfx_y = chain_y + 5*zoom;
dist_position ? black() : lightgrey();
gfx_drawstr("DISTORTION", 0x05, gfx_x + gfx_dist_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_dist_x+5*zoom; gfx_y = chain_y + 3*zoom;
dist_close_x = gfx_dist_x+3*zoom; 
gfx_roundrect(dist_close_x, close_y, 10*zoom, 10*zoom, 0);
dist_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

dist_position ? (
               KDist_drive.parameter_config   (36,      8,       0, 10,   gfx_dist_x/zoom + 2,  chain_y/zoom + 17,  150, 200,    0.8,       22);
               KDist_tone.parameter_config    (37,      6,    0, 10,   gfx_dist_x/zoom + 40,  chain_y/zoom + 67,  150, 200,    0.8,       22);
               KDist_Out.parameter_config     (39,      0,    -18, 18,   gfx_dist_x/zoom + 2,  chain_y/zoom + 117,  150, 200,    0.8,       22);
  
KDist_drive.knob();
black(); gfx_setfont(2,"Arial",10*zoom,'b');
gfx_x = KDist_drive.xIn*zoom + 60*zoom; gfx_y = KDist_drive.yIn*zoom + 22*zoom; gfx_drawstr("DRIVE");
KDist_TONE.knob();
gfx_x = KDist_tone.xIn*zoom - 25*zoom; gfx_y = KDist_tone.yIn*zoom + 22*zoom; gfx_drawstr("TONE");
KDist_out.knob();
gfx_x = KDist_out.xIn*zoom + 60*zoom; gfx_y = KDist_out.yIn*zoom + 22*zoom; gfx_drawstr("LEVEL");

gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = KDist_out.xIn*zoom + 62*zoom; gfx_y = KDist_out.yIn*zoom + 42*zoom; 
gfx_roundrect(gfx_x -6*zoom, gfx_y - 2*zoom, 40*zoom, gfx_texth + 3*zoom, 5*zoom);
dist_type ? gfx_drawstr("DS") : gfx_drawstr("TS");
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);

gfx_x = gfx_dist_x + gfx_dist_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_dist_x + gfx_dist_w*zoom - 20*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
dist_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);
);


//rgb(250, 100, 100);
//gfx_rect(gfx_wah_x, chain_y, gfx_wah_w*zoom, chain_h);

wah_position ? (gfx_x = gfx_wah_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,0,0,150-2,440));
gfx_setfont(1,"Arial",12*zoom,'b');
wah_position ? black() : lightgrey();
gfx_x = gfx_wah_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("WAH", 0x05, gfx_x + gfx_wah_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_wah_x+5*zoom; gfx_y = chain_y + 3*zoom;
wah_close_x = gfx_wah_x+3*zoom; 
gfx_roundrect(wah_close_x, close_y, 10*zoom, 10*zoom, 0);
wah_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

wah_position ? (

               KWah_Freq.parameter_config   (49,      5,       0, 10,   gfx_wah_x/zoom + 8,  chain_y/zoom + 37,  150, 200,    0.8,       22);
               
               KWah_Freq.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = KWah_Freq.xIn*zoom + 17*zoom; gfx_y = KWah_Freq.yIn*zoom + 57*zoom; gfx_drawstr("FREQ.");
               
               gfx_setfont(2,"Arial",12*zoom,'b');
               gfx_x = gfx_wah_x+17*zoom; gfx_y = Kwah_freq.yIn*zoom + 105*zoom;
               gfx_roundrect(gfx_x - 4*zoom, gfx_y - 3*zoom, 48*zoom, gfx_texth + 3*zoom, 5*zoom);
               gfx_drawstr(wah_mode ? "MRL" : "DCB");//, 0x05, gfx_x + gfx_wah_w*zoom, gfx_y + gfx_texth);

               gfx_triangle(
               gfx_x +3*zoom, gfx_y + gfx_texth/4, 
               gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
               gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
               
gfx_x = gfx_wah_x + gfx_wah_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_wah_x + gfx_wah_w*zoom - 23*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
wah_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);
               
);





//rgb(50, 180, 100);
//gfx_rect(gfx_delay_x, chain_y, gfx_delay_w*zoom, chain_h);
delay_position ? (gfx_x = gfx_delay_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146,0,200-2,440));
gfx_setfont(1,"Arial",12*zoom,'b');
delay_position ? black() : lightgrey();
gfx_x = gfx_delay_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("DELAY", 0x05, gfx_x + gfx_Delay_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_delay_x+5*zoom; gfx_y = chain_y + 3*zoom;
delay_close_x = gfx_delay_x+3*zoom; 
gfx_roundrect(delay_close_x, close_y, 10*zoom, 10*zoom, 0);
delay_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

delay_position ? (

last_clicked_slot == DELAY_chain_pos ? (
gfx_x = 820*zoom; gfx_y = 180*zoom;gfx_blit(8,0.5*zoom,0,146,0,200-2,440);
gfx_y += 3*zoom;
gfx_drawstr("DELAY", 0x05, gfx_x + gfx_DELAY_w*zoom, gfx_y + gfx_texth);
time_sync_x = 840*zoom;
time_sync_y = 220*zoom;
time_sync_w = 60*zoom;
time_sync_h = 15*zoom;
black();
gfx_rect(time_sync_x,time_sync_y,time_sync_w,time_sync_h);
rgb(220,220,220);
gfx_roundrect(time_sync_x,time_sync_y,time_sync_w,time_sync_h,0);
gfx_x = time_sync_x + time_sync_w - 18*zoom;
gfx_y = time_sync_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
DELAY_sync_Selection_tmp == 0 ? #textout = "8 Bars":
DELAY_sync_Selection_tmp == 1 ? #textout = "4 Bars":
DELAY_sync_Selection_tmp == 2 ? #textout = "2 Bars":
DELAY_sync_Selection_tmp == 3 ? #textout = "1 Bar":
DELAY_sync_Selection_tmp == 4 ? #textout = "1/2":
DELAY_sync_Selection_tmp == 5 ? #textout = "1/4":
DELAY_sync_Selection_tmp == 6 ? #textout = "1/8":
DELAY_sync_Selection_tmp == 7 ? #textout = "1/16":
DELAY_sync_Selection_tmp == 8 ? #textout = "1/32":
#textout = "OFF";
gfx_x =time_sync_x+4*zoom; gfx_y = time_sync_y+zoom;
gfx_drawstr(#textout);

time_sync2_x = 840*zoom;
time_sync2_y = 250*zoom;
time_sync2_w = 60*zoom;
time_sync2_h = 15*zoom;
black();
gfx_rect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h);
rgb(220,220,220);
gfx_roundrect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h,0);
gfx_x = time_sync2_x + time_sync2_w - 18*zoom;
gfx_y = time_sync2_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
DELAY_time_sync_2 == 1 ? #textout = "OFF":
DELAY_time_sync_2 == 2/3 ? #textout = "Triplet":
DELAY_time_sync_2 == 1.5 ? #textout = "Dotted";
gfx_x =time_sync2_x+4*zoom; gfx_y = time_sync2_y+zoom;
gfx_drawstr(#textout);

DELAY_advanced_on = 1;
):(DELAY_advanced_on = 0);

               KDelay_time.parameter_config     (52,      250,       1, 1000,   gfx_delay_x/zoom + 2,  chain_y/zoom + 17,  150, 200,    0.8,       22);
               KDelay_Feedback.parameter_config (53,      2,    0, 10,   gfx_delay_x/zoom + 40,  chain_y/zoom + 67,  150, 200,    0.8,       22);
               KDelay_Mix.parameter_config      (54,      3,    0, 10,   gfx_delay_x/zoom + 2,  chain_y/zoom + 117,  150, 200,    0.8,       22);
               
KDelay_time.knob();
black(); gfx_setfont(2,"Arial",10*zoom,'b');
gfx_x = KDelay_time.xIn*zoom + 60*zoom; gfx_y = KDelay_Time.yIn*zoom + 22*zoom; gfx_drawstr("TIME");
KDelay_Feedback.knob();
gfx_x = KDelay_Feedback.xIn*zoom - 32*zoom; gfx_y = KDelay_Feedback.yIn*zoom + 22*zoom; gfx_drawstr("FEEDB.");
KDelay_Mix.knob();
gfx_x = KDelay_Mix.xIn*zoom + 60*zoom; gfx_y = KDelay_Mix.yIn*zoom + 22*zoom; gfx_drawstr("MIX");

gfx_x = gfx_delay_x + gfx_delay_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_delay_x + gfx_delay_w*zoom - 22*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
delay_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);
              
);


//rgb(20, 150, 250);
//gfx_rect(gfx_phaser_x, chain_y, gfx_phaser_w*zoom, chain_h);
phaser_position ? (gfx_x = gfx_phaser_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200,0,300,440));
gfx_setfont(1,"Arial",12*zoom,'b');
phaser_position ? black() : lightgrey();
gfx_x = gfx_phaser_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("PHASER", 0x05, gfx_x + gfx_phaser_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_phaser_x+5*zoom; gfx_y = chain_y + 3*zoom;
phaser_close_x = gfx_phaser_x+3*zoom; 
gfx_roundrect(phaser_close_x, close_y, 10*zoom, 10*zoom, 0);
phaser_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

phaser_position ? (

last_clicked_slot == Phaser_chain_pos ? (
gfx_x = 820*zoom; gfx_y = 180*zoom;gfx_blit(8,0.5*zoom,0,146+200,0,300,440);
gfx_y += 3*zoom;
gfx_drawstr("PHASER", 0x05, gfx_x + gfx_Phaser_w*zoom, gfx_y + gfx_texth);
time_sync_x = 865*zoom;
time_sync_y = 220*zoom;
time_sync_w = 60*zoom;
time_sync_h = 15*zoom;
black();
gfx_rect(time_sync_x,time_sync_y,time_sync_w,time_sync_h);
rgb(220,220,220);
gfx_roundrect(time_sync_x,time_sync_y,time_sync_w,time_sync_h,0);
gfx_x = time_sync_x + time_sync_w - 18*zoom;
gfx_y = time_sync_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Phaser_sync_Selection_tmp == 0 ? #textout = "8 Bars":
Phaser_sync_Selection_tmp == 1 ? #textout = "4 Bars":
Phaser_sync_Selection_tmp == 2 ? #textout = "2 Bars":
Phaser_sync_Selection_tmp == 3 ? #textout = "1 Bar":
Phaser_sync_Selection_tmp == 4 ? #textout = "1/2":
Phaser_sync_Selection_tmp == 5 ? #textout = "1/4":
Phaser_sync_Selection_tmp == 6 ? #textout = "1/8":
Phaser_sync_Selection_tmp == 7 ? #textout = "1/16":
Phaser_sync_Selection_tmp == 8 ? #textout = "1/32":
#textout = "OFF";
gfx_x =time_sync_x+4*zoom; gfx_y = time_sync_y+zoom;
gfx_drawstr(#textout);

time_sync2_x = 865*zoom;
time_sync2_y = 250*zoom;
time_sync2_w = 60*zoom;
time_sync2_h = 15*zoom;
black();
gfx_rect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h);
rgb(220,220,220);
gfx_roundrect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h,0);
gfx_x = time_sync2_x + time_sync2_w - 18*zoom;
gfx_y = time_sync2_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Phaser_time_sync_2 == 0 ? #textout = "OFF":
Phaser_time_sync_2 == 1 ? #textout = "Triplet":
Phaser_time_sync_2 == 2 ? #textout = "Dotted";
gfx_x =time_sync2_x+4*zoom; gfx_y = time_sync2_y+zoom;
gfx_drawstr(#textout);

time_sync3_x = 865*zoom;
time_sync3_y = 280*zoom;
time_sync3_w = 60*zoom;
time_sync3_h = 15*zoom;
black();
gfx_rect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h);
rgb(220,220,220);
gfx_roundrect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h,0);
gfx_x = time_sync3_x + time_sync3_w - 18*zoom;
gfx_y = time_sync3_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Phaser_free_run == 0 ? #textout = "Free":
Phaser_free_run == 1 ? #textout = "Linked";
gfx_x =time_sync3_x+4*zoom; gfx_y = time_sync3_y+zoom;
gfx_drawstr(#textout);

               KPhaser_Shift.parameter_config   (62,      0,       0, 360,   864;,  300,  150, 200,    0.8,       22);
               KPhaser_shift.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = KPhaser_shift.xIn*zoom - 1*zoom; gfx_y = KPhaser_shift.yIn*zoom + 56*zoom; gfx_drawstr("PHASE SHIFT");
               
               
Phaser_advanced_on = 1;
):(Phaser_advanced_on = 0);


               KPhaser_Floor.parameter_config   (30,      2,       0, 10,   gfx_phaser_x/zoom + 5,  chain_y/zoom + 15,  150, 200,    0.8,       22);
               KPhaser_ceiling.parameter_config (31,      6,       0, 10,   gfx_phaser_x/zoom + 84,  chain_y/zoom + 15,  150, 200,    0.8,       22);              
               KPhaser_speed.parameter_config   (29,      0.5,       0, 10,   gfx_phaser_x/zoom + 44,  chain_y/zoom + 64,  150, 200,    0.8,       22);            
               KPhaser_Feedback.parameter_config(32,      9,         0, 10,   gfx_phaser_x/zoom + 5,  chain_y/zoom + 111,  150, 200,    0.8,       22);
               KPhaser_Mix.parameter_config     (33,      5,         0, 10,   gfx_phaser_x/zoom + 84,  chain_y/zoom + 111,  150, 200,    0.8,       22);
               
               KPhaser_floor.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = Kphaser_floor.xIn*zoom + 13*zoom; gfx_y = Kphaser_floor.yIn*zoom + 56*zoom; gfx_drawstr("FLOOR");
               KPhaser_ceiling.knob();
               gfx_x = Kphaser_ceiling.xIn*zoom + 13*zoom; gfx_y = Kphaser_ceiling.yIn*zoom + 56*zoom; gfx_drawstr("CEILING");
               KPhaser_speed.knob();
               gfx_x = Kphaser_speed.xIn*zoom + 18*zoom; gfx_y = Kphaser_speed.yIn*zoom + 56*zoom; gfx_drawstr("RATE");
               KPhaser_Feedback.knob();
               gfx_x = Kphaser_Feedback.xIn*zoom + 10*zoom; gfx_y = Kphaser_Feedback.yIn*zoom + 56*zoom; gfx_drawstr("FEEDBK");
               KPhaser_Mix.knob();
               gfx_x = Kphaser_mix.xIn*zoom + 22*zoom; gfx_y = Kphaser_mix.yIn*zoom + 56*zoom; gfx_drawstr("MIX");
gfx_x = gfx_phaser_x + gfx_phaser_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_phaser_x + gfx_phaser_w*zoom - 23*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
phaser_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);
   
);

//rgb(250, 10, 10);
//gfx_rect(gfx_flanger_x, chain_y, gfx_flanger_w*zoom, chain_h);
flanger_position ? (gfx_x = gfx_flanger_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300,0,268,440));
gfx_setfont(1,"Arial",12*zoom,'b');
flanger_position ? black() : lightgrey();
gfx_x = gfx_flanger_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("FLANGER", 0x05, gfx_x + gfx_flanger_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_flanger_x+5*zoom; gfx_y = chain_y + 3*zoom;
flanger_close_x = gfx_flanger_x+3*zoom; 
gfx_roundrect(flanger_close_x, close_y, 10*zoom, 10*zoom, 0);
flanger_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

flanger_position ? (

last_clicked_slot == Flanger_chain_pos ? (
gfx_x = 820*zoom; gfx_y = 180*zoom;gfx_blit(8,0.5*zoom,0,146+200+300,0,268,440);
gfx_y += 3*zoom;
gfx_drawstr("FLANGER", 0x05, gfx_x + gfx_Flanger_w*zoom, gfx_y + gfx_texth);
time_sync_x = 858*zoom;
time_sync_y = 220*zoom;
time_sync_w = 60*zoom;
time_sync_h = 15*zoom;
black();
gfx_rect(time_sync_x,time_sync_y,time_sync_w,time_sync_h);
rgb(220,220,220);
gfx_roundrect(time_sync_x,time_sync_y,time_sync_w,time_sync_h,0);
gfx_x = time_sync_x + time_sync_w - 18*zoom;
gfx_y = time_sync_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Flanger_sync_Selection_tmp == 0 ? #textout = "8 Bars":
Flanger_sync_Selection_tmp == 1 ? #textout = "4 Bars":
Flanger_sync_Selection_tmp == 2 ? #textout = "2 Bars":
Flanger_sync_Selection_tmp == 3 ? #textout = "1 Bar":
Flanger_sync_Selection_tmp == 4 ? #textout = "1/2":
Flanger_sync_Selection_tmp == 5 ? #textout = "1/4":
Flanger_sync_Selection_tmp == 6 ? #textout = "1/8":
Flanger_sync_Selection_tmp == 7 ? #textout = "1/16":
Flanger_sync_Selection_tmp == 8 ? #textout = "1/32":
#textout = "OFF";
gfx_x =time_sync_x+4*zoom; gfx_y = time_sync_y+zoom;
gfx_drawstr(#textout);

time_sync2_x = 858*zoom;
time_sync2_y = 250*zoom;
time_sync2_w = 60*zoom;
time_sync2_h = 15*zoom;
black();
gfx_rect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h);
rgb(220,220,220);
gfx_roundrect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h,0);
gfx_x = time_sync2_x + time_sync2_w - 18*zoom;
gfx_y = time_sync2_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Flanger_time_sync_2 == 0 ? #textout = "OFF":
Flanger_time_sync_2 == 1 ? #textout = "Triplet":
Flanger_time_sync_2 == 2 ? #textout = "Dotted";
gfx_x =time_sync2_x+4*zoom; gfx_y = time_sync2_y+zoom;
gfx_drawstr(#textout);

time_sync3_x = 858*zoom;
time_sync3_y = 280*zoom;
time_sync3_w = 60*zoom;
time_sync3_h = 15*zoom;
black();
gfx_rect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h);
rgb(220,220,220);
gfx_roundrect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h,0);
gfx_x = time_sync3_x + time_sync3_w - 18*zoom;
gfx_y = time_sync3_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Flanger_free_run == 0 ? #textout = "Free":
Flanger_free_run == 1 ? #textout = "Linked";
gfx_x =time_sync3_x+4*zoom; gfx_y = time_sync3_y+zoom;
gfx_drawstr(#textout);

               KFlanger_Shift.parameter_config   (56,      0,       0, 360,   857;,  300,  150, 200,    0.8,       22);
               KFlanger_shift.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = KFlanger_shift.xIn*zoom - 1*zoom; gfx_y = KFlanger_shift.yIn*zoom + 56*zoom; gfx_drawstr("PHASE SHIFT");
               
               
Flanger_advanced_on = 1;
):(Flanger_advanced_on = 0);

               KFlanger_Depth.parameter_config   (26,      9.9,       0, 10,   gfx_flanger_x/zoom + 35,  chain_y/zoom + 100,  150, 200,    0.8,       22);
               KFlanger_Speed.parameter_config   (24,      0.1,    0.001, 2,   gfx_flanger_x/zoom + 8,  chain_y/zoom + 30,  150, 200,    0.8,       22);
               KFlanger_Delay.parameter_config   (25,      5,    0, 10,   gfx_flanger_x/zoom + 68,  chain_y/zoom + 30,  150, 200,    0.8,       22);
               
               KFlanger_Depth.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = KFlanger_Depth.xIn*zoom + 14*zoom; gfx_y = KFlanger_Depth.yIn*zoom + 56*zoom; gfx_drawstr("DEPTH");
               KFlanger_Speed.knob();
               gfx_x = KFlanger_speed.xIn*zoom + 18*zoom; gfx_y = KFlanger_speed.yIn*zoom + 56*zoom; gfx_drawstr("RATE");
               KFlanger_delay.knob();
               gfx_x = KFlanger_delay.xIn*zoom + 14*zoom; gfx_y = KFlanger_delay.yIn*zoom + 56*zoom; gfx_drawstr("DELAY");

gfx_x = gfx_flanger_x + gfx_flanger_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_flanger_x + gfx_flanger_w*zoom - 23*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
flanger_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);
);               
               
//rgb(0, 190, 100);
//gfx_rect(gfx_chorus_x, chain_y, gfx_chorus_w*zoom, chain_h);
chorus_position ? (gfx_x = gfx_chorus_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300+268,0,180,440));
gfx_setfont(1,"Arial",12*zoom,'b');
chorus_position ? black() : lightgrey();
gfx_x = gfx_chorus_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("CHORUS", 0x05, gfx_x + gfx_chorus_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_chorus_x+5*zoom; gfx_y = chain_y + 3*zoom;
chorus_close_x = gfx_chorus_x+3*zoom; 
gfx_roundrect(chorus_close_x, close_y, 10*zoom, 10*zoom, 0);
chorus_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

chorus_position ? (

               KChorus_Depth.parameter_config   (19,      3.75,       0, 10,   gfx_chorus_x/zoom + 14,  chain_y/zoom + 20,  150, 200,    0.8,       22);
               KChorus_Mix.parameter_config     (21,      6,    0, 10,   gfx_chorus_x/zoom + 14,  chain_y/zoom + 85,  150, 200,    0.8,       22);
               
               KChorus_Depth.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = gfx_chorus_x; gfx_y = KChorus_Depth.yIn*zoom + 55*zoom;
               gfx_drawstr("DEPTH", 0x05, gfx_x + gfx_chorus_w*zoom, gfx_y + gfx_texth);
               
               KChorus_Mix.knob();
               gfx_x = gfx_chorus_x; gfx_y = KChorus_Mix.yIn*zoom + 55*zoom;
               gfx_drawstr("MIX", 0x05, gfx_x + gfx_chorus_w*zoom, gfx_y + gfx_texth);
               
               gfx_x = gfx_chorus_x; gfx_y = KChorus_Mix.yIn*zoom + 71*zoom;
               chorus_stereo ? gfx_x += 17*zoom : gfx_x += 23*zoom;
               gfx_drawstr(chorus_stereo ? "STEREO" : "MONO");//s, 0x05, gfx_x + gfx_chorus_w*zoom, gfx_y + gfx_texth);
               gfx_triangle(
               gfx_x +3*zoom, gfx_y + gfx_texth/4, 
               gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
               gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
               gfx_roundrect(gfx_chorus_x + 15*zoom, gfx_y - 1*zoom, gfx_chorus_w*zoom - 30*zoom, gfx_texth + 3* zoom,5*zoom);
               
gfx_x = gfx_chorus_x + gfx_chorus_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_chorus_x + gfx_chorus_w*zoom - 22*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
chorus_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);

);


//rgb(0, 180, 180);
//gfx_rect(gfx_trem_x, chain_y, gfx_trem_w*zoom, chain_h);
trem_position ? (gfx_x = gfx_trem_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300+268+180,0,256,440));
gfx_setfont(1,"Arial",12*zoom,'b');
trem_position ? black() : lightgrey();
gfx_x = gfx_trem_x; gfx_y = chain_y + 5*zoom;
gfx_drawstr("TREMOLO", 0x05, gfx_x + gfx_trem_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_trem_x+5*zoom; gfx_y = chain_y + 3*zoom;
trem_close_x = gfx_trem_x+3*zoom; 
gfx_roundrect(trem_close_x, close_y, 10*zoom, 10*zoom, 0);
trem_position ? (gfx_drawstr("x")) : (gfx_drawstr("o"));

trem_position ? (

last_clicked_slot == trem_chain_pos ? (
gfx_x = 820*zoom; gfx_y = 180*zoom;gfx_blit(8,0.5*zoom,0,146+200+300+268+180,0,256,440);
gfx_y += 3*zoom;
gfx_drawstr("TREMOLO", 0x05, gfx_x + gfx_trem_w*zoom, gfx_y + gfx_texth);
time_sync_x = 855*zoom;
time_sync_y = 220*zoom;
time_sync_w = 60*zoom;
time_sync_h = 15*zoom;
black();
gfx_rect(time_sync_x,time_sync_y,time_sync_w,time_sync_h);
rgb(220,220,220);
gfx_roundrect(time_sync_x,time_sync_y,time_sync_w,time_sync_h,0);
gfx_x = time_sync_x + time_sync_w - 18*zoom;
gfx_y = time_sync_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Tremolo_sync_Selection_tmp == 0 ? #textout = "8 Bars":
Tremolo_sync_Selection_tmp == 1 ? #textout = "4 Bars":
Tremolo_sync_Selection_tmp == 2 ? #textout = "2 Bars":
Tremolo_sync_Selection_tmp == 3 ? #textout = "1 Bar":
Tremolo_sync_Selection_tmp == 4 ? #textout = "1/2":
Tremolo_sync_Selection_tmp == 5 ? #textout = "1/4":
Tremolo_sync_Selection_tmp == 6 ? #textout = "1/8":
Tremolo_sync_Selection_tmp == 7 ? #textout = "1/16":
Tremolo_sync_Selection_tmp == 8 ? #textout = "1/32":
#textout = "OFF";
gfx_x =time_sync_x+4*zoom; gfx_y = time_sync_y+zoom;
gfx_drawstr(#textout);

time_sync2_x = 855*zoom;
time_sync2_y = 250*zoom;
time_sync2_w = 60*zoom;
time_sync2_h = 15*zoom;
black();
gfx_rect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h);
rgb(220,220,220);
gfx_roundrect(time_sync2_x,time_sync2_y,time_sync2_w,time_sync2_h,0);
gfx_x = time_sync2_x + time_sync2_w - 18*zoom;
gfx_y = time_sync2_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Tremolo_time_sync_2 == 0 ? #textout = "OFF":
Tremolo_time_sync_2 == 1 ? #textout = "Triplet":
Tremolo_time_sync_2 == 2 ? #textout = "Dotted";
gfx_x =time_sync2_x+4*zoom; gfx_y = time_sync2_y+zoom;
gfx_drawstr(#textout);

time_sync3_x = 855*zoom;
time_sync3_y = 280*zoom;
time_sync3_w = 60*zoom;
time_sync3_h = 15*zoom;
black();
gfx_rect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h);
rgb(220,220,220);
gfx_roundrect(time_sync3_x,time_sync3_y,time_sync3_w,time_sync3_h,0);
gfx_x = time_sync3_x + time_sync3_w - 18*zoom;
gfx_y = time_sync3_y + 2*zoom;
gfx_triangle(
gfx_x +3*zoom, gfx_y + gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth/2, gfx_y + 3*gfx_texth/4, 
gfx_x +3*zoom + 0.8*gfx_texth, gfx_y + gfx_texth/4);
Tremolo_free_run == 0 ? #textout = "Free":
Tremolo_free_run == 1 ? #textout = "Linked";
gfx_x =time_sync3_x+4*zoom; gfx_y = time_sync3_y+zoom;
gfx_drawstr(#textout);

               KTrem_Shift.parameter_config   (59,      0,       0, 360,   854;,  300,  150, 200,    0.8,       22);
               KTrem_shift.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = Ktrem_shift.xIn*zoom - 1*zoom; gfx_y = Ktrem_shift.yIn*zoom + 56*zoom; gfx_drawstr("PHASE SHIFT");
               
               
trem_advanced_on = 1;
):(trem_advanced_on = 0);

               KTrem_Speed.parameter_config   (42,      4,       0, 20,   gfx_trem_x/zoom + 4,  chain_y/zoom + 30,  150, 200,    0.8,       22);
               KTrem_Mix.parameter_config     (43,      10,       0, 10,  gfx_trem_x/zoom + 64,  chain_y/zoom + 30,  150, 200,    0.8,       22);
               KTrem_Stereo.parameter_config  (44,      0,       0, 10,   gfx_trem_x/zoom + 4,  chain_y/zoom + 105,  150, 200,    0.8,       22);
               KTrem_Shape.parameter_config   (45,      0,       0, 10,   gfx_trem_x/zoom + 64,  chain_y/zoom + 105,  150, 200,    0.8,       22);
               
               KTrem_Speed.knob();
               black(); gfx_setfont(2,"Arial",10*zoom,'b');
               gfx_x = Ktrem_speed.xIn*zoom + 18*zoom; gfx_y = Ktrem_speed.yIn*zoom + 56*zoom; gfx_drawstr("RATE");
               Ktrem_Mix.knob();
               gfx_x = Ktrem_mix.xIn*zoom + 22*zoom; gfx_y = Ktrem_mix.yIn*zoom + 56*zoom; gfx_drawstr("MIX");
               Ktrem_Stereo.knob();
               gfx_x = Ktrem_stereo.xIn*zoom + 10*zoom; gfx_y = Ktrem_stereo.yIn*zoom + 56*zoom; gfx_drawstr("STEREO");
               Ktrem_shape.knob();
               gfx_x = Ktrem_shape.xIn*zoom + 13*zoom; gfx_y = Ktrem_shape.yIn*zoom + 56*zoom; gfx_drawstr("SHAPE");

gfx_x = gfx_trem_x + gfx_trem_w*zoom * 0.5 - 20*zoom;
gfx_y = chain_y + 177*zoom;
gfx_blit(9,0.35*zoom,0);

gfx_x = gfx_trem_x + gfx_trem_w*zoom - 23*zoom;
gfx_y = chain_y - 1*zoom;
rgb(110,110,110); gfx_circle(gfx_x+11*zoom, gfx_y+10*zoom, 3*zoom,1);
trem_on ? gfx_blit(17, zoom/6,0 ,0,128,128,128) : gfx_blit(17, zoom/6,0 ,0,0,128,128);

);



//rgb(10, 10, 230);
//gfx_rect(gfx_rev_x, chain_y, gfx_rev_w*zoom, chain_h);
gfx_x = gfx_rev_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300+268+180+256+60,0,60,440);
gfx_setfont(1,"Arial",12*zoom,'b');
lightgrey();
gfx_x = gfx_rev_x; gfx_y = chain_y + 40*zoom;
gfx_drawstr("R", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_rev_x; gfx_y = chain_y + 55*zoom;
gfx_drawstr("E", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_rev_x; gfx_y = chain_y + 70*zoom;
gfx_drawstr("V", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_rev_x; gfx_y = chain_y + 85*zoom;
gfx_drawstr("E", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_rev_x; gfx_y = chain_y + 100*zoom;
gfx_drawstr("R", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_rev_x; gfx_y = chain_y + 115*zoom;
gfx_drawstr("B", 0x05, gfx_x + gfx_rev_w*zoom, gfx_y + gfx_texth);

/*
 //             KReverb.parameter_config    (14,      3,        0,     10,   amp_knobs_x +78*6,  amp_knobs_y,  150, 200,    ampknobscale,       ampknob);
 !amp ? last_clicked_slot == rev_chain_pos ? (
    rev_advanced_on = 1;
    gfx_x = 820*zoom; gfx_y = 180*zoom; gfx_blit(8,0.5*zoom,0,146,0,200-2,440);
 ):(rev_advanced_on = 0);
*/

//rgb(10, 10, 10);
//gfx_rect(gfx_amp_x, chain_y, gfx_amp_w*zoom, chain_h);
gfx_x = gfx_amp_x; gfx_y = chain_y;gfx_blit(8,0.5*zoom,0,146+200+300+268+180+256,0,60,440);
gfx_setfont(1,"Arial",12*zoom,'b');
lightgrey();
gfx_x = gfx_amp_x; gfx_y = chain_y + 60*zoom;
gfx_drawstr("A", 0x05, gfx_x + gfx_amp_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_amp_x; gfx_y = chain_y + 75*zoom;
gfx_drawstr("M", 0x05, gfx_x + gfx_amp_w*zoom, gfx_y + gfx_texth);
gfx_x = gfx_amp_x; gfx_y = chain_y + 90*zoom;
gfx_drawstr("P", 0x05, gfx_x + gfx_amp_w*zoom, gfx_y + gfx_texth);





white();
//gfx_roundrect(230*zoom, 210*zoom, 310,205,0);


 ////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG
 
 
 
       !Number_input ? (
  
      mouseClick == 1 ? (
      
      
      
      Kreverb.k_collision() ? (Kreverb.dragstart());
      gfx_setfont(1);
      g_collision(KReverb.xIn*zoom, ytext, KReverb.size*ampknobscale*zoom, 2*gfx_texth) ? (
      #allitems = "Ambience|Room|Short Spring|Long Spring|";
      gfx_x = KReverb.xIn*zoom; gfx_y = ytext;
      last_clicked_item = gfx_showmenu(#allitems);
      last_clicked_item > 0 ? slider13 = last_clicked_item-1;
      caller = 1;
      superkey ? (
      gmem[16*64 + 3] = 2;
      gmem[16*64 + 1] = 13;
      gmem[16*64 + 2] = slider13;
      );
      );
      
      Koutgain.k_collision() ? (Koutgain.dragstart()); 
      
      amp ? (
      KPreGain.k_collision() ? (KPreGain.dragstart());
      //KPostGain.k_collision() ? (!alt ? KPostGain.dragstart() : posteq == 1 ? posteq = 0 : posteq = 1);
      KPostGain.k_collision() ? KPostGain.dragstart();
      Kbass.k_collision() ? (Kbass.dragstart());
      Kmid.k_collision() ? (Kmid.dragstart()); 
      Ktreble.k_collision() ? (Ktreble.dragstart());
      Kbright.k_collision() ? (Kbright.dragstart()); 
      g_collision(boostswitchx+14*zoom, boostswitch_y, 20* zoom ,50*zoom) ? (slider(Bboost.slider) == 1 ? slider(Bboost.slider) = 0 : slider(Bboost.slider) = 1;caller = 1;bBoost.quicklink_button());
      
      !g_collision(820*zoom, 180*zoom, 300*zoom, chain_h) ? (
       g_collision(gate_handle_x, gate_handle_y, 45* zoom ,15*zoom) ? (gate_box == 1 ? gate_box = 0 : gate_box = 1):(gate_box = 0);
       );
      
      gate_box ? (
      KGateThreshold.k_collision() ? (KGateThreshold.dragstart());
      KGateRelease.k_collision() ? (KGateRelease.dragstart());
      g_collision(gate_detect_handle_x, gate_detect_handle_y, gate_detect_handle_w, gate_detect_handle_h) ? Gate_detect = 1;
      );
      
      
      //g_collision(230*zoom, 210*zoom, 310*zoom,205)*zoom ? ( newIr == 0 ? newIR = 1 : newIR = 0;caller = 1;);
      );
      g_collision(Amp_select_x, Amp_select_y, bsize*zoom, bsize *zoom) ? (slider(BAmp.slider) = 1;caller = 1;BAmp.quicklink_button());
      g_collision(Amp_select_x+boffset*zoom, Amp_select_y, bsize*zoom, bsize *zoom) ? (slider(BAmp.slider) = 2;caller = 1;BAmp.quicklink_button());
      g_collision(Amp_select_x, Amp_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BAmp.slider) = 3;shift?oma=1:oma=0;caller = 1;BAmp.quicklink_button());
      g_collision(Amp_select_x+boffset*zoom, Amp_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BAmp.slider) = 4;caller = 1;BAmp.quicklink_button());
     
      g_collision(cab_select_x, cab_select_y, bsize*zoom, bsize *zoom) ? (slider(BCab.slider) = 1;caller = 1;BCab.quicklink_button());
      g_collision(cab_select_x+boffset*zoom, cab_select_y, bsize*zoom, bsize *zoom) ? (slider(BCab.slider) = 2;caller = 1;BCab.quicklink_button());
      g_collision(cab_select_x, cab_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BCab.slider) = 3;caller = 1;BCab.quicklink_button());
      g_collision(cab_select_x+boffset*zoom, cab_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BCab.slider) = 4;caller = 1;BCab.quicklink_button());
      
      alt ? (
      g_collision(Amp_select_x, Amp_select_y, bsize*zoom, bsize *zoom) || 
      g_collision(cab_select_x, cab_select_y, bsize*zoom, bsize *zoom) ? (
      slider(BAmp.slider) = 1;BAmp.quicklink_button();
      slider(Bcab.slider) = 1;Bcab.quicklink_button(); caller = 1;
      );
      g_collision(Amp_select_x+boffset*zoom, Amp_select_y, bsize*zoom, bsize *zoom) || 
      g_collision(cab_select_x+boffset*zoom, cab_select_y, bsize*zoom, bsize *zoom) ? (
      slider(BAmp.slider) = 2;BAmp.quicklink_button();
      slider(Bcab.slider) = 2;Bcab.quicklink_button(); caller = 1;
      );
      g_collision(Amp_select_x, Amp_select_y+boffset*zoom, bsize*zoom, bsize *zoom) || 
      g_collision(cab_select_x, cab_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (
      slider(BAmp.slider) = 3;BAmp.quicklink_button();
      slider(Bcab.slider) = 3;Bcab.quicklink_button(); caller = 1;
      );
      g_collision(Amp_select_x+boffset*zoom, Amp_select_y+boffset*zoom, bsize*zoom, bsize *zoom) || 
      g_collision(cab_select_x+boffset*zoom, cab_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (
      slider(BAmp.slider) = 4;BAmp.quicklink_button();
      slider(Bcab.slider) = 4;Bcab.quicklink_button(); caller = 1;
      );
      );
      
      
      cabinet_on ? (
      g_collision(Mic_select_x, Mic_select_y, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 0;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x+boffset*zoom, Mic_select_y, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 1;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x, Mic_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 2;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x+boffset*zoom, Mic_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 3;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x, Mic_select_y+2*boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 4;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x+boffset*zoom, Mic_select_y+2*boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 5;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x+2*boffset*zoom, Mic_select_y+2*boffset*zoom, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 6;caller = 1;BMic.quicklink_button());
      g_collision(Mic_select_x + 30*zoom, mic_select_y -30*zoom, 132*zoom, 20*zoom) ? (slider(BPos.slider) == 0 ? slider(BPos.slider) = 1 : slider(BPos.slider) = 0; bpos.quicklink_button(); caller = 1);
      );
      g_collision(Mic_select_x+2*boffset*zoom, Mic_select_y, bsize*zoom, bsize *zoom) ? (slider(BAmp.slider) = 0;caller = 1;BAmp.quicklink_button());
      g_collision(Mic_select_x+2*boffset*zoom, Mic_select_y+boffset*zoom, bsize*zoom, bsize *zoom) ?  (slider(BCab.slider) = 0;caller = 1;BCab.quicklink_button());
      //g_collision(BSidechain.xIn*zoom+14*zoom, BSidechain.yIn*zoom, 20* zoom ,50*zoom) ? (slider(BSidechain.slider) == 1 ? slider(BSidechain.slider) = 0 : slider(BSidechain.slider) = 1;caller = 1;BSideChain.quicklink_button());
      //g_collision(BBypass.xIn*zoom+14*zoom, BBypass.yIn*zoom, 20* zoom ,50*zoom) ? (slider(BBypass.slider) == 1 ? slider(BBypass.slider) = 0 : slider(BBypass.slider) = 1;caller = 1;BBypass.quicklink_button());
      
      g_collision(wah_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(BWah_on.slider) == 0 ? slider(BWah_on.slider) = 1 : slider(BWah_on.slider) = 0; BWah_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_wah_x + gfx_wah_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(BWah_bypass.slider) == 0 ? slider(BWah_bypass.slider) = 1 : slider(BWah_bypass.slider) = 0; BWah_bypass.Quicklink_Button(); caller = 1);
      g_collision(chorus_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Bchorus_on.slider) == 0 ? slider(Bchorus_on.slider) = 1 : slider(Bchorus_on.slider) = 0; Bchorus_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_chorus_x + gfx_chorus_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Bchorus_bypass.slider) == 0 ? slider(Bchorus_bypass.slider) = 1 : slider(Bchorus_bypass.slider) = 0; Bchorus_bypass.Quicklink_Button(); caller = 1);
      g_collision(flanger_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Bflanger_on.slider) == 0 ? slider(Bflanger_on.slider) = 1 : slider(Bflanger_on.slider) = 0; Bflanger_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_flanger_x + gfx_flanger_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Bflanger_bypass.slider) == 0 ? slider(Bflanger_bypass.slider) = 1 : slider(Bflanger_bypass.slider) = 0; Bflanger_bypass.Quicklink_Button(); caller = 1);
      g_collision(phaser_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Bphaser_on.slider) == 0 ? slider(Bphaser_on.slider) = 1 : slider(Bphaser_on.slider) = 0; Bphaser_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_phaser_x + gfx_phaser_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Bphaser_bypass.slider) == 0 ? slider(Bphaser_bypass.slider) = 1 : slider(Bphaser_bypass.slider) = 0; Bphaser_bypass.Quicklink_Button(); caller = 1);
      g_collision(dist_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Bdist_on.slider) == 0 ? slider(Bdist_on.slider) = 1 : slider(Bdist_on.slider) = 0; Bdist_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_dist_x + gfx_dist_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Bdist_bypass.slider) == 0 ? slider(Bdist_bypass.slider) = 1 : slider(Bdist_bypass.slider) = 0; Bdist_bypass.Quicklink_Button(); caller = 1);
      g_collision(trem_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Btrem_on.slider) == 0 ? slider(Btrem_on.slider) = 1 : slider(Btrem_on.slider) = 0; Btrem_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_trem_x + gfx_trem_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Btrem_bypass.slider) == 0 ? slider(Btrem_bypass.slider) = 1 : slider(Btrem_bypass.slider) = 0; Btrem_bypass.Quicklink_Button(); caller = 1);
      g_collision(delay_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(Bdelay_on.slider) == 0 ? slider(Bdelay_on.slider) = 1 : slider(Bdelay_on.slider) = 0; Bdelay_on.Quicklink_Button(); caller = 1);
      g_collision(gfx_delay_x + gfx_delay_w*zoom * 0.5 - 20*zoom, chain_y +177*zoom, 35*zoom, 35*zoom) ? (gen_dragging = 1; slider(Bdelay_bypass.slider) == 0 ? slider(Bdelay_bypass.slider) = 1 : slider(Bdelay_bypass.slider) = 0; Bdelay_bypass.Quicklink_Button(); caller = 1);
      
      wah_position ? (
      Kwah_Freq.K_collision() ? KWah_Freq.Dragstart();
      g_collision(gfx_wah_x + 16*zoom, Kwah_freq.yIn*zoom + 102*zoom, 43*zoom, gfx_texth + 3*zoom) ? (gen_dragging = 1; slider(Bwah.slider) == 0 ? slider(Bwah.slider) = 1 : slider(Bwah.slider) = 0; Bwah.QuickLink_Button(); caller = 1);
      );
      
      delay_position ? (
      KDelay_time.K_collision() ? KDelay_Time.Dragstart();
      KDelay_Feedback.K_collision() ? KDelay_Feedback.Dragstart();
      KDelay_mix.K_collision() ? KDelay_mix.Dragstart();
      );
      
      phaser_position ? (
      KPhaser_Floor.K_collision() ? KPhaser_Floor.Dragstart();
      KPhaser_Ceiling.K_collision() ? KPhaser_Ceiling.Dragstart();
      KPhaser_Speed.K_collision() ? KPhaser_Speed.Dragstart();
      KPhaser_Feedback.K_collision() ? KPhaser_Feedback.Dragstart();
      KPhaser_Mix.K_collision() ? KPhaser_Mix.Dragstart();
      );
      
      Flanger_position ? (
      KFlanger_Depth.K_collision() ? KFlanger_Depth.Dragstart();
      KFlanger_Speed.K_collision() ? KFlanger_Speed.Dragstart();
      KFlanger_Delay.K_collision() ? KFlanger_Delay.Dragstart();
      );
      
      chorus_position ? (
      KChorus_Depth.K_collision() ? KChorus_Depth.Dragstart();
      KChorus_Mix.K_collision() ? KChorus_Mix.Dragstart();
      g_collision(gfx_chorus_x + 15*zoom,KChorus_Mix.yIn*zoom + 70*zoom, gfx_chorus_w - 30*zoom, gfx_texth + 3* zoom) ? (gen_dragging = 1; slider(BChorus.slider) == 0 ? slider(BChorus.slider) = 1 : slider(BChorus.slider) = 0; Bchorus.QuickLink_Button(); caller = 1);
      );
      
      Trem_position ? (
      KTrem_Speed.K_collision() ? KTrem_Speed.Dragstart();
      KTrem_Mix.K_collision() ? KTrem_Mix.Dragstart();
      KTrem_Stereo.K_collision() ? KTrem_Stereo.Dragstart();
      KTrem_Shape.K_collision() ? KTrem_Shape.Dragstart();
      );
      
      dist_position ? (
      KDist_drive.K_collision() ? KDist_drive.Dragstart();
      KDist_tone.K_collision() ? KDist_tone.Dragstart();
      KDist_out.K_collision() ? KDist_out.Dragstart();
      g_collision(KDist_out.xIn*zoom + 63*zoom,  KDist_out.yIn*zoom + 40*zoom, 30*zoom, gfx_texth + 3*zoom) ? (gen_dragging = 1; slider(Bdist.slider) == 0 ? slider(Bdist.slider) = 1 : slider(Bdist.slider) = 0; Bdist.QuickLink_Button(); caller = 1);
      );
      
      
      trem_advanced_on ? (
      g_collision(time_Sync_x, time_Sync_y, time_sync_w, time_sync_h) ? (
      gfx_x = time_Sync_x; gfx_y = time_Sync_y;
      select_note_value = gfx_showmenu("8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32|");
      select_note_value ? (
        Tremolo_time_sync_2 == 2 ? tremolo_sync_selection = select_note_value + 18;
        Tremolo_time_sync_2 == 1 ? tremolo_sync_selection = select_note_value + 9;
        Tremolo_time_sync_2 == 0 ? tremolo_sync_selection = select_note_value - 1;
        Btrem_sync_selection.quicklink_button();
        caller = 1;
      );
      );
      g_collision(time_Sync2_x, time_Sync2_y, time_sync2_w, time_sync2_h) ? (
      gfx_x = time_Sync2_x; gfx_y = time_Sync2_y;
      select_note_value = gfx_showmenu("Off|Triplets|Dotted");
      select_note_value ? (
        select_note_value == 3 ? tremolo_sync_selection = tremolo_sync_selection_tmp + 19;
        select_note_value == 2 ? tremolo_sync_selection = tremolo_sync_selection_tmp + 10;
        select_note_value == 1 ? tremolo_sync_selection = tremolo_sync_selection_tmp;
        Btrem_Sync_selection.quicklink_button();
        caller = 1;
      );      
      );
      g_collision(time_Sync3_x, time_Sync3_y, time_sync3_w, time_sync3_h) ? (
      gfx_x = time_Sync3_x; gfx_y = time_Sync3_y;
      select_note_value = gfx_showmenu("Free Running LFO|LFO linked to project time");
      select_note_value ? (
        select_note_value == 2 ? tremolo_free_run = 1;
        select_note_value == 1 ? tremolo_free_run = 0;
        Btrem_free_run.quicklink_button();
        caller = 1;
      );      
      );      
      Ktrem_shift.K_collision() ? Ktrem_shift.Dragstart();
      ); 
      
      Phaser_advanced_on ? (
      g_collision(time_Sync_x, time_Sync_y, time_sync_w, time_sync_h) ? (
      gfx_x = time_Sync_x; gfx_y = time_Sync_y;
      select_note_value = gfx_showmenu("8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32|");
      select_note_value ? (
        Phaser_time_sync_2 == 2 ? Phaser_sync_selection = select_note_value + 18;
        Phaser_time_sync_2 == 1 ? Phaser_sync_selection = select_note_value + 9;
        Phaser_time_sync_2 == 0 ? Phaser_sync_selection = select_note_value - 1;
        BPhaser_sync_selection.quicklink_button();
        caller = 1;
      );
      );
      g_collision(time_Sync2_x, time_Sync2_y, time_sync2_w, time_sync2_h) ? (
      gfx_x = time_Sync2_x; gfx_y = time_Sync2_y;
      select_note_value = gfx_showmenu("Off|Triplets|Dotted");
      select_note_value ? (
        select_note_value == 3 ? Phaser_sync_selection = Phaser_sync_selection_tmp + 19;
        select_note_value == 2 ? Phaser_sync_selection = Phaser_sync_selection_tmp + 10;
        select_note_value == 1 ? Phaser_sync_selection = Phaser_sync_selection_tmp;
        BPhaser_Sync_selection.quicklink_button();
        caller = 1;
      );      
      );
      g_collision(time_Sync3_x, time_Sync3_y, time_sync3_w, time_sync3_h) ? (
      gfx_x = time_Sync3_x; gfx_y = time_Sync3_y;
      select_note_value = gfx_showmenu("Free Running LFO|LFO linked to project time");
      select_note_value ? (
        select_note_value == 2 ? Phaser_free_run = 1;
        select_note_value == 1 ? Phaser_free_run = 0;
        BPhaser_free_run.quicklink_button();
        caller = 1;
      );      
      );      
      KPhaser_shift.K_collision() ? KPhaser_shift.Dragstart();
      ); 
      
      Flanger_advanced_on ? (
      g_collision(time_Sync_x, time_Sync_y, time_sync_w, time_sync_h) ? (
      gfx_x = time_Sync_x; gfx_y = time_Sync_y;
      select_note_value = gfx_showmenu("8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32|");
      select_note_value ? (
        Flanger_time_sync_2 == 2 ? Flanger_sync_selection = select_note_value + 18;
        Flanger_time_sync_2 == 1 ? Flanger_sync_selection = select_note_value + 9;
        Flanger_time_sync_2 == 0 ? Flanger_sync_selection = select_note_value - 1;
        BFlanger_sync_selection.quicklink_button();
        caller = 1;
      );
      );
      g_collision(time_Sync2_x, time_Sync2_y, time_sync2_w, time_sync2_h) ? (
      gfx_x = time_Sync2_x; gfx_y = time_Sync2_y;
      select_note_value = gfx_showmenu("Off|Triplets|Dotted");
      select_note_value ? (
        select_note_value == 3 ? Flanger_sync_selection = Flanger_sync_selection_tmp + 19;
        select_note_value == 2 ? Flanger_sync_selection = Flanger_sync_selection_tmp + 10;
        select_note_value == 1 ? Flanger_sync_selection = Flanger_sync_selection_tmp;
        BFlanger_Sync_selection.quicklink_button();
        caller = 1;
      );      
      );
      g_collision(time_Sync3_x, time_Sync3_y, time_sync3_w, time_sync3_h) ? (
      gfx_x = time_Sync3_x; gfx_y = time_Sync3_y;
      select_note_value = gfx_showmenu("Free Running LFO|LFO linked to project time");
      select_note_value ? (
        select_note_value == 2 ? Flanger_free_run = 1;
        select_note_value == 1 ? Flanger_free_run = 0;
        BFlanger_free_run.quicklink_button();
        caller = 1;
      );      
      );      
      KFlanger_shift.K_collision() ? KFlanger_shift.Dragstart();
      ); 
      
      DELAY_advanced_on ? (
      g_collision(time_Sync_x, time_Sync_y, time_sync_w, time_sync_h) ? (
      gfx_x = time_Sync_x; gfx_y = time_Sync_y;
      select_note_value = gfx_showmenu("8 Bars|4 Bars|2 Bars|1 Bar|1/2|1/4|1/8|1/16|1/32|");
      select_note_value ? (
        DELAY_time_sync_2 == 1.5 ? DELAY_sync_selection = select_note_value + 18;
        DELAY_time_sync_2 == 2/3 ? DELAY_sync_selection = select_note_value + 9;
        DELAY_time_sync_2 == 1 ? DELAY_sync_selection = select_note_value - 1;
        BDELAY_sync_selection.quicklink_button();
        caller = 1;
      );
      );
      g_collision(time_Sync2_x, time_Sync2_y, time_sync2_w, time_sync2_h) ? (
      gfx_x = time_Sync2_x; gfx_y = time_Sync2_y;
      select_note_value = gfx_showmenu("Off|Triplets|Dotted");
      select_note_value ? (
        select_note_value == 3 ? DELAY_sync_selection = DELAY_sync_selection_tmp + 19;
        select_note_value == 2 ? DELAY_sync_selection = DELAY_sync_selection_tmp + 10;
        select_note_value == 1 ? DELAY_sync_selection = DELAY_sync_selection_tmp;
        BDELAY_Sync_selection.quicklink_button();
        caller = 1;
      );      
      );
      ); 
      
      );
      
      
      
      mouseHold ? (
      !gen_dragging ? (
      !clicked_slot ? (
      target_slot = 0;
      g_collision(gfx_dist_x, chain_y, gfx_dist_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = dist_chain_pos; gate_box = 0):
      g_collision(gfx_trem_x, chain_y, gfx_trem_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = trem_chain_pos; gate_box = 0):
      g_collision(gfx_wah_x, chain_y, gfx_wah_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = wah_chain_pos; gate_box = 0):
      g_collision(gfx_delay_x, chain_y, gfx_delay_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = delay_chain_pos; gate_box = 0):
      g_collision(gfx_flanger_x, chain_y, gfx_flanger_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = flanger_chain_pos; gate_box = 0):
      g_collision(gfx_phaser_x, chain_y, gfx_phaser_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = phaser_chain_pos; gate_box = 0):
      g_collision(gfx_chorus_x, chain_y, gfx_chorus_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = chorus_chain_pos; gate_box = 0):
      g_collision(gfx_rev_x, chain_y, gfx_rev_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = rev_chain_pos; gate_box = 0):
      g_collision(gfx_amp_x, chain_y, gfx_amp_w*zoom, chain_h) ? (clicked_slot = last_clicked_slot = amp_chain_pos; gate_box = 0):
      g_collision(820*zoom, 180*zoom, 300*zoom, chain_h) ? (last_clicked_slot = last_clicked_slot):
      (last_clicked_slot = 0);
       );
      
 
      
      clicked_slot ? (
      target_slot = 0;
      g_collision(spacer0_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 1; green(); gfx_rect(spacer0_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer1_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 2; green(); gfx_rect(spacer1_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer2_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 3; green(); gfx_rect(spacer2_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer3_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 4; green(); gfx_rect(spacer3_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer4_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 5; green(); gfx_rect(spacer4_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer5_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 6; green(); gfx_rect(spacer5_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer6_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 7; green(); gfx_rect(spacer6_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer7_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 8; green(); gfx_rect(spacer7_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer8_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 9; green(); gfx_rect(spacer8_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      g_collision(spacer9_x-15*zoom, chain_y, gfx_spacer_w+30*zoom, chain_h) ? (target_slot = 10; green(); gfx_rect(spacer9_x + 2*zoom, chain_y, gfx_spacer_w*zoom - 4*zoom, chain_h));
      clicked_slot == dist_chain_pos ? (green(); gfx_roundrect(gfx_dist_x-1, chain_y-1, zoom*gfx_dist_w+2, chain_h+2,0));
      clicked_slot == trem_chain_pos ? (green(); gfx_roundrect(gfx_trem_x-1, chain_y-1, zoom*gfx_trem_w+2, chain_h+2,0));
      clicked_slot == wah_chain_pos ? (green(); gfx_roundrect(gfx_wah_x-1, chain_y-1, zoom*gfx_wah_w+2, chain_h+2,0));
      clicked_slot == delay_chain_pos ? (green(); gfx_roundrect(gfx_delay_x-1, chain_y-1, zoom*gfx_delay_w+2, chain_h+2,0));
      clicked_slot == flanger_chain_pos ? (green(); gfx_roundrect(gfx_flanger_x-1, chain_y-1, zoom*gfx_flanger_w+2, chain_h+2,0));
      clicked_slot == phaser_chain_pos ? (green(); gfx_roundrect(gfx_phaser_x-1, chain_y-1, zoom*gfx_phaser_w+2, chain_h+2,0));
      clicked_slot == chorus_chain_pos ? (green(); gfx_roundrect(gfx_chorus_x-1, chain_y-1, zoom*gfx_chorus_w+2, chain_h+2,0));
      clicked_slot == rev_chain_pos ? (green(); gfx_roundrect(gfx_rev_x-1, chain_y-1, zoom*gfx_rev_w+2, chain_h+2,0));
      clicked_slot == amp_chain_pos ? (green(); gfx_roundrect(gfx_amp_x-1, chain_y-1, zoom*gfx_amp_w+2, chain_h+2,0));
      );
      //clicked_slot == 1 ? target_slot -= 1;
      //clicked_slot == 9 ? target_slot += 1;
      target_slot == clicked_slot || target_slot == clicked_slot + 1 ? target_slot = 0;
      target_slot ? (target_slot > clicked_slot ? target_slot -= 1; superkey || link_group ? chain_arrange = 1 : chain_arrange = 0);
      //gfx_drawnumber(target_slot,0);
      );
      
      
      );
      //gfx_x = gfx_y = 0;
      //white(); gfx_drawnumber(last_clicked_slot,0); gfx_drawstr(" to ");
      
      mouseclick == -1 ? (
      target_slot ? (
      
      
      last_clicked_slot = 0;
      dist_chain_pos    == clicked_slot ? dist_chain_pos    = 0;
      delay_chain_pos   == clicked_slot ? delay_chain_pos   = 0;  
      wah_chain_pos     == clicked_slot ? wah_chain_pos     = 0; 
      chorus_chain_pos  == clicked_slot ? chorus_chain_pos  = 0; 
      flanger_chain_pos == clicked_slot ? flanger_chain_pos = 0; 
      phaser_chain_pos  == clicked_slot ? phaser_chain_pos  = 0; 
      trem_chain_pos    == clicked_slot ? trem_chain_pos    = 0; 
      rev_chain_pos     == clicked_slot ? rev_chain_pos     = 0; 
      amp_chain_pos     == clicked_slot ? amp_chain_pos     = 0; 
      
  
      clicked_slot > target_slot ? (
      dist_chain_pos ? dist_chain_pos    >= target_slot && dist_chain_pos < clicked_slot ? dist_chain_pos       += 1;
      delay_chain_pos ? delay_chain_pos   >= target_slot && delay_chain_pos < clicked_slot ? delay_chain_pos     += 1;  
      wah_chain_pos ? wah_chain_pos     >= target_slot && wah_chain_pos < clicked_slot ? wah_chain_pos         += 1; 
      chorus_chain_pos ? chorus_chain_pos  >= target_slot && chorus_chain_pos < clicked_slot ? chorus_chain_pos   += 1; 
      flanger_chain_pos ? flanger_chain_pos >= target_slot && flanger_chain_pos < clicked_slot ? flanger_chain_pos += 1; 
      phaser_chain_pos ? phaser_chain_pos  >= target_slot && phaser_chain_pos < clicked_slot ? phaser_chain_pos   += 1; 
      trem_chain_pos ? trem_chain_pos    >= target_slot && trem_chain_pos < clicked_slot ? trem_chain_pos       += 1; 
      rev_chain_pos ? rev_chain_pos     >= target_slot && rev_chain_pos < clicked_slot ? rev_chain_pos         += 1; 
      amp_chain_pos ? amp_chain_pos     >= target_slot && amp_chain_pos < clicked_slot ? amp_chain_pos         += 1; 
      ):(
      dist_chain_pos ? dist_chain_pos    <= target_slot && dist_chain_pos > clicked_slot ? dist_chain_pos       -= 1;
      delay_chain_pos ? delay_chain_pos   <= target_slot && delay_chain_pos > clicked_slot ? delay_chain_pos     -= 1;  
      wah_chain_pos ? wah_chain_pos     <= target_slot && wah_chain_pos > clicked_slot ? wah_chain_pos         -= 1; 
      chorus_chain_pos ? chorus_chain_pos  <= target_slot && chorus_chain_pos > clicked_slot ? chorus_chain_pos   -= 1; 
      flanger_chain_pos ? flanger_chain_pos <= target_slot && flanger_chain_pos > clicked_slot ? flanger_chain_pos -= 1; 
      phaser_chain_pos ? phaser_chain_pos  <= target_slot && phaser_chain_pos > clicked_slot ? phaser_chain_pos   -= 1; 
      trem_chain_pos ? trem_chain_pos    <= target_slot && trem_chain_pos > clicked_slot ? trem_chain_pos       -= 1; 
      rev_chain_pos ? rev_chain_pos     <= target_slot && rev_chain_pos > clicked_slot ? rev_chain_pos         -= 1; 
      amp_chain_pos ? amp_chain_pos     <= target_slot && amp_chain_pos > clicked_slot ? amp_chain_pos         -= 1; 
      );
      
      clicked_slot = 0;
      dist_chain_pos    == clicked_slot ? dist_chain_pos    = target_slot;
      delay_chain_pos   == clicked_slot ? delay_chain_pos   = target_slot;  
      wah_chain_pos     == clicked_slot ? wah_chain_pos     = target_slot; 
      chorus_chain_pos  == clicked_slot ? chorus_chain_pos  = target_slot; 
      flanger_chain_pos == clicked_slot ? flanger_chain_pos = target_slot; 
      phaser_chain_pos  == clicked_slot ? phaser_chain_pos  = target_slot; 
      trem_chain_pos    == clicked_slot ? trem_chain_pos    = target_slot; 
      rev_chain_pos     == clicked_slot ? rev_chain_pos     = target_slot; 
      amp_chain_pos     == clicked_slot ? amp_chain_pos     = target_slot; 
      
      chain_arrange == 1 ? chain_arrange = 2;
      
      );
      target_slot = 0;
      clicked_slot = 0;
      //
      
      
      
      KPreGain.dragstop();
      KPostGain.dragstop();
      Kbass.dragstop();
      Kmid.dragstop();
      Ktreble.dragstop();
      Kbright.dragstop();
      Kreverb.dragstop();
      Koutgain.dragstop();
      Kgatethreshold.dragstop();
      Kgaterelease.dragstop();
      
      KWah_Freq.dragstop();
      
      KDelay_time.dragstop();
      KDelay_Feedback.dragstop();
      KDelay_mix.dragstop();
      
      KPHaser_floor.dragstop();
      KPhaser_ceiling.dragstop();
      KPhaser_Speed.dragstop();
      KPhaser_Feedback.dragstop();
      KPhaser_mix.dragstop();
      
      KFlanger_Depth.dragstop();
      KFlanger_Speed.dragstop();
      KFlanger_Delay.dragstop();
      
      KChorus_Depth.dragstop();
      KChorus_Mix.dragstop();
      
      KTrem_Speed.dragstop();
      KTrem_Mix.dragstop();
      KTrem_Stereo.dragstop();
      KTrem_Shape.dragstop();
      
      KDist_drive.dragstop();
      KDist_tone.dragstop();
      KDist_out.dragstop();
      KTrem_shift.dragstop();
      Kphaser_shift.dragstop();
      Kflanger_shift.dragstop();
      );
      
      
      mouse_wheel ? 
          (
          trem_advanced_on ? Ktrem_shift.K_collision() ? Ktrem_shift.potwheel();
          phaser_advanced_on ? Kphaser_shift.K_collision() ? Kphaser_shift.potwheel();
          flanger_advanced_on ? Kflanger_shift.K_collision() ? Kflanger_shift.potwheel();
          
      KpreGain.k_collision() ? KPreGain.potwheel();
      KPostGain.k_collision() ? KPostGain.potwheel();
      Kbass.k_collision() ? Kbass.potwheel();
      Kmid.k_collision() ? Kmid.potwheel();
      Ktreble.k_collision() ? Ktreble.potwheel();
      Kbright.k_collision() ? Kbright.potwheel();
      Kreverb.k_collision() ? Kreverb.potwheel();
      Koutgain.k_collision() ? Koutgain.potwheel();
      Kgatethreshold.k_collision() ? Kgatethreshold.potwheel();
      Kgaterelease.k_collision() ? Kgaterelease.potwheel();
      
      
      wah_position ? KWah_Freq.K_Collision() ? KWah_Freq.potwheel();
      
      delay_position ? KDelay_time.K_Collision() ? KDelay_time.potwheel();
      delay_position ? KDelay_Feedback.K_Collision() ? KDelay_Feedback.potwheel();
      delay_position ? KDelay_mix.K_Collision() ? KDelay_mix.potwheel();
      
      phaser_position ? KPhaser_Floor.K_Collision() ? KPhaser_Floor.potwheel();
      phaser_position ? KPhaser_Ceiling.K_Collision() ? KPhaser_Ceiling.potwheel();
      phaser_position ? KPhaser_Speed.K_Collision() ? KPhaser_Speed.potwheel();
      phaser_position ? KPhaser_Feedback.K_Collision() ? KPhaser_Feedback.potwheel();
      phaser_position ? KPhaser_Mix.K_Collision() ? KPhaser_Mix.potwheel();
      
      Flanger_position ? KFlanger_Depth.K_Collision() ? KFlanger_Depth.potwheel();
      Flanger_position ? KFlanger_Speed.K_Collision() ? KFlanger_Speed.potwheel();
      Flanger_position ? KFlanger_Delay.K_Collision() ? KFlanger_Delay.potwheel();
      
      chorus_position ? KChorus_Depth.K_Collision() ? KChorus_Depth.potwheel();
      chorus_position ? KChorus_Mix.K_Collision() ? KChorus_Mix.potwheel();
      
      Trem_position ? KTrem_Speed.K_Collision() ? KTrem_Speed.potwheel();
      Trem_position ? KTrem_Mix.K_Collision() ? KTrem_Mix.potwheel();
      Trem_position ? KTrem_Stereo.K_Collision() ? KTrem_Stereo.potwheel();
      Trem_position ? KTrem_Shape.K_Collision() ? KTrem_Shape.potwheel();
      
      dist_position ? KDist_drive.K_Collision() ? KDist_drive.potwheel();
      dist_position ? KDist_tone.K_Collision() ? KDist_tone.potwheel();
      dist_position ? KDist_out.K_Collision() ? KDist_out.potwheel();
      
      
      
           mouse_wheel=0;
           caller = 1;
          );
       
       gfx_a=1;
      KPreGain.dragging ? (KPreGain.potdrag(); KPreGain.readout();caller = 1;);
      KPostGain.dragging ? (KPostGain.potdrag();KPostGain.readout();caller = 1;);
      KBass.dragging ? (KBass.potdrag(); KBass.readout();caller = 1;);
      Kmid.dragging ? (Kmid.potdrag();Kmid.readout();caller = 1;);
      Ktreble.dragging ? (Ktreble.potdrag(); Ktreble.readout();caller = 1;);
      Kbright.dragging ? (Kbright.potdrag();Kbright.readout();caller = 1;);
      Kreverb.dragging ? (Kreverb.potdrag(); Kreverb.readout();caller = 1;);
      Koutgain.dragging ? (Koutgain.potdrag();Koutgain.readout();caller = 1;);
      Kgatethreshold.dragging ? (Kgatethreshold.potdrag(); Kgatethreshold.readout();caller = 1;);
      Kgaterelease.dragging ? (Kgaterelease.potdrag();Kgaterelease.readout();caller = 1;);
      
      KWah_Freq.dragging ? (KWah_Freq.potdrag(); KWah_Freq.readout();caller = 1;);
      
      KDelay_time.dragging ? (KDelay_time.potdrag(); KDelay_time.readout();caller = 1;);
      KDelay_Feedback.dragging ? (KDelay_Feedback.potdrag(); KDelay_Feedback.readout();caller = 1;);
      KDelay_mix.dragging ? (KDelay_Mix.potdrag(); KDelay_Mix.readout();caller = 1;);
      
      KPhaser_Floor.dragging ? (KPhaser_Floor.potdrag(); KPhaser_Floor.readout();caller = 1;);
      KPhaser_Ceiling.dragging ? (KPhaser_Ceiling.potdrag(); KPhaser_Ceiling.readout();caller = 1;);
      KPhaser_Speed.dragging ? (KPhaser_Speed.potdrag(); KPhaser_Speed.readout();caller = 1;);
      KPhaser_Feedback.dragging ? (KPhaser_Feedback.potdrag(); KPhaser_Feedback.readout();caller = 1;);
      KPhaser_Mix.dragging ? (KPhaser_Mix.potdrag(); KPhaser_Mix.readout();caller = 1;);
      KPhaser_shift.dragging ? (KPhaser_shift.potdrag(); KPhaser_shift.readout();caller = 1;);
      
      KFlanger_Depth.dragging ? (KFlanger_Depth.potdrag(); KFlanger_Depth.readout();caller = 1;);
      KFlanger_Speed.dragging ? (KFlanger_Speed.potdrag(); KFlanger_Speed.readout();caller = 1;);
      KFlanger_Delay.dragging ? (KFlanger_Delay.potdrag(); KFlanger_Delay.readout();caller = 1;);
      Kflanger_shift.dragging ? (Kflanger_shift.potdrag(); Kflanger_shift.readout();caller = 1;);
      
      KChorus_Depth.dragging ? (KChorus_Depth.potdrag(); KChorus_Depth.readout();caller = 1;);
      KChorus_Mix.dragging ? (KChorus_Mix.potdrag(); KChorus_Mix.readout();caller = 1;);
      
      KTrem_Speed.dragging ? (KTrem_Speed.potdrag(); KTrem_Speed.readout();caller = 1;);
      KTrem_Mix.dragging ? (KTrem_Mix.potdrag(); KTrem_Mix.readout();caller = 1;);
      KTrem_Stereo.dragging ? (KTrem_Stereo.potdrag(); KTrem_Stereo.readout();caller = 1;);
      KTrem_Shape.dragging ? (KTrem_Shape.potdrag(); KTrem_Shape.readout();caller = 1;);
      KTrem_Shift.dragging ? (KTrem_Shift.potdrag(); KTrem_Shift.readout();caller = 1;);
      
      KDist_drive.dragging ? (KDist_drive.potdrag(); KDist_drive.readout();caller = 1;);
      KDist_tone.dragging ? (KDist_tone.potdrag(); KDist_tone.readout();caller = 1;);
      KDist_out.dragging ? (KDist_out.potdrag(); KDist_out.readout();caller = 1;);
      ); // !number_input

      gfx_a=1;
      number_input ? number_input_show();
      //OEQ_NI == 1 ? number_input
      number_input_invalid = max(0,number_input_invalid-1);
      number_input_invalid ? ( 
      gfx_r=gfx_g=gfx_b=0;
      gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
      gfx_r=0;gfx_g=1;gfx_b=0;
      gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
      red();
      gfx_rect(zoom*number_input_x + gfx_texth+5,zoom*number_input_y, 200*zoom - (gfx_texth+5), gfx_texth+5);
      gfx_r=gfx_g=gfx_b=0.7;
      gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
      gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
      white();
      gfx_drawstr("NO VALID INPUT!");
      );
      
     
      
      
    
    
 ////////////////////////////////////////////////////////////////////////////////////////////// ENDE MAUS STEUERUNG
 
 
 //<a href="https://de.freepik.com/fotos-kostenlos/natuerlicher-hoelzerner-hintergrund_5505940.htm#query=holz%20hintergrund&position=2&from_view=keyword&track=ais">Bild von kbza</a> auf Freepik
  ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
  last_clicked_item = -1;
  Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
  menu_x = 5; menu_y =5;
 
 gfx_x = menu_x * zoom; gfx_y = menu * zoom; gfx_a=1;
 //gfx_blit(menu,zoom/2,0);
 white(); //red();
 gfx_roundrect(menu_x * zoom, (menu_y + 5) * zoom, 20*zoom, 20*zoom, 0, 1);
 gfx_line((menu_x+3)*zoom, (menu_y + 11)*zoom, (menu_x+17)*zoom, (menu_y + 11)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 15)*zoom, (menu_x+17)*zoom, (menu_y + 15)*zoom);
 gfx_line((menu_x+3)*zoom, (menu_y + 19)*zoom, (menu_x+17)*zoom, (menu_y + 19)*zoom);
 
 gfx_setfont(1,"Arial",12*zoom,'b');
 white(); gfx_x = menu_x * zoom + 30*zoom;gfx_y += 15*zoom;
 gfx_drawstr("TUKAN STUDIOS  -  GUITAR STATION "); 
 gfx_setfont(1,"Arial",12*zoom,'i');
 lakeblue(); gfx_drawstr(" SERIES 2   ");
 gfx_setfont(1,"Arial",12*zoom,'b');
 
 //newIR == 0 ? red() : green();
 //newIR == 0 ? gfx_drawstR("old IRs") : gfx_drawstR("new IRs");
/*
 gfx_drawnumber(gmem[chain_mem],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+1],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+2],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+3],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+4],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+5],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+6],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+7],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+8],0); gfx_drawstr(" ");
 gfx_drawnumber(gmem[chain_mem+9],0); gfx_drawstr(" ");
*/
 
 link_group ? (
   rgb_palette(Link_group);// gfx_a = 0.7;
   gfx_drawstr("JOINS GROUP "); gfx_drawstr(sprintf(#,"%i", link_group));
 );
 gfx_a = 1;
 
 
  mouseClick ? (
   g_collision(menu_x*zoom, (menu_y+5) * zoom, 20*zoom, 20*zoom) ? (
    gfx_x = menu_x*zoom;
    gfx_y = (menu_y+20)*zoom;
     
      #item2 =">Processing|";#allitems = #item2;
     while_playing == 1 ? (#item2 = "!On Playback|"):(#item2 = "On Playback|");#allitems += #item2;
     while_recording == 1 ? (#item2 = "!On Recording|"):(#item2 = "On Recording|");#allitems += #item2;
     while_stopped == 1 ? (#item2 = "<!On Stop|>Groups|"):(#item2 = "<On Stop|>Groups|");#allitems += #item2;
 
     mnu_grp_loop = 1;
     loop(16,
 
       mnu_grp_loop == 16 ? #item2 += "<";
       gmem[16*64 + 10 + mnu_grp_loop] == 1 ? ( //Gruppe schon an ?
         mnu_grp_loop == Link_Group ? ( //ist selbst in der gruppe
                 #item2 = "!Joins Group ";
         ):(
             #item2 = "Add to Group ";
         );
       ):(
         #item2 = "Start Group ";
       );
     mnu_grp_loop == 1 ? #item2 += "01";
     mnu_grp_loop == 2 ? #item2 += "02";
     mnu_grp_loop == 3 ? #item2 += "03";
     mnu_grp_loop == 4 ? #item2 += "04";
     mnu_grp_loop == 5 ? #item2 += "05";
     mnu_grp_loop == 6 ? #item2 += "06";
     mnu_grp_loop == 7 ? #item2 += "07";
     mnu_grp_loop == 8 ? #item2 += "08";
     mnu_grp_loop == 9 ? #item2 += "09";
     mnu_grp_loop == 10 ? #item2 += "10";
     mnu_grp_loop == 11 ? #item2 += "11";
     mnu_grp_loop == 12 ? #item2 += "12";
     mnu_grp_loop == 13 ? #item2 += "13";
     mnu_grp_loop == 14 ? #item2 += "14";
     mnu_grp_loop == 15 ? #item2 += "15";
     mnu_grp_loop == 16 ? #item2 += "16";
     
     #item2 += "|";
     #allitems += #item2; //sprintf(#temp, '%f',3); 
     mnu_grp_loop += 1;
     );
     
     link_group ? (#allitems += "|<Delete Group ";#allitems += sprintf(#, "%d", link_group);#allitems += "|"):#allitems += "|<#Delete Group|";
 
     //#allitems += "<#MENU|";
    #allitems += ">Scaling|";
    zoom_off == 0 ? (#item2 = "!Automatic Scaling|"):(#item2 = "Automatic scaling|");#allitems += #item2;
    zoom_off == 1 ? (#item2 = "<!No scaling|"):(#item2 = "<No scaling|");#allitems += #item2;
    
 
    
    #allitems += "|Show Info/Help";
    last_clicked_item = gfx_showmenu(#allitems);
  );
  );
 
 
 
 
  
  last_clicked_item == 1 ? (while_playing == 0 ? (while_playing = 1):(while_playing = 0);caller=1;processing_update());
  last_clicked_item == 2 ? (while_recording == 0 ? (while_recording = 1):(while_recording = 0);caller=1;processing_update());
  last_clicked_item == 3 ? (while_stopped == 0 ? (while_stopped = 1):(while_stopped = 0);caller=1;processing_update());
 
   cgroup = last_clicked_item - 3;
  last_clicked_item > 3 && last_clicked_item < 20 ? (
     Link_Group != cgroup ? ( //eigene Linkgruppe NICHT angeklickt
         gmem[16*64 + 10 + cgroup] == 0 ? ( // Gruppe noch frei
             //gmem[16*64 + 10 + cgroup] = 1; Link_Group = cgroup; gmem[16*64 +27 + cgruop] = 1; //Gruppe Starten!
             gmem[16*64 + 10 + cgroup] = 1;Link_Group = cgroup;group_update();
         ):(
             Link_Group = cgroup;// Gruppe teilnehmen
         );
     ):( //Eigene Gruppe angeklickt
           Link_Group = 0;
     );
  
  );
  
   cgroup = last_clicked_item - 3 - 16;
  last_clicked_item == 20 ? (
    gmem[16*64 + 10 + Link_Group] = 0;Link_Group = 0;
  );
  
  
  
  
  last_clicked_item == 21 ? zoom_off = 0;
  last_clicked_item == 22 ? zoom_off = 1;
 
 
  
  last_clicked_item == 23 ? helpshow = 1;
  
  helpshow == 1 ? (
  gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
  gfx_rect(menu_x,menu_y+0,310*zoom,205*zoom);
  menu_x +=3;
  gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
  gfx_x = menu_x+3*zoom; gfx_y = menu_y+3*zoom;
  gfx_drawstr("TUKAN STUDIOS Guitar Station (Series 2)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Version: "); gfx_drawnumber(GuitarAmp_VERSION,2);
  gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
  gfx_drawstr("Mouse modifier options:");
  gfx_x = menu_x+3*zoom; gfx_y += 15*zoom;
  gfx_drawstr("Fine tune knobs: [shift]");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Reset knobs: [ctrl] ([cmd] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Link knobs on visible instances: [win] ([ctrl] on mac)");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("Activate number typing: [alt]+[shift]");

  gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
  gfx_drawstr("Routing:");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("1. Gate");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("2. PreFX");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("3. AMP: Boost - PreGain - PostGain - EQ");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("4. PostFX");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("5. Cabinet / Mic");
  gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
  gfx_drawstr("6. Main Out (no coloration, just volume)");
  );
  
  
  ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
  
  

 Link_Group == 0 ? (
 gmem[16*64 + 3] == 0 ? linkstart = 0;
 !mouse_cap ? (
 gmem[16*64 + 3] == 1 ? (linkstart == 0 ? link_old = slider(gmem[16*64 + 1]); linkstart = 1);
 gmem[16*64 + 3] == 1 ? (
      tmp_val = link_old +  gmem[16*64 + 2];
 slider(gmem[16*64 + 1]) = tmp_val;
 slider_automate(slider(gmem[16*64 + 1]));
 caller = 1;
 );
 gmem[16*64 + 3] == 2 ? (
 slider(gmem[16*64 + 1]) =  gmem[16*64 + 2];
 caller = 1;
 );
 );
 );
 

 
 
 
 Link_Group == 0 ? (
 !mouse_cap ? (
 !chain_arrange ? (
 gmem[chain_mem] == 17 ? (
 dist_chain_pos = gmem[chain_mem+1];
 delay_chain_pos = gmem[chain_mem+2];
 wah_chain_pos = gmem[chain_mem+3];
 chorus_chain_pos = gmem[chain_mem+4];
 flanger_chain_pos = gmem[chain_mem+5];
 phaser_chain_pos = gmem[chain_mem+6];
 trem_chain_pos = gmem[chain_mem+7];
 rev_chain_pos = gmem[chain_mem+8];
 amp_chain_pos = gmem[chain_mem+9];
 caller = 1;
 );
 );
 );
 );
 
 chain_arrange == 2 ? (
 link_group ? gmem[chain_mem] = link_group : gmem[chain_mem] = 17;
 gmem[chain_mem+1] = dist_chain_pos;
 gmem[chain_mem+2] = delay_chain_pos;
 gmem[chain_mem+3] = wah_chain_pos;
 gmem[chain_mem+4] = chorus_chain_pos;
 gmem[chain_mem+5] = flanger_chain_pos;
 gmem[chain_mem+6] = phaser_chain_pos;
 gmem[chain_mem+7] = trem_chain_pos;
 gmem[chain_mem+8] = rev_chain_pos;
 gmem[chain_mem+9] = amp_chain_pos;
 chain_arrange = 0;
 ):gmem[chain_mem] = 0;
 aac = gmem[chain_mem];



 
 ):gfx_ext_flags == 1 ? (
 
 
 zoom = gfx_w / (370*gfx_ext_retina);
 
 cabinet_x = 0; cabinet_y = 0;
 cabinet_on ? (
 gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
 gfx_blit(11, zoom/2, 0, 0, 468 * cabinet, 740, 468);
 //gfx_blit(11, zoom/2, 0, 0, 0, 740, 468);
 Mic_position == 1 ? gfx_x += 77*zoom;
 gfx_blit(11, zoom/2, 0, 0, 468 * 4 + 468 * (microphone+1);, 740, 468);
 );
 gfx_x = cabinet_x * zoom; gfx_y = cabinet_y*zoom;
 //gfx_blit(11, zoom/2, 0, 0, 468 * cabinet, 740, 468);
 gfx_blit(11, zoom/2, 0, 0, 0, 740, 468);
 
 black();
 
 link_group ? (
 gfx_rect(0,210*zoom, gfx_w, gfx_h - 210*zoom);
 gfx_x = 5*zoom; gfx_y = 212*zoom;
 gfx_setfont(1,"Arial",40*zoom,'b');
 rgb_palette(Link_group);
 gfx_drawstr("Group: ");
 gfx_drawnumber(link_Group,0);
 );
 

 Bypass == 1 ? (
 black(); gfx_a = 0.7;
 gfx_rect(0,0,gfx_w,gfx_h);
 lightgrey(); gfx_a = 1;
 gfx_setfont(1,"Arial",60*zoom,'b');
 gfx_x = gfx_y = 0;
 gfx_drawstr("BYPASSED", 0x05, gfx_w, gfx_h);
 );
 
 mouse_cap == 2 ? (
 #allitems = ">Cabinet|Cab 1|Cab 2|Cab 3|<Cab 4|>Mics|57|421|906|20|Rib|87|<648|Move Mic";
 eflag_select = gfx_showmenu(#allitems);
 
 eflag_select == 1 ? (slider(BCab.slider) = 1;caller = 1;BCab.quicklink_button());
 eflag_select == 2 ? (slider(BCab.slider) = 2;caller = 1;BCab.quicklink_button());
 eflag_select == 3 ? (slider(BCab.slider) = 3;caller = 1;BCab.quicklink_button());
 eflag_select == 4 ? (slider(BCab.slider) = 4;caller = 1;BCab.quicklink_button());
 
 eflag_select == 5 ? (slider(BMic.slider) = 0;caller = 1;BMic.quicklink_button());
 eflag_select == 6 ? (slider(BMic.slider) = 1;caller = 1;BMic.quicklink_button());
 eflag_select == 7 ? (slider(BMic.slider) = 2;caller = 1;BMic.quicklink_button());
 eflag_select == 8 ? (slider(BMic.slider) = 3;caller = 1;BMic.quicklink_button());
 eflag_select == 9 ? (slider(BMic.slider) = 4;caller = 1;BMic.quicklink_button());
 eflag_select == 10? (slider(BMic.slider) = 5;caller = 1;BMic.quicklink_button());
 eflag_select == 11? (slider(BMic.slider) = 6;caller = 1;BMic.quicklink_button());
 eflag_select == 12? (slider(BPos.slider) == 1 ? slider(BPos.slider) = 0 : slider(BPos.slider) = 1;caller = 1;BPos.quicklink_button());
 eflag_select ? caller = 1;
 //g_collision(Mic_select_x, Mic_select_y, bsize*zoom, bsize *zoom) ? (slider(BMic.slider) = 0;caller = 1;BMic.quicklink_button());
 //g_collision(wah_close_x, close_y, 10*zoom, 10*zoom) ? (gen_dragging = 1; slider(BWah_on.slider) == 0 ? slider(BWah_on.slider) = 1 : slider(BWah_on.slider) = 0; BWah_on.Quicklink_Button(); caller = 1);
 
 
 
 );
 
 ); // ext flags

tuner_on = 0;
tuner_on ? (
kammerton = 220;
E1L = (kammerton/4) * 2^(-7.5/12);
E1 =  (kammerton/4) * 2^(-5/12);
E1H = (kammerton/4) * 2^(-3/12);
A1L = (kammerton/4) * 2^(-2.5/12);
A1 =  (kammerton/4) * 2^(0/12);
A1H = (kammerton/4) * 2^(2.5/12);
D1L = (kammerton/4) * 2^(3/12);
D1 =  (kammerton/4) * 2^(5/12);
D1H = (kammerton/4) * 2^(7.5/12);
G1L = (kammerton/4) * 2^(7.6/12);
G1 =  (kammerton/4) * 2^(10/12);
G1H = (kammerton/4) * 2^(11.5/12);
H1L = 0;//(kammerton/4) * 2^(1/12);
H1 = 0;//(kammerton/4) * 2^(2/12);
H1H = 0;//(kammerton/4) * 2^(3/12);
H1L = (kammerton/2) * 2^(1/12);
H1 =  (kammerton/2) * 2^(2/12);
H1H = (kammerton/2) * 2^(3/12);

E1L = (kammerton/2) * 2^(-7.5/12);
E1 =  (kammerton/2) * 2^(-5/12);
E1H = (kammerton/2) * 2^(-3/12);
A1L = (kammerton/2) * 2^(-2.5/12);
A1 =  (kammerton/2) * 2^(0/12);
A1H = (kammerton/2) * 2^(2.5/12);
D1L = (kammerton/2) * 2^(3/12);
D1 =  (kammerton/2) * 2^(5/12);
D1H = (kammerton/2) * 2^(7.5/12);
G1L = (kammerton/2) * 2^(7.6/12);
G1 =  (kammerton/2) * 2^(10/12);
G1H = (kammerton/2) * 2^(11.5/12);
H1L = 0;//(kammerton/4) * 2^(1/12);
H1 = 0;//(kammerton/4) * 2^(2/12);
H1H = 0;//(kammerton/4) * 2^(3/12);
H1L = (kammerton/1) * 2^(1/12);
H1 =  (kammerton/1) * 2^(2/12);
H1H = (kammerton/1) * 2^(3/12);
/*
E2L = (kammerton/2) * 2^(-6/12);
E2 =  (kammerton/2) * 2^(-5/12);
E2H = (kammerton/2) * 2^(-4/12);
A2L = (kammerton/2) * 2^(-1/12);
A2 =  (kammerton/2) * 2^(0/12);
A2H = (kammerton/2) * 2^(1/12);
D2L = (kammerton/2) * 2^(4/12);
D2 =  (kammerton/2) * 2^(5/12);
D2H = (kammerton/2) * 2^(6/12);
G2L = (kammerton/2) * 2^(9/12);
G2 =  (kammerton/2) * 2^(10/12);
G2H = (kammerton/2) * 2^(11/12);
H2L = (kammerton/2) * 2^(1/12);
H2 =  (kammerton/2) * 2^(2/12);
H2H = (kammerton/2) * 2^(3/12);
E3L = (kammerton/1) * 2^(-6/12);
E3 =  (kammerton/1) * 2^(-5/12);
E3H = (kammerton/1) * 2^(-4/12);
A3L = (kammerton/1) * 2^(-1/12);
A3 =  (kammerton/1) * 2^(0/12);
A3H = (kammerton/1) * 2^(1/12);
D3L = (kammerton/1) * 2^(4/12);
D3 =  (kammerton/1) * 2^(5/12);
D3H = (kammerton/1) * 2^(6/12);
G3L = (kammerton/1) * 2^(9/12);
G3 =  (kammerton/1) * 2^(10/12);
G3H = (kammerton/1) * 2^(11/12);
H3L = (kammerton/1) * 2^(1/12);
H3 =  (kammerton/1) * 2^(2/12);
H3H = (kammerton/1) * 2^(3/12);
E4L = (kammerton*2) * 2^(-6/12);
E4 =  (kammerton*2) * 2^(-5/12);
E4H = (kammerton*2) * 2^(-4/12);
A4L = (kammerton*2) * 2^(-1/12);
A4 =  (kammerton*2) * 2^(0/12);
A4H = (kammerton*2) * 2^(1/12);
D4L = (kammerton*2) * 2^(4/12);
D4 =  (kammerton*2) * 2^(5/12);
D4H = (kammerton*2) * 2^(6/12);
G4L = (kammerton*2) * 2^(9/12);
G4 =  (kammerton*2) * 2^(10/12);
G4H = (kammerton*2) * 2^(11/12);
H4L = (kammerton*2) * 2^(1/12);
H4 =  (kammerton*2) * 2^(2/12);
H4H = (kammerton*2) * 2^(3/12);
*/
black();
//zielton > -2 ? (
zielton < 0 ? (
rgb(255,100,100);
differenz = (LowM - TargetM) / ((LowM - TargetM) + zielton) -1;
):zielton >= 0 ? (
rgb(100,255,100);
differenz = (HighM - TargetM) / ((HighM - TargetM) - zielton) -1;
);
//);
//white();
gfx_y = gfx_y = 2;
gfx_drawstr(#note); gfx_drawstr(" ");gfx_drawnumber(differenz,3);gfx_drawstr(" ");gfx_drawnumber(Measured_note,3);
zielton > -2 ? (
gfx_x = 900*zoom; gfx_y = 250*zoom;
rgb(0,255,0);
gfx_rect(gfx_x - 5, gfx_y, 11,11);
rgb(255,0,0);
gfx_rectto(gfx_x + differenz*100, gfx_y + 11);
);

);//Tuner on

 S2_sample_on == 0 ? (
 gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
 group_check_gfx();
 caller == 1 ? (
   parameters_update_on == 0 ? (
     parameters_update();
   );
 );
 Link_Group ? (
 !chain_arrange ? (
 gmem[chain_mem] == link_Group ? (
 dist_chain_pos = gmem[chain_mem+1];
 delay_chain_pos = gmem[chain_mem+2];
 wah_chain_pos = gmem[chain_mem+3];
 chorus_chain_pos = gmem[chain_mem+4];
 flanger_chain_pos = gmem[chain_mem+5];
 phaser_chain_pos = gmem[chain_mem+6];
 trem_chain_pos = gmem[chain_mem+7];
 rev_chain_pos = gmem[chain_mem+8];
 amp_chain_pos = gmem[chain_mem+9];
 caller = 1;
 );
 );
 );
 
 );
 S2_sample_on = 0;
