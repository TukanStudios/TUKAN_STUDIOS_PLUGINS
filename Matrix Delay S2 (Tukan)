desc:Matrix Delay S2 (Tukan)
// right-click on the GUI to cancel 'feedback'.

slider1:0<-60,20,0.1>-Mix DLL 1
slider2:0<-1,1,0.01>- PAN DLL 1
slider3:0<-60,20,0.1>-Mix DLL 2
slider4:0<-1,1,0.01>- PAN DLL 2
slider5:0<-60,20,0.1>-Mix DLL 3
slider6:0<-1,1,0.01>- PAN DLL 3
slider7:0<-60,20,0.1>-Mix DLL 4
slider8:0<-1,1,0.01>- PAN DLL 4
slider9:0<-60,20,0.1>-Mix Dry LEFT
slider10:-1<-1,1,0.01>- PAN LEFT
slider11:0<-60,20,0.1>-Mix Dry RIGHT
slider12:1<-1,1,0.01>- PAN RIGHT

slider13:-60<-60,20,0.1>-IN Dll2 to DLL 1
slider14:-60<-60,20,0.1>-IN Dll3 to DLL 1
slider15:-60<-60,20,0.1>-IN Dll4 to DLL 1
slider16:0<-60,20,0.1>-IN LEFT to DLL 1
slider17:0<-60,20,0.1>-IN RIGHT to DLL 1

slider18:-60<-60,20,0.1>-IN Dll1 to DLL 2
slider19:-60<-60,20,0.1>-IN Dll3 to DLL 2
slider20:-60<-60,20,0.1>-IN Dll4 to DLL 2
slider21:0<-60,20,0.1>-IN LEFT to DLL 2
slider22:0<-60,20,0.1>-IN RIGHT to DLL 2

slider23:-60<-60,20,0.1>-IN Dll1 to DLL 3
slider24:-60<-60,20,0.1>-IN Dll2 to DLL 3
slider25:-60<-60,20,0.1>-IN Dll4 to DLL 3
slider26:0<-60,20,0.1>-IN LEFT to DLL 3
slider27:-60<-60,20,0.1>-IN RIGHT to DLL 3

slider28:-60<-60,20,0.1>-IN Dll1 to DLL 4
slider29:-60<-60,20,0.1>-IN Dll2 to DLL 4
slider30:-60<-60,20,0.1>-IN Dll3 to DLL 4
slider31:-60<-60,20,0.1>-IN LEFT to DLL 4
slider32:0<-60,20,0.1>-IN RIGHT to DLL 4

slider33:400<0,5000,0.0005>-delay
slider34:65<0,130,0.005>-feedback
slider35:400<0,5000,0.0005>-ITG
slider36:0<0,1,1{Same, Free}>-ITG Mode
slider37:150<50,1000,1>-Drift
slider38:0<0,2,1{Drift, Jump, Clear}>-Mode
slider39:0<0,59.819,.01>-HPF
slider40:100<59.819,100,.01>-LPF
slider41:0<-12,12,0.1>-LSh
slider42:0<-12,12,0.1>-HSh
slider43:0<0,100,1>-Drive
slider44:16<1,16,1>-Bit Reduction
slider45:22050<100,22050,50>-Freq Reduction (Hz)
slider46:0<0,1,1{Off, On}>-14 Filter Feed
slider47:0<0,1,1{Off, On}>-15 Shelv Feed
slider48:0<0,1,1{Off, On}>-16 Drive Feed
slider49:0<0,1,1{Off, On}>-17 Crush Feed
slider50:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-18 sync
slider51:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-19 sync ITG
slider52:0<-60,20,0.1>-Output
slider53:1<0,1,1{Off, On}>-DelayLine On

slider54:400<0,5000,0.0005>-delay
slider55:65<0,130,0.005>-feedback
slider56:400<0,5000,0.0005>-ITG
slider57:0<0,1,1{Same, Free}>-ITG Mode
slider58:150<50,1000,1>-Drift
slider59:0<0,2,1{Drift, Jump, Clear}>-Mode
slider60:0<0,59.819,.01>-HPF
slider61:100<59.819,100,.01>-LPF
slider62:0<-12,12,0.1>-LSh
slider63:0<-12,12,0.1>-HSh
slider64:0<0,100,1>-Drive
slider65:16<1,16,1>-Bit Reduction
slider66:22050<100,22050,50>-Freq Reduction (Hz)
slider67:0<0,1,1{Off, On}>-14 Filter Feed
slider68:0<0,1,1{Off, On}>-15 Shelv Feed
slider69:0<0,1,1{Off, On}>-16 Drive Feed
slider70:0<0,1,1{Off, On}>-17 Crush Feed
slider71:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-18 sync
slider72:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-19 sync ITG
slider73:0<-60,20,0.1>-Output
slider74:1<0,1,1{Off, On}>-DelayLine On

slider75:400<0,5000,0.0005>-delay
slider76:65<0,130,0.005>-feedback
slider77:400<0,5000,0.0005>-ITG
slider78:0<0,1,1{Same, Free}>-ITG Mode
slider79:150<50,1000,1>-Drift
slider80:0<0,2,1{Drift, Jump, Clear}>-Mode
slider81:0<0,59.819,.01>-HPF
slider82:100<59.819,100,.01>-LPF
slider83:0<-12,12,0.1>-LSh
slider84:0<-12,12,0.1>-HSh
slider85:0<0,100,1>-Drive
slider86:16<1,16,1>-Bit Reduction
slider87:22050<100,22050,50>-Freq Reduction (Hz)
slider88:0<0,1,1{Off, On}>-14 Filter Feed
slider89:0<0,1,1{Off, On}>-15 Shelv Feed
slider90:0<0,1,1{Off, On}>-16 Drive Feed
slider91:0<0,1,1{Off, On}>-17 Crush Feed
slider92:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-18 sync
slider93:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-19 sync ITG
slider94:0<-60,20,0.1>-Output
slider95:1<0,1,1{Off, On}>-DelayLine On

slider96:400<0,5000,0.0005>-delay
slider97:65<0,130,0.005>-feedback
slider98:400<0,5000,0.0005>-ITG
slider99:0<0,1,1{Same, Free}>-ITG Mode
slider100:150<50,1000,1>-Drift
slider101:0<0,2,1{Drift, Jump, Clear}>-Mode
slider102:0<0,59.819,.01>-HPF
slider103:100<59.819,100,.01>-LPF
slider104:0<-12,12,0.1>-LSh
slider105:0<-12,12,0.1>-HSh
slider106:0<0,100,1>-Drive
slider107:16<1,16,1>-Bit Reduction
slider108:22050<100,22050,50>-Freq Reduction (Hz)
slider109:0<0,1,1{Off, On}>-14 Filter Feed
slider110:0<0,1,1{Off, On}>-15 Shelv Feed
slider111:0<0,1,1{Off, On}>-16 Drive Feed
slider112:0<0,1,1{Off, On}>-17 Crush Feed
slider113:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-18 sync
slider114:0<0,17,1{Free, 1/1, 1/2, 1/4, 1/8, 1/16, 1/32, 1/1t, 1/2t, 1/4t, 1/8t, 1/16t, 1/32t, 1/1d, 1/2d, 1/4d, 1/8d, 1/16d, 1/32d }>-19 sync ITG
slider115:0<-60,20,0.1>-Output
slider116:1<0,1,1{Off, On}>-DelayLine On


slider117:-60<-60,20,0.1>-AUX IN 1 to DLL 1
slider118:-60<-60,20,0.1>-AUX IN 2 to DLL 1
slider119:-60<-60,20,0.1>-AUX IN 3 to DLL 1
slider120:-60<-60,20,0.1>-AUX IN 4 to DLL 1
slider121:-60<-60,20,0.1>-AUX IN 1 to DLL 2
slider122:-60<-60,20,0.1>-AUX IN 2 to DLL 2
slider123:-60<-60,20,0.1>-AUX IN 3 to DLL 2
slider124:-60<-60,20,0.1>-AUX IN 4 to DLL 2
slider125:-60<-60,20,0.1>-AUX IN 1 to DLL 3
slider126:-60<-60,20,0.1>-AUX IN 2 to DLL 3
slider127:-60<-60,20,0.1>-AUX IN 3 to DLL 3
slider128:-60<-60,20,0.1>-AUX IN 4 to DLL 3
slider129:-60<-60,20,0.1>-AUX IN 1 to DLL 4
slider130:-60<-60,20,0.1>-AUX IN 2 to DLL 4
slider131:-60<-60,20,0.1>-AUX IN 3 to DLL 4
slider132:-60<-60,20,0.1>-AUX IN 4 to DLL 4

slider133:0<-60,20,0.1>-DLL1 to AUX 1
slider134:-60<-60,20,0.1>-DLL1 to AUX 2
slider135:-60<-60,20,0.1>-DLL1 to AUX 3
slider136:-60<-60,20,0.1>-DLL1 to AUX 4

slider137:-60<-60,20,0.1>-DLL2 to AUX 1
slider138:0<-60,20,0.1>-DLL2 to AUX 2
slider139:-60<-60,20,0.1>-DLL2 to AUX 3
slider140:-60<-60,20,0.1>-DLL2 to AUX 4

slider141:-60<-60,20,0.1>-DLL3 to AUX 1
slider142:-60<-60,20,0.1>-DLL3 to AUX 2
slider143:0<-60,20,0.1>-DLL3 to AUX 3
slider144:-60<-60,20,0.1>-DLL3 to AUX 4

slider145:-60<-60,20,0.1>-DLL4 to AUX 1
slider146:-60<-60,20,0.1>-DLL4 to AUX 2
slider147:-60<-60,20,0.1>-DLL4 to AUX 3
slider148:0<-60,20,0.1>-DLL4 to AUX 4

slider149:-60<-60,20,0.1>-Dry L to AUX 1
slider150:-60<-60,20,0.1>-Dry L to AUX 2
slider151:-60<-60,20,0.1>-Dry L to AUX 3
slider152:-60<-60,20,0.1>-Dry L to AUX 4

slider153:-60<-60,20,0.1>-Dry R to AUX 1
slider154:-60<-60,20,0.1>-Dry R to AUX 2
slider155:-60<-60,20,0.1>-Dry R to AUX 3
slider156:-60<-60,20,0.1>-Dry R to AUX 4

slider157:0<0,1,1,{ON, BYPASS}>-Bypass
slider158:0<0,1,1{OK, STOP!!}>-Clear All DLLs
slider159:0<0,1,1{DLL Input, AUX Out}>-Matrix Show
slider160:1<0,1,1{Hide, Show}>-X Feed
slider161:1<0,1,1{Hide, Show}>-Aux Feed

slider162:0<0,500>-Global BPM (0 = Project)
slider163:0<0,1,1{Seconds, Bars}>-GFX Delay Graph Measure
slider164:0<0,1,1{ITG+DELAY, Result}>-GFX Delay Graph
slider165:2.5<0.1,5,0.1>-GFX DELAY SCALE

BYP 241 157
CLEAR 242 158
Mixer 243 159
X 244 160
A 245 161
BPM 246 162
Measure 247 163
Graph 248 164
Scale 249 165

in_pin:L in
in_pin:R in
in_pin:AUX 1
in_pin:AUX 2
in_pin:AUX 3
in_pin:AUX 4

out_pin:L out
out_pin:R out
out_pin:AUX 1
out_pin:AUX 2
out_pin:AUX 3
out_pin:AUX 4


import S2GFX/tk_lib 256.jsfx-inc
import S2GFX/cookdsp.jsfx-inc



filename:0,S2GFX/MBC_PV.png
filename:1,S2GFX/MBC_PM.png
filename:2,S2GFX/MBC_PR.png
filename:3,S2GFX/MBC_YV.png
filename:4,S2GFX/MBC_YM.png
filename:5,S2GFX/MBC_YR.png
filename:6,S2GFX/MBC_OV.png
filename:7,S2GFX/MBC_OM.png
filename:8,S2GFX/MBC_OR.png
filename:9,S2GFX/MBC_CV.png
filename:10,S2GFX/MBC_CM.png
filename:11,S2GFX/MBC_CR.png
filename:12,S2GFX/MBC_GV.png
filename:13,S2GFX/MBC_GM.png
filename:14,S2GFX/MBC_GR.png
filename:15,S2GFX/MBC_POWER.png
filename:16,S2GFX/MBC_3S.png
filename:17,S2GFX/MBC_FLIP.png
filename:18,S2GFX/S2_logo.png
filename:19,S2GFX/button.png
filename:20,S2GFX/rled.png
filename:21,S2GFX/DeNoiser_Back.png
filename:22,S2GFX/gled.png

options:No_meter
//options:gfx_hz=60
options:gmem=TukanMatrixDelayS2


@init

MATRIX_DELAY_VERSION = 1.17;


//ext_tail_size = -1;
ext_nodenorm = 1;
gfx_ext_retina = 1;
gfx_clear=0;
ext_noinit=1;
lastCap=1;
mouse_wheel=1;
is_recording = 0; is_playing = 0; is_stopped = 1;
while_playing = 1; while_recording = 1; while_stopped = 1;
Number_input = 0;
number_input_raw = 0;
number_input_use = 0;
komma = 0;
in_key = 0;
number_input_x = 0;
number_input_y=0;
number_input_slider = 0;
number_input_min=0;
number_input_max=0;
number_input_invalid = 0;
number_input_sign=1;

button = 19; rled = 20;

s2_numbers_of_sliders = 165;
s2_numbers_of_generics = 0;
group_generics =0; // fuer group_generics[bis zu 200]
sliders_old = group_generics + 16*200;
generics_old = sliders_old + 16*256;

 Mouse_Sensivity ();


    MAX_FREQ = 44100 / 2.0;
    MIN_FREQ = 10;
    FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);
  function per_to_freq(x, range) (
    MIN_FREQ * exp(FREQ_LOG_MAX * x / range);
  );
  function freq_to_per(freq, range) (
    range * log(freq / MIN_FREQ) / FREQ_LOG_MAX;
  );
  function tanh(x) (
  x = exp(2*x);
  (x - 1) / (x + 1);
  );
  function dcBlocker () //instance (otml, itml)
  (
  this.otm1=aab*this.otm1 + this - this.itm1; this.itm1=this; this=this.otm1;
  );
  function init_delay_line () (
  memset(this.ITGpos, 0, gen_buf_size+2);
  memset(this.arraypos, 0, gen_buf_size+2);
  );

gen_buf_pos = 0;
gen_buf_size = 5*192000; //set max delay time at max sample rate
buf_start = 2000;//4096;
//memset(buffer, 0, size);


dll_1.ITGpos = generics_old + 210;
dll_1.arraypos = dll_1.ITGpos + gen_buf_size;
dll_1.startslider = 33;
dll_1.deltime = slider(dll_1.startslider) * srate/1000;
dll_1.ITGtime = dll_1.ITGtime.live = slider(dll_1.startslider+2) * srate/1000;
dll_1.deltime.live = dll_1.deltime;
dll_1.HP.buthp(per_to_freq(slider(dll_1.startslider+6),100));
dll_1.LP.butlp(per_to_freq(slider(dll_1.startslider+7),100));
dll_1.LS.eq(200,0.707,slider(dll_1.startslider+8),1);
dll_1.HS.eq(4000,0.707,slider(dll_1.startslider+9),2);
dll_1.phasorA = 0;
dll_1.lastA = 0;
dll_1.vslider17 = slider(dll_1.startslider+17);
dll_1.db_val = -200;
dll_1.db_val_max = -200;


     //Parameter_config           (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
     dll_1.Knobs_x = 40;
     dll_1.knobs_y = 60;
     dll_1.gfx_delfbk.parameter_config     (dll_1.startslider+1,       65,      0,    130,  dll_1.knobs_x + 450,   dll_1.knobs_y-12,  120,  200,    1,       12);
     dll_1.gfx_drift.parameter_config      (dll_1.startslider+4,       150,     50,  1000,  dll_1.knobs_x + 575,   dll_1.knobs_y-12,  120,  200,    1,       12);
     dll_1.mode.button_config              (dll_1.startslider+5, dll_1.knobs_x +765, dll_1.knobs_y - 8);
     dll_1.gfx_HPF.parameter_config        (dll_1.startslider+6,         0,      0,59.819,  dll_1.knobs_x + 645,   dll_1.knobs_y-12,  120,  200,    1,       12);
     dll_1.gfx_LPF.parameter_config        (dll_1.startslider+7,       100, 59.819,   100,  dll_1.knobs_x + 705,   dll_1.knobs_y-12,  120,  200,    1,       14);
     dll_1.feed_filter.button_config       (dll_1.startslider+13, dll_1.knobs_x +765, dll_1.knobs_y - 8);
     dll_1.gfx_LS.parameter_config         (dll_1.startslider+8,         0,     -12,    12,  dll_1.knobs_x + 805,   dll_1.knobs_y-12,  120,  200,    1,       13);
     dll_1.gfx_HS.parameter_config         (dll_1.startslider+9,         0,     -12,    12,  dll_1.knobs_x + 865,   dll_1.knobs_y-12,  120,  200,    1,       13);
     dll_1.feed_shelv.button_config        (dll_1.startslider+14, dll_1.knobs_x +925, dll_1.knobs_y - 8);
     dll_1.gfx_Drive.parameter_config      (dll_1.startslider+10,        0,      0,    100,  dll_1.knobs_x + 965,   dll_1.knobs_y-12,  120,  200,    1,       12);
     dll_1.feed_drive.button_config        (dll_1.startslider+15, dll_1.knobs_x +1025, dll_1.knobs_y - 8);
     dll_1.gfx_Bit.parameter_config        (dll_1.startslider+11,       16,      1,     16,  dll_1.knobs_x + 1065,   dll_1.knobs_y-12,  120,  200,    1,        14);
     dll_1.gfx_Freq.parameter_config       (dll_1.startslider+12,    22050,    100,  22050,  dll_1.knobs_x + 1125,   dll_1.knobs_y-12,  120,  200,    1,        14);
     dll_1.feed_crush.button_config        (dll_1.startslider+16, dll_1.knobs_x +1185, dll_1.knobs_y - 8); 
     dll_1.gfx_Level.parameter_config       (dll_1.startslider+19,        0,    -60,     20,  dll_1.knobs_x + 1225,   dll_1.knobs_y-12,  120,  200,    1,        12);
     dll_1.gfx_del_time.parameter_config    (dll_1.startslider,         400,      0,   5000,  dll_1.knobs_x + 350,   dll_1.knobs_y+12,  120,  200,    1,        12);
     dll_1.gfx_ITG_time.parameter_config    (dll_1.startslider+2,       400,      0,   5000,  dll_1.knobs_x + 310,   dll_1.knobs_y+12,  120,  200,    1,        12);
     dll_1.gfx_del_bar.button_config        (dll_1.startslider+17, 0,0);
     dll_1.gfx_ITG_bar.button_config        (dll_1.startslider+18, 0,0);
     dll_1.gfx_ITG_mode.button_config        (dll_1.startslider+3, 0,0);
     dll_1.gfx_dll_on.button_config        (dll_1.startslider+20, dll_1.knobs_x + 1285,   dll_1.knobs_y-8);
     
     dll_1.matrix_x = 90; dll_1.matrix_y = 450;
     dll_1.self_feed.parameter_config       (dll_1.startslider+1,       65,      0,    130,  dll_1.Matrix_x,         dll_1.Matrix_y,  120,  200,    1,       12);
     dll_1.dll_x1_feed.parameter_config     (dll_1.startslider-20,     -60,    -60,     20,  dll_1.Matrix_x + 60,    dll_1.Matrix_y,  120,  200,    1,        0);
     dll_1.dll_x2_feed.parameter_config     (dll_1.startslider-19,     -60,    -60,     20,  dll_1.Matrix_x + 120,    dll_1.Matrix_y,  120,  200,    1,        0);
     dll_1.dll_x3_feed.parameter_config     (dll_1.startslider-18,     -60,    -60,     20,  dll_1.Matrix_x + 180,    dll_1.Matrix_y,  120,  200,    1,        0);
     dll_1.dll_L_feed.parameter_config      (dll_1.startslider-17,       0,    -60,     20,  dll_1.Matrix_x + 260,    dll_1.Matrix_y,  120,  200,    1,        6);
     dll_1.dll_R_feed.parameter_config      (dll_1.startslider-16,       0,    -60,     20,  dll_1.Matrix_x + 320,    dll_1.Matrix_y,  120,  200,    1,        6);
     dll_1.dll_A1_feed.parameter_config     (dll_1.startslider+84,     -60,    -60,     20,  dll_1.Matrix_x + 400,    dll_1.Matrix_y,  120,  200,    1,        3);
     dll_1.dll_A2_feed.parameter_config     (dll_1.startslider+85,     -60,    -60,     20,  dll_1.Matrix_x + 460,    dll_1.Matrix_y,  120,  200,    1,        3);
     dll_1.dll_A3_feed.parameter_config     (dll_1.startslider+86,     -60,    -60,     20,  dll_1.Matrix_x + 520,    dll_1.Matrix_y,  120,  200,    1,        3);
     dll_1.dll_A4_feed.parameter_config     (dll_1.startslider+87,     -60,    -60,     20,  dll_1.Matrix_x + 580,    dll_1.Matrix_y,  120,  200,    1,        3);
     
     
     
     
     
 dll_2.ITGpos = dll_1.arraypos + gen_buf_size + 10;
 dll_2.arraypos = dll_2.ITGpos + gen_buf_size;
 dll_2.startslider = 54;
 dll_2.deltime = slider(dll_2.startslider) * srate/1000;
 dll_2.ITGtime = dll_2.ITGtime.live = slider(dll_2.startslider+2) * srate/1000;
 dll_2.deltime.live = dll_2.deltime;
 dll_2.HP.buthp(per_to_freq(slider(dll_2.startslider+6),100));
 dll_2.LP.butlp(per_to_freq(slider(dll_2.startslider+7),100));
 dll_2.LS.eq(200,0.707,slider(dll_2.startslider+8),1);
 dll_2.HS.eq(4000,0.707,slider(dll_2.startslider+9),2);
 dll_2.phasorA = 0;
 dll_2.lastA = 0;
 dll_2.vslider17 = slider(dll_2.startslider+17);
 dll_2.db_val = -200;
 dll_2.db_val_max = -200;
 
 
      //Parameter_config           (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
      dll_2.Knobs_x = 40;
      dll_2.knobs_y = 160;
      dll_2.gfx_delfbk.parameter_config     (dll_2.startslider+1,       65,      0,    130,  dll_2.knobs_x + 450,   dll_2.knobs_y-12,  120,  200,    1,       12);
      dll_2.gfx_drift.parameter_config      (dll_2.startslider+4,       150,     50,  1000,  dll_2.knobs_x + 575,   dll_2.knobs_y-12,  120,  200,    1,       12);
      dll_2.mode.button_config              (dll_2.startslider+5, dll_2.knobs_x +765, dll_2.knobs_y - 8);
      dll_2.gfx_HPF.parameter_config        (dll_2.startslider+6,         0,      0,59.819,  dll_2.knobs_x + 645,   dll_2.knobs_y-12,  120,  200,    1,       12);
      dll_2.gfx_LPF.parameter_config        (dll_2.startslider+7,       100, 59.819,   100,  dll_2.knobs_x + 705,   dll_2.knobs_y-12,  120,  200,    1,       14);
      dll_2.feed_filter.button_config       (dll_2.startslider+13, dll_2.knobs_x +765, dll_2.knobs_y - 8);
      dll_2.gfx_LS.parameter_config         (dll_2.startslider+8,         0,     -12,    12,  dll_2.knobs_x + 805,   dll_2.knobs_y-12,  120,  200,    1,       13);
      dll_2.gfx_HS.parameter_config         (dll_2.startslider+9,         0,     -12,    12,  dll_2.knobs_x + 865,   dll_2.knobs_y-12,  120,  200,    1,       13);
      dll_2.feed_shelv.button_config        (dll_2.startslider+14, dll_2.knobs_x +925, dll_2.knobs_y - 8);
      dll_2.gfx_Drive.parameter_config      (dll_2.startslider+10,        0,      0,    100,  dll_2.knobs_x + 965,   dll_2.knobs_y-12,  120,  200,    1,       12);
      dll_2.feed_drive.button_config        (dll_2.startslider+15, dll_2.knobs_x +1025, dll_2.knobs_y - 8);
      dll_2.gfx_Bit.parameter_config        (dll_2.startslider+11,       16,      1,     16,  dll_2.knobs_x + 1065,   dll_2.knobs_y-12,  120,  200,    1,        14);
      dll_2.gfx_Freq.parameter_config       (dll_2.startslider+12,    22050,    100,  22050,  dll_2.knobs_x + 1125,   dll_2.knobs_y-12,  120,  200,    1,        14);
      dll_2.feed_crush.button_config        (dll_2.startslider+16, dll_2.knobs_x +1185, dll_2.knobs_y - 8); 
      dll_2.gfx_Level.parameter_config       (dll_2.startslider+19,        0,    -60,     20,  dll_2.knobs_x + 1225,   dll_2.knobs_y-12,  120,  200,    1,        12);
      dll_2.gfx_del_time.parameter_config    (dll_2.startslider,         400,      0,   5000,  dll_2.knobs_x + 350,   dll_2.knobs_y+12,  120,  200,    1,        12);
      dll_2.gfx_ITG_time.parameter_config    (dll_2.startslider+2,       400,      0,   5000,  dll_2.knobs_x + 310,   dll_2.knobs_y+12,  120,  200,    1,        12);
      dll_2.gfx_del_bar.button_config        (dll_2.startslider+17, 0,0);
      dll_2.gfx_ITG_bar.button_config        (dll_2.startslider+18, 0,0);
      dll_2.gfx_ITG_mode.button_config        (dll_2.startslider+3, 0,0);
      dll_2.gfx_dll_on.button_config        (dll_2.startslider+20, dll_2.knobs_x + 1285,   dll_2.knobs_y-8);
      
      dll_2.matrix_x = dll_1.matrix_x; dll_2.matrix_y = dll_1.matrix_y + 80;
      dll_2.self_feed.parameter_config       (dll_2.startslider+1,       65,      0,    130,  dll_2.Matrix_x + 60,    dll_2.Matrix_y,  120,  200,    1,       12);
      dll_2.dll_x1_feed.parameter_config     (dll_2.startslider-36,     -60,    -60,     20,  dll_2.Matrix_x ,        dll_2.Matrix_y,  120,  200,    1,        0);
      dll_2.dll_x2_feed.parameter_config     (dll_2.startslider-35,     -60,    -60,     20,  dll_2.Matrix_x + 120,    dll_2.Matrix_y,  120,  200,    1,        0);
      dll_2.dll_x3_feed.parameter_config     (dll_2.startslider-34,     -60,    -60,     20,  dll_2.Matrix_x + 180,    dll_2.Matrix_y,  120,  200,    1,        0);
      dll_2.dll_L_feed.parameter_config      (dll_2.startslider-33,       0,    -60,     20,  dll_2.Matrix_x + 260,    dll_2.Matrix_y,  120,  200,    1,        6);
      dll_2.dll_R_feed.parameter_config      (dll_2.startslider-32,       0,    -60,     20,  dll_2.Matrix_x + 320,    dll_2.Matrix_y,  120,  200,    1,        6);
      dll_2.dll_A1_feed.parameter_config     (dll_2.startslider+67,     -60,    -60,     20,  dll_2.Matrix_x + 400,    dll_2.Matrix_y,  120,  200,    1,        3);
      dll_2.dll_A2_feed.parameter_config     (dll_2.startslider+68,     -60,    -60,     20,  dll_2.Matrix_x + 460,    dll_2.Matrix_y,  120,  200,    1,        3);
      dll_2.dll_A3_feed.parameter_config     (dll_2.startslider+69,     -60,    -60,     20,  dll_2.Matrix_x + 520,    dll_2.Matrix_y,  120,  200,    1,        3);
      dll_2.dll_A4_feed.parameter_config     (dll_2.startslider+70,     -60,    -60,     20,  dll_2.Matrix_x + 580,    dll_2.Matrix_y,  120,  200,    1,        3);
      
         
     
 dll_3.ITGpos = dll_2.arraypos + gen_buf_size + 10;
 dll_3.arraypos = dll_3.ITGpos + gen_buf_size;
 dll_3.startslider = 75;
 dll_3.deltime = slider(dll_3.startslider) * srate/1000;
 dll_3.ITGtime = dll_3.ITGtime.live = slider(dll_3.startslider+2) * srate/1000;
 dll_3.deltime.live = dll_3.deltime;
 dll_3.HP.buthp(per_to_freq(slider(dll_3.startslider+6),100));
 dll_3.LP.butlp(per_to_freq(slider(dll_3.startslider+7),100));
 dll_3.LS.eq(200,0.707,slider(dll_3.startslider+8),1);
 dll_3.HS.eq(4000,0.707,slider(dll_3.startslider+9),2);
 dll_3.phasorA = 0;
 dll_3.lastA = 0;
 dll_3.vslider17 = slider(dll_3.startslider+17);
 dll_3.db_val = -200;
 dll_4.db_val_max = -200;
 
 
      //Parameter_config           (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
      dll_3.Knobs_x = 40;
      dll_3.knobs_y = 260;
      dll_3.gfx_delfbk.parameter_config     (dll_3.startslider+1,       65,      0,    130,  dll_3.knobs_x + 450,   dll_3.knobs_y-12,  120,  200,    1,       12);
      dll_3.gfx_drift.parameter_config      (dll_3.startslider+4,       150,     50,  1000,  dll_3.knobs_x + 575,   dll_3.knobs_y-12,  120,  200,    1,       12);
      dll_3.mode.button_config              (dll_3.startslider+5, dll_3.knobs_x +765, dll_3.knobs_y - 8);
      dll_3.gfx_HPF.parameter_config        (dll_3.startslider+6,         0,      0,59.819,  dll_3.knobs_x + 645,   dll_3.knobs_y-12,  120,  200,    1,       12);
      dll_3.gfx_LPF.parameter_config        (dll_3.startslider+7,       100, 59.819,   100,  dll_3.knobs_x + 705,   dll_3.knobs_y-12,  120,  200,    1,       14);
      dll_3.feed_filter.button_config       (dll_3.startslider+13, dll_3.knobs_x +765, dll_3.knobs_y - 8);
      dll_3.gfx_LS.parameter_config         (dll_3.startslider+8,         0,     -12,    12,  dll_3.knobs_x + 805,   dll_3.knobs_y-12,  120,  200,    1,       13);
      dll_3.gfx_HS.parameter_config         (dll_3.startslider+9,         0,     -12,    12,  dll_3.knobs_x + 865,   dll_3.knobs_y-12,  120,  200,    1,       13);
      dll_3.feed_shelv.button_config        (dll_3.startslider+14, dll_3.knobs_x +925, dll_3.knobs_y - 8);
      dll_3.gfx_Drive.parameter_config      (dll_3.startslider+10,        0,      0,    100,  dll_3.knobs_x + 965,   dll_3.knobs_y-12,  120,  200,    1,       12);
      dll_3.feed_drive.button_config        (dll_3.startslider+15, dll_3.knobs_x +1025, dll_3.knobs_y - 8);
      dll_3.gfx_Bit.parameter_config        (dll_3.startslider+11,       16,      1,     16,  dll_3.knobs_x + 1065,   dll_3.knobs_y-12,  120,  200,    1,        14);
      dll_3.gfx_Freq.parameter_config       (dll_3.startslider+12,    22050,    100,  22050,  dll_3.knobs_x + 1125,   dll_3.knobs_y-12,  120,  200,    1,        14);
      dll_3.feed_crush.button_config        (dll_3.startslider+16, dll_3.knobs_x +1185, dll_3.knobs_y - 8); 
      dll_3.gfx_Level.parameter_config       (dll_3.startslider+19,        0,    -60,     20,  dll_3.knobs_x + 1225,   dll_3.knobs_y-12,  120,  200,    1,        12);
      dll_3.gfx_del_time.parameter_config    (dll_3.startslider,         400,      0,   5000,  dll_3.knobs_x + 350,   dll_3.knobs_y+12,  120,  200,    1,        12);
      dll_3.gfx_ITG_time.parameter_config    (dll_3.startslider+2,       400,      0,   5000,  dll_3.knobs_x + 310,   dll_3.knobs_y+12,  120,  200,    1,        12);
      dll_3.gfx_del_bar.button_config        (dll_3.startslider+17, 0,0);
      dll_3.gfx_ITG_bar.button_config        (dll_3.startslider+18, 0,0);
      dll_3.gfx_ITG_mode.button_config        (dll_3.startslider+3, 0,0);
      dll_3.gfx_dll_on.button_config        (dll_3.startslider+20, dll_3.knobs_x + 1285,   dll_3.knobs_y-8);
        
      dll_3.matrix_x = dll_1.matrix_x; dll_3.matrix_y = dll_2.matrix_y + 80;
      dll_3.self_feed.parameter_config       (dll_3.startslider+1,       65,      0,    130,  dll_3.Matrix_x + 120,    dll_3.Matrix_y,  120,  200,    1,       12);
      dll_3.dll_x1_feed.parameter_config     (dll_3.startslider-52,     -60,    -60,     20,  dll_3.Matrix_x + 0,        dll_3.Matrix_y,  120,  200,    1,      0);
      dll_3.dll_x2_feed.parameter_config     (dll_3.startslider-51,     -60,    -60,     20,  dll_3.Matrix_x + 60,    dll_3.Matrix_y,  120,  200,    1,         0);
      dll_3.dll_x3_feed.parameter_config     (dll_3.startslider-50,     -60,    -60,     20,  dll_3.Matrix_x + 180,    dll_3.Matrix_y,  120,  200,    1,        0);
      dll_3.dll_L_feed.parameter_config      (dll_3.startslider-49,       0,    -60,     20,  dll_3.Matrix_x + 260,    dll_3.Matrix_y,  120,  200,    1,        6);
      dll_3.dll_R_feed.parameter_config      (dll_3.startslider-48,     -60,    -60,     20,  dll_3.Matrix_x + 320,    dll_3.Matrix_y,  120,  200,    1,        6);
      dll_3.dll_A1_feed.parameter_config     (dll_3.startslider+50,     -60,    -60,     20,  dll_3.Matrix_x + 400,    dll_3.Matrix_y,  120,  200,    1,        3);
      dll_3.dll_A2_feed.parameter_config     (dll_3.startslider+51,     -60,    -60,     20,  dll_3.Matrix_x + 460,    dll_3.Matrix_y,  120,  200,    1,        3);
      dll_3.dll_A3_feed.parameter_config     (dll_3.startslider+52,     -60,    -60,     20,  dll_3.Matrix_x + 520,    dll_3.Matrix_y,  120,  200,    1,        3);
      dll_3.dll_A4_feed.parameter_config     (dll_3.startslider+53,     -60,    -60,     20,  dll_3.Matrix_x + 580,    dll_3.Matrix_y,  120,  200,    1,        3);
      
     
     dll_4.ITGpos = dll_3.arraypos + gen_buf_size + 10;
     dll_4.arraypos = dll_4.ITGpos + gen_buf_size;
     dll_4.startslider = 96;
     dll_4.deltime = slider(dll_4.startslider) * srate/1000;
     dll_4.ITGtime = dll_4.ITGtime.live = slider(dll_4.startslider+2) * srate/1000;
     dll_4.deltime.live = dll_4.deltime;
     dll_4.HP.buthp(per_to_freq(slider(dll_4.startslider+6),100));
     dll_4.LP.butlp(per_to_freq(slider(dll_4.startslider+7),100));
     dll_4.LS.eq(200,0.707,slider(dll_4.startslider+8),1);
     dll_4.HS.eq(4000,0.707,slider(dll_4.startslider+9),2);
     dll_4.phasorA = 0;
     dll_4.lastA = 0;
     dll_4.vslider17 = slider(dll_4.startslider+17);
     dll_4.db_val = -200;
     dll_4.db_val_max = -200;
     

          //Parameter_config           (slider_  default_ minVal_ maxVal_ xIn_ yIn_ wIn   frames_ scaling_ file_)      
          dll_4.Knobs_x = 40;
          dll_4.knobs_y = 360;
          dll_4.gfx_delfbk.parameter_config     (dll_4.startslider+1,       65,      0,    130,  dll_4.knobs_x + 450,   dll_4.knobs_y-12,  120,  200,    1,       12);
          dll_4.gfx_drift.parameter_config      (dll_4.startslider+4,       150,     50,  1000,  dll_4.knobs_x + 575,   dll_4.knobs_y-12,  120,  200,    1,       12);
          dll_4.mode.button_config              (dll_4.startslider+5, dll_4.knobs_x +765, dll_4.knobs_y - 8);
          dll_4.gfx_HPF.parameter_config        (dll_4.startslider+6,         0,      0,59.819,  dll_4.knobs_x + 645,   dll_4.knobs_y-12,  120,  200,    1,       12);
          dll_4.gfx_LPF.parameter_config        (dll_4.startslider+7,       100, 59.819,   100,  dll_4.knobs_x + 705,   dll_4.knobs_y-12,  120,  200,    1,       14);
          dll_4.feed_filter.button_config       (dll_4.startslider+13, dll_4.knobs_x +765, dll_4.knobs_y - 8);
          dll_4.gfx_LS.parameter_config         (dll_4.startslider+8,         0,     -12,    12,  dll_4.knobs_x + 805,   dll_4.knobs_y-12,  120,  200,    1,       13);
          dll_4.gfx_HS.parameter_config         (dll_4.startslider+9,         0,     -12,    12,  dll_4.knobs_x + 865,   dll_4.knobs_y-12,  120,  200,    1,       13);
          dll_4.feed_shelv.button_config        (dll_4.startslider+14, dll_4.knobs_x +925, dll_4.knobs_y - 8);
          dll_4.gfx_Drive.parameter_config      (dll_4.startslider+10,        0,      0,    100,  dll_4.knobs_x + 965,   dll_4.knobs_y-12,  120,  200,    1,       12);
          dll_4.feed_drive.button_config        (dll_4.startslider+15, dll_4.knobs_x +1025, dll_4.knobs_y - 8);
          dll_4.gfx_Bit.parameter_config        (dll_4.startslider+11,       16,      1,     16,  dll_4.knobs_x + 1065,   dll_4.knobs_y-12,  120,  200,    1,        14);
          dll_4.gfx_Freq.parameter_config       (dll_4.startslider+12,    22050,    100,  22050,  dll_4.knobs_x + 1125,   dll_4.knobs_y-12,  120,  200,    1,        14);
          dll_4.feed_crush.button_config        (dll_4.startslider+16, dll_4.knobs_x +1185, dll_4.knobs_y - 8); 
          dll_4.gfx_Level.parameter_config       (dll_4.startslider+19,        0,    -60,     20,  dll_4.knobs_x + 1225,   dll_4.knobs_y-12,  120,  200,    1,        12);
          dll_4.gfx_del_time.parameter_config    (dll_4.startslider,         400,      0,   5000,  dll_4.knobs_x + 350,   dll_4.knobs_y+12,  120,  200,    1,        12);
          dll_4.gfx_ITG_time.parameter_config    (dll_4.startslider+2,       400,      0,   5000,  dll_4.knobs_x + 310,   dll_4.knobs_y+12,  120,  200,    1,        12);
          dll_4.gfx_del_bar.button_config        (dll_4.startslider+17, 0,0);
          dll_4.gfx_ITG_bar.button_config        (dll_4.startslider+18, 0,0);
          dll_4.gfx_ITG_mode.button_config        (dll_4.startslider+3, 0,0);
          dll_4.gfx_dll_on.button_config        (dll_4.startslider+20, dll_4.knobs_x + 1285,   dll_4.knobs_y-8);
          
          
          dll_4.matrix_x = dll_1.matrix_x; dll_4.matrix_y = dll_3.matrix_y + 80;
          dll_4.self_feed.parameter_config       (dll_4.startslider+1,       65,      0,    130,  dll_4.Matrix_x + 180,    dll_4.Matrix_y,  120,  200,    1,       12);
          dll_4.dll_x1_feed.parameter_config     (dll_4.startslider-68,     -60,    -60,     20,  dll_4.Matrix_x + 0,        dll_4.Matrix_y,  120,  200,    1,      0);
          dll_4.dll_x2_feed.parameter_config     (dll_4.startslider-67,     -60,    -60,     20,  dll_4.Matrix_x + 60,    dll_4.Matrix_y,  120,  200,    1,         0);
          dll_4.dll_x3_feed.parameter_config     (dll_4.startslider-66,     -60,    -60,     20,  dll_4.Matrix_x + 120,    dll_4.Matrix_y,  120,  200,    1,        0);
          dll_4.dll_L_feed.parameter_config      (dll_4.startslider-65,     -60,    -60,     20,  dll_4.Matrix_x + 260,    dll_4.Matrix_y,  120,  200,    1,        6);
          dll_4.dll_R_feed.parameter_config      (dll_4.startslider-64,       0,    -60,     20,  dll_4.Matrix_x + 320,    dll_4.Matrix_y,  120,  200,    1,        6);
          dll_4.dll_A1_feed.parameter_config     (dll_4.startslider+33,     -60,    -60,     20,  dll_4.Matrix_x + 400,    dll_4.Matrix_y,  120,  200,    1,        3);
          dll_4.dll_A2_feed.parameter_config     (dll_4.startslider+34,     -60,    -60,     20,  dll_4.Matrix_x + 460,    dll_4.Matrix_y,  120,  200,    1,        3);
          dll_4.dll_A3_feed.parameter_config     (dll_4.startslider+35,     -60,    -60,     20,  dll_4.Matrix_x + 520,    dll_4.Matrix_y,  120,  200,    1,        3);
          dll_4.dll_A4_feed.parameter_config     (dll_4.startslider+36,     -60,    -60,     20,  dll_4.Matrix_x + 580,    dll_4.Matrix_y,  120,  200,    1,        3);
          
          out.matrix_x = 930; out.matrix_y = dll_1.matrix_y;
          out.dll_1_pan.parameter_config       (2,        0,      -1,    1,  out.Matrix_x,    out.Matrix_y,  120,  200,    1,       13);
          out.dll_1_Vol.parameter_config       (1,        0,     -60,   20,  out.Matrix_x,    out.Matrix_y + 80,  120,  200,    1,  12);
          out.dll_2_pan.parameter_config       (4,        0,      -1,    1,  out.Matrix_x+60,    out.Matrix_y,  120,  200,    1,       13);
          out.dll_2_Vol.parameter_config       (3,        0,     -60,   20,  out.Matrix_x+60,    out.Matrix_y + 80,  120,  200,    1,  12);
          out.dll_3_pan.parameter_config       (6,        0,      -1,    1,  out.Matrix_x+120,    out.Matrix_y,  120,  200,    1,       13);
          out.dll_3_Vol.parameter_config       (5,        0,     -60,   20,  out.Matrix_x+120,    out.Matrix_y + 80,  120,  200,    1,  12);
          out.dll_4_pan.parameter_config       (8,        0,      -1,    1,  out.Matrix_x+180,    out.Matrix_y,  120,  200,    1,       13);
          out.dll_4_Vol.parameter_config       (7,        0,     -60,   20,  out.Matrix_x+180,    out.Matrix_y + 80,  120,  200,    1,  12);
          out.dll_L_pan.parameter_config       (10,      -1,      -1,    1,  out.Matrix_x+240,    out.Matrix_y,  120,  200,    1,       7);
          out.dll_L_Vol.parameter_config       (9,        0,     -60,   20,  out.Matrix_x+240,    out.Matrix_y + 80,  120,  200,    1,  6);
          out.dll_R_pan.parameter_config       (12,       1,      -1,    1,  out.Matrix_x+300,    out.Matrix_y,  120,  200,    1,       7);
          out.dll_R_Vol.parameter_config       (11,       0,     -60,   20,  out.Matrix_x+300,    out.Matrix_y + 80,  120,  200,    1,  6);
          
          
          
          
           out_A1.dll_1.parameter_config      (133,       0,    -60,     20,  dll_1.Matrix_x + 260,    dll_1.Matrix_y,  120,  200,    1,        12);
           out_A2.dll_1.parameter_config      (134,     -60,    -60,     20,  dll_1.Matrix_x + 260,    dll_1.Matrix_y+80,  120,  200,    1,        12);
           out_A3.dll_1.parameter_config      (135,     -60,    -60,     20,  dll_1.Matrix_x + 260,    dll_1.Matrix_y+160,  120,  200,    1,        12);
           out_A4.dll_1.parameter_config      (136,     -60,    -60,     20,  dll_1.Matrix_x + 260,    dll_1.Matrix_y+240,  120,  200,    1,        12);
           out_A1.dll_2.parameter_config      (137,     -60,    -60,     20,  dll_1.Matrix_x + 320,    dll_1.Matrix_y,  120,  200,    1,        12);
           out_A2.dll_2.parameter_config      (138,       0,    -60,     20,  dll_1.Matrix_x + 320,    dll_1.Matrix_y+80,  120,  200,    1,        12);
           out_A3.dll_2.parameter_config      (139,     -60,    -60,     20,  dll_1.Matrix_x + 320,    dll_1.Matrix_y+160,  120,  200,    1,        12);
           out_A4.dll_2.parameter_config      (140,     -60,    -60,     20,  dll_1.Matrix_x + 320,    dll_1.Matrix_y+240,  120,  200,    1,        12);               
           out_A1.dll_3.parameter_config      (141,     -60,    -60,     20,  dll_1.Matrix_x + 380,    dll_1.Matrix_y,  120,  200,    1,        12);
           out_A2.dll_3.parameter_config      (142,     -60,    -60,     20,  dll_1.Matrix_x + 380,    dll_1.Matrix_y+80,  120,  200,    1,        12);
           out_A3.dll_3.parameter_config      (143,       0,    -60,     20,  dll_1.Matrix_x + 380,    dll_1.Matrix_y+160,  120,  200,    1,        12);
           out_A4.dll_3.parameter_config      (144,     -60,    -60,     20,  dll_1.Matrix_x + 380,    dll_1.Matrix_y+240,  120,  200,    1,        12);     
           out_A1.dll_4.parameter_config      (145,     -60,    -60,     20,  dll_1.Matrix_x + 440,    dll_1.Matrix_y,  120,  200,    1,        12);
           out_A2.dll_4.parameter_config      (146,     -60,    -60,     20,  dll_1.Matrix_x + 440,    dll_1.Matrix_y+80,  120,  200,    1,        12);
           out_A3.dll_4.parameter_config      (147,     -60,    -60,     20,  dll_1.Matrix_x + 440,    dll_1.Matrix_y+160,  120,  200,    1,        12);
           out_A4.dll_4.parameter_config      (148,       0,    -60,     20,  dll_1.Matrix_x + 440,    dll_1.Matrix_y+240,  120,  200,    1,        12);     
           out_A1.dll_L.parameter_config      (149,     -60,    -60,     20,  dll_1.Matrix_x + 520,    dll_1.Matrix_y,  120,  200,    1,        6);
           out_A2.dll_L.parameter_config      (150,     -60,    -60,     20,  dll_1.Matrix_x + 520,    dll_1.Matrix_y+80,  120,  200,    1,     6);
           out_A3.dll_L.parameter_config      (151,     -60,    -60,     20,  dll_1.Matrix_x + 520,    dll_1.Matrix_y+160,  120,  200,    1,    6);
           out_A4.dll_L.parameter_config      (152,     -60,    -60,     20,  dll_1.Matrix_x + 520,    dll_1.Matrix_y+240,  120,  200,    1,    6);    
           out_A1.dll_R.parameter_config      (153,     -60,    -60,     20,  dll_1.Matrix_x + 580,    dll_1.Matrix_y,  120,  200,    1,        6);
           out_A2.dll_R.parameter_config      (154,     -60,    -60,     20,  dll_1.Matrix_x + 580,    dll_1.Matrix_y+80,  120,  200,    1,     6);
           out_A3.dll_R.parameter_config      (155,     -60,    -60,     20,  dll_1.Matrix_x + 580,    dll_1.Matrix_y+160,  120,  200,    1,    6);
           out_A4.dll_R.parameter_config      (156,     -60,    -60,     20,  dll_1.Matrix_x + 580,    dll_1.Matrix_y+240,  120,  200,    1,    6);    

           b_matrix.button_config              (159, dll_4.knobs_x +765, dll_4.knobs_y - 8);
           b_in_x.button_config                (160, dll_4.knobs_x +765, dll_4.knobs_y - 8);
           b_in_a.button_config                (161, dll_4.knobs_x +765, dll_4.knobs_y - 8);
           b_clear_all.button_config           (158, dll_4.knobs_x +765, dll_4.knobs_y - 8);
           b_bypass.button_config              (157, 1310, 0);
           bpm_slider.parameter_config         (162,       0, 0,   500,  dll_1.knobs_x + 705,   dll_1.knobs_y-12,  120,  200,    1,       14);
           gfx_delay_scale.parameter_config    (165,       2, 0.1,   5,  dll_1.knobs_x + 705,   dll_1.knobs_y-12,  120,  200,    1,       14);
           gfx_delay_graph.button_config       (164, dll_1.knobs_x +765, dll_1.knobs_y - 8);
           gfx_delay_measure.button_config     (163, dll_1.knobs_x +765, dll_1.knobs_y - 8);
     
     /*
     dll_1.scope_buf = = dll_4.arraypos + gen_buf_size + 10;
     dll_2.scope_buf = = dll_1.scope_buf + 6010;
     dll_3.scope_buf = = dll_2.scope_buf + 6010;
     dll_4.scope_buf = = dll_3.scope_buf + 6010;
*/
     
     /*
     
     BYP 241 157
     CLEAR 242 158
     Mixer 243 159
     X 244 160
     A 245 161
     BPM 246 162
     Measure 247 163
     Graph 248 164
     Scale 249 165
     */
function dll_slider () (
this.on = slider(this.startslider+20);
this.delfbk = slider(this.startslider+1)/100; //feedback
this.drift = 1 / (slider(this.startslider+4)/1000);
this.mode = slider(this.startslider+5);
this.tube = floor(slider(this.startslider+10));
this.tube ? this.tube = (this.tube+6.24)*0.1186;
this.HP.buthp_set_freq(per_to_freq(slider(this.startslider+6),100));
this.LP.butlp_set_freq(per_to_freq(slider(this.startslider+7),100));
this.LS.eq_set_boost(slider(this.startslider+8));
this.HS.eq_set_boost(slider(this.startslider+9));
this.step = 1/2^slider(this.startslider+11);
this.normfreq = (slider(this.startslider+12)/srate);
this.feed_filter = slider(this.startslider+13);
this.feed_Shelv = slider(this.startslider+14);
this.feed_Drive = slider(this.startslider+15);
this.feed_Crush = slider(this.startslider+16);


!slider(this.startslider+17) && slider(this.startslider) != this.vslider0 ? (
  this.vslider0 = slider(this.startslider);
  this.deltime = slider(this.startslider) * srate/1000; //delay
  this.sync = 0;
  slider(this.startslider+17) = this.vslider17 = 0;
  this.mode ? (
  this.deltime.live = this.deltime;
  this.mode == 2 ? this.want_clear = 1 : this.fade_in = 0;
  );
);
(slider(this.startslider+17) != this.vslider17 && slider(this.startslider+17)) || (set_tempo_old != set_tempo && slider(this.startslider+17)) ? (
  this.sync = 1;
  this.vslider17 = slider(this.startslider+17);
  slider(this.startslider+17) <= 6 ? (
    this.sync = 1/(2^(slider(this.startslider+17)-1));
  ): slider(this.startslider+17) <= 13 ? (
    this.sync = (2/3)/(2^(slider(this.startslider+17)-7));
  ):(
    this.sync = 1.5/(2^(slider(this.startslider+17)-13));
  );
  this.deltime = ((this.sync*240)/set_tempo)*srate;
  slider(this.startslider) = this.vslider0 = 1000*this.deltime / (srate);
  this.mode ? (
    this.deltime.live = this.deltime;
    this.mode == 2 ? this.want_clear = 1 : this.fade_in = 0;
  );
); 

this.ITGSync_on = !slider(this.startslider+3);
this.ITGSync_on ? (
  slider(this.startslider+2) = slider(this.startslider);
  this.ITGtempsync = 0;
  slider(this.startslider+18) = this.vslider18 = 0;//-1;
  this.ITGtime = this.ITGtime.live = slider(this.startslider+2) * srate/1000; //delay
);

!slider(this.startslider+18) && slider(this.startslider+2) != this.vslider2 && !this.ITGSync_on ? (
  this.vslider2 = slider(this.startslider+2);
  this.ITGSync = this.ITGSync_on ? slider(this.startslider+2) = slider(this.startslider);
  this.ITGtime = this.ITGtime.live = slider(this.startslider+2) * srate/1000; //delay
  this.ITGtempsync = 0;
  slider(this.startslider+18) = this.vslider18 = 0;
);
(slider(this.startslider+18) != this.vslider18 && slider(this.startslider+18)) || (set_tempo_old != set_tempo && slider(this.startslider+18)) ? (
  this.ITGtempsync = 1;
  this.vslider18 = slider(this.startslider+18);
  slider(this.startslider+18) <= 6 ? (
    this.ITGtempsync = 1/(2^(slider(this.startslider+18)-1));
  ): slider(this.startslider+18) <= 13 ? (
    this.ITGtempsync = (2/3)/(2^(slider(this.startslider+18)-7));
  ):(
    this.ITGtempsync = 1.5/(2^(slider(this.startslider+18)-13));
  );
  this.ITGtime = ((this.ITGtempsync*240)/set_tempo)*srate;
  slider(this.startslider+2) = this.vslider2 = 1000*this.ITGtime / (srate);
    this.ITGtime = this.ITGtime.live = this.ITGtime;
); 

this.mode ? (
this.deltime.live = this.deltime;
//this.mode == 2 ? this.want_clear = 1;
);

this.mode_old != 2 && this.mode == 2 ? this.want_clear = 1;
//caller_count += 1;
slider(this.startslider+19) > -60 ? this.level =  db2ratio(slider(this.startslider+19)) : this.level = 0;

this.vslider0 = slider(this.startslider) = this.deltime *1000 / srate;
slider(this.startslider+2) = this.vslider2 = 1000*this.ITGtime / (srate);
);













function blocksync () (
  this.sync && !bpm_slider ? (
    slider(this.startslider+17) <= 5 ? (
    this.sync = 1/(2^(slider(this.startslider+17)-1));
    ): slider(this.startslider+17) <= 11 ? (
    this.sync = (2/3)/(2^(slider(this.startslider+17)-7));
    ):(
    this.sync = 1.5/(2^(slider(this.startslider+17)-13 ));
    );
    set_tempo = tempo;
  );
  this.sync ? (
    this.deltime = ((this.sync*240)/set_tempo)*srate;
    slider(this.startslider) = this.vslider0 = 1000*this.deltime / (srate);
                             this.ITGSync_on ? this.ITGSync = !slider(this.startslider+3) ? slider(this.startslider+2) = slider(this.startslider);
                             this.ITGSync_on ?  this.ITGtime = this.ITGtime.live = slider(this.startslider+2) * srate/1000; //delay
    this.mode ? (
    this.deltime.live = this.deltime;
    this.mode == 2 ? this.want_clear = 1;
  );
); 


this.ITGtempsync && !bpm_slider && !this.ITGSync_on ? (
  slider(this.startslider+18) <= 5 ? (
    this.ITGtempsync = 1/(2^slider((this.startslider+18)-1));
  ): slider(this.startslider+18) <= 11 ? (
    this.ITGtempsync = (2/3)/(2^(slider(this.startslider+18)-7));
  ):(
    this.ITGtempsync = 1.5/(2^(slider(this.startslider+18)-13));
  );
  set_tempo = tempo;
  );
  this.ITGtempsync ? (
  this.ITGtime = ((this.ITGtempsync*240)/set_tempo)*srate;
slider(this.startslider+2) = this.vslider2 = 1000*this.ITGtime / (srate);

);
);







function clear_filter() (
this.x1 = this.x2 = this.y1 = this.y2 = 0; tmp_ = 0;
);

function clear_all () (
this.init_delay_line();
this.want_clear = 0;
this.input = 0;
this.out = 0;
this.feed = 0;
this.out.otm1 = 0;
this.out.itm1 = 0;
this.LS.clear_filter();
this.HS.clear_filter();
this.LP.clear_filter();
this.HP.clear_filter();
);


function delayline () (


!this.mode ? (
(this.k<=0) ? ( //update delay length at slower rate (could be improved!)
this.deltime.tmp += 0.001 * (this.deltime -  this.deltime.live); //smoothed delay+lfo
this.deltime.step = (this.drift/srate) * (this.deltime  - this.deltime.live); //linear step
this.k = srate/this.drift;
);
this.k -= 1;
this.deltime.live += this.deltime.step; //lin interp between points
);

this.ITGpos[gen_buf_pos] = this.input;
this.ITGreadpos = gen_buf_pos - this.ITGtime.live; this.ITGreadpos < 0 ? this.ITGreadpos += 5*srate;
this.ITGout = this.ITGSync ? this.ITGpos[floor(this.readpos)] : this.ITGpos[floor(this.ITGreadpos)];

this.arraypos[gen_buf_pos] = max(-3,min(3, this.feed* this.delfbk));


this.readpos = gen_buf_pos - this.deltime.live; this.readpos < 0 ? this.readpos += 5*srate;
this.feed = this.out = this.arraypos[floor(this.readpos)] + this.ITGout;


this.fade_in < 1 ? this.fade_in += fade_in_coeff : this.fade_in = 1;
this.out *= this.fade_in;

slider(this.startslider+6) > 0 || slider(this.startslider+7) < 100 ? (
this.out= this.HP.buthp_do(this.out);
this.out = this.LP.butlp_do(this.out);
this.feed_filter ? this.feed = this.out;
);

slider(this.startslider+8) || slider(this.startslider+9) ? (
this.out = this.LS.eq_do(this.out);
this.out = this.HS.eq_do(this.out);
this.feed_shelv ? this.feed = this.out;
);


this.tube ? (
this.out = tanh(this.out);
this.out = (((exp(this.out*this.tube) - exp(this.out*this.tube * -1.2)) / (exp(this.out*this.tube) + exp(this.out*this.tube * -1.0))) / this.tube);
this.out = (((exp(this.out) - exp(this.out * -1.2)) / (exp(this.out) + exp(this.out * -1.0))));
this.feed_drive ? this.feed = this.out;
);


this.normfreq < 0.5 || this.step > 0.000016 ? (
this.phasorA = this.phasorA+this.normfreq;
(this.phasorA >= 1) ? (
this.phasorA = this.phasorA - 1;
this.lastA = this.step * floor(this.out/this.step + 0.5 );
);
this.out = fa = fa + ((this.lastA-this.out) + this.out - fa);
this.feed_crush ? this.feed = this.out;
);


this.want_clear ? (
this.init_delay_line();
this.want_clear = 0;
this.input = 0;
this.out = 0;
this.feed = 0;
this.out.otm1 = 0;
this.out.itml = 0;
this.LS.clear_filter();
this.HS.clear_filter();
this.LP.clear_filter();
this.HP.clear_filter();
);


this.out = max(-3,min(3, this.out*this.level));
//this.out *= this.level;

this.out.dcblocker();

this.feed_Meter(this.out*minus10); 
);




function dll_parameter_boundaries () (

      this.gfx_delfbk.Parameter_boundaries();
      this.gfx_drift.Parameter_boundaries();
      this.gfx_HPF.Parameter_boundaries();
      this.gfx_LPF.Parameter_boundaries();
      this.gfx_LS.Parameter_boundaries();
      this.gfx_HS.Parameter_boundaries();
      this.gfx_Drive.Parameter_boundaries();
      this.gfx_Bit.Parameter_boundaries();
      this.gfx_Freq.Parameter_boundaries();
      this.gfx_Level.Parameter_boundaries();
      this.gfx_del_time.Parameter_boundaries();
      this.gfx_ITG_time.Parameter_boundaries();
   
      this.self_feed.Parameter_boundaries();
      this.dll_x1_feed.Parameter_boundaries();
      this.dll_x2_feed.Parameter_boundaries();
      this.dll_x3_feed.Parameter_boundaries();
      this.dll_L_feed.Parameter_boundaries();
      this.dll_R_feed.Parameter_boundaries();
      this.dll_A1_feed.Parameter_boundaries();
      this.dll_A2_feed.Parameter_boundaries();
      this.dll_A3_feed.Parameter_boundaries();
      this.dll_A4_feed.Parameter_boundaries();
);
      
      
      

parameters_update_on = 0;              
function parameters_update () (
parameters_update_on = 1;

//attack.Parameter_boundaries();
//release.Parameter_boundaries();
//attacktime.Parameter_boundaries();
//gain.Parameter_boundaries();
group_parameters();


dll_1.dll_parameter_boundaries();
dll_2.dll_parameter_boundaries();
dll_3.dll_parameter_boundaries();
dll_4.dll_parameter_boundaries();
gfx_delay_scale.Parameter_boundaries();
//gfx_delay_graph.Parameter_boundaries();
out.dll_1_pan.Parameter_boundaries();
out.dll_2_pan.Parameter_boundaries();
out.dll_3_pan.Parameter_boundaries();
out.dll_4_pan.Parameter_boundaries();
out.dll_L_pan.Parameter_boundaries();
out.dll_R_pan.Parameter_boundaries();
out.dll_1_vol.Parameter_boundaries();
out.dll_2_vol.Parameter_boundaries();
out.dll_3_vol.Parameter_boundaries();
out.dll_4_vol.Parameter_boundaries();
out.dll_L_vol.Parameter_boundaries();
out.dll_R_vol.Parameter_boundaries();
out_A1.dll_1.Parameter_boundaries();
out_A1.dll_2.Parameter_boundaries();
out_A1.dll_3.Parameter_boundaries();
out_A1.dll_4.Parameter_boundaries();
out_A1.dll_L.Parameter_boundaries();
out_A1.dll_R.Parameter_boundaries();
out_A2.dll_1.Parameter_boundaries();
out_A2.dll_2.Parameter_boundaries();
out_A2.dll_3.Parameter_boundaries();
out_A2.dll_4.Parameter_boundaries();
out_A2.dll_L.Parameter_boundaries();
out_A2.dll_R.Parameter_boundaries();
out_A3.dll_1.Parameter_boundaries();
out_A3.dll_2.Parameter_boundaries();
out_A3.dll_3.Parameter_boundaries();
out_A3.dll_4.Parameter_boundaries();
out_A3.dll_L.Parameter_boundaries();
out_A3.dll_R.Parameter_boundaries();
out_A4.dll_1.Parameter_boundaries();
out_A4.dll_2.Parameter_boundaries();
out_A4.dll_3.Parameter_boundaries();
out_A4.dll_4.Parameter_boundaries();
out_A4.dll_L.Parameter_boundaries();
out_A4.dll_R.Parameter_boundaries();



bpm_slider = slider(bpm_slider.slider);
bpm_slider ? set_tempo = bpm_slider : set_tempo = tempo;
//set_tempo_old = set_tempo;


dll_1.dll_slider();
dll_2.dll_slider();
dll_3.dll_slider();
dll_4.dll_slider();

dll_1.dll_x1_feed.ratio = slider(dll_1.dll_x1_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_x1_feed.slider)) : 0;
dll_1.dll_x2_feed.ratio = slider(dll_1.dll_x2_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_x2_feed.slider)) : 0;
dll_1.dll_x3_feed.ratio = slider(dll_1.dll_x3_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_x3_feed.slider)) : 0;
dll_1.dll_L_feed.ratio =  slider(dll_1.dll_L_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_L_feed.slider)) : 0;
dll_1.dll_R_feed.ratio =  slider(dll_1.dll_R_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_R_feed.slider)) : 0;
dll_1.dll_A1_feed.ratio = slider(dll_1.dll_A1_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_A1_feed.slider)) : 0;
dll_1.dll_A2_feed.ratio = slider(dll_1.dll_A2_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_A2_feed.slider)) : 0;
dll_1.dll_A3_feed.ratio = slider(dll_1.dll_A3_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_A3_feed.slider)) : 0;
dll_1.dll_A4_feed.ratio = slider(dll_1.dll_A4_feed.slider) > -60 ? db2ratio(slider(dll_1.dll_A4_feed.slider)) : 0;

dll_2.dll_x1_feed.ratio = slider(dll_2.dll_x1_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_x1_feed.slider)) : 0;
dll_2.dll_x2_feed.ratio = slider(dll_2.dll_x2_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_x2_feed.slider)) : 0;
dll_2.dll_x3_feed.ratio = slider(dll_2.dll_x3_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_x3_feed.slider)) : 0;
dll_2.dll_L_feed.ratio =  slider(dll_2.dll_L_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_L_feed.slider)) : 0;
dll_2.dll_R_feed.ratio =  slider(dll_2.dll_R_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_R_feed.slider)) : 0;
dll_2.dll_A1_feed.ratio = slider(dll_2.dll_A1_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_A1_feed.slider)) : 0;
dll_2.dll_A2_feed.ratio = slider(dll_2.dll_A2_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_A2_feed.slider)) : 0;
dll_2.dll_A3_feed.ratio = slider(dll_2.dll_A3_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_A3_feed.slider)) : 0;
dll_2.dll_A4_feed.ratio = slider(dll_2.dll_A4_feed.slider) > -60 ? db2ratio(slider(dll_2.dll_A4_feed.slider)) : 0;

dll_3.dll_x1_feed.ratio = slider(dll_3.dll_x1_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_x1_feed.slider)) : 0;
dll_3.dll_x2_feed.ratio = slider(dll_3.dll_x2_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_x2_feed.slider)) : 0;
dll_3.dll_x3_feed.ratio = slider(dll_3.dll_x3_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_x3_feed.slider)) : 0;
dll_3.dll_L_feed.ratio =  slider(dll_3.dll_L_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_L_feed.slider)) : 0;
dll_3.dll_R_feed.ratio =  slider(dll_3.dll_R_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_R_feed.slider)) : 0;
dll_3.dll_A1_feed.ratio = slider(dll_3.dll_A1_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_A1_feed.slider)) : 0;
dll_3.dll_A2_feed.ratio = slider(dll_3.dll_A2_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_A2_feed.slider)) : 0;
dll_3.dll_A3_feed.ratio = slider(dll_3.dll_A3_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_A3_feed.slider)) : 0;
dll_3.dll_A4_feed.ratio = slider(dll_3.dll_A4_feed.slider) > -60 ? db2ratio(slider(dll_3.dll_A4_feed.slider)) : 0;

dll_4.dll_x1_feed.ratio = slider(dll_4.dll_x1_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_x1_feed.slider)) : 0;
dll_4.dll_x2_feed.ratio = slider(dll_4.dll_x2_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_x2_feed.slider)) : 0;
dll_4.dll_x3_feed.ratio = slider(dll_4.dll_x3_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_x3_feed.slider)) : 0;
dll_4.dll_L_feed.ratio =  slider(dll_4.dll_L_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_L_feed.slider)) : 0;
dll_4.dll_R_feed.ratio =  slider(dll_4.dll_R_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_R_feed.slider)) : 0;
dll_4.dll_A1_feed.ratio = slider(dll_4.dll_A1_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_A1_feed.slider)) : 0;
dll_4.dll_A2_feed.ratio = slider(dll_4.dll_A2_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_A2_feed.slider)) : 0;
dll_4.dll_A3_feed.ratio = slider(dll_4.dll_A3_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_A3_feed.slider)) : 0;
dll_4.dll_A4_feed.ratio = slider(dll_4.dll_A4_feed.slider) > -60 ? db2ratio(slider(dll_4.dll_A4_feed.slider)) : 0;


out.dll_1_vol.ratio_L = slider(out.dll_1_vol.slider) > -60 ? db2ratio(slider(out.dll_1_vol.slider)) * sqrt(1-(slider(out.dll_1_pan.slider)+1)/2) : 0;
out.dll_2_vol.ratio_L = slider(out.dll_2_vol.slider) > -60 ? db2ratio(slider(out.dll_2_vol.slider)) * sqrt(1-(slider(out.dll_2_pan.slider)+1)/2) : 0;
out.dll_3_vol.ratio_L = slider(out.dll_3_vol.slider) > -60 ? db2ratio(slider(out.dll_3_vol.slider)) * sqrt(1-(slider(out.dll_3_pan.slider)+1)/2) : 0;
out.dll_4_vol.ratio_L = slider(out.dll_4_vol.slider) > -60 ? db2ratio(slider(out.dll_4_vol.slider)) * sqrt(1-(slider(out.dll_4_pan.slider)+1)/2) : 0;
out.dll_L_vol.ratio_L = slider(out.dll_L_vol.slider) > -60 ? db2ratio(slider(out.dll_L_vol.slider)) * sqrt(1-(slider(out.dll_L_pan.slider)+1)/2) : 0;
out.dll_R_vol.ratio_L = slider(out.dll_R_vol.slider) > -60 ? db2ratio(slider(out.dll_R_vol.slider)) * sqrt(1-(slider(out.dll_R_pan.slider)+1)/2) : 0;

out.dll_1_vol.ratio_R = slider(out.dll_1_vol.slider) > -60 ? db2ratio(slider(out.dll_1_vol.slider)) * sqrt((slider(out.dll_1_pan.slider)+1)/2) : 0;
out.dll_2_vol.ratio_R = slider(out.dll_2_vol.slider) > -60 ? db2ratio(slider(out.dll_2_vol.slider)) * sqrt((slider(out.dll_2_pan.slider)+1)/2) : 0;
out.dll_3_vol.ratio_R = slider(out.dll_3_vol.slider) > -60 ? db2ratio(slider(out.dll_3_vol.slider)) * sqrt((slider(out.dll_3_pan.slider)+1)/2) : 0;
out.dll_4_vol.ratio_R = slider(out.dll_4_vol.slider) > -60 ? db2ratio(slider(out.dll_4_vol.slider)) * sqrt((slider(out.dll_4_pan.slider)+1)/2) : 0;
out.dll_L_vol.ratio_R = slider(out.dll_L_vol.slider) > -60 ? db2ratio(slider(out.dll_L_vol.slider)) * sqrt((slider(out.dll_L_pan.slider)+1)/2) : 0;
out.dll_R_vol.ratio_R = slider(out.dll_R_vol.slider) > -60 ? db2ratio(slider(out.dll_R_vol.slider)) * sqrt((slider(out.dll_R_pan.slider)+1)/2) : 0;


out_A1.dll_1.ratio = slider(out_A1.dll_1.slider) > -60 ? db2ratio(slider(out_A1.dll_1.slider)) : 0;
out_A1.dll_2.ratio = slider(out_A1.dll_2.slider) > -60 ? db2ratio(slider(out_A1.dll_2.slider)) : 0;
out_A1.dll_3.ratio = slider(out_A1.dll_3.slider) > -60 ? db2ratio(slider(out_A1.dll_3.slider)) : 0;
out_A1.dll_4.ratio = slider(out_A1.dll_4.slider) > -60 ? db2ratio(slider(out_A1.dll_4.slider)) : 0;
out_A1.dll_L.ratio = slider(out_A1.dll_L.slider) > -60 ? db2ratio(slider(out_A1.dll_L.slider)) : 0;
out_A1.dll_R.ratio = slider(out_A1.dll_R.slider) > -60 ? db2ratio(slider(out_A1.dll_R.slider)) : 0;

out_A2.dll_1.ratio = slider(out_A2.dll_1.slider) > -60 ? db2ratio(slider(out_A2.dll_1.slider)) : 0;
out_A2.dll_2.ratio = slider(out_A2.dll_2.slider) > -60 ? db2ratio(slider(out_A2.dll_2.slider)) : 0;
out_A2.dll_3.ratio = slider(out_A2.dll_3.slider) > -60 ? db2ratio(slider(out_A2.dll_3.slider)) : 0;
out_A2.dll_4.ratio = slider(out_A2.dll_4.slider) > -60 ? db2ratio(slider(out_A2.dll_4.slider)) : 0;
out_A2.dll_L.ratio = slider(out_A2.dll_L.slider) > -60 ? db2ratio(slider(out_A2.dll_L.slider)) : 0;
out_A2.dll_R.ratio = slider(out_A2.dll_R.slider) > -60 ? db2ratio(slider(out_A2.dll_R.slider)) : 0;

out_A3.dll_1.ratio = slider(out_A3.dll_1.slider) > -60 ? db2ratio(slider(out_A3.dll_1.slider)) : 0;
out_A3.dll_2.ratio = slider(out_A3.dll_2.slider) > -60 ? db2ratio(slider(out_A3.dll_2.slider)) : 0;
out_A3.dll_3.ratio = slider(out_A3.dll_3.slider) > -60 ? db2ratio(slider(out_A3.dll_3.slider)) : 0;
out_A3.dll_4.ratio = slider(out_A3.dll_4.slider) > -60 ? db2ratio(slider(out_A3.dll_4.slider)) : 0;
out_A3.dll_L.ratio = slider(out_A3.dll_L.slider) > -60 ? db2ratio(slider(out_A3.dll_L.slider)) : 0;
out_A3.dll_R.ratio = slider(out_A3.dll_R.slider) > -60 ? db2ratio(slider(out_A3.dll_R.slider)) : 0;

out_A4.dll_1.ratio = slider(out_A4.dll_1.slider) > -60 ? db2ratio(slider(out_A4.dll_1.slider)) : 0;
out_A4.dll_2.ratio = slider(out_A4.dll_2.slider) > -60 ? db2ratio(slider(out_A4.dll_2.slider)) : 0;
out_A4.dll_3.ratio = slider(out_A4.dll_3.slider) > -60 ? db2ratio(slider(out_A4.dll_3.slider)) : 0;
out_A4.dll_4.ratio = slider(out_A4.dll_4.slider) > -60 ? db2ratio(slider(out_A4.dll_4.slider)) : 0;
out_A4.dll_L.ratio = slider(out_A4.dll_L.slider) > -60 ? db2ratio(slider(out_A4.dll_L.slider)) : 0;
out_A4.dll_R.ratio = slider(out_A4.dll_R.slider) > -60 ? db2ratio(slider(out_A4.dll_R.slider)) : 0;

gfx_delay_scale = slider(gfx_delay_scale.slider);
gfx_delay_graph = slider(gfx_delay_graph.slider);
gfx_delay_graph_measure = slider(gfx_delay_measure.slider);

input_mixer_show = !slider(b_matrix.slider);
Aux_mixer_show = slider(b_matrix.slider);;
input_mixer_show_X = slider(b_in_x.slider);
input_mixer_show_A = slider(b_in_a.slider);

bypass = slider(b_bypass.slider);
caller = 0;
parameters_update_on = 0; 
);




@slider

  parameters_update_on == 0 ? (
    parameters_update();
  ):(
    caller = 1;
  );


@block


srate != srate_old ? (
    //MAX_FREQ = 44100 / 2.0;
    //MIN_FREQ = 10;
    //FREQ_LOG_MAX = log(MAX_FREQ / MIN_FREQ);
    srate_old = srate;
    aab = srate/(srate*1.00008);
    srate < 400000 ? aab = srate/(srate*1.0002);
    srate < 200000 ? aab = srate/(srate*1.0003);
    srate < 100000 ? aab = srate/(srate*1.0007);
    srate < 50000 ? aab = srate/(srate*1.001);
        fade_in_coeff = 1/(srate/250);
        minus10 = db2ratio(-10);
caller = 1);


play_state_old != play_state ? (
/*
play_state ? dll_1.want_clear = 1;
play_state ? dll_2.want_clear = 1;
play_state ? dll_3.want_clear = 1;
play_state ? dll_4.want_clear = 1;
*/
play_state ? (
dll_1.clear_all();
dll_2.clear_all();
dll_3.clear_all();
dll_4.clear_all();
);
play_state_old = play_state;
);



tempo != tempo_old ?(
dll_1.blocksync();
dll_2.blocksync();
dll_3.blocksync();
dll_4.blocksync();
!bpm_slider ? (set_tempo = tempo;);
tempo_old = tempo;
);



@serialize

file_var(0,dll_1.vslider0);
file_var(0,dll_1.vslider2);
file_var(0,dll_1.vslider17);
file_var(0,dll_1.vslider18);
file_var(0,dll_1.sync);
file_var(0,dll_1.ITGSync);
file_var(0,dll_1.ITGSync_on);
file_var(0,dll_1.ITGtempsync);

file_var(0,dll_2.vslider0);
file_var(0,dll_2.vslider2);
file_var(0,dll_2.vslider17);
file_var(0,dll_2.vslider18);
file_var(0,dll_2.sync);
file_var(0,dll_2.ITGSync);
file_var(0,dll_2.ITGSync_on);
file_var(0,dll_2.ITGtempsync);

file_var(0,dll_3.vslider0);
file_var(0,dll_3.vslider2);
file_var(0,dll_3.vslider17);
file_var(0,dll_3.vslider18);
file_var(0,dll_3.sync);
file_var(0,dll_3.ITGSync);
file_var(0,dll_3.ITGSync_on);
file_var(0,dll_3.ITGtempsync);

file_var(0,dll_1.vslider0);
file_var(0,dll_4.vslider2);
file_var(0,dll_4.vslider17);
file_var(0,dll_4.vslider18);
file_var(0,dll_4.sync);
file_var(0,dll_4.ITGSync);
file_var(0,dll_4.ITGSync_on);
file_var(0,dll_4.ITGtempsync);

file_var(0, while_playing);
file_var(0, while_recording);
file_var(0, while_stopped);
file_var(0, MATRIX_DELAY_VERSION);
file_var(0, link_group);

seriloop = 0;
loop(256*16 + 27 + 48, //while recording / Stop Bug removed 16 -> 48
file_var(0, gmem[seriloop]);
seriloop += 1;
);

seriloop = 0;
loop(200*16,
file_var(0, group_generics[seriloop]);
seriloop += 1;
);


@sample


gmem[16*256 + 10 + link_group] != 1 ? link_group = 0;
group_check_smpl();
caller == 1 ? (
  parameters_update_on == 0 ? (
    parameters_update();
  );
);


playstates();

process = 0;
while_playing ? is_playing ? process = 1;
while_recording ? is_recording ? process = 1;
while_stopped ? is_stopped ? process = 1;

bypass ? process = 0;


process == 1 ? (



slider(b_clear_all.slider) ? (
dll_1.clear_all();
dll_2.clear_all();
dll_3.clear_all();
dll_4.clear_all();
slider(b_clear_all.slider) = 0;
);

in_l = spl0;
in_r = spl1;



dll_1.on ? (
dll_1.input = 
dll_1.dll_x1_feed.ratio*dll_2.out + 
dll_1.dll_x2_feed.ratio*dll_3.out + 
dll_1.dll_x3_feed.ratio*dll_4.out +
dll_1.dll_L_feed.ratio*SPL0 + dll_1.dll_R_feed.ratio*SPL1 +
dll_1.dll_A1_feed.ratio*SPL2 + dll_1.dll_A2_feed.ratio*SPL3 + dll_1.dll_A3_feed.ratio*SPL4 + dll_1.dll_A4_feed.ratio*SPL5;
dll_1.delayline();
):(
dll_1.out = 0;
);

dll_2.on ? (
dll_2.input = 
dll_2.dll_x1_feed.ratio*dll_1.out + 
dll_2.dll_x2_feed.ratio*dll_3.out + 
dll_2.dll_x3_feed.ratio*dll_4.out +
dll_2.dll_L_feed.ratio*SPL0 + dll_2.dll_R_feed.ratio*SPL1 +
dll_2.dll_A1_feed.ratio*SPL2 + dll_2.dll_A2_feed.ratio*SPL3 + dll_2.dll_A3_feed.ratio*SPL4 + dll_2.dll_A4_feed.ratio*SPL5;
dll_2.delayline();
):(
dll_2.out = 0;
);

dll_3.on ? (
dll_3.input = 
dll_3.dll_x1_feed.ratio*dll_1.out + 
dll_3.dll_x2_feed.ratio*dll_2.out + 
dll_3.dll_x3_feed.ratio*dll_4.out +
dll_3.dll_L_feed.ratio*SPL0 + dll_3.dll_R_feed.ratio*SPL1 +
dll_3.dll_A1_feed.ratio*SPL2 + dll_3.dll_A2_feed.ratio*SPL3 + dll_3.dll_A3_feed.ratio*SPL4 + dll_3.dll_A4_feed.ratio*SPL5;
dll_3.delayline();
):(
dll_3.out = 0;
);

dll_4.on ? (
dll_4.input = 
dll_4.dll_x1_feed.ratio*dll_1.out + 
dll_4.dll_x2_feed.ratio*dll_2.out + 
dll_4.dll_x3_feed.ratio*dll_3.out +
dll_4.dll_L_feed.ratio*SPL0 + dll_4.dll_R_feed.ratio*SPL1 +
dll_4.dll_A1_feed.ratio*SPL2 + dll_4.dll_A2_feed.ratio*SPL3 + dll_4.dll_A3_feed.ratio*SPL4 + dll_4.dll_A4_feed.ratio*SPL5;
dll_4.delayline();
):(
dll_4.out = 0;
);

gen_buf_pos += 1;
gen_buf_pos > 5*srate ? gen_buf_pos = 0;

spl0 = dll_1.out*out.dll_1_vol.ratio_L + dll_2.out*out.dll_2_vol.ratio_L + dll_3.out*out.dll_3_vol.ratio_L + dll_4.out*out.dll_4_vol.ratio_L + in_L*out.dll_L_vol.ratio_L + in_r*out.dll_R_vol.ratio_L; 
spl1 = dll_1.out*out.dll_1_vol.ratio_R + dll_2.out*out.dll_2_vol.ratio_R + dll_3.out*out.dll_3_vol.ratio_R + dll_4.out*out.dll_4_vol.ratio_R + in_L*out.dll_L_vol.ratio_R + in_r*out.dll_R_vol.ratio_R; 


spl2 = 
dll_1.out*out_A1.dll_1.ratio + 
dll_2.out*out_A1.dll_2.ratio + 
dll_3.out*out_A1.dll_3.ratio + 
dll_4.out*out_A1.dll_4.ratio + 
in_L     *out_A1.dll_L.ratio + 
in_R     *out_A1.dll_R.ratio; 

spl3 = 
dll_1.out*out_A2.dll_1.ratio + 
dll_2.out*out_A2.dll_2.ratio + 
dll_3.out*out_A2.dll_3.ratio + 
dll_4.out*out_A2.dll_4.ratio + 
in_L     *out_A2.dll_L.ratio + 
in_R     *out_A2.dll_R.ratio; 

spl4 = 
dll_1.out*out_A3.dll_1.ratio + 
dll_2.out*out_A3.dll_2.ratio + 
dll_3.out*out_A3.dll_3.ratio + 
dll_4.out*out_A3.dll_4.ratio + 
in_L     *out_A3.dll_L.ratio + 
in_R     *out_A3.dll_R.ratio; 

spl5= 
dll_1.out*out_A4.dll_1.ratio + 
dll_2.out*out_A4.dll_2.ratio + 
dll_3.out*out_A4.dll_3.ratio + 
dll_4.out*out_A4.dll_4.ratio + 
in_L     *out_A4.dll_L.ratio + 
in_R     *out_A4.dll_R.ratio; 


meter_reset_cnt += 1;
meter_reset_cnt >= 1.5*srate ? (
dll_1.db_val_max = -200;
dll_2.db_val_max = -200;
dll_3.db_val_max = -200;
dll_4.db_val_max = -200;
meter_reset_cnt = 0;
);


):( // Process
dll_1.db_val = -200;
dll_2.db_val = -200;
dll_3.db_val = -200;
dll_4.db_val = -200;
dll_1.db_val_max = -200;
dll_2.db_val_max = -200;
dll_3.db_val_max = -200;
dll_4.db_val_max = -200;
);

//------------------------------------------------ TAP TAP TAP -------------------------------------------------------

g_collision(gfx_tap_x, gfx_tap_y, 140*zoom, 24*zoom) ? (
 mouse_cap != mouse_cap_old ? (
    mouse_cap == 1 ? realmouseclick = 1;
    mouse_cap_old = mouse_cap;
 ):(
    realmouseclick = 0;
 );

realmouseclick ? (
    capreset = 0;
    bpm_click = 1;
    bpm_clicks += 1;
); 
);

capreset > -1 ? (
    capreset += 1;
    capreset >= srate*1.5 ? (capreset = -1; bpm_clicks = 0; bpm_sample_count_total = 0; bpm_sample_count = 0; caller = 1);
);

capreset > -1 ? (
    bpm_click == 1 ? (
        bpm_clicks == 2 ? (
          slider(bpm_slider.slider) =  60*1/(bpm_sample_count / srate);
        );
          bpm_clicks > 2 ? (
            slider(bpm_slider.slider) =  60*1/((bpm_sample_count_total/(bpm_clicks-1)) / srate);
            bpm_sample_count = 0;
            bpm_click = 0;
            );
    );
    bpm_sample_count += 1;
    bpm_sample_count_total += 1;
);


//------------------------------------------------ TAP TAP TAP -------------------------------------------------------






@gfx 1382 775

s2_zoom_X = gfx_w / 1382;
s2_zoom_y = gfx_h / 775;
zoom = min(s2_zoom_x, s2_zoom_y);// * gfx_ext_retina;
zoom_off == 1 ? zoom = gfx_ext_retina;


 mouseHold = mouse_cap & 1;
 mouseHold_r = mouse_cap & 2;
 press_superkey = mouse_cap & 32;
 press_ctrl = mouse_cap & 4;
 press_shift = mouse_cap & 8;
 press_alt = mouse_cap & 16;
 superkey=ctrl=shift=alt=shift_alt=shift_ctrl=shift_superkey=ctrl_superkey = 0;
 press_superkey ? !press_ctrl ? !press_shift ? !press_alt ? superkey=press_superkey;
 !press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl=press_ctrl;
 !press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift=press_shift;
 !press_superkey ? !press_ctrl ? !press_shift ? press_alt ? alt=press_alt;
 !press_superkey ? !press_ctrl ? press_shift ? press_alt ? shift_alt=1;
 !press_superkey ? press_ctrl ? press_shift ? !press_alt ? shift_ctrl=1;
 press_superkey ? !press_ctrl ? press_shift ? !press_alt ? shift_superkey=1;
 press_superkey ? press_ctrl ? !press_shift ? !press_alt ? ctrl_superkey=1;
 
 mouseClick = mouseHold - lastCap;
 mouseClick_r = mouseHold_r - lastCap_r;
 lastCap = mouseHold;
 lastCap_r = mouseHold_r;
 

 
 set_tempo == 0 ? set_tempo = 100;


  function potWheel_integer()
        local         (val)
        instance      (valOld minVal maxVal step)
                      (
                       valOld=slider(this.slider);
                        mstep = (this.maxval - this.minval)/200;
                       mouse_wheel > 0 ? val = valOld + 1;//val = valOld + (mouse_wheel/36)*mstep;
                       mouse_wheel < 0 ? val = valOld - 1;//val = valOld + (mouse_wheel/36)*mstep;
                       val = min(max(val, minVal), maxVal);
                       abs(slider(slider) - val) >= 0.5 ? (val = floor(val+0.5); valid = 1):(valid=0);
                                         val = min(max(val, minVal), maxVal);
                                         valid != 0 ? slider(this.slider) = val;
                       mouse_wheel=0;
                        );
                        
                        
    function matrix_meter_overlay ()
    instance (xIn yIn width heihgt dB_range dB_Val dB_Val_Max)
    local(loop_step)
    (
     loop_step = 0;
     loop(this.width * zoom,
       gfx_a = 1 - loop_step*1/(this.width * zoom);
       db_clipped = min(0, this.dB_Val);
      //gfx_rect(this.xIn*zoom+ loop_step, this.yIn*zoom, 1, this.height*zoom);
       this.xIn*zoom+ loop_step <= ceil(this.xIn*zoom+this.width *zoom + db_clipped*(this.width*zoom/this.db_range)) ? (
          gfx_line(this.xIn*zoom+ loop_step, this.yIn*zoom,this.xIn*zoom+ loop_step, this.yIn*zoom+this.height*zoom);
       );
     loop_step +=1;
     );
    );                    
                        
                        
gfx_x = gfx_y = 0;
gfx_blit(21,zoom,0);
gfx_x = 0; gfx_y = 500*zoom;
gfx_blit(21,zoom,0);


gfx_x = 1295*zoom;
gfx_y = 650*zoom;
gfx_blit(18,zoom*0.7,0);


gfx_del_w = 300*zoom; gfx_del_h = 50*zoom;



function make_gfx_delay_line () (

gfx_setfont(1,"Arial",10*zoom,'b');

black();
gfx_rect(this.Knobs_x*zoom, this.knobs_y * zoom, gfx_del_w, gfx_del_h);

!gfx_delay_graph_measure ? (
tmploop = 0;
rgb(90,90,90);
loop(gfx_delay_scale*10,
gfx_rect(this.knobs_x*zoom + (tmploop*gfx_del_w) / (gfx_delay_scale*10), this.knobs_y*zoom + gfx_del_h/4, max(1,1*zoom), gfx_del_h/2);
tmploop +=1;
);

tmploop = 0;
rgb(150,150,150);
loop(floor(gfx_delay_scale+0.9),
gfx_rect(this.knobs_x*zoom + (tmploop*gfx_del_w) / (gfx_delay_scale), this.knobs_y*zoom, max(1,2*zoom), gfx_del_h);
gfx_x = this.knobs_x*zoom + (tmploop*gfx_del_w) / (gfx_delay_scale) + 3*zoom;
gfx_y = this.knobs_y*zoom + 3*zoom;
gfx_drawnumber(tmploop,0);
gfx_drawstr("s");
tmploop +=1;
);

):(

gfx_viertel = (15 / set_tempo); //sind jetzt sechzehntel ;)
tmploop = 0;
tmploop2 = 0;
tmploop3 = 1;
tmploop4 = 1;
gfx_x = this.knobs_x*zoom + 2*zoom; gfx_y = this.knobs_y*zoom+2*zoom;
rgb(230,230,230); gfx_drawnumber(tmploop4,0);
loop(gfx_delay_scale/gfx_viertel +1,
gfx_del_pos = tmploop;
tmploop2 >= 4 ? (
  tmploop2 = 0; rgb(150,150,150);
  gfx_x = this.knobs_x*zoom + gfx_del_pos + 2*zoom; gfx_y = this.knobs_y*zoom+2*zoom;
  tmploop3 += 1;
  tmploop3 < 5 ? (gfx_drawnumber(tmploop3,0)):(tmploop3 = 1; tmploop4 += 1; rgb(230,230,230); gfx_drawnumber(tmploop4,0));
):(
  rgb(90,90,90);
);
gfx_rect(this.knobs_x*zoom + gfx_del_pos, this.knobs_y*zoom+gfx_del_h/4, max(1,1*zoom), gfx_del_h /2);
tmploop += (gfx_viertel/gfx_delay_scale)*gfx_del_w;
tmploop2 += 1;
);

);



gfx_delay_graph == 0 ? (
tmp_a = 0;
tmploop = 0;
loop(40,
gfx_a = tmp_a/1.2;
rgb(100,255,100);
gfx_del_pos = tmploop*zoom-20*zoom+(0.001*slider(this.startslider)/gfx_delay_scale)*gfx_del_w;
gfx_del_pos < gfx_del_w ? gfx_rect(this.knobs_x*zoom + gfx_del_pos, this.knobs_y*zoom, 1*zoom, gfx_del_h /2);
rgb(10,205,200);
gfx_del_pos = tmploop*zoom-20*zoom+(0.001*slider(this.startslider+2)/gfx_delay_scale)*gfx_del_w;
gfx_del_pos < gfx_del_w ? gfx_rect(this.knobs_x*zoom + gfx_del_pos, this.knobs_y*zoom + gfx_del_h/2, 1*zoom, gfx_del_h /2);
tmploop <= 20 ? tmp_a += 0.02 : tmp_a -= 0.02;
tmploop += 1;
);
gfx_a = 1;

rgb(10,205,200);
gfx_del_pos = gfx_ITG_pos = (0.001*slider(this.startslider+2)/gfx_delay_scale)*gfx_del_w;
gfx_del_pos <= gfx_del_w-2 ? gfx_del_w2 = 3 : gfx_del_w2 = 1;
gfx_del_pos < gfx_del_w ? gfx_rect(this.knobs_x*zoom + gfx_del_pos, this.knobs_y*zoom + gfx_del_h/2, gfx_del_w2*zoom, gfx_del_h /2);

rgb(100,255,100);
gfx_del_pos = (0.001*slider(this.startslider)/gfx_delay_scale)*gfx_del_w;
gfx_del_pos <= gfx_del_w-2 ? gfx_del_w2 = 3 : gfx_del_w2 = 1;
gfx_del_pos < gfx_del_w ? gfx_rect(this.knobs_x*zoom + gfx_del_pos, this.knobs_y*zoom, gfx_del_w2*zoom, gfx_del_h /2);

):(
gfx_ITG_pos = (0.001*slider(this.startslider+2)/gfx_delay_scale)*gfx_del_w;
gfx_del_pos = (0.001*slider(this.startslider)/gfx_delay_scale)*gfx_del_w;
gfx_fbk = ratio2db(this.delfbk); this.delfbk == 1 ? gfx_fbk = -1000;
rgb(100,255,100);
gfx_h2 = gfx_del_h*0.8;
tmploop = 0;
while(
gfx_itg_pos+gfx_del_pos*tmploop <= gfx_del_w-2 ? gfx_del_w2 = 3 : gfx_del_w2 = 1;
this.knobs_x*zoom + gfx_itg_pos+gfx_del_pos*tmploop < this.knobs_x*zoom + gfx_del_w ? gfx_rect(this.knobs_x*zoom + gfx_itg_pos+gfx_del_pos*tmploop, this.knobs_y*zoom +gfx_del_h*0.4 + (gfx_del_h*0.1 - gfx_h2/2), gfx_del_w2*zoom, gfx_h2);
gfx_fbk != -1000 && gfx_fbk < 0 ? gfx_h2 += gfx_fbk*zoom/2;
gfx_fbk != -1000 ? gfx_a += gfx_fbk/40;
gfx_fbk > 0 ? (
gfx_r = min(1, gfx_r+gfx_fbk/15);
gfx_g = max(0, gfx_g-gfx_fbk/15);
);
gfx_a = min(gfx_a,1);
tmploop += 1;
tmploop * gfx_del_pos + gfx_itg_pos < gfx_del_w && gfx_fbk != 0
);

);
gfx_a = 1;
lightgrey(); gfx_setfont(1,"Arial",10*zoom,'b');
gfx_x = this.knobs_x*zoom; gfx_y = this.knobs_y * zoom;
sprintf(#readout, "%.0f", gfx_delay_scale*1000); #readout += "ms";
gfx_drawstr(#readout, 0x0A, gfx_x + gfx_del_w - 4*zoom, gfx_y + gfx_del_h);


rgb(10,205,200);
gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = gfx_x_old = this.Knobs_x*zoom + gfx_del_w+8*zoom;
gfx_y = this.knobs_y*zoom + 5*zoom;
gfx_drawstr("ITG", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);

slider(this.startslider+3) == 0 ? (
gfx_x = Mouse_ITG_time_x = gfx_x_old; gfx_y += 14*zoom; Mouse_ITG_time_y = gfx_y; gfx_a = 0.75;
gfx_drawstr("Delay", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
lightgrey(); gfx_x = this.Knobs_x*zoom + gfx_del_w+55*zoom; gfx_a = 1;
gfx_triangle(gfx_x, gfx_y + 5*zoom,      gfx_x + 6*zoom, gfx_y + 5*zoom,       gfx_x + 3*zoom, gfx_y + 10*zoom);
rgb(10,205,200);gfx_a = 0.75;
gfx_x = gfx_x_old; gfx_y += 14*zoom;
gfx_drawstr("Sync", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
gfx_a = 1;
):(

sprintf(#readout, "%.0f", slider(this.startslider+2)); #readout += "ms";
gfx_x = Mouse_ITG_time_x = gfx_x_old; gfx_y += 14*zoom;  Mouse_ITG_time_y = gfx_y; slider(this.startslider+18) == 0 ? gfx_a = 1 : gfx_a = 0.75;
gfx_drawstr(#readout, 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
lightgrey(); gfx_x = this.Knobs_x*zoom + gfx_del_w+55*zoom; gfx_a = 1;
gfx_triangle(gfx_x, gfx_y + 5*zoom,      gfx_x + 6*zoom, gfx_y + 5*zoom,       gfx_x + 3*zoom, gfx_y + 10*zoom);


rgb(10,205,200);
slider(this.startslider+18) == 0 ? #readout = "ABS":
slider(this.startslider+18) == 1 ? #readout = "1/1":
slider(this.startslider+18) == 2 ? #readout = "1/2":
slider(this.startslider+18) == 3 ? #readout = "1/4":
slider(this.startslider+18) == 4 ? #readout = "1/8":
slider(this.startslider+18) == 5 ? #readout = "1/16":
slider(this.startslider+18) == 6 ? #readout = "1/32":
slider(this.startslider+18) == 7 ? #readout = "1/1 T":
slider(this.startslider+18) == 8 ? #readout = "1/2 T":
slider(this.startslider+18) == 9 ? #readout = "1/4 T":
slider(this.startslider+18) == 10 ? #readout = "1/8 T":
slider(this.startslider+18) == 11 ? #readout = "1/16 T":
slider(this.startslider+18) == 12 ? #readout = "1/32 T":
slider(this.startslider+18) == 13 ? #readout = "1/1 D":
slider(this.startslider+18) == 14 ? #readout = "1/2 D":
slider(this.startslider+18) == 15 ? #readout = "1/4 D":
slider(this.startslider+18) == 16 ? #readout = "1/8 D":
slider(this.startslider+18) == 17 ? #readout = "1/16 D";
slider(this.startslider+18) == 18 ? #readout = "1/32 D";
gfx_x = gfx_x_old; gfx_y += 15*zoom; slider(this.startslider+18) > 0 ? gfx_a = 1 : gfx_a = 0.75;
gfx_drawstr(#readout, 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
lightgrey(); gfx_x = this.Knobs_x*zoom + gfx_del_w+55*zoom; gfx_a = 1;
gfx_triangle(gfx_x, gfx_y + 5*zoom,      gfx_x + 6*zoom, gfx_y + 5*zoom,       gfx_x + 3*zoom, gfx_y + 10*zoom);

);

rgb(100,255,100);
gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = gfx_x_old = this.Knobs_x*zoom + gfx_del_w+75*zoom;
gfx_y = this.knobs_y*zoom + 5*zoom;
gfx_drawstr("DELAY", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
sprintf(#readout, "%.0f", slider(this.startslider)); #readout += "ms";
gfx_x = gfx_x_old; gfx_y += 15*zoom; slider(this.startslider+17) == 0 ? gfx_a = 1 : gfx_a = 0.75;
gfx_drawstr(#readout, 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);

slider(this.startslider+17) == 0 ? #readout = "ABS":
slider(this.startslider+17) == 1 ? #readout = "1/1":
slider(this.startslider+17) == 2 ? #readout = "1/2":
slider(this.startslider+17) == 3 ? #readout = "1/4":
slider(this.startslider+17) == 4 ? #readout = "1/8":
slider(this.startslider+17) == 5 ? #readout = "1/16":
slider(this.startslider+17) == 6 ? #readout = "1/32":
slider(this.startslider+17) == 7 ? #readout = "1/1 T":
slider(this.startslider+17) == 8 ? #readout = "1/2 T":
slider(this.startslider+17) == 9 ? #readout = "1/4 T":
slider(this.startslider+17) == 10 ? #readout = "1/8 T":
slider(this.startslider+17) == 11 ? #readout = "1/16 T":
slider(this.startslider+17) == 12 ? #readout = "1/32 T":
slider(this.startslider+17) == 13 ? #readout = "1/1 D":
slider(this.startslider+17) == 14 ? #readout = "1/2 D":
slider(this.startslider+17) == 15 ? #readout = "1/4 D":
slider(this.startslider+17) == 16 ? #readout = "1/8 D":
slider(this.startslider+17) == 17 ? #readout = "1/16 D";
slider(this.startslider+17) == 18 ? #readout = "1/32 D";
gfx_x = gfx_x_old; gfx_y += 15*zoom; slider(this.startslider+17) > 0 ? gfx_a = 1 : gfx_a = 0.75;
gfx_drawstr(#readout, 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
lightgrey(); gfx_x = this.Knobs_x*zoom + gfx_del_w+122*zoom; gfx_a = 1;
gfx_triangle(gfx_x, gfx_y + 5*zoom,      gfx_x + 6*zoom, gfx_y + 5*zoom,       gfx_x + 3*zoom, gfx_y + 10*zoom);


lightgrey();
tmploop = 0;
loop(10,
gfx_roundrect(this.knobs_x*zoom-1*zoom - tmploop*zoom, this.knobs_y*zoom-tmploop*zoom, gfx_del_w+2*tmploop*zoom,gfx_del_h+2*tmploop*zoom,0);
gfx_roundrect(this.knobs_x*zoom-1*zoom - tmploop*zoom + gfx_del_w, this.knobs_y*zoom-tmploop*zoom, 138*zoom+2*tmploop*zoom,gfx_del_h+2*tmploop*zoom,0);
tmploop-=0.1;
);


gfx_setfont(1,"Arial",10*zoom,'b');

this.gfx_delfbk.knob();
gfx_x = this.gfx_delfbk.Xin * zoom; gfx_y = this.gfx_delfbk.yin * zoom + 64*zoom; 
gfx_drawstr("FEEDBACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , slider(this.startslider+1)); #tmp_label += " %";
gfx_x = this.gfx_delfbk.Xin * zoom; gfx_y = this.gfx_delfbk.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

lightgrey();
gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = gfx_x_old = this.Knobs_x*zoom + gfx_del_w+225*zoom;
gfx_y = this.knobs_y*zoom - 5*zoom;
gfx_drawstr("MODE", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
rgb(100,255,100);
gfx_x = gfx_x_old; gfx_y += 18*zoom; slider(this.startslider+5) == 0 ? gfx_a = 1 : gfx_a = 0.5;
gfx_drawstr("DRIFT", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 18*zoom; slider(this.startslider+5) == 1 ? gfx_a = 1 : gfx_a = 0.5;
gfx_drawstr("JUMP", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 18*zoom; slider(this.startslider+5) == 2 ? gfx_a = 1 : gfx_a = 0.5;
gfx_drawstr("CLEAR", 0x05, gfx_x + 47*zoom, gfx_y + 17*zoom);
gfx_a = 1;

gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
this.gfx_drift.knob();
gfx_x = gfx_x_old; gfx_y += 18*zoom; slider(this.startslider+5) == 0 ? gfx_a = 1 : gfx_a = 0.5;
gfx_x = this.gfx_drift.Xin * zoom; gfx_y = this.gfx_drift.yin * zoom + 64*zoom; 
gfx_drawstr("DRIFT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , slider(this.startslider+4)); #tmp_label += " ms";
gfx_x = this.gfx_drift.Xin * zoom; gfx_y = this.gfx_drift.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
gfx_a = 1;

this.gfx_HPF.knob();
gfx_x = this.gfx_HPF.Xin * zoom; gfx_y = this.gfx_HPF.yin * zoom + 64*zoom; 
gfx_drawstr("HPF", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , per_to_freq(slider(this.startslider+6),100)); #tmp_label += " Hz";
gfx_x = this.gfx_HPF.Xin * zoom; gfx_y = this.gfx_HPF.yin * zoom + 52*zoom; 
slider(this.startslider+6) == 0 ? #tmp_label = "OFF";
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

this.gfx_LPF.knob();
gfx_x = this.gfx_LPF.Xin * zoom; gfx_y = this.gfx_LPF.yin * zoom + 64*zoom; 
gfx_drawstr("LPF", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , per_to_freq(slider(this.startslider+7),100)/1000); #tmp_label += " kHz";
gfx_x = this.gfx_LPF.Xin * zoom; gfx_y = this.gfx_LPF.yin * zoom + 52*zoom; 
slider(this.startslider+7) == 100 ? #tmp_label = "OFF";
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

gfx_x = this.feed_filter.xIn * zoom; gfx_y = this.feed_filter.yIn*zoom;
slider(this.feed_filter.slider) == 0 ? gfx_a = 0.6 : gfx_a = 1; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); 
gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_x_old = this.feed_filter.xIn*zoom;
gfx_y = this.feed_filter.yIn*zoom + 23*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("B", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("K", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_a = 1;


gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
this.gfx_LS.knob();
gfx_x = this.gfx_LS.Xin * zoom; gfx_y = this.gfx_LS.yin * zoom + 64*zoom; 
gfx_drawstr("LOW", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , slider(this.startslider+8)); #tmp_label += " dB";
gfx_x = this.gfx_LS.Xin * zoom; gfx_y = this.gfx_LS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

this.gfx_HS.knob();
gfx_x = this.gfx_HS.Xin * zoom; gfx_y = this.gfx_HS.yin * zoom + 64*zoom; 
gfx_drawstr("HI", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(this.startslider+9)); #tmp_label += " dB";
gfx_x = this.gfx_HS.Xin * zoom; gfx_y = this.gfx_HS.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

gfx_x = this.feed_shelv.xIn * zoom; gfx_y = this.feed_shelv.yIn*zoom;
slider(this.feed_shelv.slider) == 0 ? gfx_a = 0.6 : gfx_a = 1; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); 
gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_x_old = this.feed_shelv.xIn*zoom;
gfx_y = this.feed_shelv.yIn*zoom + 23*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("B", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("K", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_a = 1;


gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
this.gfx_Drive.knob();
gfx_x = this.gfx_Drive.Xin * zoom; gfx_y = this.gfx_Drive.yin * zoom + 64*zoom; 
gfx_drawstr("DRIVE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" ,slider(this.startslider+10)); #tmp_label += " %";
gfx_x = this.gfx_Drive.Xin * zoom; gfx_y = this.gfx_Drive.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

gfx_x = this.feed_Drive.xIn * zoom; gfx_y = this.feed_Drive.yIn*zoom;
slider(this.feed_Drive.slider) == 0 ? gfx_a = 0.6 : gfx_a = 1; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); 
gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_x_old = this.feed_Drive.xIn*zoom;
gfx_y = this.feed_Drive.yIn*zoom + 23*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("B", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("K", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_a = 1;



gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
this.gfx_Bit.knob();
gfx_x = this.gfx_Bit.Xin * zoom; gfx_y = this.gfx_Bit.yin * zoom + 64*zoom; 
gfx_drawstr("BITS", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , slider(this.startslider+11)); #tmp_label += " BIT";
gfx_x = this.gfx_Bit.Xin * zoom; gfx_y = this.gfx_Bit.yin * zoom + 52*zoom;
slider(this.startslider+11) == 16 ? #tmp_label = "OFF";
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

this.gfx_Freq.knob();
gfx_x = this.gfx_Freq.Xin * zoom; gfx_y = this.gfx_Freq.yin * zoom + 64*zoom; 
gfx_drawstr("RATE", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(this.startslider+12)/1000); #tmp_label += " kHz";
gfx_x = this.gfx_Freq.Xin * zoom; gfx_y = this.gfx_Freq.yin * zoom + 52*zoom; 
slider(this.startslider+12) == 22050 ? #tmp_label = "OFF";
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

gfx_x = this.feed_Crush.xIn * zoom; gfx_y = this.feed_Crush.yIn*zoom;
slider(this.feed_Crush.slider) == 0 ? gfx_a = 0.6 : gfx_a = 1; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); 
gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_x_old = this.feed_Crush.xIn*zoom;
gfx_y = this.feed_Crush.yIn*zoom + 23*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("B", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("K", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_a = 1;

gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
this.gfx_Level.knob();
gfx_x = this.gfx_Level.Xin * zoom; gfx_y = this.gfx_Level.yin * zoom + 64*zoom; 
gfx_drawstr("LEVEL", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" , slider(this.startslider+19)); #tmp_label += " dB";
gfx_x = this.gfx_Level.Xin * zoom; gfx_y = this.gfx_Level.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

gfx_x = this.gfx_dll_on.xIn * zoom; gfx_y = this.gfx_dll_on.yIn*zoom;
slider(this.gfx_dll_on.slider) == 0 ? gfx_a = 0.6 : gfx_a = 1; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); 
gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_x_old = this.gfx_dll_on.xIn*zoom;
gfx_y = this.gfx_dll_on.yIn*zoom + 23*zoom;
slider(this.gfx_dll_on.slider) == 0 ? (
gfx_drawstr("O", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("F", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
black(); gfx_a = 0.7;
gfx_rect(this.Knobs_x*zoom - 5*zoom, this.knobs_y*zoom - 12*zoom, 1290*zoom, 80*zoom);
input_mixer_show ? (
gfx_rect(this.Matrix_x*zoom +250*zoom, this.Matrix_y*zoom - 3*zoom, 140*zoom, 80*zoom);
input_mixer_show_X ? (
gfx_rect(this.Matrix_x*zoom - 5*zoom, this.matrix_y*zoom - 3*zoom, 255*zoom, 80*zoom);
this.matrix_y == dll_1.matrix_y ? (
dll_2.on ? gfx_rect(this.Matrix_x*zoom +0*zoom, dll_2.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_3.on ? gfx_rect(this.Matrix_x*zoom +0*zoom, dll_3.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_4.on ? gfx_rect(this.Matrix_x*zoom +0*zoom, dll_4.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
);
this.matrix_y == dll_2.matrix_y ? (
dll_1.on ? gfx_rect(this.Matrix_x*zoom +60*zoom, dll_1.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_3.on ? gfx_rect(this.Matrix_x*zoom +60*zoom, dll_3.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_4.on ? gfx_rect(this.Matrix_x*zoom +60*zoom, dll_4.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
);
this.matrix_y == dll_3.matrix_y ? (
dll_1.on ? gfx_rect(this.Matrix_x*zoom +120*zoom, dll_1.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_2.on ? gfx_rect(this.Matrix_x*zoom +120*zoom, dll_2.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_4.on ? gfx_rect(this.Matrix_x*zoom +120*zoom, dll_4.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
);
this.matrix_y == dll_4.matrix_y ? (
dll_1.on ? gfx_rect(this.Matrix_x*zoom +180*zoom, dll_1.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_2.on ? gfx_rect(this.Matrix_x*zoom +180*zoom, dll_2.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
dll_3.on ? gfx_rect(this.Matrix_x*zoom +180*zoom, dll_3.matrix_y*zoom - 3*zoom, 60*zoom, 80*zoom);
);
);
input_mixer_show_A ? (
gfx_rect(this.matrix_x*zoom + 390*zoom, this.matrix_y*zoom - 3*zoom, 255*zoom, 80*zoom);
);
);
Aux_mixer_show ? (
black(); gfx_a = 0.7;
this.matrix_y == dll_1.matrix_y ? (
gfx_rect(out_A1.dll_1.Xin*zoom, out_A1.dll_1.yIn*zoom - 3*zoom, 60*zoom, 323*zoom);
);
this.matrix_y == dll_2.matrix_y ? (
gfx_rect(out_A1.dll_2.Xin*zoom, out_A1.dll_2.yIn*zoom - 3*zoom, 60*zoom, 323*zoom);
);
this.matrix_y == dll_3.matrix_y ? (
gfx_rect(out_A1.dll_3.Xin*zoom, out_A1.dll_3.yIn*zoom - 3*zoom, 60*zoom, 323*zoom);
);
this.matrix_y == dll_4.matrix_y ? (
gfx_rect(out_A1.dll_4.Xin*zoom, out_A1.dll_4.yIn*zoom - 3*zoom, 60*zoom, 323*zoom);
);
);
this.matrix_y == dll_1.matrix_y ? (
gfx_rect(out.dll_1_pan.Xin*zoom, out.dll_1_pan.yIn*zoom - 3*zoom, 60*zoom, 160*zoom);
);
this.matrix_y == dll_2.matrix_y ? (
gfx_rect(out.dll_2_pan.Xin*zoom, out.dll_2_pan.yIn*zoom - 3*zoom, 60*zoom, 160*zoom);
);
this.matrix_y == dll_3.matrix_y ? (
gfx_rect(out.dll_3_pan.Xin*zoom, out.dll_3_pan.yIn*zoom - 3*zoom, 60*zoom, 160*zoom);
);
this.matrix_y == dll_4.matrix_y ? (
gfx_rect(out.dll_4_pan.Xin*zoom, out.dll_4_pan.yIn*zoom - 3*zoom, 60*zoom, 160*zoom);
);
gfx_a = 1;
):(
gfx_drawstr("O", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 12*zoom;
gfx_drawstr("N", 0x05, gfx_x + 26*zoom, gfx_y + 17*zoom);
);

lightgrey();
gfx_x = this.gfx_hpf.xIn*zoom; gfx_y = this.knobs_y*zoom - 26*zoom;
gfx_drawstr("FILTER", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = this.gfx_LS.xIn*zoom; gfx_y = this.knobs_y*zoom - 26*zoom;
gfx_drawstr("EQ", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = this.gfx_Drive.xIn*zoom; gfx_y = this.knobs_y*zoom - 26*zoom;
gfx_drawstr("SAT", 0x05, gfx_x + 60*zoom, gfx_y + 17*zoom);
gfx_x = this.gfx_Bit.xIn*zoom; gfx_y = this.knobs_y*zoom - 26*zoom;
gfx_drawstr("CRUSH", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = this.gfx_Level.xIn*zoom; gfx_y = this.knobs_y*zoom - 26*zoom;
gfx_drawstr("OUT", 0x05, gfx_x + 60*zoom, gfx_y + 17*zoom);

gfx_rect(this.Knobs_x*zoom - 15*zoom, this.knobs_y*zoom - 20*zoom, 180*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 270*zoom, this.knobs_y*zoom - 20*zoom, 398*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 740*zoom, this.knobs_y*zoom - 20*zoom, 103*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 890*zoom, this.knobs_y*zoom - 20*zoom, 78*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 1023*zoom, this.knobs_y*zoom - 20*zoom, 65*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 1163*zoom, this.knobs_y*zoom - 20*zoom, 65*zoom, 2*zoom);
gfx_rect(this.Knobs_x*zoom + 1280*zoom, this.knobs_y*zoom - 20*zoom, 37*zoom, 2*zoom);

gfx_rect(this.Knobs_x*zoom - 15*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 639*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 797*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 957*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 1057*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 1217*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);
gfx_rect(this.Knobs_x*zoom + 1317*zoom, this.knobs_y*zoom - 20*zoom, 2*zoom, 20*zoom);

black();
gfx_rect(this.Knobs_x*zoom, this.knobs_y*zoom+gfx_del_h+2*zoom,gfx_del_w,5*zoom);
this.meter_config(this.Knobs_x, this.knobs_y+gfx_del_h/zoom+2,gfx_del_w/zoom,5,60, 20);
rgb(255,2000,0);
this.meter_show();
black();

//tmploop = 0;
//loop(this.db_range,
//gfx_rect(this.Knobs_x*zoom + tmploop * (this.width*zoom)/this.db_range, this.knobs_y*zoom+gfx_del_h+2*zoom, zoom, 5*zoom);
//tmploop += 1;
//);
rgb(100,255,100);
this.matrix_meter_overlay();
gfx_a = 1;
lightgrey();
/*
orange();

gfx_roundrect(this.gfx_dll_on.xIn*zoom+3*zoom, this.gfx_dll_on.yIn*zoom+2*zoom, 18*zoom, 20*zoom, 0);
gfx_roundrect(Mouse_ITG_time_x, Mouse_ITG_time_y, 40*zoom, 14*zoom, 0); // ITG ms
gfx_roundrect(Mouse_ITG_time_x+41*zoom, Mouse_ITG_time_y, 15*zoom, 14*zoom, 0); //ITG Delay Sync
gfx_roundrect(Mouse_ITG_time_x, Mouse_ITG_time_y+15*zoom, 55*zoom, 14*zoom, 0); // ITG Note Sync

gfx_roundrect(Mouse_ITG_time_x+70*zoom, Mouse_ITG_time_y, 40*zoom, 14*zoom, 0); // Delay ms
gfx_roundrect(Mouse_ITG_time_x+70*zoom, Mouse_ITG_time_y+15*zoom, 55*zoom, 14*zoom, 0); // Delay Note Sync

gfx_roundrect(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+25*zoom, 45*zoom, 14*zoom, 0); // Drift
gfx_roundrect(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+42*zoom, 45*zoom, 14*zoom, 0); // Jump
gfx_roundrect(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+60*zoom, 45*zoom, 14*zoom, 0); // Clear

gfx_roundrect(this.gfx_LPF.xIn*zoom+63*zoom, this.gfx_LPF.yIn*zoom+7*zoom, 18*zoom, 18*zoom, 0); // Feed Filter
gfx_roundrect(this.gfx_HS.xIn*zoom+63*zoom, this.gfx_HS.yIn*zoom+7*zoom, 18*zoom, 18*zoom, 0); // Feed Shelv
gfx_roundrect(this.gfx_Drive.xIn*zoom+63*zoom, this.gfx_Drive.yIn*zoom+7*zoom, 18*zoom, 18*zoom, 0); // Feed Drive
gfx_roundrect(this.gfx_Freq.xIn*zoom+63*zoom, this.gfx_Freq.yIn*zoom+7*zoom, 18*zoom, 18*zoom, 0); // Feed Crush

gfx_delay_graph == 1 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w ? gfx_roundrect(this.knobs_x*zoom + gfx_ITG_pos + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
gfx_delay_graph == 0 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w ? gfx_roundrect(this.knobs_x*zoom + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
this.knobs_x*zoom + gfx_ITG_pos < this.knobs_x*zoom + gfx_del_w ? gfx_roundrect(this.knobs_x*zoom + gfx_ITG_pos-6*zoom, this.knobs_y*zoom+gfx_del_h/2, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
*/

////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG

      !Number_input ? (
      
      g_collision(this.Knobs_x*zoom, this.knobs_y*zoom, gfx_del_w, gfx_del_h) ? (
      orange();
      rgb(100,255,100);
      gfx_ITG_pos + gfx_del_pos-6*zoom < 19*gfx_del_w/20 ? gfx_delay_graph == 1 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on ? gfx_roundrect(this.knobs_x*zoom + gfx_ITG_pos + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
      gfx_delay_graph == 1 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && this.ITGSync_on ? gfx_roundrect(this.knobs_x*zoom + gfx_ITG_pos -6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h, 0); //ITG Delay Sync
      gfx_delay_graph == 0 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on ? gfx_roundrect(this.knobs_x*zoom + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
      gfx_delay_graph == 0 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && this.ITGSync_on ? gfx_roundrect(this.knobs_x*zoom + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h, 0); //ITG Delay Sync
      rgb(10,205,200);
      this.knobs_x*zoom + gfx_ITG_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on ? gfx_roundrect(this.knobs_x*zoom + gfx_ITG_pos-6*zoom, this.knobs_y*zoom+gfx_del_h/2, gfx_del_w/20, gfx_del_h/2, 0); //ITG Delay Sync
      );
 
      mouseClick_r == 2 ? (
          g_collision(this.Knobs_x*zoom, this.knobs_y*zoom, gfx_del_w, gfx_del_h) ? (
              #allitems = ">Measure|";
              gfx_delay_graph_measure == 0 ? #allitems += "!Seconds|<Bars|>Type|" : #allitems += "Seconds|<!Bars|>Type|";
              gfx_delay_graph == 0 ? #allitems += "!ITG+Delay|<Result|" : #allitems += "ITG+Delay|<!Result|";
              gfx_x = mouse_x; gfx_y = Mouse_y;
              last_clicked_item = gfx_showmenu(#allitems);
              last_clicked_item ? (
                  last_clicked_item == 3 ? slider(gfx_delay_graph.slider) = 0;
                  last_clicked_item == 4 ? slider(gfx_delay_graph.slider) = 1;
                  last_clicked_item == 1 ? slider(gfx_delay_measure.slider) = 0;
                  last_clicked_item == 2 ? slider(gfx_delay_measure.slider) = 1;
                  caller = 1;
              );
          );
      );
      
      mouseClick == 1 ? (
      this.gfx_delfbk.k_collision() ? this.gfx_delfbk.dragstart();
      this.gfx_drift.k_collision() ? this.gfx_drift.dragstart();
      this.gfx_HPF.k_collision() ? this.gfx_HPF.dragstart();
      this.gfx_LPF.k_collision() ? this.gfx_LPF.dragstart();
      this.gfx_LS.k_collision() ? this.gfx_LS.dragstart();
      this.gfx_HS.k_collision() ? this.gfx_HS.dragstart();
      this.gfx_Drive.k_collision() ? this.gfx_Drive.dragstart();
      this.gfx_Bit.k_collision() ? this.gfx_Bit.dragstart();
      this.gfx_Freq.k_collision() ? this.gfx_Freq.dragstart();
      this.gfx_Level.k_collision() ? this.gfx_Level.dragstart();
      
      input_mixer_show ? (
      input_mixer_show_X ? (
      this.self_feed.k_collision() ? this.self_feed.dragstart();
      this.dll_x1_feed.k_collision() ? this.dll_x1_feed.dragstart();
      this.dll_x2_feed.k_collision() ? this.dll_x2_feed.dragstart();
      this.dll_x3_feed.k_collision() ? this.dll_x3_feed.dragstart();
      );
      this.dll_L_feed.k_collision() ? this.dll_L_feed.dragstart();
      this.dll_R_feed.k_collision() ? this.dll_R_feed.dragstart();
      input_mixer_show_A ? (
      this.dll_A1_feed.k_collision() ? this.dll_A1_feed.dragstart();
      this.dll_A2_feed.k_collision() ? this.dll_A2_feed.dragstart();
      this.dll_A3_feed.k_collision() ? this.dll_A3_feed.dragstart();
      this.dll_A4_feed.k_collision() ? this.dll_A4_feed.dragstart();
      );
      );
      
      mouse_x < this.knobs_x + gfx_del_w ? (
      gfx_delay_graph == 0 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on ? (
        g_collision(this.knobs_x*zoom + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2) ? (
          !slider(this.startslider+17) ? (
            this.gfx_del_time.h_dragstart();
          ) : (
            message_gfx_x = this.knobs_x*zoom + gfx_del_pos-6*zoom; message_gfx_y = this.knobs_y*zoom;
            message_gfx = 1;
          );
        );
      );
      gfx_delay_graph == 0 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && this.ITGSync_on ? ( // ITG = deltime
        g_collision(this.knobs_x*zoom + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h) ? (
          !slider(this.startslider+17) ? (
            this.gfx_del_time.h_dragstart();
          ) : (
            message_gfx_x = this.knobs_x*zoom + gfx_del_pos-6*zoom; message_gfx_y = this.knobs_y*zoom;
            message_gfx = 1;
          );
        );
      );
      gfx_delay_graph == 1 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on ? (
        g_collision(this.knobs_x*zoom + gfx_ITG_pos + gfx_del_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h/2) ? (
          !slider(this.startslider+17) ? (
            this.gfx_del_time.h_dragstart();
          ) : (
            message_gfx_x = this.knobs_x*zoom + gfx_del_pos-6*zoom; message_gfx_y = this.knobs_y*zoom;
            message_gfx = 1;
          );
        );
      );
      gfx_delay_graph == 1 && this.knobs_x*zoom + gfx_del_pos < this.knobs_x*zoom + gfx_del_w && this.ITGSync_on ? (
        g_collision(this.knobs_x*zoom + gfx_ITG_pos-6*zoom, this.knobs_y*zoom, gfx_del_w/20, gfx_del_h) ? (
          !slider(this.startslider+17) ? (
            this.gfx_del_time.h_dragstart();
          ) : (
            message_gfx_x = this.knobs_x*zoom + gfx_del_pos-6*zoom; message_gfx_y = this.knobs_y*zoom;
            message_gfx = 1;
          );
        );
      );
      knobs_x*zoom + gfx_ITG_pos < this.knobs_x*zoom + gfx_del_w && !this.ITGSync_on? (
        g_collision(this.knobs_x*zoom + gfx_ITG_pos-6*zoom, this.knobs_y*zoom+gfx_del_h/2, gfx_del_w/20, gfx_del_h/2) ? (
        !slider(this.startslider+18) ? (
          this.gfx_ITG_time.h_dragstart();
        ) : (
          message_gfx_x = this.knobs_x*zoom + gfx_del_pos-6*zoom; message_gfx_y = this.knobs_y*zoom;
          message_gfx = 1;
        );
        );
      );
      );
      
      g_collision(Mouse_ITG_time_x+41*zoom, Mouse_ITG_time_y, 15*zoom, 14*zoom) ? (
      this.ITGSync_on ? #allitems = "FREE|!Synced" : #allitems = "!FREE|Synced";
      gfx_x = Mouse_ITG_time_x+41*zoom; gfx_y = Mouse_ITG_time_y;
      last_clicked_item = gfx_showmenu(#allitems);
      last_clicked_item ? slider(this.startslider+3) = !(last_clicked_item -1); caller = 1;
      this.gfx_ITG_mode.quicklink_button();
      );
      
      g_collision(Mouse_ITG_time_x, Mouse_ITG_time_y, 40*zoom, 14*zoom) && !this.ITGSync_on ? (
        this.gfx_ITG_time.dragstart();
      );
      
      g_collision(Mouse_ITG_time_x, Mouse_ITG_time_y+15*zoom, 55*zoom, 14*zoom) && !this.ITGSync_on ? (
      #readout = "";
      slider(this.startslider+18) == 0 ? #readout += "!"; #readout += "ABS|";
      slider(this.startslider+18) == 1 ? #readout += "!"; #readout += "1/1|";
      slider(this.startslider+18) == 2 ? #readout += "!"; #readout += "1/2|";
      slider(this.startslider+18) == 3 ? #readout += "!"; #readout += "1/4|";
      slider(this.startslider+18) == 4 ? #readout += "!"; #readout += "1/8|";
      slider(this.startslider+18) == 5 ? #readout += "!"; #readout += "1/16|";
      slider(this.startslider+18) == 6 ? #readout += "!"; #readout += "1/32|";
      slider(this.startslider+18) == 7 ? #readout += "!"; #readout += "1/1 T|";
      slider(this.startslider+18) == 8 ? #readout += "!"; #readout += "1/2 T|";
      slider(this.startslider+18) == 9 ? #readout += "!"; #readout += "1/4 T|";
      slider(this.startslider+18) == 10 ? #readout += "!"; #readout += "1/8 T|";
      slider(this.startslider+18) == 11 ? #readout += "!"; #readout += "1/16 T|";
      slider(this.startslider+18) == 12 ? #readout += "!"; #readout += "1/32 T|";
      slider(this.startslider+18) == 13 ? #readout += "!"; #readout += "1/1 D|";
      slider(this.startslider+18) == 14 ? #readout += "!"; #readout += "1/2 D|";
      slider(this.startslider+18) == 15 ? #readout += "!"; #readout += "1/4 D|";
      slider(this.startslider+18) == 16 ? #readout += "!"; #readout += "1/8 D|";
      slider(this.startslider+18) == 17 ? #readout += "!"; #readout += "1/16 D|";
      slider(this.startslider+18) == 18 ? #readout += "!"; #readout += "1/32 D|";
      gfx_x = Mouse_ITG_time_x; gfx_y = Mouse_ITG_time_y+15*zoom;
      last_clicked_item = gfx_showmenu(#readout);
      last_clicked_item ? slider(this.startslider+18) = last_clicked_item -1; caller = 1;
      this.gfx_ITG_bar.quicklink_button();
      );
      
      g_collision(Mouse_ITG_time_x+70*zoom, Mouse_ITG_time_y, 40*zoom, 14*zoom) ? (
      this.gfx_del_time.dragstart();
      );
      
      g_collision(Mouse_ITG_time_x+70*zoom, Mouse_ITG_time_y+15*zoom, 55*zoom, 14*zoom) ? (
      #readout = "";
      slider(this.startslider+17) == 0 ? #readout += "!"; #readout += "ABS|";
      slider(this.startslider+17) == 1 ? #readout += "!"; #readout += "1/1|";
      slider(this.startslider+17) == 2 ? #readout += "!"; #readout += "1/2|";
      slider(this.startslider+17) == 3 ? #readout += "!"; #readout += "1/4|";
      slider(this.startslider+17) == 4 ? #readout += "!"; #readout += "1/8|";
      slider(this.startslider+17) == 5 ? #readout += "!"; #readout += "1/16|";
      slider(this.startslider+17) == 6 ? #readout += "!"; #readout += "1/32|";
      slider(this.startslider+17) == 7 ? #readout += "!"; #readout += "1/1 T|";
      slider(this.startslider+17) == 8 ? #readout += "!"; #readout += "1/2 T|";
      slider(this.startslider+17) == 9 ? #readout += "!"; #readout += "1/4 T|";
      slider(this.startslider+17) == 10 ? #readout += "!"; #readout += "1/8 T|";
      slider(this.startslider+17) == 11 ? #readout += "!"; #readout += "1/16 T|";
      slider(this.startslider+17) == 12 ? #readout += "!"; #readout += "1/32 T|";
      slider(this.startslider+17) == 13 ? #readout += "!"; #readout += "1/1 D|";
      slider(this.startslider+17) == 14 ? #readout += "!"; #readout += "1/2 D|";
      slider(this.startslider+17) == 15 ? #readout += "!"; #readout += "1/4 D|";
      slider(this.startslider+17) == 16 ? #readout += "!"; #readout += "1/8 D|";
      slider(this.startslider+17) == 17 ? #readout += "!"; #readout += "1/16 D|";
      slider(this.startslider+17) == 18 ? #readout += "!"; #readout += "1/32 D|";
      gfx_x = Mouse_ITG_time_x + 70*zoom; gfx_y = Mouse_ITG_time_y+15*zoom;
      last_clicked_item = gfx_showmenu(#readout);
      last_clicked_item ? slider(this.startslider+17) = last_clicked_item -1; caller = 1;
      this.gfx_del_bar.quicklink_button();
      );
      
      
      g_collision(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+25*zoom, 45*zoom, 14*zoom) ? (slider(this.mode.slider) = 0; slider_automate(slider(this.mode.slider)); caller = 1; this.mode.quicklink_button()); // Drift
      g_collision(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+42*zoom, 45*zoom, 14*zoom) ? (slider(this.mode.slider) = 1; slider_automate(slider(this.mode.slider)); caller = 1; this.mode.quicklink_button()); // Jump
      g_collision(this.gfx_Drift.xIn*zoom-50*zoom, this.gfx_Drift.yIn*zoom+60*zoom, 45*zoom, 14*zoom) ? (slider(this.mode.slider) = 2; slider_automate(slider(this.mode.slider)); caller = 1; this.mode.quicklink_button()); // Clear
      
      
      g_collision(this.gfx_LPF.xIn*zoom+63*zoom, this.gfx_LPF.yIn*zoom+7*zoom, 18*zoom, 18*zoom) ? (slider(this.feed_filter.slider) == 0 ? slider(this.feed_filter.slider) = 1 : slider(this.feed_filter.slider) = 0; caller = 1; this.feed_filter.quicklink_button()); // Feed Filter
      g_collision(this.gfx_HS.xIn*zoom+63*zoom, this.gfx_HS.yIn*zoom+7*zoom, 18*zoom, 18*zoom) ? (slider(this.feed_shelv.slider) == 0 ? slider(this.feed_shelv.slider) = 1 : slider(this.feed_shelv.slider) = 0; caller = 1; this.feed_shelv.quicklink_button()); // Feed Shelv
      g_collision(this.gfx_Drive.xIn*zoom+63*zoom, this.gfx_Drive.yIn*zoom+7*zoom, 18*zoom, 18*zoom) ? (slider(this.feed_Drive.slider) == 0 ? slider(this.feed_Drive.slider) = 1 : slider(this.feed_Drive.slider) = 0; caller = 1; this.feed_Drive.quicklink_button()); // Feed Drive
      g_collision(this.gfx_Freq.xIn*zoom+63*zoom, this.gfx_Freq.yIn*zoom+7*zoom, 18*zoom, 18*zoom) ? (slider(this.feed_Crush.slider) == 0 ? slider(this.feed_Crush.slider) = 1 : slider(this.feed_Crush.slider) = 0; caller = 1; this.feed_Crush.quicklink_button()); // Feed Crush
      
      g_collision(this.gfx_dll_on.xIn*zoom+3*zoom, this.gfx_dll_on.yIn*zoom+2*zoom, 18*zoom, 20*zoom) ? (slider(this.gfx_dll_on.slider) == 0 ? slider(this.gfx_dll_on.slider) = 1 : slider(this.gfx_dll_on.slider) = 0; caller = 1; this.gfx_dll_on.quicklink_button());

      );
      
      mouseclick == -1 ? (
      this.gfx_delfbk.dragstop();
      this.gfx_drift.dragstop();
      this.gfx_HPF.dragstop();
      this.gfx_LPF.dragstop();
      this.gfx_LS.dragstop();
      this.gfx_HS.dragstop();
      this.gfx_Drive.dragstop();
      this.gfx_Bit.dragstop();
      this.gfx_Freq.dragstop();
      this.gfx_Level.dragstop();
      this.gfx_del_time.dragstop();
      this.gfx_ITG_time.dragstop();
      this.gfx_ITG_time.dragstop();

      this.self_feed.dragstop();
      this.dll_x1_feed.dragstop();
      this.dll_x2_feed.dragstop();
      this.dll_x3_feed.dragstop();
      this.dll_L_feed.dragstop();
      this.dll_R_feed.dragstop();
      this.dll_A1_feed.dragstop();
      this.dll_A2_feed.dragstop();
      this.dll_A3_feed.dragstop();
      this.dll_A4_feed.dragstop();
      
      message_gfx = 0;
      );
      
      mouse_wheel ? 
          (
            this.gfx_delfbk.k_collision()   ? this.gfx_delfbk.potWheel():
            this.gfx_drift.k_collision()   ? this.gfx_drift.potWheel():
            this.gfx_HPF.k_collision()   ? this.gfx_HPF.potWheel():
            this.gfx_LPF.k_collision()   ? this.gfx_LPF.potWheel():
            this.gfx_LS.k_collision()   ? this.gfx_LS.potWheel():
            this.gfx_HS.k_collision()   ? this.gfx_HS.potWheel():
            this.gfx_Drive.k_collision()   ? this.gfx_Drive.potWheel():
            this.gfx_Bit.k_collision()   ? this.gfx_Bit.potWheel():
            this.gfx_Freq.k_collision()   ? this.gfx_Freq.potWheel():
            this.gfx_Level.k_collision()   ? this.gfx_Level.potWheel():
            
            input_mixer_show ? (
            input_mixer_show_X ? (
            this.self_feed.k_collision() ? this.self_feed.potwheel();
            this.dll_x1_feed.k_collision() ? this.dll_x1_feed.potwheel();
            this.dll_x2_feed.k_collision() ? this.dll_x2_feed.potwheel();
            this.dll_x3_feed.k_collision() ? this.dll_x3_feed.potwheel();
            );
            this.dll_L_feed.k_collision() ? this.dll_L_feed.potwheel();
            this.dll_R_feed.k_collision() ? this.dll_R_feed.potwheel();
            input_mixer_show_A ? (
            this.dll_A1_feed.k_collision() ? this.dll_A1_feed.potwheel();
            this.dll_A2_feed.k_collision() ? this.dll_A2_feed.potwheel();
            this.dll_A3_feed.k_collision() ? this.dll_A3_feed.potwheel();
            this.dll_A4_feed.k_collision() ? this.dll_A4_feed.potwheel();
            );
            );
            
            g_collision(Mouse_ITG_time_x, Mouse_ITG_time_y, 40*zoom, 14*zoom) && !this.ITGSync_on   ? this.gfx_ITG_time.potWheel():
            g_collision(Mouse_ITG_time_x+70*zoom, Mouse_ITG_time_y, 40*zoom, 14*zoom)  ? this.gfx_del_time.potWheel():


            g_collision(this.Knobs_x*zoom, this.knobs_y*zoom, gfx_del_w, gfx_del_h) ? gfx_delay_scale.potwheel();
           
           caller = 1;
          );
          
          
      this.gfx_delfbk.dragging ? (this.gfx_delfbk.potdrag(); caller = 1;);
      this.gfx_drift.dragging ? (this.gfx_drift.potdrag(); caller = 1;);
      this.gfx_HPF.dragging ? (this.gfx_HPF.potdrag(); caller = 1;);
      this.gfx_LPF.dragging ? (this.gfx_LPF.potdrag(); caller = 1;);
      this.gfx_LS.dragging ? (this.gfx_LS.potdrag(); caller = 1;);
      this.gfx_HS.dragging ? (this.gfx_HS.potdrag(); caller = 1;);
      this.gfx_Drive.dragging ? (this.gfx_Drive.potdrag(); caller = 1;);
      this.gfx_Bit.dragging ? (this.gfx_Bit.potdrag_integer(); caller = 1;);
      this.gfx_Freq.dragging ? (this.gfx_Freq.potdrag(); caller = 1;);
      this.gfx_Level.dragging ? (this.gfx_Level.potdrag(); caller = 1;);
      this.gfx_ITG_time.dragging ? (this.gfx_ITG_time.potdrag(); caller = 1;);

      input_mixer_show ? (
      input_mixer_show_X ? (
      this.self_feed.dragging ? (this.self_feed.potdrag(); caller = 1);
      this.dll_x1_feed.dragging ? (this.dll_x1_feed.potdrag(); caller = 1);
      this.dll_x2_feed.dragging ? (this.dll_x2_feed.potdrag(); caller = 1);
      this.dll_x3_feed.dragging ? (this.dll_x3_feed.potdrag(); caller = 1);
      );
      this.dll_L_feed.dragging ? (this.dll_L_feed.potdrag(); caller = 1);
      this.dll_R_feed.dragging ? (this.dll_R_feed.potdrag(); caller = 1);
      input_mixer_show_A ? (
      this.dll_A1_feed.dragging ? (this.dll_A1_feed.potdrag(); caller = 1);
      this.dll_A2_feed.dragging ? (this.dll_A2_feed.potdrag(); caller = 1);
      this.dll_A3_feed.dragging ? (this.dll_A3_feed.potdrag(); caller = 1);
      this.dll_A4_feed.dragging ? (this.dll_A4_feed.potdrag(); caller = 1);
      );
      );
      
      this.gfx_del_time.h_dragging ? (this.gfx_del_time.h_potdrag(gfx_del_w * 5/gfx_delay_scale);caller = 1);
      this.gfx_del_time.dragging ? (this.gfx_del_time.potdrag();caller = 1);
      this.gfx_ITG_time.h_dragging ? (this.gfx_ITG_time.h_potdrag(gfx_del_w * 5/gfx_delay_scale);caller = 1);

      message_gfx ? (
      gfx_x = message_gfx_x; gfx_y = message_gfx_y + gfx_del_h / 3;
      black();
      gfx_rect(gfx_x - 3*zoom, gfx_y - 3*zoom, 120*zoom, 19*zoom);
      rgb(255,80,80);
      gfx_drawstr("Locked: Tempo Sync"););
 
     
     ); // !number_input

     
     
     
////////////////////////////////////////////////////////////////////////////////////////////// ENDE MAUS STEUERUNG

);





gfx_ext_flags == 0 ? (




input_mixer_show ? (

gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();

input_mixer_show_X ? (
dll_1.self_feed.knob();
gfx_x = dll_1.self_feed.Xin * zoom; gfx_y = dll_1.self_feed.yin * zoom + 64*zoom; 
gfx_drawstr("FEEDBACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.self_feed.slider)); #tmp_label += " %";
gfx_x = dll_1.self_feed.Xin * zoom; gfx_y = dll_1.self_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_x1_feed.knob();
gfx_x = dll_1.dll_x1_feed.Xin * zoom; gfx_y = dll_1.dll_x1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_x1_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_x1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_x1_feed.Xin * zoom; gfx_y = dll_1.dll_x1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_x2_feed.knob();
gfx_x = dll_1.dll_x2_feed.Xin * zoom; gfx_y = dll_1.dll_x2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_x2_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_x2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_x2_feed.Xin * zoom; gfx_y = dll_1.dll_x2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_x3_feed.knob();
gfx_x = dll_1.dll_x3_feed.Xin * zoom; gfx_y = dll_1.dll_x3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_x3_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_x3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_x3_feed.Xin * zoom; gfx_y = dll_1.dll_x3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);
dll_1.dll_L_feed.knob();
gfx_x = dll_1.dll_L_feed.Xin * zoom; gfx_y = dll_1.dll_L_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN LEFT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_L_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_L_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_L_feed.Xin * zoom; gfx_y = dll_1.dll_L_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_R_feed.knob();
gfx_x = dll_1.dll_R_feed.Xin * zoom; gfx_y = dll_1.dll_R_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN RIGHT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_R_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_R_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_R_feed.Xin * zoom; gfx_y = dll_1.dll_R_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
input_mixer_show_A ? (
dll_1.dll_A1_feed.knob();
gfx_x = dll_1.dll_A1_feed.Xin * zoom; gfx_y = dll_1.dll_A1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_A1_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_A1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_A1_feed.Xin * zoom; gfx_y = dll_1.dll_A1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_A2_feed.knob();
gfx_x = dll_1.dll_A2_feed.Xin * zoom; gfx_y = dll_1.dll_A2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_A2_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_A2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_A2_feed.Xin * zoom; gfx_y = dll_1.dll_A2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_A3_feed.knob();
gfx_x = dll_1.dll_A3_feed.Xin * zoom; gfx_y = dll_1.dll_A3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_A3_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_A3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_A3_feed.Xin * zoom; gfx_y = dll_1.dll_A3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_1.dll_A4_feed.knob();
gfx_x = dll_1.dll_A4_feed.Xin * zoom; gfx_y = dll_1.dll_A4_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_1.dll_A4_feed.slider)); #tmp_label += " dB";
slider(dll_1.dll_A4_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_1.dll_A4_feed.Xin * zoom; gfx_y = dll_1.dll_A4_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);



input_mixer_show_X ? (
dll_2.self_feed.knob();
gfx_x = dll_2.self_feed.Xin * zoom; gfx_y = dll_2.self_feed.yin * zoom + 64*zoom; 
gfx_drawstr("FEEDBACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.self_feed.slider)); #tmp_label += " %";
gfx_x = dll_2.self_feed.Xin * zoom; gfx_y = dll_2.self_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_x1_feed.knob();
gfx_x = dll_2.dll_x1_feed.Xin * zoom; gfx_y = dll_2.dll_x1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_x1_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_x1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_x1_feed.Xin * zoom; gfx_y = dll_2.dll_x1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_x2_feed.knob();
gfx_x = dll_2.dll_x2_feed.Xin * zoom; gfx_y = dll_2.dll_x2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_x2_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_x2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_x2_feed.Xin * zoom; gfx_y = dll_2.dll_x2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_x3_feed.knob();
gfx_x = dll_2.dll_x3_feed.Xin * zoom; gfx_y = dll_2.dll_x3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_x3_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_x3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_x3_feed.Xin * zoom; gfx_y = dll_2.dll_x3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);
dll_2.dll_L_feed.knob();
gfx_x = dll_2.dll_L_feed.Xin * zoom; gfx_y = dll_2.dll_L_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN LEFT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_L_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_L_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_L_feed.Xin * zoom; gfx_y = dll_2.dll_L_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_R_feed.knob();
gfx_x = dll_2.dll_R_feed.Xin * zoom; gfx_y = dll_2.dll_R_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN RIGHT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_R_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_R_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_R_feed.Xin * zoom; gfx_y = dll_2.dll_R_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
input_mixer_show_A ? (
dll_2.dll_A1_feed.knob();
gfx_x = dll_2.dll_A1_feed.Xin * zoom; gfx_y = dll_2.dll_A1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_A1_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_A1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_A1_feed.Xin * zoom; gfx_y = dll_2.dll_A1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_A2_feed.knob();
gfx_x = dll_2.dll_A2_feed.Xin * zoom; gfx_y = dll_2.dll_A2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_A2_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_A2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_A2_feed.Xin * zoom; gfx_y = dll_2.dll_A2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_A3_feed.knob();
gfx_x = dll_2.dll_A3_feed.Xin * zoom; gfx_y = dll_2.dll_A3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_A3_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_A3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_A3_feed.Xin * zoom; gfx_y = dll_2.dll_A3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_2.dll_A4_feed.knob();
gfx_x = dll_2.dll_A4_feed.Xin * zoom; gfx_y = dll_2.dll_A4_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_2.dll_A4_feed.slider)); #tmp_label += " dB";
slider(dll_2.dll_A4_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_2.dll_A4_feed.Xin * zoom; gfx_y = dll_2.dll_A4_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);


input_mixer_show_X ? (
dll_3.self_feed.knob();
gfx_x = dll_3.self_feed.Xin * zoom; gfx_y = dll_3.self_feed.yin * zoom + 64*zoom; 
gfx_drawstr("FEEDBACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.self_feed.slider)); #tmp_label += " %";
gfx_x = dll_3.self_feed.Xin * zoom; gfx_y = dll_3.self_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_x1_feed.knob();
gfx_x = dll_3.dll_x1_feed.Xin * zoom; gfx_y = dll_3.dll_x1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_x1_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_x1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_x1_feed.Xin * zoom; gfx_y = dll_3.dll_x1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_x2_feed.knob();
gfx_x = dll_3.dll_x2_feed.Xin * zoom; gfx_y = dll_3.dll_x2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_x2_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_x2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_x2_feed.Xin * zoom; gfx_y = dll_3.dll_x2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_x3_feed.knob();
gfx_x = dll_3.dll_x3_feed.Xin * zoom; gfx_y = dll_3.dll_x3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_x3_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_x3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_x3_feed.Xin * zoom; gfx_y = dll_3.dll_x3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);
dll_3.dll_L_feed.knob();
gfx_x = dll_3.dll_L_feed.Xin * zoom; gfx_y = dll_3.dll_L_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN LEFT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_L_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_L_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_L_feed.Xin * zoom; gfx_y = dll_3.dll_L_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_R_feed.knob();
gfx_x = dll_3.dll_R_feed.Xin * zoom; gfx_y = dll_3.dll_R_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN RIGHT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_R_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_R_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_R_feed.Xin * zoom; gfx_y = dll_3.dll_R_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
input_mixer_show_A ? (
dll_3.dll_A1_feed.knob();
gfx_x = dll_3.dll_A1_feed.Xin * zoom; gfx_y = dll_3.dll_A1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_A1_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_A1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_A1_feed.Xin * zoom; gfx_y = dll_3.dll_A1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_A2_feed.knob();
gfx_x = dll_3.dll_A2_feed.Xin * zoom; gfx_y = dll_3.dll_A2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_A2_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_A2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_A2_feed.Xin * zoom; gfx_y = dll_3.dll_A2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_A3_feed.knob();
gfx_x = dll_3.dll_A3_feed.Xin * zoom; gfx_y = dll_3.dll_A3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_A3_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_A3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_A3_feed.Xin * zoom; gfx_y = dll_3.dll_A3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_3.dll_A4_feed.knob();
gfx_x = dll_3.dll_A4_feed.Xin * zoom; gfx_y = dll_3.dll_A4_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_3.dll_A4_feed.slider)); #tmp_label += " dB";
slider(dll_3.dll_A4_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_3.dll_A4_feed.Xin * zoom; gfx_y = dll_3.dll_A4_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);



input_mixer_show_X ? (
dll_4.self_feed.knob();
gfx_x = dll_4.self_feed.Xin * zoom; gfx_y = dll_4.self_feed.yin * zoom + 64*zoom; 
gfx_drawstr("FEEDBACK", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.self_feed.slider)); #tmp_label += " %";
gfx_x = dll_4.self_feed.Xin * zoom; gfx_y = dll_4.self_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_x1_feed.knob();
gfx_x = dll_4.dll_x1_feed.Xin * zoom; gfx_y = dll_4.dll_x1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_x1_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_x1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_x1_feed.Xin * zoom; gfx_y = dll_4.dll_x1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_x2_feed.knob();
gfx_x = dll_4.dll_x2_feed.Xin * zoom; gfx_y = dll_4.dll_x2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_x2_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_x2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_x2_feed.Xin * zoom; gfx_y = dll_4.dll_x2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_x3_feed.knob();
gfx_x = dll_4.dll_x3_feed.Xin * zoom; gfx_y = dll_4.dll_x3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_x3_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_x3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_x3_feed.Xin * zoom; gfx_y = dll_4.dll_x3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);
dll_4.dll_L_feed.knob();
gfx_x = dll_4.dll_L_feed.Xin * zoom; gfx_y = dll_4.dll_L_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN LEFT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_L_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_L_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_L_feed.Xin * zoom; gfx_y = dll_4.dll_L_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_R_feed.knob();
gfx_x = dll_4.dll_R_feed.Xin * zoom; gfx_y = dll_4.dll_R_feed.yin * zoom + 64*zoom; 
gfx_drawstr("IN RIGHT", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_R_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_R_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_R_feed.Xin * zoom; gfx_y = dll_4.dll_R_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
input_mixer_show_A ? (
dll_4.dll_A1_feed.knob();
gfx_x = dll_4.dll_A1_feed.Xin * zoom; gfx_y = dll_4.dll_A1_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_A1_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_A1_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_A1_feed.Xin * zoom; gfx_y = dll_4.dll_A1_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_A2_feed.knob();
gfx_x = dll_4.dll_A2_feed.Xin * zoom; gfx_y = dll_4.dll_A2_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_A2_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_A2_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_A2_feed.Xin * zoom; gfx_y = dll_4.dll_A2_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_A3_feed.knob();
gfx_x = dll_4.dll_A3_feed.Xin * zoom; gfx_y = dll_4.dll_A3_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_A3_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_A3_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_A3_feed.Xin * zoom; gfx_y = dll_4.dll_A3_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
dll_4.dll_A4_feed.knob();
gfx_x = dll_4.dll_A4_feed.Xin * zoom; gfx_y = dll_4.dll_A4_feed.yin * zoom + 64*zoom; 
gfx_drawstr("AUX 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(dll_4.dll_A4_feed.slider)); #tmp_label += " dB";
slider(dll_4.dll_A4_feed.slider) == -60 ? #tmp_label = "OFF";
gfx_x = dll_4.dll_A4_feed.Xin * zoom; gfx_y = dll_4.dll_A4_feed.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);
);








gfx_setfont(1,"Arial",10*zoom,'b'); lightgrey();
out.dll_1_pan.knob();
gfx_x = out.dll_1_pan.Xin * zoom; gfx_y = out.dll_1_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_1_pan.slider))*100); 
slider(out.dll_1_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_1_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_1_pan.Xin * zoom; gfx_y = out.dll_1_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_1_Vol.knob();
gfx_x = out.dll_1_Vol.Xin * zoom; gfx_y = out.dll_1_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_1_Vol.slider)); #tmp_label += " dB";
slider(out.dll_1_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_1_Vol.Xin * zoom; gfx_y = out.dll_1_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out.dll_2_pan.knob();
gfx_x = out.dll_2_pan.Xin * zoom; gfx_y = out.dll_2_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_2_pan.slider))*100); 
slider(out.dll_2_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_2_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_2_pan.Xin * zoom; gfx_y = out.dll_2_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_2_Vol.knob();
gfx_x = out.dll_2_Vol.Xin * zoom; gfx_y = out.dll_2_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_2_Vol.slider)); #tmp_label += " dB";
slider(out.dll_2_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_2_Vol.Xin * zoom; gfx_y = out.dll_2_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out.dll_3_pan.knob();
gfx_x = out.dll_3_pan.Xin * zoom; gfx_y = out.dll_3_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_3_pan.slider))*100); 
slider(out.dll_3_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_3_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_3_pan.Xin * zoom; gfx_y = out.dll_3_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_3_Vol.knob();
gfx_x = out.dll_3_Vol.Xin * zoom; gfx_y = out.dll_3_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_3_Vol.slider)); #tmp_label += " dB";
slider(out.dll_3_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_3_Vol.Xin * zoom; gfx_y = out.dll_3_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out.dll_4_pan.knob();
gfx_x = out.dll_4_pan.Xin * zoom; gfx_y = out.dll_4_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_4_pan.slider))*100); 
slider(out.dll_4_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_4_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_4_pan.Xin * zoom; gfx_y = out.dll_4_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_4_Vol.knob();
gfx_x = out.dll_4_Vol.Xin * zoom; gfx_y = out.dll_4_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_4_Vol.slider)); #tmp_label += " dB";
slider(out.dll_4_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_4_Vol.Xin * zoom; gfx_y = out.dll_4_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out.dll_L_pan.knob();
gfx_x = out.dll_L_pan.Xin * zoom; gfx_y = out.dll_L_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_L_pan.slider))*100); 
slider(out.dll_L_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_L_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_L_pan.Xin * zoom; gfx_y = out.dll_L_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_L_Vol.knob();
gfx_x = out.dll_L_Vol.Xin * zoom; gfx_y = out.dll_L_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DRY L", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_L_Vol.slider)); #tmp_label += " dB";
slider(out.dll_L_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_L_Vol.Xin * zoom; gfx_y = out.dll_L_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out.dll_R_pan.knob();
gfx_x = out.dll_R_pan.Xin * zoom; gfx_y = out.dll_R_pan.yin * zoom + 64*zoom; 
gfx_drawstr("PAN", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.0f" , abs(slider(out.dll_R_pan.slider))*100); 
slider(out.dll_R_pan.slider) < 0 ? #tmp_label += " L":
slider(out.dll_R_pan.slider) > 0 ? #tmp_label += " R":
#tmp_label = "C";
gfx_x = out.dll_R_pan.Xin * zoom; gfx_y = out.dll_R_pan.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
out.dll_R_Vol.knob();
gfx_x = out.dll_R_Vol.Xin * zoom; gfx_y = out.dll_R_Vol.yin * zoom + 64*zoom; 
gfx_drawstr("DLL R", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out.dll_R_Vol.slider)); #tmp_label += " dB";
slider(out.dll_R_Vol.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out.dll_R_Vol.Xin * zoom; gfx_y = out.dll_R_Vol.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);





aux_mixer_show ? (

out_A1.dll_1.knob();
gfx_x = out_A1.dll_1.Xin * zoom; gfx_y = out_A1.dll_1.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_1.slider)); #tmp_label += " dB";
slider(out_A1.dll_1.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_1.Xin * zoom; gfx_y = out_A1.dll_1.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_1.knob();
gfx_x = out_A2.dll_1.Xin * zoom; gfx_y = out_A2.dll_1.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_1.slider)); #tmp_label += " dB";
slider(out_A2.dll_1.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_1.Xin * zoom; gfx_y = out_A2.dll_1.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_1.knob();
gfx_x = out_A3.dll_1.Xin * zoom; gfx_y = out_A3.dll_1.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_1.slider)); #tmp_label += " dB";
slider(out_A3.dll_1.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_1.Xin * zoom; gfx_y = out_A3.dll_1.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_1.knob();
gfx_x = out_A4.dll_1.Xin * zoom; gfx_y = out_A4.dll_1.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 1", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_1.slider)); #tmp_label += " dB";
slider(out_A4.dll_1.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_1.Xin * zoom; gfx_y = out_A4.dll_1.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);


out_A1.dll_2.knob();
gfx_x = out_A1.dll_2.Xin * zoom; gfx_y = out_A1.dll_2.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_2.slider)); #tmp_label += " dB";
slider(out_A1.dll_2.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_2.Xin * zoom; gfx_y = out_A1.dll_2.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_2.knob();
gfx_x = out_A2.dll_2.Xin * zoom; gfx_y = out_A2.dll_2.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_2.slider)); #tmp_label += " dB";
slider(out_A2.dll_2.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_2.Xin * zoom; gfx_y = out_A2.dll_2.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_2.knob();
gfx_x = out_A3.dll_2.Xin * zoom; gfx_y = out_A3.dll_2.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_2.slider)); #tmp_label += " dB";
slider(out_A3.dll_2.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_2.Xin * zoom; gfx_y = out_A3.dll_2.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_2.knob();
gfx_x = out_A4.dll_2.Xin * zoom; gfx_y = out_A4.dll_2.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 2", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_2.slider)); #tmp_label += " dB";
slider(out_A4.dll_2.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_2.Xin * zoom; gfx_y = out_A4.dll_2.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);


out_A1.dll_3.knob();
gfx_x = out_A1.dll_3.Xin * zoom; gfx_y = out_A1.dll_3.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_3.slider)); #tmp_label += " dB";
slider(out_A1.dll_3.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_3.Xin * zoom; gfx_y = out_A1.dll_3.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_3.knob();
gfx_x = out_A2.dll_3.Xin * zoom; gfx_y = out_A2.dll_3.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_3.slider)); #tmp_label += " dB";
slider(out_A2.dll_3.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_3.Xin * zoom; gfx_y = out_A2.dll_3.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_3.knob();
gfx_x = out_A3.dll_3.Xin * zoom; gfx_y = out_A3.dll_3.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_3.slider)); #tmp_label += " dB";
slider(out_A3.dll_3.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_3.Xin * zoom; gfx_y = out_A3.dll_3.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_3.knob();
gfx_x = out_A4.dll_3.Xin * zoom; gfx_y = out_A4.dll_3.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 3", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_3.slider)); #tmp_label += " dB";
slider(out_A4.dll_3.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_3.Xin * zoom; gfx_y = out_A4.dll_3.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);


out_A1.dll_4.knob();
gfx_x = out_A1.dll_4.Xin * zoom; gfx_y = out_A1.dll_4.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_4.slider)); #tmp_label += " dB";
slider(out_A1.dll_4.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_4.Xin * zoom; gfx_y = out_A1.dll_4.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_4.knob();
gfx_x = out_A2.dll_4.Xin * zoom; gfx_y = out_A2.dll_4.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_4.slider)); #tmp_label += " dB";
slider(out_A2.dll_4.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_4.Xin * zoom; gfx_y = out_A2.dll_4.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_4.knob();
gfx_x = out_A3.dll_4.Xin * zoom; gfx_y = out_A3.dll_4.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_4.slider)); #tmp_label += " dB";
slider(out_A3.dll_4.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_4.Xin * zoom; gfx_y = out_A3.dll_4.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_4.knob();
gfx_x = out_A4.dll_4.Xin * zoom; gfx_y = out_A4.dll_4.yin * zoom + 64*zoom; 
gfx_drawstr("DLL 4", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_4.slider)); #tmp_label += " dB";
slider(out_A4.dll_4.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_4.Xin * zoom; gfx_y = out_A4.dll_4.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);


out_A1.dll_L.knob();
gfx_x = out_A1.dll_L.Xin * zoom; gfx_y = out_A1.dll_L.yin * zoom + 64*zoom; 
gfx_drawstr("DRY L", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_L.slider)); #tmp_label += " dB";
slider(out_A1.dll_L.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_L.Xin * zoom; gfx_y = out_A1.dll_L.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_L.knob();
gfx_x = out_A2.dll_L.Xin * zoom; gfx_y = out_A2.dll_L.yin * zoom + 64*zoom; 
gfx_drawstr("DRY L", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_L.slider)); #tmp_label += " dB";
slider(out_A2.dll_L.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_L.Xin * zoom; gfx_y = out_A2.dll_L.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_L.knob();
gfx_x = out_A3.dll_L.Xin * zoom; gfx_y = out_A3.dll_L.yin * zoom + 64*zoom; 
gfx_drawstr("DRY L", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_L.slider)); #tmp_label += " dB";
slider(out_A3.dll_L.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_L.Xin * zoom; gfx_y = out_A3.dll_L.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_L.knob();
gfx_x = out_A4.dll_L.Xin * zoom; gfx_y = out_A4.dll_L.yin * zoom + 64*zoom; 
gfx_drawstr("DRY L", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_L.slider)); #tmp_label += " dB";
slider(out_A4.dll_L.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_L.Xin * zoom; gfx_y = out_A4.dll_L.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);


out_A1.dll_R.knob();
gfx_x = out_A1.dll_R.Xin * zoom; gfx_y = out_A1.dll_R.yin * zoom + 64*zoom; 
gfx_drawstr("DRY R", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A1.dll_R.slider)); #tmp_label += " dB";
slider(out_A1.dll_R.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A1.dll_R.Xin * zoom; gfx_y = out_A1.dll_R.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A2.dll_R.knob();
gfx_x = out_A2.dll_R.Xin * zoom; gfx_y = out_A2.dll_R.yin * zoom + 64*zoom; 
gfx_drawstr("DRY R", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A2.dll_R.slider)); #tmp_label += " dB";
slider(out_A2.dll_R.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A2.dll_R.Xin * zoom; gfx_y = out_A2.dll_R.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A3.dll_R.knob();
gfx_x = out_A3.dll_R.Xin * zoom; gfx_y = out_A3.dll_R.yin * zoom + 64*zoom; 
gfx_drawstr("DRY R", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A3.dll_R.slider)); #tmp_label += " dB";
slider(out_A3.dll_R.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A3.dll_R.Xin * zoom; gfx_y = out_A3.dll_R.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);

out_A4.dll_R.knob();
gfx_x = out_A4.dll_R.Xin * zoom; gfx_y = out_A4.dll_R.yin * zoom + 64*zoom; 
gfx_drawstr("DRY R", 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
sprintf(#tmp_label, "%.1f" ,slider(out_A4.dll_R.slider)); #tmp_label += " dB";
slider(out_A4.dll_R.slider) == -60 ? #tmp_label = "OFF";
gfx_x = out_A4.dll_R.Xin * zoom; gfx_y = out_A4.dll_R.yin * zoom + 52*zoom; 
gfx_drawstr(#tmp_label, 0x05, gfx_x + 60*zoom, gfx_y + gfx_texth);
);







dll_1.make_gfx_delay_line();
lightgrey();
gfx_x = dll_1.Knobs_x*zoom - 5*zoom; gfx_y = dll_1.knobs_y*zoom - 26*zoom;
gfx_drawstr("DELAY LINE 1", 0x05, gfx_x + gfx_del_w + 148*zoom, gfx_y + 17*zoom);


dll_2.make_gfx_delay_line();
lightgrey();
gfx_x = dll_2.Knobs_x*zoom - 5*zoom; gfx_y = dll_2.knobs_y*zoom - 26*zoom;
gfx_drawstr("DELAY LINE 2", 0x05, gfx_x + gfx_del_w + 148*zoom, gfx_y + 17*zoom);

dll_3.make_gfx_delay_line();
lightgrey();
gfx_x = dll_3.Knobs_x*zoom - 5*zoom; gfx_y = dll_3.knobs_y*zoom - 26*zoom;
gfx_drawstr("DELAY LINE 3", 0x05, gfx_x + gfx_del_w + 148*zoom, gfx_y + 17*zoom);

dll_4.make_gfx_delay_line();
lightgrey();
gfx_x = dll_4.Knobs_x*zoom - 5*zoom; gfx_y = dll_4.knobs_y*zoom - 26*zoom;
gfx_drawstr("DELAY LINE 4", 0x05, gfx_x + gfx_del_w + 148*zoom, gfx_y + 17*zoom);



input_mixer_show ? (
gfx_setfont(1,"Arial",12*zoom,'b'); lightgrey();
gfx_rect(dll_1.dll_L_feed.xIn*zoom - 8*zoom, dll_1.dll_L_feed.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(dll_1.dll_L_feed.xIn*zoom + 127*zoom, dll_1.dll_L_feed.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(dll_1.dll_L_feed.xIn*zoom - 8*zoom, dll_1.dll_L_feed.yIn*zoom - 7*zoom, 28*zoom, 2*zoom);
gfx_rect(dll_1.dll_L_feed.xIn*zoom + 100*zoom, dll_1.dll_L_feed.yIn*zoom - 7*zoom, 28*zoom, 2*zoom);
gfx_x = dll_1.dll_L_feed.xIn*zoom - 8*zoom; gfx_y = dll_1.dll_L_feed.yIn*zoom - 13*zoom;
gfx_drawstr("STEREO IN", 0x05, gfx_x + 136*zoom, gfx_y + 17*zoom);
input_mixer_show_X ? gfx_a = 1 : gfx_a = 0.6;
gfx_rect(dll_1.self_feed.xIn*zoom - 8*zoom, dll_1.self_feed.yIn*zoom - 7*zoom, 95*zoom, 2*zoom);
gfx_rect(dll_1.self_feed.xIn*zoom + 153*zoom, dll_1.self_feed.yIn*zoom - 7*zoom, 95*zoom, 2*zoom);
gfx_rect(dll_1.self_feed.xIn*zoom - 8*zoom, dll_1.self_feed.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_x = dll_1.self_feed.xIn*zoom - 8*zoom; gfx_y = dll_1.self_feed.yIn*zoom - 13*zoom;
gfx_drawstr("X - FEED", 0x05, gfx_x + 256*zoom, gfx_y + 17*zoom);
input_mixer_show_A ? gfx_a = 1 : gfx_a = 0.6;
gfx_rect(dll_1.dll_a1_feed.xIn*zoom - 8*zoom, dll_1.dll_a1_feed.yIn*zoom - 7*zoom, 98*zoom, 2*zoom);
gfx_rect(dll_1.dll_a1_feed.xIn*zoom + 150*zoom, dll_1.dll_a1_feed.yIn*zoom - 7*zoom, 98*zoom, 2*zoom);
gfx_rect(dll_1.dll_a1_feed.xIn*zoom + 247*zoom, dll_1.dll_a1_feed.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_x = dll_1.dll_a1_feed.xIn*zoom - 8*zoom; gfx_y = dll_1.dll_a1_feed.yIn*zoom - 13*zoom;
gfx_drawstr("AUX IN", 0x05, gfx_x + 256*zoom, gfx_y + 17*zoom);

gfx_setfont(1,"Arial",14*zoom,'bi');rgb(100,255,100);
gfx_x = dll_1.dll_a4_feed.xIn*zoom + 70*zoom; gfx_y = dll_1.dll_a1_feed.yIn*zoom + 22*zoom;
dll_1.on ? gfx_a = 1 : gfx_a = 0.5; gfx_drawstr("DELAY LINE 1 INPUT");
gfx_x = dll_2.dll_a4_feed.xIn*zoom + 70*zoom; gfx_y = dll_2.dll_a1_feed.yIn*zoom + 22*zoom;
dll_2.on ? gfx_a = 1 : gfx_a = 0.5; gfx_drawstr("DELAY LINE 2 INPUT");
gfx_x = dll_3.dll_a4_feed.xIn*zoom + 70*zoom; gfx_y = dll_3.dll_a1_feed.yIn*zoom + 22*zoom;
dll_3.on ? gfx_a = 1 : gfx_a = 0.5; gfx_drawstr("DELAY LINE 3 INPUT");
gfx_x = dll_4.dll_a4_feed.xIn*zoom + 70*zoom; gfx_y = dll_4.dll_a1_feed.yIn*zoom + 22*zoom;
dll_4.on ? gfx_a = 1 : gfx_a = 0.5; gfx_drawstr("DELAY LINE 4 INPUT");
);


Aux_mixer_show ? (
gfx_setfont(1,"Arial",12*zoom,'b'); lightgrey();
gfx_x = Out_A1.dll_1.xIn*zoom - 8*zoom; gfx_y = Out_a1.dll_1.yIn*zoom - 13*zoom;
gfx_drawstr("DLEAY LINE OUTPUTS", 0x05, gfx_x + 256*zoom, gfx_y + 17*zoom);
gfx_x = Out_A1.dll_L.xIn*zoom - 8*zoom; gfx_y = Out_a1.dll_L.yIn*zoom - 13*zoom;
gfx_drawstr("DRY L + R", 0x05, gfx_x + 136*zoom, gfx_y + 17*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom - 8*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom + 250*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom + 384*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom - 8*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 48*zoom, 2*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom + 197*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 82*zoom, 2*zoom);
gfx_rect(Out_A1.dll_1.xIn*zoom + 364*zoom, Out_a1.dll_1.yIn*zoom - 7*zoom, 20*zoom, 2*zoom);
gfx_setfont(1,"Arial",14*zoom,'bi');rgb(100,255,100);
gfx_x = Out_A1.dll_R.xIn*zoom + 70*zoom; gfx_y = Out_A1.dll_R.yIn*zoom + 22*zoom;
gfx_drawstr("AUX 1 OUTPUT");
gfx_x = Out_A2.dll_R.xIn*zoom + 70*zoom; gfx_y = Out_A2.dll_R.yIn*zoom + 22*zoom;
gfx_drawstr("AUX 2 OUTPUT");
gfx_x = Out_A3.dll_R.xIn*zoom + 70*zoom; gfx_y = Out_A3.dll_R.yIn*zoom + 22*zoom;
gfx_drawstr("AUX 3 OUTPUT");
gfx_x = Out_A4.dll_R.xIn*zoom + 70*zoom; gfx_y = Out_A4.dll_R.yIn*zoom + 22*zoom;
gfx_drawstr("AUX 4 OUTPUT");
);

gfx_setfont(1,"Arial",12*zoom,'b'); lightgrey();
gfx_x = Out.dll_1_pan.xIn*zoom - 8*zoom; gfx_y = Out.dll_1_pan.yIn*zoom - 13*zoom;
gfx_drawstr("STEREO OUTPUT MIXER", 0x05, gfx_x + 376*zoom, gfx_y + 17*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom - 8*zoom, Out.dll_1_pan.yIn*zoom - 7*zoom, 103*zoom, 2*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom + 261*zoom, Out.dll_1_pan.yIn*zoom - 7*zoom, 103*zoom, 2*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom - 8*zoom, Out.dll_1_pan.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom + 363*zoom, Out.dll_1_pan.yIn*zoom - 7*zoom, 2*zoom, 20*zoom);


gfx_rect(Out.dll_1_pan.xIn*zoom - 8*zoom, Out.dll_1_pan.yIn*zoom + 180*zoom, 371*zoom, 2*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom - 8*zoom, Out.dll_1_pan.yIn*zoom + 180*zoom, 2*zoom, 20*zoom);
gfx_rect(Out.dll_1_pan.xIn*zoom + 363*zoom, Out.dll_1_pan.yIn*zoom + 180*zoom, 2*zoom, 20*zoom);




lightgrey();
gfx_setfont(1,"Arial",12*zoom,'b');
gfx_x = gfx_x_old = out.dll_1_Vol.xIn*zoom +25*zoom;
gfx_y = out.dll_1_Vol.yIn*zoom + 120*zoom;
gfx_drawstr("SHOW MATRIX", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
rgb(100,255,100);
gfx_x = gfx_x_old; gfx_y += 20*zoom; Aux_mixer_show == 1 ? gfx_a = 1 : gfx_a = 0.6;
gfx_drawstr("AUX OUTPUTS", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old; gfx_y += 20*zoom; input_mixer_show == 1 ? gfx_a = 1 : gfx_a = 0.6;
gfx_drawstr("DELAY LINE INPUTS", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old+12*zoom; gfx_y += 20*zoom; input_mixer_show_x == 1 ? gfx_a = 1 : gfx_a = 0.6; input_mixer_show == 0 ? gfx_a = 0.6;
gfx_x += 7*zoom; gfx_y -= 6*zoom; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); gfx_x -= 7*zoom; gfx_y += 6*zoom; 
gfx_drawstr("X - FEED", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);
gfx_x = gfx_x_old+12*zoom; gfx_y += 20*zoom; input_mixer_show_a == 1 ? gfx_a = 1 : gfx_a = 0.6; input_mixer_show == 0 ? gfx_a = 0.6;
gfx_x += 7*zoom; gfx_y -= 6*zoom; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); gfx_x -= 7*zoom; gfx_y += 6*zoom; 
gfx_drawstr("AUX IN", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);


gfx_x = gfx_bpm_x = out.dll_1_Vol.xIn*zoom + 200*zoom;
gfx_y = gfx_bpm_y = out.dll_1_Vol.yIn*zoom + 120*zoom;
gfx_a = 1;
black();
gfx_rect(gfx_x, gfx_y, 140*zoom, 24*zoom);
lightgrey(); 
gfx_rect(gfx_x, gfx_y, 140*zoom, 2*zoom);
gfx_rect(gfx_x, gfx_y, 2*zoom, 24*zoom);
gfx_rect(gfx_x, gfx_y + 24*zoom, 140*zoom, 2*zoom);
gfx_rect(gfx_x+138*zoom, gfx_y, 2*zoom, 24*zoom);

rgb(100,255,100); gfx_setfont(1,"Arial",14*zoom,'b');
gfx_y += 5*zoom; slider(bpm_slider.slider) ? orange();
sprintf(#tmp_label, "%.2f" ,set_tempo); #tmp_label += " BPM";
gfx_drawstr(#tmp_label, 0x05, gfx_x + 140*zoom, gfx_y + 17*zoom);

gfx_x = gfx_tap_x = out.dll_1_Vol.xIn*zoom + 200*zoom;
gfx_y = gfx_tap_y = out.dll_1_Vol.yIn*zoom + 160*zoom;
black();
gfx_rect(gfx_x, gfx_y, 140*zoom, 24*zoom);
lightgrey(); 
gfx_rect(gfx_x, gfx_y, 140*zoom, 2*zoom);
gfx_rect(gfx_x, gfx_y, 2*zoom, 24*zoom);
gfx_rect(gfx_x, gfx_y + 24*zoom, 140*zoom, 2*zoom);
gfx_rect(gfx_x+138*zoom, gfx_y, 2*zoom, 24*zoom);
capreset > -1 ? orange() : rgb(100,255,100); gfx_setfont(1,"Arial",14*zoom,'b');
gfx_y += 5*zoom;
gfx_drawstr("TAP BPM", 0x05, gfx_x + 140*zoom, gfx_y + 17*zoom);

gfx_setfont(1,"Arial",12*zoom,'b');rgb(100,255,100);
gfx_x = gfx_tap_x+22*zoom; gfx_y = gfx_tap_y + 40*zoom; bpm_slider == 0 ? gfx_a = 1 : gfx_a = 0.4;
gfx_x -= 12*zoom; gfx_y -= 6*zoom; gfx_blit(15, 0.6*zoom, 0, 0, 0 , 40,40); gfx_x += 12*zoom; gfx_y += 6*zoom; 
gfx_drawstr("PROJECT BPM", 0x05, gfx_x + 120*zoom, gfx_y + 17*zoom);

/*
orange();
gfx_roundrect(out.dll_1_Vol.xIn*zoom +35*zoom, out.dll_1_Vol.yIn*zoom + 138*zoom, 100*zoom, 17*zoom,0);
gfx_roundrect(out.dll_1_Vol.xIn*zoom +25*zoom, out.dll_1_Vol.yIn*zoom + 158*zoom, 120*zoom, 17*zoom,0);
gfx_roundrect(out.dll_1_Vol.xIn*zoom +45*zoom, out.dll_1_Vol.yIn*zoom + 178*zoom, 80*zoom, 17*zoom,0);
gfx_roundrect(out.dll_1_Vol.xIn*zoom +45*zoom, out.dll_1_Vol.yIn*zoom + 198*zoom, 80*zoom, 17*zoom,0);
//gfx_roundrect(gfx_bpm_x, gfx_bpm_y, 140*zoom, 24*zoom,0);
gfx_roundrect(gfx_tap_x, gfx_tap_y, 140*zoom, 24*zoom,0);
//gfx_roundrect(gfx_tap_x+12*zoom, gfx_tap_y+38*zoom, 120*zoom, 18*zoom,0);

*/
lightgrey();gfx_a = 1;
B_Bypass.button();
gfx_x = B_Bypass.xIn*zoom - 56*zoom; gfx_y = B_Bypass.yIn*zoom + 11*zoom;
gfx_drawstR("BYPASS");

////////////////////////////////////////////////////////////////////////////////////////////// MAUS STEUERUNG

      !Number_input ? (
      

      
      mouseClick == 1 ? (
      
      B_Bypass.b_collision() ? (slider(B_Bypass.slider) == 0 ? (slider(B_Bypass.slider) = 1; caller = 1):(slider(B_Bypass.slider) = 0; caller =1);B_Bypass.quicklink_button(););
      
      
      g_collision(gfx_tap_x+12*zoom, gfx_tap_y+38*zoom, 120*zoom, 18*zoom) ? (slider(bpm_slider.slider) = 0; caller = 1);
      g_collision(gfx_bpm_x, gfx_bpm_y, 140*zoom, 24*zoom) ? (slider(bpm_slider.slider) == 0 ? slider(bpm_slider.slider) = tempo; bpm_slider.dragstart());
      
      g_collision(out.dll_1_Vol.xIn*zoom +35*zoom, out.dll_1_Vol.yIn*zoom + 138*zoom, 100*zoom, 17*zoom) ? (slider(B_Matrix.slider) = 1; b_Matrix.quicklink_button();Caller = 1);
      g_collision(out.dll_1_Vol.xIn*zoom +25*zoom, out.dll_1_Vol.yIn*zoom + 158*zoom, 120*zoom, 17*zoom) ? (slider(B_Matrix.slider) = 0; b_Matrix.quicklink_button();Caller = 1);
      input_mixer_show ? g_collision(out.dll_1_Vol.xIn*zoom +45*zoom, out.dll_1_Vol.yIn*zoom + 178*zoom, 80*zoom, 17*zoom) ? (slider(B_In_x.slider) == 0 ? slider(B_In_x.slider) = 1 : slider(B_In_x.slider) = 0; b_In_x.quicklink_button();Caller = 1);
      input_mixer_show ? g_collision(out.dll_1_Vol.xIn*zoom +45*zoom, out.dll_1_Vol.yIn*zoom + 198*zoom, 80*zoom, 17*zoom) ? (slider(B_In_a.slider) == 0 ? slider(B_In_a.slider) = 1 : slider(B_In_a.slider) = 0; b_In_a.quicklink_button();Caller = 1);
      
          out.dll_1_Pan.k_collision() ? out.dll_1_Pan.dragstart();
          out.dll_2_Pan.k_collision() ? out.dll_2_Pan.dragstart();
          out.dll_3_Pan.k_collision() ? out.dll_3_Pan.dragstart();
          out.dll_4_Pan.k_collision() ? out.dll_4_Pan.dragstart();
          out.dll_L_Pan.k_collision() ? out.dll_L_Pan.dragstart();
          out.dll_R_Pan.k_collision() ? out.dll_R_Pan.dragstart();
              out.dll_1_VOL.k_collision() ? out.dll_1_VOL.dragstart();
              out.dll_2_VOL.k_collision() ? out.dll_2_VOL.dragstart();
              out.dll_3_VOL.k_collision() ? out.dll_3_VOL.dragstart();
              out.dll_4_VOL.k_collision() ? out.dll_4_VOL.dragstart();
              out.dll_L_VOL.k_collision() ? out.dll_L_VOL.dragstart();
              out.dll_R_VOL.k_collision() ? out.dll_R_VOL.dragstart();
          
          Aux_mixer_show ? (
          out_A1.dll_1.k_collision() ? out_A1.dll_1.dragstart();
          out_A2.dll_1.k_collision() ? out_A2.dll_1.dragstart();
          out_A3.dll_1.k_collision() ? out_A3.dll_1.dragstart();
          out_A4.dll_1.k_collision() ? out_A4.dll_1.dragstart();
          out_A1.dll_2.k_collision() ? out_A1.dll_2.dragstart();
          out_A2.dll_2.k_collision() ? out_A2.dll_2.dragstart();
          out_A3.dll_2.k_collision() ? out_A3.dll_2.dragstart();
          out_A4.dll_2.k_collision() ? out_A4.dll_2.dragstart();
          out_A1.dll_3.k_collision() ? out_A1.dll_3.dragstart();
          out_A2.dll_3.k_collision() ? out_A2.dll_3.dragstart();
          out_A3.dll_3.k_collision() ? out_A3.dll_3.dragstart();
          out_A4.dll_3.k_collision() ? out_A4.dll_3.dragstart();
          out_A1.dll_4.k_collision() ? out_A1.dll_4.dragstart();
          out_A2.dll_4.k_collision() ? out_A2.dll_4.dragstart();
          out_A3.dll_4.k_collision() ? out_A3.dll_4.dragstart();
          out_A4.dll_4.k_collision() ? out_A4.dll_4.dragstart();
          out_A1.dll_L.k_collision() ? out_A1.dll_L.dragstart();
          out_A2.dll_L.k_collision() ? out_A2.dll_L.dragstart();
          out_A3.dll_L.k_collision() ? out_A3.dll_L.dragstart();
          out_A4.dll_L.k_collision() ? out_A4.dll_L.dragstart();
          out_A1.dll_R.k_collision() ? out_A1.dll_R.dragstart();
          out_A2.dll_R.k_collision() ? out_A2.dll_R.dragstart();
          out_A3.dll_R.k_collision() ? out_A3.dll_R.dragstart();
          out_A4.dll_R.k_collision() ? out_A4.dll_R.dragstart();
          );
          
      );
      
      
      mouseclick == -1 ? (
      out.dll_1_Pan.dragstop();
      out.dll_2_Pan.dragstop();
      out.dll_3_Pan.dragstop();
      out.dll_4_Pan.dragstop();
      out.dll_L_Pan.dragstop();
      out.dll_R_Pan.dragstop();
      
      out.dll_1_VOL.dragstop();
      out.dll_2_VOL.dragstop();
      out.dll_3_VOL.dragstop();
      out.dll_4_VOL.dragstop();
      out.dll_L_VOL.dragstop();
      out.dll_R_VOL.dragstop();
      
      out_A1.dll_1.dragstop();
      out_A2.dll_1.dragstop();
      out_A3.dll_1.dragstop();
      out_A4.dll_1.dragstop();
      out_A1.dll_2.dragstop();
      out_A2.dll_2.dragstop();
      out_A3.dll_2.dragstop();
      out_A4.dll_2.dragstop();
      out_A1.dll_3.dragstop();
      out_A2.dll_3.dragstop();
      out_A3.dll_3.dragstop();
      out_A4.dll_3.dragstop();
      out_A1.dll_4.dragstop();
      out_A2.dll_4.dragstop();
      out_A3.dll_4.dragstop();
      out_A4.dll_4.dragstop();
      out_A1.dll_L.dragstop();
      out_A2.dll_L.dragstop();
      out_A3.dll_L.dragstop();
      out_A4.dll_L.dragstop();
      out_A1.dll_R.dragstop();
      out_A2.dll_R.dragstop();
      out_A3.dll_R.dragstop();
      out_A4.dll_R.dragstop();
      
      bpm_slider.dragstop();
      );
      
      mouse_wheel ? 
          (
           out.dll_1_Pan.k_collision()   ? out.dll_1_Pan.potWheel():
           out.dll_2_Pan.k_collision()   ? out.dll_2_Pan.potWheel():
           out.dll_3_Pan.k_collision()   ? out.dll_3_Pan.potWheel():
           out.dll_4_Pan.k_collision()   ? out.dll_4_Pan.potWheel():
           out.dll_L_Pan.k_collision()   ? out.dll_L_Pan.potWheel():
           out.dll_R_Pan.k_collision()   ? out.dll_r_Pan.potWheel():
                out.dll_1_VOL.k_collision()   ? out.dll_1_VOL.potWheel():
                out.dll_2_VOL.k_collision()   ? out.dll_2_VOL.potWheel():
                out.dll_3_VOL.k_collision()   ? out.dll_3_VOL.potWheel():
                out.dll_4_VOL.k_collision()   ? out.dll_4_VOL.potWheel():
                out.dll_L_VOL.k_collision()   ? out.dll_L_VOL.potWheel():
                out.dll_R_VOL.k_collision()   ? out.dll_r_VOL.potWheel():
                g_collision(gfx_bpm_x, gfx_bpm_y, 140*zoom, 24*zoom)   ? bpm_slider.potWheel_integer():
           
           Aux_mixer_show ? (
           out_A1.dll_1.k_collision() ? out_A1.dll_1.potwheel();
           out_A2.dll_1.k_collision() ? out_A2.dll_1.potwheel();
           out_A3.dll_1.k_collision() ? out_A3.dll_1.potwheel();
           out_A4.dll_1.k_collision() ? out_A4.dll_1.potwheel();
           out_A1.dll_2.k_collision() ? out_A1.dll_2.potwheel();
           out_A2.dll_2.k_collision() ? out_A2.dll_2.potwheel();
           out_A3.dll_2.k_collision() ? out_A3.dll_2.potwheel();
           out_A4.dll_2.k_collision() ? out_A4.dll_2.potwheel();
           out_A1.dll_3.k_collision() ? out_A1.dll_3.potwheel();
           out_A2.dll_3.k_collision() ? out_A2.dll_3.potwheel();
           out_A3.dll_3.k_collision() ? out_A3.dll_3.potwheel();
           out_A4.dll_3.k_collision() ? out_A4.dll_3.potwheel();
           out_A1.dll_4.k_collision() ? out_A1.dll_4.potwheel();
           out_A2.dll_4.k_collision() ? out_A2.dll_4.potwheel();
           out_A3.dll_4.k_collision() ? out_A3.dll_4.potwheel();
           out_A4.dll_4.k_collision() ? out_A4.dll_4.potwheel();
           out_A1.dll_L.k_collision() ? out_A1.dll_L.potwheel();
           out_A2.dll_L.k_collision() ? out_A2.dll_L.potwheel();
           out_A3.dll_L.k_collision() ? out_A3.dll_L.potwheel();
           out_A4.dll_L.k_collision() ? out_A4.dll_L.potwheel();
           out_A1.dll_R.k_collision() ? out_A1.dll_R.potwheel();
           out_A2.dll_R.k_collision() ? out_A2.dll_R.potwheel();
           out_A3.dll_R.k_collision() ? out_A3.dll_R.potwheel();
           out_A4.dll_R.k_collision() ? out_A4.dll_R.potwheel();
           );
           
           caller = 1;
          );
          
          
      out.dll_1_Pan.dragging ? (out.dll_1_Pan.potdrag(); caller = 1;);
      out.dll_2_Pan.dragging ? (out.dll_2_Pan.potdrag(); caller = 1;);
      out.dll_3_Pan.dragging ? (out.dll_3_Pan.potdrag(); caller = 1;);
      out.dll_4_Pan.dragging ? (out.dll_4_Pan.potdrag(); caller = 1;);
      out.dll_L_Pan.dragging ? (out.dll_L_Pan.potdrag(); caller = 1;);
      out.dll_R_Pan.dragging ? (out.dll_R_Pan.potdrag(); caller = 1;);
           out.dll_1_VOL.dragging ? (out.dll_1_VOL.potdrag(); caller = 1;);
           out.dll_2_VOL.dragging ? (out.dll_2_VOL.potdrag(); caller = 1;);
           out.dll_3_VOL.dragging ? (out.dll_3_VOL.potdrag(); caller = 1;);
           out.dll_4_VOL.dragging ? (out.dll_4_VOL.potdrag(); caller = 1;);
           out.dll_L_VOL.dragging ? (out.dll_L_VOL.potdrag(); caller = 1;);
           out.dll_R_VOL.dragging ? (out.dll_R_VOL.potdrag(); caller = 1;);
           
           
           out_A1.dll_1.dragging ? (out_A1.dll_1.potdrag(); caller = 1;);
           out_A2.dll_1.dragging ? (out_A2.dll_1.potdrag(); caller = 1;);
           out_A3.dll_1.dragging ? (out_A3.dll_1.potdrag(); caller = 1;);
           out_A4.dll_1.dragging ? (out_A4.dll_1.potdrag(); caller = 1;);
           out_A1.dll_2.dragging ? (out_A1.dll_2.potdrag(); caller = 1;);
           out_A2.dll_2.dragging ? (out_A2.dll_2.potdrag(); caller = 1;);
           out_A3.dll_2.dragging ? (out_A3.dll_2.potdrag(); caller = 1;);
           out_A4.dll_2.dragging ? (out_A4.dll_2.potdrag(); caller = 1;);
           out_A1.dll_3.dragging ? (out_A1.dll_3.potdrag(); caller = 1;);
           out_A2.dll_3.dragging ? (out_A2.dll_3.potdrag(); caller = 1;);
           out_A3.dll_3.dragging ? (out_A3.dll_3.potdrag(); caller = 1;);
           out_A4.dll_3.dragging ? (out_A4.dll_3.potdrag(); caller = 1;);
           out_A1.dll_4.dragging ? (out_A1.dll_4.potdrag(); caller = 1;);
           out_A2.dll_4.dragging ? (out_A2.dll_4.potdrag(); caller = 1;);
           out_A3.dll_4.dragging ? (out_A3.dll_4.potdrag(); caller = 1;);
           out_A4.dll_4.dragging ? (out_A4.dll_4.potdrag(); caller = 1;);
           out_A1.dll_L.dragging ? (out_A1.dll_L.potdrag(); caller = 1;);
           out_A2.dll_L.dragging ? (out_A2.dll_L.potdrag(); caller = 1;);
           out_A3.dll_L.dragging ? (out_A3.dll_L.potdrag(); caller = 1;);
           out_A4.dll_L.dragging ? (out_A4.dll_L.potdrag(); caller = 1;);
           out_A1.dll_R.dragging ? (out_A1.dll_R.potdrag(); caller = 1;);
           out_A2.dll_R.dragging ? (out_A2.dll_R.potdrag(); caller = 1;);
           out_A3.dll_R.dragging ? (out_A3.dll_R.potdrag(); caller = 1;);
           out_A4.dll_R.dragging ? (out_A4.dll_R.potdrag(); caller = 1;);
          
           bpm_slider.dragging ? (shift = 1; bpm_slider.potdrag_integer(); caller = 1;);



       Link_Group == 0 ? (
       gmem[16*256 + 3] == 0 ? linkstart = 0;
       !mouse_cap ? (
       gmem[16*256 + 3] == 1 ? (linkstart == 0 ? link_old = slider(gmem[16*256 + 1]); linkstart = 1);
       gmem[16*256 + 3] == 1 ? (
            tmp_val = link_old +  gmem[16*256 + 2];
       slider(gmem[16*256 + 1]) = tmp_val;
       slider_automate(slider(gmem[16*256 + 1]));
       caller = 1;
       );
       gmem[16*256 + 3] == 2 ? (
       slider(gmem[16*256 + 1]) =  gmem[16*256 + 2];
       caller = 1;
       );
       );
       );
      
      
      
      ); // !number_input


     number_input ? number_input_show();
     number_input_invalid = max(0,number_input_invalid-1);
     number_input_invalid ? ( 
     gfx_r=gfx_g=gfx_b=0;
     gfx_rect(zoom*number_input_x,number_input_y*zoom, 200*zoom, gfx_texth+5);
     gfx_r=0;gfx_g=1;gfx_b=0;
     gfx_rect(zoom*number_input_x,zoom*number_input_y, gfx_texth+5, gfx_texth+5);
     red();
     gfx_rect(zoom*number_input_x + gfx_texth+5,zoom*number_input_y, 200*zoom - (gfx_texth+5), gfx_texth+5);
     gfx_r=gfx_g=gfx_b=0.7;
     gfx_roundrect(zoom*number_input_x,zoom*number_input_y, 200*zoom, gfx_texth+5,0);
     gfx_x = zoom*number_input_x + gfx_texth+7; gfx_y = zoom*number_input_y + 2;
     white();
     gfx_drawstr("NO VALID INPUT!");
     );
     
     
     
     
     
     
     
     
     
     
     
     
     
      ////////////////////////////////////////// MENU MENU MENU ////////////////////////////////////////////////
      last_clicked_item = -1;
      Helpshow ? mouse_cap ? (helpshow = 0;last_clicked_item = -1);
      menu_x = 5; menu_y =5;
     
     gfx_x = menu_x * zoom; gfx_y = menu * zoom; gfx_a=1;
     //gfx_blit(menu,zoom/2,0);
     lightgrey(); //red();
     gfx_roundrect(menu_x * zoom, (menu_y + 5) * zoom, 20*zoom, 20*zoom, 0, 1);
     gfx_line((menu_x+3)*zoom, (menu_y + 11)*zoom, (menu_x+17)*zoom, (menu_y + 11)*zoom);
     gfx_line((menu_x+3)*zoom, (menu_y + 15)*zoom, (menu_x+17)*zoom, (menu_y + 15)*zoom);
     gfx_line((menu_x+3)*zoom, (menu_y + 19)*zoom, (menu_x+17)*zoom, (menu_y + 19)*zoom);
     
     gfx_setfont(1,"Arial",12*zoom,'b');
     lightgrey(); gfx_x = menu_x * zoom + 30*zoom;gfx_y += 14*zoom;
     gfx_drawstr("TUKAN STUDIOS  -  MATRIX DELAY "); 
     gfx_setfont(1,"Arial",12*zoom,'i');
     lakeblue(); gfx_drawstr(" SERIES 2   ");
     gfx_setfont(1,"Arial",12*zoom,'b');
     
     
     
     link_group ? (
       rgb_palette(Link_group);// gfx_a = 0.7;
       gfx_drawstr("JOINS GROUP "); gfx_drawstr(sprintf(#,"%i", link_group));
     );
     gfx_a = 1;
     
     
      mouseClick ? (
       g_collision(menu_x*zoom, (menu_y+5) * zoom, 20*zoom, 20*zoom) ? (
        gfx_x = menu_x*zoom;
        gfx_y = (menu_y+20)*zoom;
         
          #item2 =">Processing|";#allitems = #item2;
         while_playing == 1 ? (#item2 = "!On Playback|"):(#item2 = "On Playback|");#allitems += #item2;
         while_recording == 1 ? (#item2 = "!On Recording|"):(#item2 = "On Recording|");#allitems += #item2;
         while_stopped == 1 ? (#item2 = "<!On Stop|>Groups|"):(#item2 = "<On Stop|>Groups|");#allitems += #item2;
     
         mnu_grp_loop = 1;
         loop(16,
     
           mnu_grp_loop == 16 ? #item2 += "<";
           gmem[16*64 + 10 + mnu_grp_loop] == 1 ? ( //Gruppe schon an ?
             mnu_grp_loop == Link_Group ? ( //ist selbst in der gruppe
                     #item2 = "!Joins Group ";
             ):(
                 #item2 = "Add to Group ";
             );
           ):(
             #item2 = "Start Group ";
           );
         mnu_grp_loop == 1 ? #item2 += "01";
         mnu_grp_loop == 2 ? #item2 += "02";
         mnu_grp_loop == 3 ? #item2 += "03";
         mnu_grp_loop == 4 ? #item2 += "04";
         mnu_grp_loop == 5 ? #item2 += "05";
         mnu_grp_loop == 6 ? #item2 += "06";
         mnu_grp_loop == 7 ? #item2 += "07";
         mnu_grp_loop == 8 ? #item2 += "08";
         mnu_grp_loop == 9 ? #item2 += "09";
         mnu_grp_loop == 10 ? #item2 += "10";
         mnu_grp_loop == 11 ? #item2 += "11";
         mnu_grp_loop == 12 ? #item2 += "12";
         mnu_grp_loop == 13 ? #item2 += "13";
         mnu_grp_loop == 14 ? #item2 += "14";
         mnu_grp_loop == 15 ? #item2 += "15";
         mnu_grp_loop == 16 ? #item2 += "16";
         
         #item2 += "|";
         #allitems += #item2; //sprintf(#temp, '%f',3); 
         mnu_grp_loop += 1;
         );
         
         link_group ? (#allitems += "|<Delete Group ";#allitems += sprintf(#, "%d", link_group);#allitems += "|"):#allitems += "|<#Delete Group|";
     
         //#allitems += "<#MENU|";
        #allitems += ">Scaling|";
        zoom_off == 0 ? (#item2 = "!Automatic Scaling|"):(#item2 = "Automatic scaling|");#allitems += #item2;
        zoom_off == 1 ? (#item2 = "<!No scaling|"):(#item2 = "<No scaling|");#allitems += #item2;
        #allitems += "|CLEAR ALL DLL BUFFERS||";
        #allitems += ">Visualisation|";
            #allitems += ">Measure|";
              gfx_delay_graph_measure == 0 ? #allitems += "!Seconds|" : #allitems += "Seconds|";
              gfx_delay_graph_measure == 1 ? #allitems += "<!Bars|":#allitems += "<Bars|";
            #allitems += ">Type|";
              gfx_delay_graph == 0 ? #allitems += "!ITG+Delay|":#allitems += "ITG+Delay|";
              gfx_delay_graph == 1 ? #allitems += "<!Result|":#allitems += "<Result|";
     
        
        #allitems += "<||<Show Info/Help|";
        last_clicked_item = gfx_showmenu(#allitems);
      );
      );
     
     
     
     
      
      last_clicked_item == 1 ? (while_playing == 0 ? (while_playing = 1):(while_playing = 0);caller=1;processing_update());
      last_clicked_item == 2 ? (while_recording == 0 ? (while_recording = 1):(while_recording = 0);caller=1;processing_update());
      last_clicked_item == 3 ? (while_stopped == 0 ? (while_stopped = 1):(while_stopped = 0);caller=1;processing_update());
     
       cgroup = last_clicked_item - 3;
      last_clicked_item > 3 && last_clicked_item < 20 ? (
         Link_Group != cgroup ? ( //eigene Linkgruppe NICHT angeklickt
             gmem[16*64 + 10 + cgroup] == 0 ? ( // Gruppe noch frei
                 //gmem[16*64 + 10 + cgroup] = 1; Link_Group = cgroup; gmem[16*64 +27 + cgruop] = 1; //Gruppe Starten!
                 gmem[16*64 + 10 + cgroup] = 1;Link_Group = cgroup;group_update();
             ):(
                 Link_Group = cgroup;// Gruppe teilnehmen
             );
         ):( //Eigene Gruppe angeklickt
               Link_Group = 0;
         );
      
      );
      
       cgroup = last_clicked_item - 3 - 16;
      last_clicked_item == 20 ? (
        gmem[16*64 + 10 + Link_Group] = 0;Link_Group = 0;
      );
      
      
      
      
      last_clicked_item == 21 ? zoom_off = 0;
      last_clicked_item == 22 ? zoom_off = 1;
     
     
      
      last_clicked_item == 23 ? (slider(b_clear_all.slider) = 1; slider_automate(slider(b_clear_all.slider));caller = 1;);
      
      last_clicked_item == 26 ? (slider(gfx_delay_graph.slider) = 0;caller = 1);
      last_clicked_item == 27 ? (slider(gfx_delay_graph.slider) = 1;caller = 1);
      last_clicked_item == 24 ? (slider(gfx_delay_measure.slider) = 0;caller = 1);
      last_clicked_item == 25 ? (slider(gfx_delay_measure.slider) = 1;caller = 1);
      
      last_clicked_item == 28 ? helpshow = 1;
      
      helpshow == 1 ? (
      gfx_r=0;gfx_g=0;gfx_b=0;gfx_a=0.7;
      gfx_rect(menu_x,menu_y+0,310*zoom,145*zoom);
      menu_x +=3;
      gfx_r=0.9;gfx_g=0.9;gfx_b=0.9;gfx_a=1;
      gfx_x = menu_x+3*zoom; gfx_y = menu_y+3*zoom;
      gfx_drawstr("TUKAN STUDIOS MATRIX DELAY (Series 2)");
      gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
      gfx_drawstr("Version: "); gfx_drawnumber(MATRIX_DELAY_VERSION,2);
      gfx_x = menu_x+3*zoom; gfx_y += 20*zoom;
      gfx_drawstr("Mouse modifier options:");
      gfx_x = menu_x+3*zoom; gfx_y += 15*zoom;
      gfx_drawstr("Fine tune knobs: [shift]");
      gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
      gfx_drawstr("Reset knobs: [ctrl] ([cmd] on mac)");
      gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
      gfx_drawstr("Link knobs on visible instances: [win] ([ctrl] on mac)");
      gfx_x = menu_x+3*zoom; gfx_y += 13*zoom;
      gfx_drawstr("Activate number typing: [alt]+[shift]");
      );
      
      
      ////////////////////////////////////////// ENDE MENU MENU MENU ////////////////////////////////////////////////
     
      
      
      
      gmem[16*256 + 10 + link_group] != 1 ? link_group = 0;
      group_check_gfx();
      caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
      );
      S2_sample_on = 0;
      
      
   
      
      ):( //gfx_ext_flags
      
      black(); gfx_a = 1;
      gfx_rect(0,0,gfx_w,gfx_h);
      zoom = min(gfx_w/4, gfx_h)/64;
      
      gfx_x = 0 - 64*zoom/2; gfx_y = 24*zoom;;
      dll_1.S2_meter_fallback = 60;
      dll_2.S2_meter_fallback = 60;
      dll_3.S2_meter_fallback = 60;
      dll_4.S2_meter_fallback = 60;
      dll_1.db_val > -40 ? led_on = 1 : led_on = 0; gfx_blit(22,zoom,0,0,led_on*128,128,128);
      gfx_x += 64*zoom;
      dll_2.db_val > -40 ? led_on = 1 : led_on = 0; gfx_blit(22,zoom,0,0,led_on*128,128,128);
      gfx_x += 64*zoom;
      dll_3.db_val > -40 ? led_on = 1 : led_on = 0; gfx_blit(22,zoom,0,0,led_on*128,128,128);
      gfx_x += 64*zoom;
      dll_4.db_val > -40 ? led_on = 1 : led_on = 0; gfx_blit(22,zoom,0,0,led_on*128,128,128);
      
      gfx_setfont(3,"Arial",40*zoom,'b');
      
      #mini_group = sprintf(#, "%i", Link_Group);
      gfx_measurestr(#mini_group, mini_w, mini_h);
      gfx_x = lscope_x + mini_w - 2*zoom; gfx_y = 2;
      Link_Group ? (
        rgb_palette(Link_group);
        gfx_drawstr(#mini_group);
      );
      
      
      bypass == 1 ? (
      black(); gfx_a=0.4; gfx_rect(0,0,gfx_w,gfx_h);
      lightgrey();
      gfx_x=40*zoom;gfx_y=gfx_h - mini_h - 2;gfx_a=1;
      gfx_drawstr("BYPASS");
      );
      
      mouseClick == 1 ? (
      shift ? (slider(B_Bypass.slider) == 0 ? slider(B_Bypass.slider) = 1: slider(B_Bypass.slider) = 0; caller = 1);
      );
      
      ); //gfx_ext_flags
      
      
     mouse_wheel=0;
